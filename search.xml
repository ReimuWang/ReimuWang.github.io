<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 工具-诊断工具Arthas</title>
    <url>/2019/11/23/Java%E5%B7%A5%E5%85%B7-%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/</url>
    <content><![CDATA[<ul>
<li><a href="https://alibaba.github.io/arthas/" target="_blank" rel="noopener">官方在线文档</a></li>
</ul>
<p>java自带的诊断工具可参见<a href="/2017/11/03/JVM-JDK自带JVM工具/">JVM-JDK自带JVM工具</a></p>
<p>注意：即便是同一个一级标题下，本文中的示例也不一定是来自于同一次运行，线程id及程序状态均可能会不同。请独立看待。</p>
<a id="more"></a>

<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><ul>
<li>tab键可进行指令自动补齐</li>
<li>grep可配合大部分命令使用</li>
</ul>
<p><strong>安装</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;alibaba.github.io&#x2F;arthas&#x2F;arthas-boot.jar</span></pre></td></tr></table></figure>

<p>实际就是把jar包下载下来。</p>
<p><strong>执行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar</span></pre></td></tr></table></figure>

<p><strong>日志位置</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd ~&#x2F;logs&#x2F;arthas</span></pre></td></tr></table></figure>

<p><strong>退出</strong></p>
<ul>
<li>quit / exit / control+c / q: 退出一条指令(例如dashboard)，或暂时退出arthas界面，但是连接仍保留，下次再启动arthas时会直接连到本次连接上。</li>
<li>stop / shutdown: 彻底退出本次arthas查询并结束对应进程。</li>
</ul>
<p><strong>卸载</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf ~&#x2F;.arthas&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">rm -rf ~&#x2F;logs&#x2F;arthas</span></pre></td></tr></table></figure>

<p><strong>关联java进程</strong></p>
<p>关联某java进程x后，x会在其日志中打印如下类似的日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sat Nov 30 16:11:22 CST 2019 com.taobao.arthas.agent.ArthasClassloader@53d56b1d JM.Log:INFO Log root path: &#x2F;Users&#x2F;reimuwang&#x2F;logs&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Sat Nov 30 16:11:22 CST 2019 com.taobao.arthas.agent.ArthasClassloader@53d56b1d JM.Log:INFO Set arthas log path: &#x2F;Users&#x2F;reimuwang&#x2F;logs&#x2F;arthas</span></pre></td></tr></table></figure>

<h1 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a>dashboard</h1><p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/0.jpg" alt="0.jpg"></p>
<p>实时数据面板，每隔5秒刷新一次，展示结果铺满整个屏幕。其中最上方的区域显示的是线程的信息，部分字段含义：</p>
<ul>
<li>CPU%: 线程消耗的cpu占比，采样间隔100ms，将所有线程在这100ms内的cpu使用量求和，再算出每个线程的cpu使用占比。</li>
<li>TIME: 线程运行总时间，数据格式为分：秒</li>
<li>INTERRUPTED: 线程当前的中断位状态</li>
</ul>
<h1 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h1><p><strong>基本用法</strong></p>
<p>首先是最简单的用法，只输入thread：</p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/1.jpg" alt="1.jpg"></p>
<p>如上图所示，该命令返回了该java进程当前所有的线程信息，基本结构和dashboard命令返回的线程信息差不多，只是稍稍详细了一些。</p>
<p><strong>降低统计对cpu的消耗</strong></p>
<p>如果我们足够细心，我们会发现一个问题，前文dashboard命令得到的占用cpu最多的线程名为Timer-for-arthas-dashboard-a6aecff6-bac7-4a，而上图中占用cpu最多的线程名为as-command-execute-daemon。很显然这些线程都与arthas有关。因为我的demo程序并没有执行什么操作，因此这个这个问题看起来会比较明显。之所以会这样，是因为统计cpu消耗时底层调用的是java.lang.management.ThreadMXBean#getThreadCpuTime这个接口，其本身就会产生一定的开销(JDK这个接口本身开销比较大)，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如5000毫秒。这里需要使用-i参数：</p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/2.jpg" alt="2.jpg"></p>
<p>本次统计一共用了5秒，同时as-command-execute-daemon对cpu的占用也大幅下降。</p>
<p><strong>查看当前最为繁忙的n个线程的堆栈</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@74666]$ thread -n 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;as-command-execute-daemon&quot; Id&#x3D;49 cpuUsage&#x3D;100% RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at sun.management.ThreadImpl.dumpThreads0(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:448)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.processTopBusyThreads(ThreadCommand.java:179)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at com.taobao.arthas.core.command.monitor200.ThreadCommand.process(ThreadCommand.java:100)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.process(AnnotatedCommandImpl.java:82)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl.access$100(AnnotatedCommandImpl.java:18)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:111)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at com.taobao.arthas.core.shell.command.impl.AnnotatedCommandImpl$ProcessHandler.handle(AnnotatedCommandImpl.java:108)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at com.taobao.arthas.core.shell.system.impl.ProcessImpl$CommandProcessTask.run(ProcessImpl.java:370)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.Thread.run(Thread.java:748)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Number of locked synchronizers &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - java.util.concurrent.ThreadPoolExecutor$Worker@25a0439</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Reference Handler&quot; Id&#x3D;2 cpuUsage&#x3D;0% WAITING on java.lang.ref.Reference$Lock@5349f16a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -  waiting on java.lang.ref.Reference$Lock@5349f16a</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.Object.wait(Object.java:502)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Finalizer&quot; Id&#x3D;3 cpuUsage&#x3D;0% WAITING on java.lang.ref.ReferenceQueue$Lock@6cedb7df</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -  waiting on java.lang.ref.ReferenceQueue$Lock@6cedb7df</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:144)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:165)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:216)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Affect(row-cnt:0) cost in 135 ms.</span></pre></td></tr></table></figure>

<p><strong>精确查看某个线程的堆栈</strong></p>
<p>如果我们已知线程id，还可以精确搜索某个线程的详细堆栈信息。例如处于RUNNABLE状态的线程107：</p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/3.jpg" alt="3.jpg"></p>
<p>再比如处于WAITING状态的线程76：</p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/4.jpg" alt="4.jpg"></p>
<p>以及处于TIMED_WAITING状态的线程68：</p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/5.jpg" alt="5.jpg"></p>
<p>关于线程状态的详细信息可参见<a href="/2017/07/12/Java并发-线程状态转换/">Java 并发-线程状态转换</a>。</p>
<p><strong>thread -b, 找出当前阻塞其他线程的线程</strong></p>
<p>有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了thread -b， 一键找出那个罪魁祸首:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@74666]$ thread -b</span></pre></td></tr><tr><td class="code"><pre><span class="line">No most blocking thread found!</span></pre></td></tr><tr><td class="code"><pre><span class="line">Affect(row-cnt:0) cost in 28 ms.</span></pre></td></tr></table></figure>

<p>由于我的demo程序中没有这个坏蛋线程，因此自然找不到咯。这里我们可以写一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestWait &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r1 &#x3D; () -&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (&quot;八云紫&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (&quot;八云蓝&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r2 &#x3D; () -&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (&quot;八云蓝&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (&quot;八云紫&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r1, &quot;r1&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r2, &quot;r2&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该程序的thead指令返回：</p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/6.jpg" alt="6.jpg"></p>
<p>果然，r1及r2都BLOCKED了。然后再看一下thread -b：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@74987]$ thread -b</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;r1&quot; Id&#x3D;11 BLOCKED on java.lang.String@61dac22c owned by &quot;r2&quot; Id&#x3D;12</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at org.reimuwang.testspringboot.test.TestWait.lambda$main$0(TestWait.java:14)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -  blocked on java.lang.String@61dac22c</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -  locked java.lang.String@37f2e232 &lt;---- but blocks 1 other threads!</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at org.reimuwang.testspringboot.test.TestWait$$Lambda$1&#x2F;94438417.run(Unknown Source)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.Thread.run(Thread.java:748)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Affect(row-cnt:0) cost in 15 ms.</span></pre></td></tr></table></figure>

<p>这样我们就能快速定位到这对死锁的兄弟啦。</p>
<p>需要注意的是， 官方文档中提到，目前只支持找出synchronized关键字阻塞住的线程，尚不支持java.util.concurrent.Lock。不过我实际试了下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class TestWait &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ReentrantLock lock1 &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ReentrantLock lock2 &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r1 &#x3D; () -&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock1.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock2.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock2.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock1.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r2 &#x3D; () -&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock2.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock1.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock1.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lock2.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r1, &quot;r1&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r2, &quot;r2&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该程序的thread输出：</p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/7.jpg" alt="7.jpg"></p>
<p>看起来r1和r2都是WAITING，没有被判定为BLOCKED，不过当我们执行thread -b时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@75117]$ thread -b</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;r1&quot; Id&#x3D;11 WAITING on java.util.concurrent.locks.ReentrantLock$NonfairSync@442fbfe0 owned by &quot;r2&quot; Id&#x3D;12</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at sun.misc.Unsafe.park(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    -  waiting on java.util.concurrent.locks.ReentrantLock$NonfairSync@442fbfe0</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:870)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1199)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:209)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:285)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at org.reimuwang.testspringboot.test.TestWait.lambda$main$0(TestWait.java:17)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at org.reimuwang.testspringboot.test.TestWait$$Lambda$1&#x2F;812265671.run(Unknown Source)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    at java.lang.Thread.run(Thread.java:748)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Number of locked synchronizers &#x3D; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    - java.util.concurrent.locks.ReentrantLock$NonfairSync@77d0d027 &lt;---- but blocks 1 other threads!</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Affect(row-cnt:0) cost in 13 ms.</span></pre></td></tr></table></figure>

<p>还是能够定位到的。</p>
<h1 id="jad"><a href="#jad" class="headerlink" title="jad"></a>jad</h1><p>jad可以反编译class文件，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@73663]$ jad org.reimuwang.filemanagement.FileManagementApplication</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ClassLoader:</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-sun.misc.Launcher$AppClassLoader@18b4aac2</span></pre></td></tr><tr><td class="code"><pre><span class="line">  +-sun.misc.Launcher$ExtClassLoader@73a28541</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Location:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;Users&#x2F;reimuwang&#x2F;IdeaProjects&#x2F;my-github-java-repository&#x2F;projects-parent&#x2F;file-management&#x2F;target&#x2F;classes&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;*</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * Decompiled with CFR.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">package org.reimuwang.filemanagement;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.springframework.scheduling.annotation.EnableScheduling;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@SpringBootApplication</span></pre></td></tr><tr><td class="code"><pre><span class="line">@EnableScheduling</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class FileManagementApplication &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SpringApplication.run(FileManagementApplication.class, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Affect(row-cnt:2) cost in 466 ms.</span></pre></td></tr></table></figure>

<p>注意，jad只能反编译当前java进程本身的class文件，被作为lib库关联到进程中的class文件是找不到的。</p>
]]></content>
      <categories>
        <category>Java 工具</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>工具</tag>
        <tag>诊断</tag>
        <tag>Arthas</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-resultMap</title>
    <url>/2018/12/07/Mybatis-resultMap/</url>
    <content><![CDATA[<p>我们可以这样来写一个select statement：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;com.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  select id,name,create_time from user where id&#x3D; #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;select&gt;</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>用于接收查询结果的resultType为UserPojo，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.user.pojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class UserPojo &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Date create_time;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getId() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setId(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setName(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Date getCreate_time() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return create_time;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setCreate_time(Date create_time) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.create_time &#x3D; create_time;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>即要求UserPojo中必须有同名的id,name,create_time(类型自然也要能匹配，getter及setter方法倒不要求)，否则，例如我们将UserPojo中的create_time改名为createTime，此时就无法填入该值。</p>
<p>但是，这委实又是一个常见的需求：Mysql中的字段名通常使用下划线，而Java的字段名则更倾向于使用驼峰式。因为这种命名规范上的不一致而改变一方(正如上文中Java代码中的create_time字段)显然是很奇怪的。</p>
<p>解决方式之一是在sql中下功夫：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT id,name,create_time AS createTime FROM user WHERE id&#x3D; #&#123;id&#125;</span></pre></td></tr></table></figure>

<p>而在不方便修改如此sql的场合，则可以使用resultMap，它的作用是完成sql查询出的列名与pojo中字段名的映射。</p>
<p>例如，我们可以这样来写mapper配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;com.user.mapper.UserMapper&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;!-- id:唯一标识一个resultMap --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;!-- type:最终要映射到的pojo的类型 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;resultMap id&#x3D;&quot;userMap&quot; type&#x3D;&quot;UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- id是主键列(本例其实是不需要映射的，仍然写出id标签只是为了举例说明)，result是非主键列 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- column:sql语句查询出的列名 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;!-- type:pojo类型中的字段名 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;id column&#x3D;&quot;id&quot; property&#x3D;&quot;id&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;result column&#x3D;&quot;create_time&quot; property&#x3D;&quot;createTime&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;resultMap&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;int&quot; resultMap&#x3D;&quot;userMap&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SELECT id,name,create_time AS createTime FROM user WHERE id&#x3D; #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;select id&#x3D;&quot;selectByName&quot; parameterType&#x3D;&quot;String&quot; resultMap&#x3D;&quot;userMap&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    select id,name,create_time AS createTime from user where name like &#39;$&#123;value&#125;%&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;insert id&#x3D;&quot;insert&quot; parameterType&#x3D;&quot;UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;selectKey keyProperty&#x3D;&quot;id&quot; order&#x3D;&quot;AFTER&quot; resultType&#x3D;&quot;int&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      select last_insert_id()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;selectKey&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    insert into user(name,create_time) values(#&#123;name&#125;,#&#123;createTime&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;insert&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;delete id&#x3D;&quot;delete&quot; parameterType&#x3D;&quot;int&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    delete from user where id&#x3D;#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;delete&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    update user set name&#x3D;#&#123;name&#125;,create_time&#x3D;#&#123;createTime&#125; where id&#x3D;#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;update&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;mapper&gt;</span></pre></td></tr></table></figure>

<p>mapper标签下新增resultMap标签。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.HashMap&amp;lt;K,V&amp;gt;</title>
    <url>/2018/11/09/JavaJDK7%E6%BA%90%E7%A0%81-javautilHashMapKV/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.*;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    extends AbstractMap&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 默认的初始容量 - 必须是2的幂次方</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static final int DEFAULT_INITIAL_CAPACITY &#x3D; 1 &lt;&lt; 4; &#x2F;&#x2F; 16</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 最大容量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当任意构造函数中指定的容量大于该值时，都将被减少为该值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 换句话说，容量需要是2的幂次方，且&lt;&#x3D; 2^30</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static final int MAXIMUM_CAPACITY &#x3D; 1 &lt;&lt; 30;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 默认的加载因子值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static final float DEFAULT_LOAD_FACTOR &#x3D; 0.75f;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当hashMap没有存入键值对时，所使用的默认的空表</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static final Entry&lt;?,?&gt;[] EMPTY_TABLE &#x3D; &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实际使用的，可依需求调整大小的存储桶的表</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该表的长度必须为2的幂次方</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    transient Entry&lt;K,V&gt;[] table &#x3D; (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * map中存储的键值对个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    transient int size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 下一次扩展时需扩展到的容量大小</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即：capacity * load factor</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若当前存储桶的数组为EMPTY_TABLE，即尚未存入键值对</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 那么threshold等于预设的初始容量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @serial</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int threshold;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 哈希表的加载因子</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @serial</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final float loadFactor;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * hashMap发生结构性变化的次数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 所谓结构性变化，指得是改变键值对数目的变化，或是其他修改hashMap内部结构的变化(例如，rehash)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本字段被hashMap的集合视图的iterator用于判断是否需要fail-fast(抛出ConcurrentModificationException)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    transient int modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当针对</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * The default threshold of map capacity above which alternative hashing is</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * used for String keys. Alternative hashing reduces the incidence of</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * collisions due to weak hash code calculation for String keys.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;p&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * This value may be overridden by defining the system property</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &#123;@code jdk.map.althashing.threshold&#125;. A property value of &#123;@code 1&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * forces alternative hashing to be used at all times whereas</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &#123;@code -1&#125; value ensures that alternative hashing is never used.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static final int ALTERNATIVE_HASHING_THRESHOLD_DEFAULT &#x3D; Integer.MAX_VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * holds values which can&#39;t be initialized until after VM is booted.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class Holder &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * Table capacity above which to switch to use alternative hashing.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        static final int ALTERNATIVE_HASHING_THRESHOLD;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String altThreshold &#x3D; java.security.AccessController.doPrivileged(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                new sun.security.action.GetPropertyAction(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &quot;jdk.map.althashing.threshold&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            int threshold;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                threshold &#x3D; (null !&#x3D; altThreshold)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ? Integer.parseInt(altThreshold)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; disable alternative hashing if -1</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (threshold &#x3D;&#x3D; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    threshold &#x3D; Integer.MAX_VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (threshold &lt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new IllegalArgumentException(&quot;value must be positive integer.&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch(IllegalArgumentException failed) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new Error(&quot;Illegal value for &#39;jdk.map.althashing.threshold&#39;&quot;, failed);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            ALTERNATIVE_HASHING_THRESHOLD &#x3D; threshold;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * A randomizing value associated with this instance that is applied to</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * hash code of keys to make hash collisions harder to find. If 0 then</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * alternative hashing is disabled.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    transient int hashSeed &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Constructs an empty &lt;tt&gt;HashMap&lt;&#x2F;tt&gt; with the specified initial</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * capacity and load factor.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param  initialCapacity the initial capacity</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param  loadFactor      the load factor</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException if the initial capacity is negative</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         or the load factor is nonpositive</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public HashMap(int initialCapacity, float loadFactor) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (initialCapacity &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               initialCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (initialCapacity &gt; MAXIMUM_CAPACITY)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            initialCapacity &#x3D; MAXIMUM_CAPACITY;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;Illegal load factor: &quot; +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               loadFactor);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.loadFactor &#x3D; loadFactor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threshold &#x3D; initialCapacity;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        init();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Constructs an empty &lt;tt&gt;HashMap&lt;&#x2F;tt&gt; with the specified initial</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * capacity and the default load factor (0.75).</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param  initialCapacity the initial capacity.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException if the initial capacity is negative.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public HashMap(int initialCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this(initialCapacity, DEFAULT_LOAD_FACTOR);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Constructs an empty &lt;tt&gt;HashMap&lt;&#x2F;tt&gt; with the default initial capacity</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (16) and the default load factor (0.75).</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public HashMap() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Constructs a new &lt;tt&gt;HashMap&lt;&#x2F;tt&gt; with the same mappings as the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * specified &lt;tt&gt;Map&lt;&#x2F;tt&gt;.  The &lt;tt&gt;HashMap&lt;&#x2F;tt&gt; is created with</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * default load factor (0.75) and an initial capacity sufficient to</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * hold the mappings in the specified &lt;tt&gt;Map&lt;&#x2F;tt&gt;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param   m the map whose mappings are to be placed in this map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws  NullPointerException if the specified map is null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public HashMap(Map&lt;? extends K, ? extends V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this(Math.max((int) (m.size() &#x2F; DEFAULT_LOAD_FACTOR) + 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        inflateTable(threshold);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        putAllForCreate(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int roundUpToPowerOf2(int number) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; assert number &gt;&#x3D; 0 : &quot;number must be non-negative&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return number &gt;&#x3D; MAXIMUM_CAPACITY</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ? MAXIMUM_CAPACITY</span></pre></td></tr><tr><td class="code"><pre><span class="line">                : (number &gt; 1) ? Integer.highestOneBit((number - 1) &lt;&lt; 1) : 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Inflates the table.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void inflateTable(int toSize) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Find a power of 2 &gt;&#x3D; toSize</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int capacity &#x3D; roundUpToPowerOf2(toSize);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        threshold &#x3D; (int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table &#x3D; new Entry[capacity];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        initHashSeedAsNeeded(capacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; internal utilities</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Initialization hook for subclasses. This method is called</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * in all constructors and pseudo-constructors (clone, readObject)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * after HashMap has been initialized but before any entries have</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * been inserted.  (In the absence of this method, readObject would</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * require explicit knowledge of subclasses.)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void init() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Initialize the hashing mask value. We defer initialization until we</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * really need it.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final boolean initHashSeedAsNeeded(int capacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean currentAltHashing &#x3D; hashSeed !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean useAltHashing &#x3D; sun.misc.VM.isBooted() &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (capacity &gt;&#x3D; Holder.ALTERNATIVE_HASHING_THRESHOLD);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean switching &#x3D; currentAltHashing ^ useAltHashing;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (switching) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hashSeed &#x3D; useAltHashing</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ? sun.misc.Hashing.randomHashSeed(this)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                : 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return switching;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Retrieve object hash code and applies a supplemental hash function to the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * result hash, which defends against poor quality hash functions.  This is</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * critical because HashMap uses power-of-two length hash tables, that</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * otherwise encounter collisions for hashCodes that do not differ</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * in lower bits. Note: Null keys always map to hash 0, thus index 0.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final int hash(Object k) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int h &#x3D; hashSeed;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (0 !&#x3D; h &amp;&amp; k instanceof String) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return sun.misc.Hashing.stringHash32((String) k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        h ^&#x3D; k.hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; This function ensures that hashCodes that differ only by</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; constant multiples at each bit position have a bounded</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; number of collisions (approximately 8 at default load factor).</span></pre></td></tr><tr><td class="code"><pre><span class="line">        h ^&#x3D; (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns index for hash code h.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static int indexFor(int h, int length) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; assert Integer.bitCount(length) &#x3D;&#x3D; 1 : &quot;length must be a non-zero power of 2&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return h &amp; (length-1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns the number of key-value mappings in this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return the number of key-value mappings in this map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns &lt;tt&gt;true&lt;&#x2F;tt&gt; if this map contains no key-value mappings.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return &lt;tt&gt;true&lt;&#x2F;tt&gt; if this map contains no key-value mappings</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return size &#x3D;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns the value to which the specified key is mapped,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * or &#123;@code null&#125; if this map contains no mapping for the key.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;p&gt;More formally, if this map contains a mapping from a key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &#123;@code k&#125; to a value &#123;@code v&#125; such that &#123;@code (key&#x3D;&#x3D;null ? k&#x3D;&#x3D;null :</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * key.equals(k))&#125;, then this method returns &#123;@code v&#125;; otherwise</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * it returns &#123;@code null&#125;.  (There can be at most one such mapping.)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;p&gt;A return value of &#123;@code null&#125; does not &lt;i&gt;necessarily&lt;&#x2F;i&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * indicate that the map contains no mapping for the key; it&#39;s also</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * possible that the map explicitly maps the key to &#123;@code null&#125;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * The &#123;@link #containsKey containsKey&#125; operation may be used to</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * distinguish these two cases.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @see #put(Object, Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V get(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return getForNullKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; entry &#x3D; getEntry(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null &#x3D;&#x3D; entry ? null : entry.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Offloaded version of get() to look up null keys.  Null keys map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * to index 0.  This null case is split out into separate methods</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * for the sake of performance in the two most commonly used</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * operations (get and put), but incorporated with conditionals in</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * others.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private V getForNullKey() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Entry&lt;K,V&gt; e &#x3D; table[0]; e !&#x3D; null; e &#x3D; e.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.key &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return e.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns &lt;tt&gt;true&lt;&#x2F;tt&gt; if this map contains a mapping for the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * specified key.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param   key   The key whose presence in this map is to be tested</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return &lt;tt&gt;true&lt;&#x2F;tt&gt; if this map contains a mapping for the specified</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * key.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsKey(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return getEntry(key) !&#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns the entry associated with the specified key in the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * HashMap.  Returns null if the HashMap contains no mapping</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * for the key.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Entry&lt;K,V&gt; getEntry(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hash &#x3D; (key &#x3D;&#x3D; null) ? 0 : hash(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Entry&lt;K,V&gt; e &#x3D; table[indexFor(hash, table.length)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">             e !&#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">             e &#x3D; e.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.hash &#x3D;&#x3D; hash &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Associates the specified value with the specified key in this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * If the map previously contained a mapping for the key, the old</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * value is replaced.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param key key with which the specified value is to be associated</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param value value to be associated with the specified key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return the previous value associated with &lt;tt&gt;key&lt;&#x2F;tt&gt;, or</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         &lt;tt&gt;null&lt;&#x2F;tt&gt; if there was no mapping for &lt;tt&gt;key&lt;&#x2F;tt&gt;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         (A &lt;tt&gt;null&lt;&#x2F;tt&gt; return can also indicate that the map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         previously associated &lt;tt&gt;null&lt;&#x2F;tt&gt; with &lt;tt&gt;key&lt;&#x2F;tt&gt;.)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V put(K key, V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (table &#x3D;&#x3D; EMPTY_TABLE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            inflateTable(threshold);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return putForNullKey(value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hash &#x3D; hash(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; indexFor(hash, table.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.hash &#x3D;&#x3D; hash &amp;&amp; ((k &#x3D; e.key) &#x3D;&#x3D; key || key.equals(k))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                V oldValue &#x3D; e.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.recordAccess(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        addEntry(hash, key, value, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Offloaded version of put for null keys</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private V putForNullKey(V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Entry&lt;K,V&gt; e &#x3D; table[0]; e !&#x3D; null; e &#x3D; e.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.key &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                V oldValue &#x3D; e.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.recordAccess(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        addEntry(0, null, value, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * This method is used instead of put by constructors and</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * pseudoconstructors (clone, readObject).  It does not resize the table,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * check for comodification, etc.  It calls createEntry rather than</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * addEntry.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void putForCreate(K key, V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hash &#x3D; null &#x3D;&#x3D; key ? 0 : hash(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; indexFor(hash, table.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * Look for preexisting entry for key.  This will never happen for</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * clone or deserialize.  It will only happen for construction if the</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * input Map is a sorted map whose ordering is inconsistent w&#x2F; equals.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Entry&lt;K,V&gt; e &#x3D; table[i]; e !&#x3D; null; e &#x3D; e.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.hash &#x3D;&#x3D; hash &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k)))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        createEntry(hash, key, value, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void putAllForCreate(Map&lt;? extends K, ? extends V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            putForCreate(e.getKey(), e.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Rehashes the contents of this map into a new array with a</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * larger capacity.  This method is called automatically when the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * number of keys in this map reaches its threshold.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * If current capacity is MAXIMUM_CAPACITY, this method does not</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * resize the map, but sets threshold to Integer.MAX_VALUE.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * This has the effect of preventing future calls.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param newCapacity the new capacity, MUST be a power of two;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *        must be greater than current capacity unless current</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *        capacity is MAXIMUM_CAPACITY (in which case value</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *        is irrelevant).</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void resize(int newCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry[] oldTable &#x3D; table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int oldCapacity &#x3D; oldTable.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (oldCapacity &#x3D;&#x3D; MAXIMUM_CAPACITY) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threshold &#x3D; Integer.MAX_VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry[] newTable &#x3D; new Entry[newCapacity];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        transfer(newTable, initHashSeedAsNeeded(newCapacity));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table &#x3D; newTable;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threshold &#x3D; (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Transfers all entries from current table to newTable.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void transfer(Entry[] newTable, boolean rehash) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int newCapacity &#x3D; newTable.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Entry&lt;K,V&gt; e : table) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while(null !&#x3D; e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; next &#x3D; e.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (rehash) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.hash &#x3D; null &#x3D;&#x3D; e.key ? 0 : hash(e.key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int i &#x3D; indexFor(e.hash, newCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.next &#x3D; newTable[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newTable[i] &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Copies all of the mappings from the specified map to this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * These mappings will replace any mappings that this map had for</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * any of the keys currently in the specified map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param m mappings to be stored in this map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException if the specified map is null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void putAll(Map&lt;? extends K, ? extends V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numKeysToBeAdded &#x3D; m.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (numKeysToBeAdded &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (table &#x3D;&#x3D; EMPTY_TABLE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            inflateTable((int) Math.max(numKeysToBeAdded * loadFactor, threshold));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;*</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * Expand the map if the map if the number of mappings to be added</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * is greater than or equal to threshold.  This is conservative; the</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * obvious condition is (m.size() + size) &gt;&#x3D; threshold, but this</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * condition could result in a map with twice the appropriate capacity,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * if the keys to be added overlap with the keys already in this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * By using the conservative calculation, we subject ourself</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * to at most one extra resize.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (numKeysToBeAdded &gt; threshold) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int targetCapacity &#x3D; (int)(numKeysToBeAdded &#x2F; loadFactor + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (targetCapacity &gt; MAXIMUM_CAPACITY)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                targetCapacity &#x3D; MAXIMUM_CAPACITY;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int newCapacity &#x3D; table.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (newCapacity &lt; targetCapacity)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newCapacity &lt;&lt;&#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (newCapacity &gt; table.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                resize(newCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            put(e.getKey(), e.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Removes the mapping for the specified key from this map if present.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param  key key whose mapping is to be removed from the map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return the previous value associated with &lt;tt&gt;key&lt;&#x2F;tt&gt;, or</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         &lt;tt&gt;null&lt;&#x2F;tt&gt; if there was no mapping for &lt;tt&gt;key&lt;&#x2F;tt&gt;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         (A &lt;tt&gt;null&lt;&#x2F;tt&gt; return can also indicate that the map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         previously associated &lt;tt&gt;null&lt;&#x2F;tt&gt; with &lt;tt&gt;key&lt;&#x2F;tt&gt;.)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V remove(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; e &#x3D; removeEntryForKey(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (e &#x3D;&#x3D; null ? null : e.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Removes and returns the entry associated with the specified key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * in the HashMap.  Returns null if the HashMap contains no mapping</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * for this key.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Entry&lt;K,V&gt; removeEntryForKey(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hash &#x3D; (key &#x3D;&#x3D; null) ? 0 : hash(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; indexFor(hash, table.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; prev &#x3D; table[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; e &#x3D; prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (e !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Entry&lt;K,V&gt; next &#x3D; e.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.hash &#x3D;&#x3D; hash &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k)))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (prev &#x3D;&#x3D; e)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    table[i] &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    prev.next &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.recordRemoval(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            prev &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Special version of remove for EntrySet using &#123;@code Map.Entry.equals()&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * for matching.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Entry&lt;K,V&gt; removeMapping(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size &#x3D;&#x3D; 0 || !(o instanceof Map.Entry))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map.Entry&lt;K,V&gt; entry &#x3D; (Map.Entry&lt;K,V&gt;) o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object key &#x3D; entry.getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hash &#x3D; (key &#x3D;&#x3D; null) ? 0 : hash(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; indexFor(hash, table.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; prev &#x3D; table[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; e &#x3D; prev;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (e !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Entry&lt;K,V&gt; next &#x3D; e.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.hash &#x3D;&#x3D; hash &amp;&amp; e.equals(entry)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (prev &#x3D;&#x3D; e)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    table[i] &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    prev.next &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.recordRemoval(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            prev &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Removes all of the mappings from this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * The map will be empty after this call returns.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Arrays.fill(table, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns &lt;tt&gt;true&lt;&#x2F;tt&gt; if this map maps one or more keys to the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * specified value.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param value value whose presence in this map is to be tested</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return &lt;tt&gt;true&lt;&#x2F;tt&gt; if this map maps one or more keys to the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         specified value</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsValue(Object value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (value &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return containsNullValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry[] tab &#x3D; table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; tab.length ; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (Entry e &#x3D; tab[i] ; e !&#x3D; null ; e &#x3D; e.next)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (value.equals(e.value))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Special-case code for containsValue with null argument</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean containsNullValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry[] tab &#x3D; table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; tab.length ; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (Entry e &#x3D; tab[i] ; e !&#x3D; null ; e &#x3D; e.next)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (e.value &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns a shallow copy of this &lt;tt&gt;HashMap&lt;&#x2F;tt&gt; instance: the keys and</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * values themselves are not cloned.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return a shallow copy of this map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object clone() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        HashMap&lt;K,V&gt; result &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; (HashMap&lt;K,V&gt;)super.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (CloneNotSupportedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; assert false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (result.table !&#x3D; EMPTY_TABLE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result.inflateTable(Math.min(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (int) Math.min(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    size * Math.min(1 &#x2F; loadFactor, 4.0f),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; we have limits...</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    HashMap.MAXIMUM_CAPACITY),</span></pre></td></tr><tr><td class="code"><pre><span class="line">               table.length));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.entrySet &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.modCount &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.size &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.init();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.putAllForCreate(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final K key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        V value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hash;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * Creates new entry.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry(int h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            value &#x3D; v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            next &#x3D; n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            key &#x3D; k;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hash &#x3D; h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public final K getKey() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public final V getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public final V setValue(V newValue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            V oldValue &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            value &#x3D; newValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public final boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!(o instanceof Map.Entry))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Map.Entry e &#x3D; (Map.Entry)o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object k1 &#x3D; getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object k2 &#x3D; e.getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (k1 &#x3D;&#x3D; k2 || (k1 !&#x3D; null &amp;&amp; k1.equals(k2))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object v1 &#x3D; getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object v2 &#x3D; e.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (v1 &#x3D;&#x3D; v2 || (v1 !&#x3D; null &amp;&amp; v1.equals(v2)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public final int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public final String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return getKey() + &quot;&#x3D;&quot; + getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * This method is invoked whenever the value in an entry is</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * overwritten by an invocation of put(k,v) for a key k that&#39;s already</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * in the HashMap.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        void recordAccess(HashMap&lt;K,V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * This method is invoked whenever the entry is</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * removed from the table.</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        void recordRemoval(HashMap&lt;K,V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Adds a new entry with the specified key, value and hash code to</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * the specified bucket.  It is the responsibility of this</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * method to resize the table if appropriate.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Subclass overrides this to alter the behavior of put method.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void addEntry(int hash, K key, V value, int bucketIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if ((size &gt;&#x3D; threshold) &amp;&amp; (null !&#x3D; table[bucketIndex])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            resize(2 * table.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hash &#x3D; (null !&#x3D; key) ? hash(key) : 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bucketIndex &#x3D; indexFor(hash, table.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        createEntry(hash, key, value, bucketIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Like addEntry except that this version is used when creating entries</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * as part of Map construction or &quot;pseudo-construction&quot; (cloning,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * deserialization).  This version needn&#39;t worry about resizing the table.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Subclass overrides this to alter the behavior of HashMap(Map),</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * clone, and readObject.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void createEntry(int hash, K key, V value, int bucketIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; e &#x3D; table[bucketIndex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table[bucketIndex] &#x3D; new Entry&lt;&gt;(hash, key, value, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private abstract class HashIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; next;        &#x2F;&#x2F; next entry to return</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int expectedModCount;   &#x2F;&#x2F; For fast-fail</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int index;              &#x2F;&#x2F; current slot</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; current;     &#x2F;&#x2F; current entry</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        HashIterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (size &gt; 0) &#123; &#x2F;&#x2F; advance to first entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry[] t &#x3D; table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while (index &lt; t.length &amp;&amp; (next &#x3D; t[index++]) &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public final boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return next !&#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        final Entry&lt;K,V&gt; nextEntry() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (modCount !&#x3D; expectedModCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Entry&lt;K,V&gt; e &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            if ((next &#x3D; e.next) &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry[] t &#x3D; table;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while (index &lt; t.length &amp;&amp; (next &#x3D; t[index++]) &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            current &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (current &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (modCount !&#x3D; expectedModCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object k &#x3D; current.key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            current &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            HashMap.this.removeEntryForKey(k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final class ValueIterator extends HashIterator&lt;V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public V next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return nextEntry().value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final class KeyIterator extends HashIterator&lt;K&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public K next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return nextEntry().getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final class EntryIterator extends HashIterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public Map.Entry&lt;K,V&gt; next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return nextEntry();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; Subclass overrides these to alter behavior of views&#39; iterator() method</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;K&gt; newKeyIterator()   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new KeyIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;V&gt; newValueIterator()   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ValueIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new EntryIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; Views</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns a &#123;@link Set&#125; view of the keys contained in this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * The set is backed by the map, so changes to the map are</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * reflected in the set, and vice-versa.  If the map is modified</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * while an iteration over the set is in progress (except through</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * the iterator&#39;s own &lt;tt&gt;remove&lt;&#x2F;tt&gt; operation), the results of</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * the iteration are undefined.  The set supports element removal,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * which removes the corresponding mapping from the map, via the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;Iterator.remove&lt;&#x2F;tt&gt;, &lt;tt&gt;Set.remove&lt;&#x2F;tt&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;removeAll&lt;&#x2F;tt&gt;, &lt;tt&gt;retainAll&lt;&#x2F;tt&gt;, and &lt;tt&gt;clear&lt;&#x2F;tt&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * operations.  It does not support the &lt;tt&gt;add&lt;&#x2F;tt&gt; or &lt;tt&gt;addAll&lt;&#x2F;tt&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * operations.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Set&lt;K&gt; keySet() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;K&gt; ks &#x3D; keySet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (ks !&#x3D; null ? ks : (keySet &#x3D; new KeySet()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final class KeySet extends AbstractSet&lt;K&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public Iterator&lt;K&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return newKeyIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean contains(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return containsKey(o);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean remove(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return HashMap.this.removeEntryForKey(o) !&#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            HashMap.this.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns a &#123;@link Collection&#125; view of the values contained in this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * The collection is backed by the map, so changes to the map are</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * reflected in the collection, and vice-versa.  If the map is</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * modified while an iteration over the collection is in progress</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (except through the iterator&#39;s own &lt;tt&gt;remove&lt;&#x2F;tt&gt; operation),</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * the results of the iteration are undefined.  The collection</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * supports element removal, which removes the corresponding</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;&#x2F;tt&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;Collection.remove&lt;&#x2F;tt&gt;, &lt;tt&gt;removeAll&lt;&#x2F;tt&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;retainAll&lt;&#x2F;tt&gt; and &lt;tt&gt;clear&lt;&#x2F;tt&gt; operations.  It does not</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * support the &lt;tt&gt;add&lt;&#x2F;tt&gt; or &lt;tt&gt;addAll&lt;&#x2F;tt&gt; operations.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Collection&lt;V&gt; values() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;V&gt; vs &#x3D; values;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (vs !&#x3D; null ? vs : (values &#x3D; new Values()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final class Values extends AbstractCollection&lt;V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public Iterator&lt;V&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return newValueIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean contains(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return containsValue(o);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            HashMap.this.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Returns a &#123;@link Set&#125; view of the mappings contained in this map.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * The set is backed by the map, so changes to the map are</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * reflected in the set, and vice-versa.  If the map is modified</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * while an iteration over the set is in progress (except through</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * the iterator&#39;s own &lt;tt&gt;remove&lt;&#x2F;tt&gt; operation, or through the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;setValue&lt;&#x2F;tt&gt; operation on a map entry returned by the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * iterator) the results of the iteration are undefined.  The set</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * supports element removal, which removes the corresponding</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;&#x2F;tt&gt;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;Set.remove&lt;&#x2F;tt&gt;, &lt;tt&gt;removeAll&lt;&#x2F;tt&gt;, &lt;tt&gt;retainAll&lt;&#x2F;tt&gt; and</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;clear&lt;&#x2F;tt&gt; operations.  It does not support the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &lt;tt&gt;add&lt;&#x2F;tt&gt; or &lt;tt&gt;addAll&lt;&#x2F;tt&gt; operations.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return a set view of the mappings contained in this map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return entrySet0();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es &#x3D; entrySet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return es !&#x3D; null ? es : (entrySet &#x3D; new EntrySet());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return newEntryIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean contains(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!(o instanceof Map.Entry))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Map.Entry&lt;K,V&gt; e &#x3D; (Map.Entry&lt;K,V&gt;) o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Entry&lt;K,V&gt; candidate &#x3D; getEntry(e.getKey());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return candidate !&#x3D; null &amp;&amp; candidate.equals(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean remove(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return removeMapping(o) !&#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            HashMap.this.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Save the state of the &lt;tt&gt;HashMap&lt;&#x2F;tt&gt; instance to a stream (i.e.,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * serialize it).</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @serialData The &lt;i&gt;capacity&lt;&#x2F;i&gt; of the HashMap (the length of the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *             bucket array) is emitted (int), followed by the</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *             &lt;i&gt;size&lt;&#x2F;i&gt; (an int, the number of key-value</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *             mappings), followed by the key (Object) and value (Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *             for each key-value mapping.  The key-value mappings are</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *             emitted in no particular order.</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void writeObject(java.io.ObjectOutputStream s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws IOException</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Write out the threshold, loadfactor, and any hidden stuff</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.defaultWriteObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Write out number of buckets</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (table&#x3D;&#x3D;EMPTY_TABLE) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            s.writeInt(roundUpToPowerOf2(threshold));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           s.writeInt(table.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Write out size (number of Mappings)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.writeInt(size);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Write out keys and values (alternating)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for(Map.Entry&lt;K,V&gt; e : entrySet0()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                s.writeObject(e.getKey());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                s.writeObject(e.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 362498820763181265L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Reconstitute the &#123;@code HashMap&#125; instance from a stream (i.e.,</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * deserialize it).</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void readObject(java.io.ObjectInputStream s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         throws IOException, ClassNotFoundException</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Read in the threshold (ignored), loadfactor, and any hidden stuff</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.defaultReadObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (loadFactor &lt;&#x3D; 0 || Float.isNaN(loadFactor)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new InvalidObjectException(&quot;Illegal load factor: &quot; +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               loadFactor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; set other fields that need values</span></pre></td></tr><tr><td class="code"><pre><span class="line">        table &#x3D; (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Read in number of buckets</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.readInt(); &#x2F;&#x2F; ignored.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Read number of mappings</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int mappings &#x3D; s.readInt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (mappings &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new InvalidObjectException(&quot;Illegal mappings count: &quot; +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               mappings);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; capacity chosen by number of mappings and desired load (if &gt;&#x3D; 0.25)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int capacity &#x3D; (int) Math.min(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    mappings * Math.min(1 &#x2F; loadFactor, 4.0f),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; we have limits...</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    HashMap.MAXIMUM_CAPACITY);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; allocate the bucket array;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (mappings &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            inflateTable(capacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threshold &#x3D; capacity;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        init();  &#x2F;&#x2F; Give subclass a chance to do its thing.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Read the keys and values, and put the mappings in the HashMap</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; mappings; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            K key &#x3D; (K) s.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            V value &#x3D; (V) s.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            putForCreate(key, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; These methods are used when serializing HashSets</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int   capacity()     &#123; return table.length; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    float loadFactor()   &#123; return loadFactor;   &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>本类直接继承的类</em></strong></p>
<ul>
<li><a href="/2018/11/09/JavaJDK7源码-javautilAbstractMapKV/">java.util.AbstractMap&lt;K,V&gt;</a></li>
</ul>
<p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2018/11/08/JavaJDK7源码-javautilMapKV/">java.util.Map&lt;K,V&gt;</a></li>
<li><a href="/2017/07/04/JavaJDK7源码-javalangCloneable/">java.lang.Cloneable</a></li>
<li><a href="/2017/07/04/JavaJDK7源码-javaioSerializable/">java.io.Serializable</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本类是Java集合框架中的一员。其中K，V分别是map中key与value的类型。</p>
<p>哈希表是Map接口的实现类，本实现提供了所有可选的map操作，并允许key或value为null(除了线程不安全及允许key或value为null外，HashMap可以被粗略的看作哈希表[Hash table])。</p>
<p>本类不保证map中的元素的有序性。特别的，本类不会保证map中的元素的顺序随着时间的推移是不变的。</p>
<p>如果所用的哈希函数将元素分散到了适当的桶中，对于基本操作而言(也就是get和put)，本实现的时间复杂度为常数阶。</p>
<p>迭代本实现集合视图所需的时间与以下内容正相关：</p>
<p>hashMap的”容量”(桶的个数) 及 hashMap的size(键值对的个数)。</p>
<p>因此如果对迭代的性能比较看重，就不能将初始容量设置得过高(或将加载因子设置得过低)。</p>
<p>影响hashMap性能的参数有两个：</p>
<ol>
<li>初始容量(initial capacity): 所谓容量，就是指哈希表中的桶的数量，而初始容量，顾名思义，自然就是哈希表在创建时的容量。</li>
<li>加载因子(load factor): 哈希表装得多满时需要自动扩展的阀值。例如若加载因子为l，当前容量为c，则当entry(即键值对)数超过l*c时，哈希表就需要进行一次重构(rehashed)，以扩展自身的容量。重构完成后，哈希表中的容量，或者说是桶数，会大致扩展为原值的两倍。</li>
</ol>
<p>本实现中，加载因子的默认值为0.75，该值是时间消耗及空间消耗平衡后的结果。加大加载因子降低了空间消耗，但却增大了查找耗时(包括get及put在内，hashMap绝大多数的操作均遵循这个规律)。为了最小化重构操作的次数，在设定hashMap的初始容量时需考虑预期的键值对个数及加载因子的值。如果初始容量与加载因子的乘积大于存入键值对个数的最大值，那么永远也不会发生扩展。</p>
<p>如果已确定会有大量的键值对会被存入hashMap，那么比起设定一个较小的初始容量，导致hashMap反复的扩展，一开始便设定一个足够大的初始容量的性能要更高。</p>
<p>注意，本实现是线程不安全的。如果复数个线程同时访问hashMap，并且至少有一个线程导致hashMap发生了结构性变化(任何导致hashMap增加或删除至少一个键值对的操作，仅仅只是改变某个key的值并不算是结构性变化)，那么就必须在外部对hashMap进行并发控制。通常，我们可以以Collections.synchronizedMap方法包装hashMap，从而实现线程安全化。如果我们需要保证hashMap的线程安全性，那么最好在创建之初就完成包装，以避免意外的线程安全性问题。例如，我们可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map m &#x3D; Collections.synchronizedMap(new HashMap(...));</span></pre></td></tr></table></figure>

<p>本实现所有的集合视图返回的iterator都是fail-fast的：在iterator创建后，若hashMap因该iterator之外的原因(也就是说不是iterator.remove方法导致的)发生了结构性变化，iterator将抛出ConcurrentModificationException。因此，面对并发修改时，iterator会简单干脆的承认失败，而不会进行复杂的风险评估，判断该并发修改是否会对自身产生影响。</p>
<p>我们并不能指望通过fail-fast来保证线程安全性，iterator抛出ConcurrentModificationException只是尽力而为。</p>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.AbstractMap&amp;lt;K,V&amp;gt;</title>
    <url>/2018/11/09/JavaJDK7%E6%BA%90%E7%A0%81-javautilAbstractMapKV/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map.Entry;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected AbstractMap() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return entrySet().size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return size() &#x3D;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现迭代entrySet()返回的set，搜寻值为value的entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若找到，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若直到迭代结束也未找到，则返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需要注意的是，本实现的时间复杂度为线性阶(基于map的大小)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException value的类型与map不合</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException value&#x3D;&#x3D;null且map禁止包含null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsValue(Object value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (value&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (e.getValue()&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (value.equals(e.getValue()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现迭代entrySet()返回的set，搜寻键为key的entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若找到，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若直到迭代结束也未找到，则返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需要注意的是，本实现的时间复杂度为线性阶(基于map的大小)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 许多实现均会重写本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key的类型与map不合</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key&#x3D;&#x3D;null且map禁止包含null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsKey(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (e.getKey()&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (key.equals(e.getKey()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现迭代entrySet()返回的set，搜寻键为key的entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若找到，则返回entry的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若直到迭代结束也未找到，则返回null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需要注意的是，本实现的时间复杂度为线性阶(基于map的大小)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 许多实现均会重写本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key的类型与map不合</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key&#x3D;&#x3D;null且map禁止包含null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V get(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (e.getKey()&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return e.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (key.equals(e.getKey()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return e.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现总是会抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key或value因其类型禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key为null且map的键不允许为null 或 value为null且map的值不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException key或value因其某些属性禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V put(K key, V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现迭代entrySet()返回的set，搜寻键为key的entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若找到，则先使用entry.getValue方法得到它的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 然后使用iterator的remove操作将entry自set中移除(当然，map中对应的键值对也被移除了)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 最后返回此前保留的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若直到迭代结束也未找到，则返回null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需要注意的是，本实现的时间复杂度为线性阶(基于map的大小)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 许多实现均会重写本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注意：若map包含key，且entrySet方法返回的set的iterator不支持remove方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key的类型与map不合</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key为null且map的键不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V remove(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Entry&lt;K,V&gt; correctEntry &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (correctEntry&#x3D;&#x3D;null &amp;&amp; i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (e.getKey()&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    correctEntry &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (correctEntry&#x3D;&#x3D;null &amp;&amp; i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (key.equals(e.getKey()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    correctEntry &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        V oldValue &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (correctEntry !&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            oldValue &#x3D; correctEntry.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 批量操作</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现迭代m.entrySet()返回的set</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 然后针对每次迭代的结果，均将键值对使用map.put方法存入map中</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注意：若map不支持put操作，且m!&#x3D;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException m中的某个key或value因其类型禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException m&#x3D;&#x3D;null 或m中存在为null的key且map的键不允许为null 或 m中存在为null的value且map的值不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException m中的某个key或value因其某些属性禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void putAll(Map&lt;? extends K, ? extends V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            put(e.getKey(), e.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注意：若entrySet()返回的set不支持clear操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        entrySet().clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 视图</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * keySet，values会在第一次使用时初始化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 包含key或value的容器视图均只需要一份</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    transient volatile Set&lt;K&gt;        keySet &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    transient volatile Collection&lt;V&gt; values &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现返回一个set，它是java.util.AbstractSet的子类</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该set的iterator是map.entrySet()的iterator的&quot;包装对象&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该set的size方法基于map.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该set的contains(Object o)方法基于map.containsKey方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法所返回的set会在方法第一次被调用时创建</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 随后再调用本方法时，均会返回同一个set</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法并未进行并发控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此在并发环境下，如果复数个请求同时调用本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并不能确保返回的set是唯一的</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Set&lt;K&gt; keySet() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (keySet &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            keySet &#x3D; new AbstractSet&lt;K&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public Iterator&lt;K&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return new Iterator&lt;K&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        private Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            return i.hasNext();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        public K next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            return i.next().getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            i.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return AbstractMap.this.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return AbstractMap.this.isEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    AbstractMap.this.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public boolean contains(Object k) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return AbstractMap.this.containsKey(k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return keySet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现返回一个collection，它是java.util.AbstractCollection的子类</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该collection的iterator是map.entrySet()的iterator的&quot;包装对象&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该collection的size方法基于map.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该collection的contains(Object o)方法基于map.containsValue方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法所返回的collection会在方法第一次被调用时创建</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 随后再调用本方法时，均会返回同一个collection</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法并未进行并发控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此在并发环境下，如果复数个请求同时调用本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并不能确保返回的collection是唯一的</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Collection&lt;V&gt; values() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (values &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            values &#x3D; new AbstractCollection&lt;V&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public Iterator&lt;V&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return new Iterator&lt;V&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        private Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            return i.hasNext();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        public V next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            return i.next().getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            i.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return AbstractMap.this.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return AbstractMap.this.isEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    AbstractMap.this.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public boolean contains(Object v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return AbstractMap.this.containsValue(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return values;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract Set&lt;Entry&lt;K,V&gt;&gt; entrySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 比较与哈希</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较o与map的相等性</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若o同样是一个Map且o与map中存储的键值对均相等，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更正式的说，如果满足如下条件，则可认为两个Map m1 m2相等：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * m1.entrySet().equals(m2.entrySet())</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 以这种方式设计的话，即便m1 m2的实现类不同，也可以正确的判断二者是否相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本实现的判断规则为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 1.如果o是map本身，返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 2.如果o的类型不是Map，返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 3.如果o的长度与map不相等，返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 4.迭代map.entrySet方法返回的set，检查o是否包含所有的迭代出的entry，若存在不包含的情况，返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 5.若直至迭代结束也未找到不包含的情况，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; this)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!(o instanceof Map))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;K,V&gt; m &#x3D; (Map&lt;K,V&gt;) o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (m.size() !&#x3D; size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                K key &#x3D; e.getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                V value &#x3D; e.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (value &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (!(m.get(key)&#x3D;&#x3D;null &amp;&amp; m.containsKey(key)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (!value.equals(m.get(key)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ClassCastException unused) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (NullPointerException unused) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Map&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回map的hash code值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 定义方式为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * map.entrySet()返回的set中的Entry的hash code之和</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这样的定义方式确保了对于任意Map而言，只要有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * m1.equals(m2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * m1.hashCode()&#x3D;&#x3D;m2.hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 遵循equals方法与hashCode方法的设计规范</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int h &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (i.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            h +&#x3D; i.next().hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回描述map的字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该字符串最外侧是一组大括号&#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 其内部是由map中的键值对。顺序为map的entrySet的iterator返回的顺序</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 相邻的键值对间以&quot;, &quot;(逗号+空格)分割</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 每组键值对的形式为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * key&#x3D;value</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * key与value均会调用String类的valueOf(Object obj)方法转换为字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i &#x3D; entrySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (! i.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return &quot;&#123;&#125;&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(&#39;&#123;&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Entry&lt;K,V&gt; e &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            K key &#x3D; e.getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            V value &#x3D; e.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(key   &#x3D;&#x3D; this ? &quot;(this Map)&quot; : key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(&#39;&#x3D;&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(value &#x3D;&#x3D; this ? &quot;(this Map)&quot; : value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (! i.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return sb.append(&#39;&#125;&#39;).toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(&#39;,&#39;).append(&#39; &#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回map的浅拷贝</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即不会复制key与value本身</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Object clone() throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AbstractMap&lt;K,V&gt; result &#x3D; (AbstractMap&lt;K,V&gt;)super.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.keySet &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.values &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * SimpleEntry与SimpleImmutableEntry均会调用的通用方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 测试相等性，检查null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static boolean eq(Object o1, Object o2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return o1 &#x3D;&#x3D; null ? o2 &#x3D;&#x3D; null : o1.equals(o2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 注意：</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 即便共享部分代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 但SimpleEntry与SimpleImmutableEntry是明确不同的两个类</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 不过共用的代码不多</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 因此没必要再弄出个抽象类</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Entry中存储着Map的键值对</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用entry.setValue方法可以改变value</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本类用于辅助AbstractMap的子类构建map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (继承AbstractMap，构建map，最重要的一环就是entrySet方法的编写)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static class SimpleEntry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        implements Entry&lt;K,V&gt;, java.io.Serializable</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static final long serialVersionUID &#x3D; -8499721149061103585L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private final K key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        private V value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 以key-value为键值对创建entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public SimpleEntry(K key, V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.key   &#x3D; key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 使用传入entry的键值对创建新的entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public SimpleEntry(Entry&lt;? extends K, ? extends V&gt; entry) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.key   &#x3D; entry.getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.value &#x3D; entry.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public K getKey() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public V getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public V setValue(V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            V oldValue &#x3D; this.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 比较o与entry的相等性</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 若o同样是Map Entry且o与entry代表的键值对相等，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 更正式的说，如果满足如下条件，则可认为两个entry e1 e2代表的键值对相等：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * if (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.getKey()&#x3D;&#x3D;null ? e2.getKey()&#x3D;&#x3D;null : e1.getKey().equals(e2.getKey())</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * ) &amp;&amp; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.getValue()&#x3D;&#x3D;null ? e2.getValue()&#x3D;&#x3D;null : e1.getValue().equals(e2.getValue())</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * )</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 以这种方式设计的话，即便e1 e2的实现类不同，也可以正确的判断二者是否相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!(o instanceof Map.Entry))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Map.Entry e &#x3D; (Map.Entry)o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return eq(key, e.getKey()) &amp;&amp; eq(value, e.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回entry的hash code值</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 定义方式如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e.getKey()&#x3D;&#x3D;null ? 0 : e.getKey().hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * ) ^ (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e.getValue()&#x3D;&#x3D;null ? 0 : e.getValue().hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * )</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 这样的定义方式确保了对于任意Entry而言，只要有</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.equals(e2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 即有</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.hashCode()&#x3D;&#x3D;e2.hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 遵循equals方法与hashCode方法的设计规范</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (key   &#x3D;&#x3D; null ? 0 :   key.hashCode()) ^</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   (value &#x3D;&#x3D; null ? 0 : value.hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回描述entry的字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本实现返回：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * key&#x3D;value</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return key + &quot;&#x3D;&quot; + value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Entry中存储着Map的键值对，该键值对不可变</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本类不支持entry.setValue方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本类用于辅助AbstractMap的子类构建map，可以方便的返回线程安全的键值对快照</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (继承AbstractMap，构建map，最重要的一环就是entrySet方法的编写)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static class SimpleImmutableEntry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        implements Entry&lt;K,V&gt;, java.io.Serializable</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static final long serialVersionUID &#x3D; 7138329143949025153L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private final K key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        private final V value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 以key-value为键值对创建entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public SimpleImmutableEntry(K key, V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.key   &#x3D; key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 使用传入entry的键值对创建新的entry</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public SimpleImmutableEntry(Entry&lt;? extends K, ? extends V&gt; entry) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.key   &#x3D; entry.getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.value &#x3D; entry.getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public K getKey() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public V getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 因SimpleImmutableEntry不可变</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 则总是抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws UnsupportedOperationException 总是抛出该异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public V setValue(V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 比较o与entry的相等性</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 若o同样是Map Entry且o与entry代表的键值对相等，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 更正式的说，如果满足如下条件，则可认为两个entry e1 e2代表的键值对相等：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * if (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.getKey()&#x3D;&#x3D;null ? e2.getKey()&#x3D;&#x3D;null : e1.getKey().equals(e2.getKey())</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * ) &amp;&amp; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.getValue()&#x3D;&#x3D;null ? e2.getValue()&#x3D;&#x3D;null : e1.getValue().equals(e2.getValue())</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * )</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 以这种方式设计的话，即便e1 e2的实现类不同，也可以正确的判断二者是否相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!(o instanceof Map.Entry))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Map.Entry e &#x3D; (Map.Entry)o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return eq(key, e.getKey()) &amp;&amp; eq(value, e.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Map&lt;K,V&gt;.Entry&lt;K,V&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回entry的hash code值</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 定义方式如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e.getKey()&#x3D;&#x3D;null ? 0 : e.getKey().hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * ) ^ (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e.getValue()&#x3D;&#x3D;null ? 0 : e.getValue().hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * )</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 这样的定义方式确保了对于任意Entry而言，只要有</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.equals(e2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 即有</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.hashCode()&#x3D;&#x3D;e2.hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 遵循equals方法与hashCode方法的设计规范</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (key   &#x3D;&#x3D; null ? 0 :   key.hashCode()) ^</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   (value &#x3D;&#x3D; null ? 0 : value.hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回描述entry的字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本实现返回：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * key&#x3D;value</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return key + &quot;&#x3D;&quot; + value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接继承本类的类</em></strong></p>
<ul>
<li><a href="/2018/11/09/JavaJDK7源码-javautilHashMapKV/">java.util.HashMap&lt;K,V&gt;</a></li>
</ul>
<p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2018/11/08/JavaJDK7源码-javautilMapKV/">java.util.Map&lt;K,V&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本类是Java集合框架中的一员。其中K，V分别是map中key与value的类型。提供了Map接口最小化，也是最基本的实现。</p>
<p>若需实现一个不可变的map，程序员只需继承本类，然后实现entrySet方法，该方法会返回map键值对的set视图。该set应基于java.util.AbstractSet进行设计，不能支持add或remove方法，它的iterator不能支持remove方法。</p>
<p>如需实现可变的map，在此基础上程序员还需实现本类的put方法(本类会抛出UnsupportedOperationException异常)，同时entrySet().iterator()返回的iterator还需实现remove方法。</p>
<p>遵循Map接口的规范，通常来说，程序员需要实现两个构造函数：</p>
<ol>
<li>创建一个空的map的无参构造函数</li>
<li>接收一个Map类型参数的构造函数，它会以入参为基础，创建一个类型为自身实现类的，由相同键值对(key-value)构成的新map</li>
</ol>
<p>对于本类的非抽象方法，如果实现类认为有必要，均可以重写以达到更高的性能标准。</p>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Dictionary&amp;lt;K,V&amp;gt;</title>
    <url>/2018/11/08/JavaJDK7%E6%BA%90%E7%A0%81-javautilDictionaryKV/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<pre><code></code></pre><h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1>]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Map&amp;lt;K,V&amp;gt;</title>
    <url>/2018/11/08/JavaJDK7%E6%BA%90%E7%A0%81-javautilMapKV/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Map&lt;K,V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回map中键值对的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 如果该个数大于Integer.MAX_VALUE，则返回Integer.MAX_VALUE</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int size();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若map不包含任何键值对则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若map包含key则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更确切的说，当且仅当map包含k，有key&#x3D;&#x3D;null ? k&#x3D;&#x3D;null : key.equals(k)时，返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key的类型与map不合(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key&#x3D;&#x3D;null且map禁止包含null(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean containsKey(Object key);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若map中存在1个或多个key的值为入参则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更确切的说，当且仅当map包含至少一个值v，有value&#x3D;&#x3D;null ? v&#x3D;&#x3D;null : value.equals(v)时，返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通常来说，在多数实现中，本操作的时间复杂度为线性阶(依map的大小)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException value的类型与map不合(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException value&#x3D;&#x3D;null且map禁止包含null(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean containsValue(Object value);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回map中key所对应的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若map中未包含key，则返回null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更确切的说，若map包含键值对k-v，并有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * key&#x3D;&#x3D;null ? k&#x3D;&#x3D;null : key.equals(k)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则返回v</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 反之返回null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因为map中键不允许重复，则至多只会有一个对应的值，因此不会产生歧义</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 基于map中的键值是否允许为null，共有如下四种情况：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 1. 键，值均不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回null: map中不包含key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回非null: map中包含key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 2. 键允许为null，值不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回null: map中不包含key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回非null: map中包含key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 3. 键不允许为null，值允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回null: 无法判断。有可能map有不包含key，也有可能map中包含key，不过其值为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回非null: map中包含key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 4. 键值均允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回null: 无法判断。有可能map有不包含key，也有可能map中包含key，不过其值为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回非null: map中包含key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 由此分析，是否能根据本方法的返回值判断map中是否包含key，与键是否允许为null无关，只与值是否允许为null有关</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在无法判断时，可调用containsKey(Object key)辨认</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key的类型与map不合(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key&#x3D;&#x3D;null且map禁止包含null(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    V get(Object key);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 改变操作</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将key-value作为键值对存入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若map此前包含key，即当且仅当containsKey(key)返回true，则其原值将被新的value替换，并返回原值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若map此前未包含key，则返回null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需要注意的是，返回null并不能说明map此前未包含key，也有可能map此前包含key，只不过该key的原值就为null(当前，前提是实现类允许值为null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key或value因其类型禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key为null且map的键不允许为null 或 value为null且map的值不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException key或value因其某些属性禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    V put(K key, V value);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若map中包含key，则将其从map中移除</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更确切的说，若map包含键值对k-v，并有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * key&#x3D;&#x3D;null ?  k&#x3D;&#x3D;null : key.equals(k)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则移除该键值对</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因为map中键不允许重复，则至多只会移除一个键值对，因此不会产生歧义</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若有键值对被移除，则本方法返回对应的值。反之返回null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需要注意的是，返回null并不能说明没有键值对被移除，也有可能map此前包含key，只不过该key的值就为null(当前，前提是实现类允许值为null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 一旦本方法被调用，map将不再包含key</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException key的类型与map不合(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException key为null且map的键不允许为null(可选)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    V remove(Object key);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 批量操作</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将m中所有的键值对复制入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法等效于遍历m，随后将m中所有的键值对以put(K key, V value)依次插入map中</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本接口并未约束如下情况时的解决策略：在键值对存入map的过程中m发生变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException m中的某个key或value因其类型禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException m&#x3D;&#x3D;null 或m中存在为null的key且map的键不允许为null 或 m中存在为null的value且map的值不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException m中的某个key或value因其某些属性禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void putAll(Map&lt;? extends K, ? extends V&gt; m);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除map中所有的键值对</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法调用后map将为空</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException map不支持本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 视图</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个视图，该视图的类型为Set，该set由map中所有的key组成</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 既然该set是视图，那么作用于map之上的改变就会反映在该set上，反之亦然</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set正在迭代的过程中，map因非set的原因发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (也就是不是由set的Iterator导致的变化，或者更具体的说，不是由set的Iterator的remove()方法导致的变化)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则迭代结果将被置为未定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通过set的Iterator的Iterator.remove</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 或set本身的Set.remove,removeAll,retainAll,clear</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 操作，可以将key自set中移除，同时，map中的以对应key为键的键值对也会被移除</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该set视图不支持添加操作，即不支持add,addAll</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (当然啦，只添加一个key是无法形成键值对的)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 强行调用会抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注1:keySet()测试</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Set&lt;K&gt; keySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个视图，该视图的类型为Collection，该collection由map中所有的value组成</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 既然该collection是视图，那么作用于map之上的改变就会反映在该collection上，反之亦然</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若collection正在迭代的过程中，map因非collection的原因发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (也就是不是由collection的Iterator导致的变化，或者更具体的说，不是由collection的Iterator的remove()方法导致的变化)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则迭代结果将被置为未定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通过collection的Iterator的Iterator.remove</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 或collection本身的Collection.remove,removeAll,retainAll,clear</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 操作，可以将value自collection中移除，同时，map中的以对应value为值的键值对也会被移除</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该collection视图不支持添加操作，即不支持add,addAll</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (当然啦，只添加一个value是无法形成键值对的)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 强行调用会抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注2:values()测试</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Collection&lt;V&gt; values();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个视图，该视图的类型为Set，该set由map中所有的键值对组成</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 既然该set是视图，那么作用于map之上的改变就会反映在该set上，反之亦然</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set正在迭代的过程中，map因非set的原因发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则迭代结果将被置为未定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通过set的Iterator的Iterator.remove</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 或set本身的Set.remove,removeAll,retainAll,clear</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 操作，可以将键值对自set中移除，同时，map中对应的键值对也会被移除</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该set视图不支持添加操作，即不支持add,addAll</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 强行调用会抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注3:entrySet()测试</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 一个Entry对象实际上就是map中的一个键值对</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Map.entrySet方法会返回一个类型为Set的视图，它的元素就是Entry类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 如果想要获得map中的Entry，唯一的方式就是调用Map.entrySet方法，然后使用iterator迭代该set</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 迭代出的Map.Entry对象仅在迭代期间有效</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更正式的说，除了因为该set本身导致map发生的变化，在通过iterator迭代该set得到Map.Entry对象期间，如果map发生变化，迭代出的Map.Entry对象将被置为未定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    interface Entry&lt;K,V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回本entry中存储的key</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalStateException 如果entry已被自map中移除，那么实现类可以(但不是必须)抛出本异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        K getKey();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回本entry中存储的value</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 若entry已被自map中移除(通过iterator的remove操作)，结果将被置为未定义</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalStateException 如果entry已被自map中移除，那么实现类可以(但不是必须)抛出本异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        V getValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法可选</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 将entry中存储的值替换为value，而后返回旧值</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * (相应的，map中对应的键值对中的值也会发生变化)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 未定义如下情况时本方法的行为：entry已被自map中移除(通过iterator的remove操作)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws UnsupportedOperationException map不支持put操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws ClassCastException value因其类型禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws NullPointerException value&#x3D;&#x3D;null且map的值不允许为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalArgumentException value因其某些属性禁止被插入map</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalStateException 如果entry已被自map中移除，那么实现类可以(但不是必须)抛出本异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        V setValue(V value);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 比较o与entry的相等性</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 若o同样是Map Entry且o与entry代表的键值对相等，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 更正式的说，如果满足如下条件，则可认为两个entry e1 e2代表的键值对相等：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * if (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.getKey()&#x3D;&#x3D;null ? e2.getKey()&#x3D;&#x3D;null : e1.getKey().equals(e2.getKey())</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * ) &amp;&amp; (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.getValue()&#x3D;&#x3D;null ? e2.getValue()&#x3D;&#x3D;null : e1.getValue().equals(e2.getValue())</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * )</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 以这种方式设计的话，即便e1 e2的实现类不同，也可以正确的判断二者是否相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean equals(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回entry的hash code值</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 定义方式如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e.getKey()&#x3D;&#x3D;null ? 0 : e.getKey().hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * ) ^ (</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e.getValue()&#x3D;&#x3D;null ? 0 : e.getValue().hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * )</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 这样的定义方式确保了对于任意Entry而言，只要有</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.equals(e2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 即有</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e1.hashCode()&#x3D;&#x3D;e2.hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 遵循equals方法与hashCode方法的设计规范</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 比较与哈希</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较o与map的相等性</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若o同样是一个Map且o与map中存储的键值对均相等，则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更正式的说，如果满足如下条件，则可认为两个Map m1 m2相等：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * m1.entrySet().equals(m2.entrySet())</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 以这种方式设计的话，即便m1 m2的实现类不同，也可以正确的判断二者是否相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean equals(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回map的hash code值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 定义方式为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * map.entrySet()返回的set中的Entry的hash code之和</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这样的定义方式确保了对于任意Map而言，只要有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * m1.equals(m2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * m1.hashCode()&#x3D;&#x3D;m2.hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 遵循equals方法与hashCode方法的设计规范</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="/2018/11/09/JavaJDK7源码-javautilAbstractMapKV/">java.util.AbstractMap&lt;K,V&gt;</a></li>
<li><a href="/2018/11/09/JavaJDK7源码-javautilHashMapKV/">java.util.HashMap&lt;K,V&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员。其中K，V分别是map中key与value的类型。</p>
<p>本接口约束了一个由复数个键值对(key-value)构成的map对象。map不能包含重复的key，每个key至多映射至一个value。</p>
<p>本接口(诞生于JDK1.2)取代了抽象类<a href="/2018/11/08/JavaJDK7源码-javautilDictionaryKV/">java.util.Dictionary&lt;K,V&gt;</a>(诞生于JDK1.0)的地位。</p>
<p>本接口提供了3种用于查看map中的内容的集合视图(collection view)：</p>
<ol>
<li>由map中的key构成的set</li>
<li>由map中的value构成的collection</li>
<li>由map中的键值对(key-value)构成的set</li>
</ol>
<p>所谓map中元素的顺序，其实就是在使用这3种方式查看map时，对应的collection的iterator返回元素的顺序。某些本接口的实现类，例如TreeMap，会明确保证map中的元素有序；而对于另一些实现而言，例如HashMap，则不会保证这一点。</p>
<p>需要注意的事，如果作为map key的对象时常会变化，并且这种变化在一定程度上会影响到相等性的判断，那么操作该map后得到的结果就无法完全被控制。基于这个原因，map禁止以其自身作为自己的key。同时，虽然并未禁止，但也应极其谨慎对待的是map以其自身作为自己的value：因为此时map的equals及hashCode方法将难以编写。</p>
<p>通常来说，所有的本接口的实现类都需要提供两个”标准的”构造函数(之所以打上引号，是因为接口是无法约束实现类的构造函数的编写规范的，更遑论标准，这只是一个约定俗成的建议，起码JDK中本接口的实现类都是遵循的)：</p>
<ol>
<li>创建一个空的map的无参构造函数</li>
<li>接收一个Map类型参数的构造函数，它会以入参为基础，创建一个类型为自身实现类的，由相同键值对(key-value)构成的新map</li>
</ol>
<p>事实上，我们可以使用第二个构造函数完成map的复制：只要入参和待生成的新map从属于相同的实现类型即可。</p>
<p>本接口包含所谓的”破坏性方法”，这些方法会改变它们所操作的map。如果某实现类不打算实现某个破坏性方法，那么对于这个方法，该实现类应抛出UnsupportedOperationException。该约束其实是比较灵活的：即便某实现类不支持某破坏性方法，但如果该次调用不可能产生实际上的破坏性影响，那么是否抛出UnsupportedOperationException就不加限制了，完全由实现类的编写者决定。例如有不可变的map对象，它显然是不支持本接口所约束的putAll(Map&lt;? extends K, ? extends V&gt; m)，不过如果作为入参的m为空，那么本次调用将无论如何也不会修改该不可变map对象，此时不抛出异常也是可以的。</p>
<p>某些本接口的实现类可能会对它所包含的key或value有所限制。例如，某些实现类禁止包含值为null的key或value，某些对其key的类型有所限制。试图插入一个不合规的key或value会抛出unchecked exception(对于那些并非强烈需要实现类抛出的异常，本接口会将其标注为可选)，典型的诸如NullPointerException或ClassCastException。试图查询一个不合规的key或value可能会导致抛出异常，或者仅仅只是返回false。</p>
<p>本接口的很多方法都是基于Object类的equals(Object obj)定义的。例如containsKey(Object key)的文档中就有这样的叙述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当且仅当map包含k，有key&#x3D;&#x3D;null ? k&#x3D;&#x3D;null : key.equals(k)时，返回true</span></pre></td></tr></table></figure>

<p>该叙述并不意味着如果我们以非null的key去调用containsKey(Object key)，就一定需要使用key.equals(k)来比较。只要实现了与equals等效的比较结果，实现类可以基于自身特点编写更优化的解决方案。仍以本方法为例，我们可以举出一个比较通用的优化方法，实现类可以先用hashCode()比较key与k的hashCode是否相同(当然了，这需要key与k所属的类遵循hashCode()与equals()的规范)，这样就可以快速过滤掉hashCode不相等的情况。</p>
<h1 id="注1-keySet-测试"><a href="#注1-keySet-测试" class="headerlink" title="注1:keySet()测试"></a>注1:keySet()测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;a&quot;, &quot;A&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;b&quot;, &quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; keySet1 &#x3D; map.keySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; keySet2 &#x3D; map.keySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(keySet1 &#x3D;&#x3D; keySet2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<p>说明多次调用keySet返回的是唯一的视图对象。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;a&quot;, &quot;A&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;b&quot;, &quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; keySet &#x3D; map.keySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String key : keySet) System.out.print(key + &quot; &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;c&quot;, &quot;C&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String key : keySet) System.out.print(key + &quot; &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b a </span></pre></td></tr><tr><td class="code"><pre><span class="line">b c a</span></pre></td></tr></table></figure>

<p>说明作用于map上key的修改可以影响keySet。反之亦然，在此就不写测试代码了。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;a&quot;, &quot;A&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;b&quot;, &quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; keySet &#x3D; map.keySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        keySet.add(&quot;c&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String key : keySet) System.out.print(key + &quot; &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.AbstractCollection.add(AbstractCollection.java:260)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.ansjseg.Test.main(Test.java:14)</span></pre></td></tr></table></figure>

<p>即强行调用keySet的add会抛出UnsupportedOperationException。</p>
<h1 id="注2-values-测试"><a href="#注2-values-测试" class="headerlink" title="注2:values()测试"></a>注2:values()测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map.Entry;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;a&quot;, &quot;A&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;b&quot;, &quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;c&quot;, &quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;String&gt; values &#x3D; map.values();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        values.remove(&quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Entry&lt;String, String&gt; entry : map.entrySet()) System.out.println(entry.getKey() + &quot; - &quot; + entry.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c - B</span></pre></td></tr><tr><td class="code"><pre><span class="line">a - A</span></pre></td></tr></table></figure>

<p>因为map中key是唯一的，因此如果我们移除keySet()返回的视图中的key，那么可以确切的知道哪个键值对遭到了删除。</p>
<p>然而map中的value却是可重复的，因此如果我们如果只移除values()返回的视图中的某个value，在有复数个键值对的value等于被删除值时，被删除的键值对是不可预测的。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;a&quot;, &quot;A&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(&quot;b&quot;, &quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;String&gt; values &#x3D; map.values();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        values.add(&quot;C&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.AbstractCollection.add(AbstractCollection.java:260)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.ansjseg.Test.main(Test.java:14)</span></pre></td></tr></table></figure>

<p>即强行调用values的add会抛出UnsupportedOperationException。</p>
<h1 id="注3-entrySet-测试"><a href="#注3-entrySet-测试" class="headerlink" title="注3:entrySet()测试"></a>注3:entrySet()测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map1 &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map1.put(&quot;a&quot;, &quot;A&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map1.put(&quot;b&quot;, &quot;B&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;String, String&gt; map2 &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map2.put(&quot;c&quot;, &quot;C&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet1 &#x3D; map1.entrySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;Map.Entry&lt;String, String&gt;&gt; entrySet2 &#x3D; map2.entrySet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        entrySet1.addAll(entrySet2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.AbstractCollection.add(AbstractCollection.java:260)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.AbstractCollection.addAll(AbstractCollection.java:342)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.ansjseg.Test.main(Test.java:17)</span></pre></td></tr></table></figure>

<p>即强行调用entrySet的addAll会抛出UnsupportedOperationException。</p>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-全局配置文件</title>
    <url>/2018/10/04/Mybatis-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>要求不高的话，SqlMapConfig.xml可以是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;environments default&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;environment id&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;dataSource&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;environment&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;environments&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;mapper resource&#x3D;&quot;mybatis&#x2F;mapper&#x2F;UserMapper.xml&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;configuration&gt;</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>事实上，这只是configuration标签中的很少的一部分。如果按顺序列出的话，configuration中可以配置如下标签：</p>
<ul>
<li>properties(属性)</li>
<li>settings(全局配置参数)</li>
<li>typeAliases(类型别名)</li>
<li>typeHandlers(类型处理器)</li>
<li>objectFactory(对象工厂)</li>
<li>objectWrapperFactory</li>
<li>reflectorFactory</li>
<li>plugins(插件)</li>
<li>environments(环境集合属性对象)</li>
<li>databaseIdProvider</li>
<li>mappers(映射器)</li>
</ul>
<p>每个标签又可包含子标签，例如environments中有environment(环境子属性对象)，而environment中又包含transactionManager(事务管理)及dataSource(数据源)。</p>
<p>通常来说，配置文件中的标签是无序的，不过Mybatis的DTD特地约束了顺序。如果我们违背这个顺序，例如我们这样写上文的SqlMapConfig.xml：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;mapper resource&#x3D;&quot;mybatis&#x2F;mapper&#x2F;UserMapper.xml&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;environments default&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;environment id&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;dataSource&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;environment&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;environments&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;configuration&gt;</span></pre></td></tr></table></figure>

<p>此时就会报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The content of element type &quot;configuration&quot; must match </span></pre></td></tr><tr><td class="code"><pre><span class="line"> &quot;(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)&quot;.</span></pre></td></tr></table></figure>

<p>下面我们就来逐个介绍这些标签。</p>
<h1 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h1><p>properties标签中有两个属性：resource及url。通常我们都会使用前者，它的作用是加载classpath下的属性文件(url通常用于加载位于网络中的属性文件)。</p>
<p>我们再来看下上文的SqlMapConfig.xml：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;mapper resource&#x3D;&quot;mybatis&#x2F;mapper&#x2F;UserMapper.xml&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;environments default&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;environment id&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;dataSource&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;environment&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;environments&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;configuration&gt;</span></pre></td></tr></table></figure>

<p>此时，我们把dataSource的连接字段直接写在了SqlMapConfig.xml中。显然，在需要替换数据源的场合，这很不方便。因此我们就可以将dataSource提取为单独的properties文件，而后再由properties标签加载，这样就完成了主配置文件与配置细节的解耦。其他需灵活配置的地方也同理。例如，我们创建了properties文件db.properties:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span></pre></td></tr><tr><td class="code"><pre><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8</span></pre></td></tr><tr><td class="code"><pre><span class="line">jdbc.username&#x3D;root</span></pre></td></tr><tr><td class="code"><pre><span class="line">jdbc.password&#x3D;</span></pre></td></tr></table></figure>

<p>此时，SqlMapConfig.xml就可以这样写了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;properties resource&#x3D;&quot;mybatis&#x2F;db.properties&quot;&gt;&lt;&#x2F;properties&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;environments default&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;environment id&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;dataSource&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;environment&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;environments&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;mapper resource&#x3D;&quot;mybatis&#x2F;mapper&#x2F;UserMapper.xml&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;configuration&gt;</span></pre></td></tr></table></figure>

<p>对于dataSource这种相对完整的数据集合而言，最好还是要单独提取出properties文件的。不过，如果属性相对简单，换句话说，不值得单独提取为文件，也可以直接写在properties标签内部：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;properties resource&#x3D;&quot;mybatis&#x2F;db.properties&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;property name&#x3D;&quot;mapperpath.user&quot; value&#x3D;&quot;mybatis&#x2F;mapper&#x2F;UserMapper.xml&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;properties&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;environments default&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;environment id&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;$&#123;jdbc.driver&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;dataSource&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;environment&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;environments&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;mapper resource&#x3D;&quot;$&#123;mapperpath.user&#125;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;configuration&gt;</span></pre></td></tr></table></figure>

<p>如上例所示，我们将UserMapper.xml的路径放到了属性中。这样来看，properties可以理解为SqlMapConfig.xml的常量配置仓库。将可能会发生变化的常量集中在properties属性中显然是一个很好的习惯。</p>
<p>下面是一个老生常谈的问题，properties标签内部的key与resource/url中加载的key重名了怎么办？</p>
<p>Mybatis是这样处理的：</p>
<ol>
<li>首先读取properties标签内部的key</li>
<li>而后读取resource/url中加载的key，它会覆盖已有同名属性</li>
<li>最后，若mapper.xml配置文件中statement中的parameterType是pojo类型，那么它内部的值也会被读入，并覆盖同名属性</li>
</ol>
<p>不得不说，这其实是挺坑爹的。因为从逻辑上来说，前两项属于系统配置，而第三项是具体的一次SQL查询，二者是不应放在一起的。不过，因为3会覆盖前两项，所以即便重名，每次SQL查询还是优先会取3中的值，因此通常不会有什么问题。</p>
<p>不过，对于这种放在一起的做法，我们还是很容易就会想到一些问题，假如SqlMapConfig.xml中有属性名为a，而某次statement的parameterType是pojo，且其中同样有名为a的属性。在a不为null时没什么好说的，那么如果该pojo中的a为null呢？会传入SqlMapConfig.xml中的属性a吗？</p>
<p>答案是不会。传入的依然会是null。</p>
<p>进一步的，如果pojo中没有属性a，而statement中的SQL误写了属性a，那么此时会传入SqlMapConfig.xml中的a吗？</p>
<p>答案依然是否定的，此时会报错，告知pojo中没有a。</p>
<p>因此，虽然这种将配置参数与请求参数混合的做法很坑爹，但是Mybatis还是做了相应的容错的，大家依然可以放心使用。不过为了逻辑上的顺畅，还是建议大家在定义properties用到的key时，起名特殊一些，最好一眼就能看出是配置文件中的参数。</p>
<h1 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h1><p>如果我们将使用Mybatis的程序看作一个普通的软件的话，那么settings就是在配置该软件全局的运行参数。如果不加设定，会取用某个默认值。</p>
<p>Mybatis的前身，ibatis的settings中包含了很多性能参数(最大线程数，最长等待时间等)，而Mybatis的settings中移除了这些参数，相关性能调优会由Mybatis自动完成。</p>
<h1 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h1><p>有的时候mapper配置文件中parameterType/resultType指定的类型会很长(例如com.day1_9.user.pojo.UserPojo)，反复书写的话会很不方便。而且同时在多个statement中硬编码也不利于类型全限定名变更时的维护。此时就需要别名登场啦。</p>
<p>Mybatis定义了很多默认的别名(别名:映射的Java类型)：</p>
<ul>
<li>_byte: byte</li>
<li>_long: long</li>
<li>_short: short</li>
<li>_int: int</li>
<li>_integer: int</li>
<li>_double: double</li>
<li>_float: float</li>
<li>_boolean: boolean</li>
<li>string: String</li>
<li>byte: Byte</li>
<li>long: Long</li>
<li>short: Short</li>
<li>int: Integer</li>
<li>integer: Integer</li>
<li>double: Double</li>
<li>float: Float</li>
<li>boolean: Boolean</li>
<li>date: Date</li>
<li>decimal: BigDecimal</li>
<li>bigdecimal: BigDecimal</li>
</ul>
<p><strong>定义单个别名</strong></p>
<p>为了能够给用户自定义的类型起别名，可在SqlMapConfig.xml中添加typeAliases标签：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;typeAlias type&#x3D;&quot;com.user.pojo.UserPojo&quot; alias&#x3D;&quot;user&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;typeAliases&gt;</span></pre></td></tr></table></figure>

<p>在typeAliases标签内部，每个typeAlias标签都对应一个别名。其中type为类型全限定名，alias为别名。这样定义后，UserMapper.xml中的statement就可以这样写啦：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;user&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  select * from user where id&#x3D; #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;user&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  update user set name&#x3D;#&#123;name&#125;,create_time&#x3D;#&#123;create_time&#125; where id&#x3D;#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;update&gt;</span></pre></td></tr></table></figure>

<p>这样，parameterType及resultType中的”com.user.pojo.UserPojo”就均被”user”替换了。</p>
<p><strong>批量别名定义</strong></p>
<p>如果pojo类有很多，那么像上文那样一个个定义就显得很麻烦了。因此Mybatis还提供了批量定义别名的方法：提供一个包，程序会自动扫描包下的Java类，它们的别名就是类名(首字母大写或小写均可)。即修改SqlMapConfig.xml的typeAliases标签如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;package name&#x3D;&quot;com.user.pojo&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;typeAliases&gt;</span></pre></td></tr></table></figure>

<p>如需添加复数个包，则配置对应个数个package标签即可。</p>
<p>批量添加别名后，UserMapper.xml中的statement就可以这样写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  select * from user where id&#x3D; #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  update user set name&#x3D;#&#123;name&#125;,create_time&#x3D;#&#123;create_time&#125; where id&#x3D;#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;update&gt;</span></pre></td></tr></table></figure>

<p>遗憾的是，Mybaits的批量扫描别名不支持通配符，也就是说如果SqlMapConfig.xml想写成这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;package name&#x3D;&quot;com.*.pojo&quot;&#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;typeAliases&gt;</span></pre></td></tr></table></figure>

<p>是不可以的。</p>
<p>较之逐个配置别名，批量扫描别名的好处在于配置简单，缺点在于无法灵活命名(固定为类名)，这就会导致别名不稳定：当pojo的类名发生变动时(虽然通常这是不会变的)，还是需要修改mapper配置文件中出现的全部该pojo的别名。</p>
<h1 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h1><p>typeHandlers(类型处理器)负责完成Java类型与JDBC类型之间的映射。默认提供几乎全部的常见基本类型间的映射：</p>
<p><img src="/images/blog_pic/Mybatis/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/0.jpg" alt="0.jpg"></p>
<p><img src="/images/blog_pic/Mybatis/%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/1.jpg" alt="1.jpg"></p>
<h1 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h1><p>mappers标签用于管理mapper映射配置文件。例如我们此前已经一再使用的mapper resource标签：</p>
<mappers>
  <mapper resource="mybatis/mapper/UserMapper.xml" />
</mappers>

<p>该标签用于加载类路径下的配置文件。如果要引用完全限定名，则可使用mapper url标签：</p>
<mappers>
  <mapper url="file:///E:\temp\UserMapper.xml" />
</mappers>

<p>还可以使用mapper接口累路径来加载配置文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;mapper class&#x3D;&quot;com.user.mapper.UserMapper&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;mappers&gt;</span></pre></td></tr></table></figure>

<p>class标签中填入对应mapper接口的全限定名。这种加载方式要求mapper配置文件必须与其对应的mapper接口同名，并在同一目录下(推荐)。</p>
<p>如果要批量加载配置文件，则可使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;package name&#x3D;&quot;com.user.mapper&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;mappers&gt;</span></pre></td></tr></table></figure>

<p>name标签中传入的即为mapper接口所在的包，这样配置后，该包下的所有mapper接口所对应的配置文件均会被加载。当然，这种加载方式仍然需要mapper配置文件与其对应的mapper接口同名，并在同一目录下(推荐)。</p>
<p>类似于前文对批量别名定义的描述，这种加载方式依然不支持通配符，也就是说，如果想写作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;package name&#x3D;&quot;com.*.mapper&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;mappers&gt;</span></pre></td></tr></table></figure>

<p>是不可以的。如果想添加多个包，只能通过写多个package的方式。</p>
<p>如果与Spring进行了整合，则可以使用整合包中提供的mapper扫描器，彼时mapper的配置方式就会简单得多，也友好得多了。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-mapper代理开发方式</title>
    <url>/2018/10/04/Mybatis-mapper%E4%BB%A3%E7%90%86%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>在<a href="/2018/10/04/Mybatis-DAO开发方式/">Mybatis-DAO开发方式</a>的基础上，我们引入mybatis特有的，也是推荐大家使用的mapper代理开发方式，此时程序员仅需编写mapper接口，mybatis将自动生成mapper实现的代理对象。</p>
<a id="more"></a>

<p>那么mybatis要基于什么规则来生成mapper实现的代理对象呢？而它的前置问题则是，mapper实现究竟是什么样子的呢？</p>
<p>我们知道，所谓mapper接口其实就是DAO接口，而mapper实现则是DAO实现。以<a href="/2018/10/04/Mybatis-DAO开发方式/">Mybatis-DAO开发方式</a>为例，它是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.user.dao;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSession;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.user.pojo.UserPojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private SqlSessionFactory sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public UserDaoImpl(SqlSessionFactory sqlSessionFactory) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sqlSessionFactory &#x3D; sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public UserPojo selectById(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserPojo userPojo &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession &#x3D; this.sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userPojo &#x3D; sqlSession.selectOne(&quot;loveReimu.selectById&quot;, id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null !&#x3D; sqlSession) sqlSession.close(); </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return userPojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如果想要通过代码自动生成一段这样的代码，需要准备些什么呢？</p>
<p>这段代码的核心其实只有1句，也就是上例中的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">userPojo &#x3D; sqlSession.selectOne(&quot;loveReimu.selectById&quot;, id);</span></pre></td></tr></table></figure>

<p>如果要让自动生成的代码实现与这句话相同的功能，那么必须做到以下两点：</p>
<ol>
<li>定位到某个精确的statement，即能定位到某个精确的namespace+id，在上例中，该值为loveReimu.selectById。</li>
<li>明确该调用SqlSession的哪个方法，在上例中，方法为selectOne。</li>
</ol>
<p>为做到以上两点，mybatis制定了相应的mapper开发规范。</p>
<p>在<a href="/2018/10/04/Mybatis-DAO开发方式/">Mybatis-DAO开发方式</a>中，UserMapper.xml的namespace是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;loveReimu&quot;&gt;</span></pre></td></tr></table></figure>

<p>这是一个随机值。而在mapper开发规范中，namespace必须为mapper接口的全限定名。我们不妨先定义UserMapper.xml的mapper接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.user.mapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface UserMapper &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>接口名不是强制的，不过通常我们都会将其命名为表名+Mapper。</p>
<p>那么UserMapper.xml的namespace就要这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;com.user.mapper.UserMapper&quot;&gt;</span></pre></td></tr></table></figure>

<p>很显然，这是为了实现目的1。只要是UserMapper接口的方法，mybatis就会去UserMapper.xml找对应的statement。而具体该找哪一个statement的id则由mapper接口中的方法名限定。换句话说，statement的id应与mapper接口的方法名相同。例如，如果我们最终要调用UserMapper.xml中的selectById：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;com.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  select * from user where id&#x3D; #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;select&gt;</span></pre></td></tr></table></figure>

<p>那么mapper接口中对应的方法就要这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UserPojo selectById(int id);</span></pre></td></tr></table></figure>

<p>其中，方法的入参是statement的parameterType(很显然，因为parameterType只能有一个，方法的入参也只能有1个了)，而返回值则是statement的resultType。</p>
<p>这样便达成了目标1，同时也顺便达成了目标2：我们可以通过statement中的sql语句来确定该调用SqlSession的哪个方法。特别的，对于查询操作而言，方法的返回值决定了调用SqlSession的哪个查询方法：如果返回值是单个的，也就是上例中的那样，则调用selectOne。如果返回值是列表，比如说，写作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;UserPojo&gt;</span></pre></td></tr></table></figure>

<p>则调用selectList。如果明明查询返回的是list，而返回值硬要用单个UserPojo接的话，依然会遵循方法的返回值调用selectOne，同时抛出异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectOne(DefaultSqlSession.java:81)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:82)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:59)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.sun.proxy.$Proxy5.selectByName(Unknown Source)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.mybatisTest.MybatisTest.selectByName(MybatisTest.java:44)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.reflect.Method.invoke(Method.java:606)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)</span></pre></td></tr></table></figure>

<p>随后，我们就可以写调用代码了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.mybatisTest;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.io.Resources;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSession;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.junit.Before;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.junit.Test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.user.mapper.UserMapper;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.user.pojo.UserPojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class MybatisTest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private SqlSessionFactory sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Before</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void init() throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                 .build(Resources.getResourceAsStream(&quot;mybatis&#x2F;SqlMapConfig.xml&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void selectById() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserPojo userPojo &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            UserMapper userMapperImpl &#x3D; sqlSession.getMapper(UserMapper.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userPojo &#x3D; userMapperImpl.selectById(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(JSON.toJSONString(userPojo));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>再举一个插入的例子。UserMapper.xml中的statement为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insert&quot; parameterType&#x3D;&quot;com.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;selectKey keyProperty&#x3D;&quot;id&quot; order&#x3D;&quot;AFTER&quot; resultType&#x3D;&quot;int&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    select last_insert_id()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;selectKey&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  insert into user(name,create_time) values(#&#123;name&#125;,#&#123;create_time&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;insert&gt;</span></pre></td></tr></table></figure>

<p>UserMapper接口中添加对应方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int insert(UserPojo userPojo);</span></pre></td></tr></table></figure>

<p>最后是调用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void insert() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    UserPojo userPojo &#x3D; new UserPojo();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    userPojo.setName(&quot;八意永琳&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    userPojo.setCreate_time(new Date());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserMapper userMapperImpl &#x3D; sqlSession.getMapper(UserMapper.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(userMapperImpl.insert(userPojo));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sqlSession.commit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sqlSession.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(JSON.toJSONString(userPojo));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>需要注意的是，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlSession.commit();</span></pre></td></tr></table></figure>

<p>还是需要执行。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-DAO开发方式</title>
    <url>/2018/10/04/Mybatis-DAO%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>在<a href="/2018/10/04/Mybatis-原始开发方式/">Mybatis-原始开发方式</a>的基础上，我们引入通用的DAO(Data Access Object)开发方式，此时DAO接口及DAO实现均需程序员编写。</p>
<a id="more"></a>

<h1 id="DAO接口"><a href="#DAO接口" class="headerlink" title="DAO接口"></a>DAO接口</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.user.dao;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.user.pojo.UserPojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface UserDao &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    UserPojo selectById(int id) throws Exception;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="DAO实现"><a href="#DAO实现" class="headerlink" title="DAO实现"></a>DAO实现</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.user.dao;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSession;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.user.pojo.UserPojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class UserDaoImpl implements UserDao &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private SqlSessionFactory sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public UserDaoImpl(SqlSessionFactory sqlSessionFactory) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sqlSessionFactory &#x3D; sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public UserPojo selectById(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserPojo userPojo &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession &#x3D; this.sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userPojo &#x3D; sqlSession.selectOne(&quot;loveReimu.selectById&quot;, id);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null !&#x3D; sqlSession) sqlSession.close(); </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return userPojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.io.Resources;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.junit.Before;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.junit.Test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.user.dao.UserDaoImpl;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class MybatisTest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private SqlSessionFactory sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Before</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void init() throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder()</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                         .build(Resources.getResourceAsStream(&quot;mybatis&#x2F;SqlMapConfig.xml&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void selectById() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(JSON.toJSONString(new UserDaoImpl(this.sqlSessionFactory).selectById(2)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-原始开发方式</title>
    <url>/2018/10/04/Mybatis-%E5%8E%9F%E5%A7%8B%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>在此只给出欲使用Mybatis的依赖的最小集：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;4.12&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;scope&gt;test&lt;&#x2F;scope&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;1.7.25&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;5.1.43&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;3.4.4&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;asm&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;asm&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;3.3.1&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;cglib&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;cglib&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;3.2.5&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;org.javassist&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;javassist&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;3.21.0-GA&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h1><p>遵循<a href="/2018/10/04/Mybatis-概述/">Mybatis-概述</a>的建议，我们将全局配置文件命名为SqlMapConfig.xml：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Config 3.0&#x2F;&#x2F;EN&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-config.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;!-- 环境配置，与Spring整合后，环境配置将交由Spring管理，彼时environments标签废弃 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;environments default&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;environment id&#x3D;&quot;development&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;transactionManager type&#x3D;&quot;JDBC&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;dataSource type&#x3D;&quot;POOLED&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;driver&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;root&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;&#x2F;dataSource&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;environment&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;environments&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;mapper resource&#x3D;&quot;mybatis&#x2F;mapper&#x2F;UserMapper.xml&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;mappers&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;configuration&gt;</span></pre></td></tr></table></figure>

<h1 id="mapper配置文件"><a href="#mapper配置文件" class="headerlink" title="mapper配置文件"></a>mapper配置文件</h1><p>遵循<a href="/2018/10/04/Mybatis-概述/">Mybatis-概述</a>的建议，我们将mapper配置文件命名为UserMapper.xml(本示例只需操作一张表，因此mapper配置文件仅有一个)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!-- namespace为命名空间，其作用为分类管理SQL语句 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;!-- 只要不重名，namespace可随意命名。不过使用mapper代理开发方式后，namespace必须与Mapper接口同名 --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;mapper namespace&#x3D;&quot;loveReimu&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;!-- namespace+id唯一标识一个statement --&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;select id&#x3D;&quot;selectById&quot; parameterType&#x3D;&quot;int&quot; resultType&#x3D;&quot;com.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from user where id&#x3D; #&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;select id&#x3D;&quot;selectByName&quot; parameterType&#x3D;&quot;String&quot; resultType&#x3D;&quot;com.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    select * from user where name like &#39;$&#123;value&#125;%&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;select&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;insert id&#x3D;&quot;insert&quot; parameterType&#x3D;&quot;com.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;selectKey keyProperty&#x3D;&quot;id&quot; order&#x3D;&quot;AFTER&quot; resultType&#x3D;&quot;int&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      select last_insert_id()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;selectKey&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    insert into user(name,create_time) values(#&#123;name&#125;,#&#123;create_time&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;insert&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;delete id&#x3D;&quot;delete&quot; parameterType&#x3D;&quot;int&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    delete from user where id&#x3D;#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;delete&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;update id&#x3D;&quot;update&quot; parameterType&#x3D;&quot;com.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    update user set name&#x3D;#&#123;name&#125;,create_time&#x3D;#&#123;create_time&#125; where id&#x3D;#&#123;id&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;update&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;mapper&gt;</span></pre></td></tr></table></figure>

<p>正常写SQL脚本时可在SQL的末尾加上分号以分割。Mybatis不支持SQl后加分号。</p>
<hr>
<p>基本单位为statement，即一个select/insert/delete/update。可以认为每个statement都封装了一条SQL语句。其内部会通过parameterType完成输入映射；通过resultType完成输出映射。</p>
<hr>
<p>#{}表示一个占位符。它会自动进行Java类型向JDBC类型值的转换。例如传入一个字符串，实际执行时会自动在两边加单引号。再比如传入一个字符串类型的参数至数据库中的datetime类型，mysql会自动将其转换为日期类型(Oricle不支持该功能，传入时就必须传入日期类型)。</p>
<p>${}表示SQL的拼接符。它类似于#{}，不同之处在于不会自动进行Java类型向JDBC类型值的转换，即实际执行时维持原值。此时PreparedStatement的防注入功能失效。</p>
<hr>
<p>#{}或${}接收pojo类型的parameterType时，会使用OGNL以对象导航图的方式解析pojo的属性值。简单来说，就是可以一直.出所需参数值。例如parameterType传入的pojo类型为User，User中的sex属性同样为pojo类型。则若要取到sex中的real字段，则可用#{sex.real}。</p>
<p>OGNL在解析对象时不需要对应字段提供getter，setter方法。</p>
<hr>
<p>parameterType为传入参数类型，规定只能传入一个参数(因此如果想传入多个值的话，只能通过pojo的OGNL来保证了)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parameterType&#x3D;&quot;String&quot;</span></pre></td></tr></table></figure>

<p>也可写为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parameterType&#x3D;&quot;string&quot;</span></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parameterType&#x3D;&quot;java.lang.String&quot;</span></pre></td></tr></table></figure>

<p>如果parameterType为hashmap，则使用方式与使用OGNL解析pojo时类似。</p>
<hr>
<p>resultType为输出结果类型：</p>
<ul>
<li>pojo</li>
<li>hashmap: 会将 字段名-字段值 映射为hashmap的 key-value</li>
<li>Java基本类型: 要求查询的结果必须仅有1行1列，且结果值与对应基本类型能互相转换</li>
</ul>
<p>无论查询结果返回的是一条或多条记录，resultType均指定单条记录映射的类型。若返回的是多条记录，Mybatis会自动将其封装为List。</p>
<hr>
<p>除parameterType外，还提供parameterMap配置输入参数类型(已过时，不推荐使用)。</p>
<p>除resultType外，还提供resultMap配置输出结果类型(未过时，仍推荐使用)完成复杂数据类型映射(例如一对多映射，多对多映射)</p>
<hr>
<p>本例中，insert标签中的selectKey类似于habernate的主键返回功能。作用为得到新插入数据自增的主键值(selectKey并不仅仅可以得到主键，这只是它的应用之一)。</p>
<p>Mysql中的last_insert_id()函数可获得刚插入的自增主键值。</p>
<p>selectKey标签中的属性：</p>
<ul>
<li>keyProperty：将查得的key赋给的属性名。</li>
<li>order：返回时机。AFTER即为在本条SQL执行完成后得到所需key值。</li>
<li>resultType：selectKey标签中的SQL语句的返回值类型。</li>
</ul>
<p>若所用数据库为Orical，因Orical没有自增主键查询函数，则需使用序列实现主键生成。</p>
<hr>
<p>若Mysql表中主键未设置自增，则可用uuid函数生成主键。此时生成的时机应为本条语句执行之前。并将生成的主键作为参数插入数据库中。<br>使用uuid函数的好处为可保证主键在数据库表合并时始终全局唯一。</p>
<p>此时的insert statement应这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;insert id&#x3D;&quot;insert&quot; parameterType&#x3D;&quot;com.day1_5.user.pojo.UserPojo&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;selectKey keyProperty&#x3D;&quot;id&quot; order&#x3D;&quot;BEFORE&quot; resultType&#x3D;&quot;string&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    select uuid()</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;selectKey&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  insert into user2(id,name,create_time) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;create_time&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;insert&gt;</span></pre></td></tr></table></figure>

<p>注意：Mysql uuid()生成的id长度为36位，因此用于接收的varchar字段长度至少要为36。最后得到的id形如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6f644312-3de7-11e7-910e-1002b501dff5</span></pre></td></tr></table></figure>

<h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.io.Resources;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSession;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.junit.Before;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.junit.Test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.user.pojo.UserPojo;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class MybatisTest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private SqlSessionFactory sqlSessionFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Before</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void init() throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sqlSessionFactory &#x3D; new SqlSessionFactoryBuilder()</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                         .build(Resources.getResourceAsStream(&quot;mybatis&#x2F;SqlMapConfig.xml&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void selectById() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserPojo userPojo &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userPojo &#x3D; sqlSession.selectOne(&quot;loveReimu.selectById&quot;, 2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(JSON.toJSONString(userPojo));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void selectByName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;UserPojo&gt; userPojoList &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            userPojoList &#x3D; sqlSession.selectList(&quot;loveReimu.selectByName&quot;, &quot;八云&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(JSON.toJSONString(userPojoList));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void insert() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserPojo userPojo &#x3D; new UserPojo();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userPojo.setName(&quot;八意永琳&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userPojo.setCreate_time(new Date());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 该方法返回插入操作影响的记录数</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.insert(&quot;loveReimu.insert&quot;, userPojo);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.commit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 因配置文件中设置了selectKey，userPojo中会填入新生成的自增主键值</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(JSON.toJSONString(userPojo));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void delete() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(sqlSession.delete(&quot;loveReimu.delete&quot;, 1));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.commit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SqlSession sqlSession &#x3D; sqlSessionFactory.openSession();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UserPojo userPojo &#x3D; new UserPojo();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userPojo.setId(4);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userPojo.setName(&quot;蓬莱山辉夜&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        userPojo.setCreate_time(new Date());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(sqlSession.update(&quot;loveReimu.update&quot;, userPojo));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.commit();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sqlSession.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们使用SqlSession操作数据库，它的生成过程为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SqlSessionFactoryBuilder - SqlSessionFactory - SqlSession</span></pre></td></tr></table></figure>

<p>其中SqlSessionFactoryBuilder与SqlSessionFactory通常均是单例的，而SqlSession则应与查询一一对应。这是为什么呢？我们不妨看一下SqlSession的类定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.ibatis.session;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface SqlSession extends Closeable</span></pre></td></tr></table></figure>

<p>它有两个实现类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.ibatis.session.defaults;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class DefaultSqlSession implements SqlSession</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.ibatis.session;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SqlSessionManager implements SqlSessionFactory, SqlSession</span></pre></td></tr></table></figure>

<p>其中DefaultSqlSession为默认的实现类，在该类中，有一个成员变量为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private Executor executor;</span></pre></td></tr></table></figure>

<p>即为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Executor</span></pre></td></tr></table></figure>

<p>SqlSession内部会调用Excutor接口操作数据库。它有两个实现：</p>
<p>默认执行器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class BaseExecutor implements Executor</span></pre></td></tr></table></figure>

<p>缓存执行器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class CachingExecutor implements Executor</span></pre></td></tr></table></figure>

<p>以默认执行器的某个子类(批量操作执行器)为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class BatchExecutor extends BaseExecutor</span></pre></td></tr></table></figure>

<p>BatchExecutor有如下成员变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private String currentSql;    &#x2F;&#x2F; 封装SQL语句</span></pre></td></tr><tr><td class="code"><pre><span class="line">private MappedStatement currentStatement;    &#x2F;&#x2F; 用于封装SQL的对象。其中有statement中定义的所有内容。</span></pre></td></tr></table></figure>

<p>MappedStatement类成员变量举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private String resource;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private Configuration configuration;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private String id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private Integer fetchSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private Integer timeout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private StatementType statementType;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private ResultSetType resultSetType;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private SqlSource sqlSource;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private Cache cache;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private ParameterMap parameterMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private List&lt;ResultMap&gt; resultMaps;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private boolean flushCacheRequired;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private boolean useCache;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private boolean resultOrdered;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private SqlCommandType sqlCommandType;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private KeyGenerator keyGenerator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private String[] keyProperties;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private String[] keyColumns;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private boolean hasNestedResultMaps;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private String databaseId;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private Log statementLog;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private LanguageDriver lang;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private String[] resultSets;</span></pre></td></tr></table></figure>

<p>显然，SqlSession是线程不安全的。诸如currentSql这样的属性必须要与查询一一对应。</p>
<hr>
<p>selectById()方法在查询单条纪录时，调用了sqlSession.selectOne()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; T selectOne(String statement, Object parameter);</span></pre></td></tr></table></figure>

<p>selectByName()方法在查询多条纪录时，调用了sqlSession.selectList()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);</span></pre></td></tr></table></figure>

<p>这两个方法的第一个参数statement，均是mapper配置文件中namespace+id构成的唯一值。</p>
<p>selectOne()不能用于查询复数结果，会报错；反之，selectList()则可用于查询单条记录(可以认为list中只有一条记录)。</p>
<hr>
<p>与Spring整合后，诸如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlSession.commit();</span></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqlSession.close();</span></pre></td></tr></table></figure>

<p>均可交由Spring管理。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis-概述</title>
    <url>/2018/10/04/Mybatis-%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><p>Mybatis因其较为灵活而流行，它的前身是Apache的开源项目ibatis。2010年ibatis被apache software foundation迁移至google code，改进后更名为Mybatis，目前Mybatis托管于github上。</p>
<p>Mybatis是一个持久层框架。使用Mybatis时，程序员只需要关注SQL本身而不需要关注使用JDBC时需进行的繁琐设置，Mybatis会将SQL很好的维护起来。它通过XML或注解的方式将要执行的各种statement(Statement、PreparedStatemnt、CallableStatement)配置起来，并通过Java对象和statement中的SQL进行映射生成最终执行的SQL语句，最后由Mybatis框架执行SQL并将结果映射成Java对象并返回。</p>
<p>无论如何，Java底层均使用JDBC操作关系型数据库，而Mybatis是对JDBC的封装，因此性能较之JDBC有所下降。</p>
<a id="more"></a>

<h1 id="Mybatis与Hibernate的区别"><a href="#Mybatis与Hibernate的区别" class="headerlink" title="Mybatis与Hibernate的区别"></a>Mybatis与Hibernate的区别</h1><p>区别主要用于项目技术选型。进行技术选型时，主要考虑以下两点：</p>
<ul>
<li>降低开发成本</li>
<li>提高系统稳定性</li>
</ul>
<p><strong>Mybatis</strong></p>
<ul>
<li>入门简单。程序容易上手开发，节省开发成本。</li>
<li>需要程序员自己编写SQL语句，是一个不完全的ORM框架(Object Relational Mapping，对象关系映射)，易于进行SQL的修改及优化。</li>
<li>适合开发需求变更频繁的项目。例如：互联网电商网站等互联网项目(讲究敏捷开发，高效)。</li>
</ul>
<p><strong>Hibernate</strong></p>
<ul>
<li>入门门槛较高。难以写出性能较高的程序(需要用到缓存技术，而且这些缓存技术已过时，现在讲究的是分布式缓存)。</li>
<li>无需写SQL语句，提倡面向对象，采用完全的标准ORM框架，无法优化SQL语句。若想优化SQL语句，则必须使用Hibernate写原生态SQL的方法，此时Hibernate的优势将不复存在，换句话说，此时已没有使用Hibernate的必要，可直接使用JDBC。</li>
<li>适合开发需求变更不大，对象数据模型稳定，中小型的项目。例如：企业OA(办公自动化，Office Automation)。</li>
</ul>
<h1 id="Mybatis架构"><a href="#Mybatis架构" class="headerlink" title="Mybatis架构"></a>Mybatis架构</h1><p>按照逐渐远离用户(程序员)的顺序，Mybatis的架构为：</p>
<p><strong>配置文件</strong></p>
<ul>
<li>1个全局配置文件：通常命名为SqlMapConfig.xml</li>
<li>复数个mapper.xml文件：配置具体查询某张表时的SQL。最初ibatis的命名规则为表名.xml。Mybatis不会限定命名，但建议命名为：表名+mapper.xml。这是为了在引入mapper代理开发方式后(通常都是会引入的)，保持与mapper接口同名。</li>
</ul>
<p><strong>SqlSessionFactory</strong></p>
<p>创建SqlSession的会话工厂。</p>
<p><strong>SqlSession</strong></p>
<p>SqlSession是面向用户的接口(更直白的说，再往下的部分用户就不可见了)，接口中封装了操作数据库的方法。</p>
<p><strong>Excutor</strong></p>
<p>即为操作数据库的执行器接口，SqlSession内部调用Excutor操作数据库。Excutor接口有两个实现：</p>
<ul>
<li>默认执行器</li>
<li>缓存执行器</li>
</ul>
<p><strong>MappedStatement</strong></p>
<p>MappedStatement是Mybatis的底层封装对象，该对象封装了SQL语句。Excutor通过MappedStatement操作数据库。具体来说，MappedStatement接收输入映射传入的参数并将其封装为对象，而后Excutor调用该对象操作数据库，操作结束后通过输出映射生成结果对象。</p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-104.Maximum Depth of Binary Tree</title>
    <url>/2018/09/19/LeetcodeAlgorithms-104MaximumDepthofBinaryTree/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">Maximum Depth of Binary Tree - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/104MaximumDepthofBinaryTree/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int maxDepth(TreeNode root) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return null &#x3D;&#x3D; root ? 0 : Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class TreeNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode(int x) &#123; val &#x3D; x; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-101.Symmetric Tree</title>
    <url>/2018/09/18/LeetcodeAlgorithms-101SymmetricTree/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/symmetric-tree/description/" target="_blank" rel="noopener">Symmetric Tree - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/101SymmetricTree/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isSymmetric(TreeNode root) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return root &#x3D;&#x3D; null || isSymmetricHelp(root.left, root.right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean isSymmetricHelp(TreeNode left, TreeNode right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if(left &#x3D;&#x3D; null || right &#x3D;&#x3D; null) return left &#x3D;&#x3D; right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if(left.val !&#x3D; right.val) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return isSymmetricHelp(left.left, right.right) &amp;&amp; isSymmetricHelp(left.right, right.left);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class TreeNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode(int x) &#123; val &#x3D; x; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-100.Same Tree</title>
    <url>/2018/09/18/LeetcodeAlgorithms-100SameTree/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/same-tree/description/" target="_blank" rel="noopener">Same Tree - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/100SameTree/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (p &#x3D;&#x3D; null &amp;&amp; q &#x3D;&#x3D; null) return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (p &#x3D;&#x3D; null || q &#x3D;&#x3D; null) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (p.val !&#x3D; q.val) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.isSameTree(p.left, q.left) &amp;&amp; this.isSameTree(p.right, q.right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class TreeNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode right;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TreeNode(int x) &#123; val &#x3D; x; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-88.Merge Sorted Array</title>
    <url>/2018/09/18/LeetcodeAlgorithms-88MergeSortedArray/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/merge-sorted-array/description/" target="_blank" rel="noopener">Merge Sorted Array - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/88MergeSortedArray/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p>正向迭代，此时需要顾虑nums1的长度变化情况，因此比较臃肿。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i1 &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int lengthI1 &#x3D; m; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        int orginI1 &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i2 &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (orginI1 &lt; m &amp;&amp; i2 &lt; n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (nums2[i2] &gt;&#x3D; nums1[i1]) orginI1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.insert(nums2[i2], nums1, lengthI1, i1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lengthI1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i2++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            i1++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (orginI1 &#x3D;&#x3D; m)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; i2; i &lt; n; i++) nums1[i1++] &#x3D; nums2[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void insert(int value, int[] nums, int length, int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; length; i &gt; index; i--) nums[i] &#x3D; nums[i - 1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        nums[index] &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p>逆向迭代，看起来好多了。不过时间复杂度其实差不多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i1 &#x3D; m - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i2 &#x3D; n - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int now &#x3D; m + n - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (i1 &gt; -1 &amp;&amp; i2 &gt; -1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nums1[now--] &#x3D; (nums1[i1] &gt; nums2[i2]) ? nums1[i1--] : nums2[i2--];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (i2 &gt; -1) nums1[now--] &#x3D; nums2[i2--];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-83.Remove Duplicates from Sorted List</title>
    <url>/2018/09/17/LeetcodeAlgorithms-83RemoveDuplicatesfromSortedList/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/" target="_blank" rel="noopener">Remove Duplicates from Sorted List - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/83RemoveDuplicatesfromSortedList/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>非递归：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListNode deleteDuplicates(ListNode head) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; head) return head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode tail &#x3D; head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode now &#x3D; head.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (null !&#x3D; now) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (tail.val !&#x3D; now.val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail.next &#x3D; now;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tail &#x3D; now;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            now &#x3D; now.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tail.next &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ListNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode(int x) &#123; val &#x3D; x; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>递归：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListNode deleteDuplicates(ListNode head) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if(null &#x3D;&#x3D; head || null &#x3D;&#x3D; head.next) return head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head.next &#x3D; deleteDuplicates(head.next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return head.val &#x3D;&#x3D; head.next.val ? head.next : head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ListNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode(int x) &#123; val &#x3D; x; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-70.Climbing Stairs</title>
    <url>/2018/09/17/LeetcodeAlgorithms-70ClimbingStairs/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/climbing-stairs/description/" target="_blank" rel="noopener">Climbing Stairs - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/70ClimbingStairs/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>本题实际上就是一个斐波那契数列的变种，原始的斐波那契数列的定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F(0)&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">F(1)&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">F(n)&#x3D;F(n-1)+F(n-2) (n&gt;&#x3D;2)</span></pre></td></tr></table></figure>

<p>即是一组这样的数:0,1,1,2,3,5,8…</p>
<p>本体并未改变斐波那契数列的根本特性(后一项是前两项的和)，只是拿掉了最初的两项，同时n也从1开始了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F(1)&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">F(2)&#x3D;2</span></pre></td></tr><tr><td class="code"><pre><span class="line">F(n)&#x3D;F(n-1)+F(n-2) (n&gt;&#x3D;3)</span></pre></td></tr></table></figure>

<p>即是一组这样的数:1,2,3,5,8…</p>
<p>从最容易理解的角度来看，我们可以写出这样的递归代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int climbStairs(int n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return n &lt;&#x3D; 2 ? n : climbStairs(n - 2) + climbStairs(n - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>不过，这种解法的时间复杂度将达到恐怖的2^n。因为我们欲得到F(n)，则必须先得到F(n-1)及F(n-2)，依此类推。</p>
<p>因此，我们通常会采用如下时间复杂度为O(n)的解法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int climbStairs(int n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (n &lt;&#x3D; 2) return n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int first &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int second &#x3D; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int now &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 3; i &lt;&#x3D; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            now &#x3D; first + second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            first &#x3D; second;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            second &#x3D; now;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return now;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-69.Sqrt(x)</title>
    <url>/2018/09/17/LeetcodeAlgorithms-69Sqrtx/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/sqrtx/description/" target="_blank" rel="noopener">Sqrt(x) - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/69Sqrtx/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int mySqrt(int x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (x &lt;&#x3D; 1) return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int begin &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int end &#x3D; x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (begin &lt;&#x3D; end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int mid &#x3D; begin + (end - begin) &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int now &#x3D; x &#x2F; mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (now &#x3D;&#x3D; mid) return mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else if (now &gt; mid) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (mid + 1 &gt; x &#x2F; (mid + 1)) return mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else begin &#x3D; mid + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else end &#x3D; mid - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>显然，出题人不希望我们直接使用Math.sqrt()。</p>
<p>本解法是二分查找的变种，需要注意的是解法中使用了形如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int now &#x3D; x &#x2F; mid;</span></pre></td></tr></table></figure>

<p>的代码，其实更符合逻辑的思路应该是正向相乘：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int now &#x3D; mid * mid;</span></pre></td></tr></table></figure>

<p>不过，这样会有溢出的风险，因此还是应该用题中除法的形式。</p>
<p>另外，0是不能做除数的，因此一开始的边界判断也一定要做好。</p>
]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-67.Add Binary</title>
    <url>/2018/09/17/LeetcodeAlgorithms-67AddBinary/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/add-binary/description/" target="_blank" rel="noopener">Add Binary - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/67AddBinary/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String addBinary(String a, String b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a || a.length() &#x3D;&#x3D; 0) return b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; b || b.length() &#x3D;&#x3D; 0) return a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int ia &#x3D; a.length() - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int ib &#x3D; b.length() - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean mark &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (ia &gt;&#x3D; 0 || ib &gt;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            char ta &#x3D; ia &gt;&#x3D; 0 ? a.charAt(ia) : &#39;0&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            char tb &#x3D; ib &gt;&#x3D; 0 ? b.charAt(ib) : &#39;0&#39;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (ta &#x3D;&#x3D; &#39;0&#39; &amp;&amp; tb &#x3D;&#x3D; &#39;0&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (mark) sb.append(&#39;1&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else sb.append(&#39;0&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                mark &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else if (ta &#x3D;&#x3D; &#39;1&#39; &amp;&amp; tb &#x3D;&#x3D; &#39;1&#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (mark) sb.append(&#39;1&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else sb.append(&#39;0&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                mark &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (mark) sb.append(&#39;0&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else sb.append(&#39;1&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ia--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ib--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (mark) sb.append(&#39;1&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return sb.reverse().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-66.Plus One</title>
    <url>/2018/09/17/LeetcodeAlgorithms-66PlusOne/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/plus-one/description/" target="_blank" rel="noopener">Plus One - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/66PlusOne/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int[] plusOne(int[] digits) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; digits || digits.length &#x3D;&#x3D; 0) return digits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int now &#x3D; digits.length - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (now &gt;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (digits[now] !&#x3D; 9) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                digits[now]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            digits[now--] &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (now &#x3D;&#x3D; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int[] result &#x3D; new int[digits.length + 1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result[0] &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; 0; i &lt; digits.length; i++) result[i + 1] &#x3D; digits[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return digits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-58.Length of Last Word</title>
    <url>/2018/09/17/LeetcodeAlgorithms-58LengthofLastWord/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/length-of-last-word/description/" target="_blank" rel="noopener">Length of Last Word - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/58LengthofLastWord/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int lengthOfLastWord(String s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; s || s.length() &#x3D;&#x3D; 0) return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String[] a &#x3D; s.split(&quot; &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return a.length &#x3D;&#x3D; 0 ? 0 : a[a.length - 1].length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-53.Maximum Subarray</title>
    <url>/2018/09/17/LeetcodeAlgorithms-53MaximumSubarray/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/maximum-subarray/description/" target="_blank" rel="noopener">Maximum Subarray - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/53MaximumSubarray/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p>最为笨拙的暴力穷举解法，时间复杂度O(n2)。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int maxSubArray(int[] nums) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums || nums.length &#x3D;&#x3D; 0) return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; nums[0];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int temp &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int j &#x3D; i; j &lt; nums.length; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp +&#x3D; nums[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (temp &gt; result) result &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p>这是一个时间复杂度为O(n)解法。</p>
<p>定义3个变量：</p>
<ul>
<li>max:当前已找到的最大和。遍历结束后返回的即是该值。</li>
<li>now:当前求和的起始元素。这个值并未在代码中显式定义，而是隐含在sum中。</li>
<li>sum:当前求得的和。</li>
</ul>
<p>我们不妨先将问题分为两类：全为负数的情况及并非全为负数的情况。</p>
<p>当数组中的元素全部为负数时，此时将元素相加毫无意义(因为只会越加越小)，此时问题将退化为筛选出数组中最大的元素。即每次循环均有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum&#x3D;nums[i]</span></pre></td></tr></table></figure>

<p>然后和max比较以筛选出最大值。</p>
<p>当数组中的元素并非全为负数时，一旦某次加法进行后导致和变为了负数，说明此次加法操作肯定是不应该的：毕竟本情况下数组中是有非负数的，单拎出来最大值也不会是负数。此时就应更换起点，然后和历史上得到的最大值做比较。依次类推，最终返回最大值。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int maxSubArray(int[] nums) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums || nums.length &#x3D;&#x3D; 0) return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int max &#x3D; Integer.MIN_VALUE, sum &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sum &#x3D; sum &lt; 0 ? nums[i] : sum + nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (sum &gt; max) max &#x3D; sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return max;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-38.Count and Say</title>
    <url>/2018/09/14/LeetcodeAlgorithms-38CountandSay/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/count-and-say/description/" target="_blank" rel="noopener">Count and Say - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/38CountandSay/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String countAndSay(int n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (n &lt; 1 || n &gt; 30) return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String str &#x3D; &quot;1&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 1; i &lt; n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            StringBuilder sb &#x3D; new StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int mark &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (mark &lt; str.length()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int count &#x3D; numberCount(str, mark);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sb.append(count).append(str.charAt(mark));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                mark +&#x3D; count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            str &#x3D; sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int numberCount(String str, int mark) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int count &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (mark &lt; str.length() - 1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (str.charAt(mark + 1) !&#x3D; str.charAt(mark)) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            mark++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-35.Search Insert Position</title>
    <url>/2018/09/14/LeetcodeAlgorithms-35SearchInsertPosition/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/search-insert-position/description/" target="_blank" rel="noopener">Search Insert Position - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/35SearchInsertPosition/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int searchInsert(int[] nums, int target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums) return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int low &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int high &#x3D; nums.length - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (low &lt;&#x3D; high) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int mid &#x3D; low + (high - low) &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (target &#x3D;&#x3D; nums[mid]) return mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (target &lt; nums[mid]) high &#x3D; mid - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else low &#x3D; mid + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return low;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>本问题是二分查找的变种。当target在nums中时，和普通的二分查找一样返回mid即可。需要说明的是，当没有找到时，为何返回了low。</p>
<p>当无法找到时，最后一次查找必在相邻两个元素之间进行，即必有</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">high&#x3D;low+1</span></pre></td></tr><tr><td class="code"><pre><span class="line">mid&#x3D;low+(high-low)&#x2F;2&#x3D;low</span></pre></td></tr></table></figure>

<p>本次若是找到，即得出mid=target，那是最好。此时直接返回mid即可。若是找不到，在target&lt;mid时应返回low，而target&gt;mid时应返回high。我们可以回看代码，第一种情况下比较后low没有改变；而第二种情况下比较后low=mid+1，即low=low+1，恰好等于需要的high了。因此在最后一次比较结束后，直接返回low即可。</p>
]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-28.Implement strStr()</title>
    <url>/2018/09/14/LeetcodeAlgorithms-28ImplementstrStr/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/implement-strstr/description/" target="_blank" rel="noopener">Implement strStr() - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/28ImplementstrStr/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>显然，出题人希望我们能自行实现这个功能，而不是直接调用indexOf()或startsWith()。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int strStr(String haystack, String needle) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; haystack) throw new NullPointerException(&quot;haystack is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; needle) return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hl &#x3D; haystack.length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int nl &#x3D; needle.length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (nl &#x3D;&#x3D; 0) return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (nl &gt; hl) return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int hStart &#x3D; 0; hStart &lt;&#x3D; hl - nl; hStart++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String temp &#x3D; haystack.substring(hStart, hStart + nl);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (needle.equals(temp)) return hStart;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-23.Interpreter模式</title>
    <url>/2018/09/10/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-23Interpreter%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Interpreter模式被归入了第10部分<a href="">用类来表现</a>。在GoF原书中，Interpreter模式则被归入了<a href="">行为型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>现今主流的编程语言依然都属于第三代编程语言，这些语言的文法接近人类的自然语言，对程序员极其友好。然而实际执行程序的机器依然只能识别第一代编程语言(也就是一串1和0组成的流啦)，这就导致了，无论使用何种第三代编程语言，是Java也好，还是C++也罢，虽然具体的实现细节依语言不同而千差万别，但终归都需要进行一种操作：将程序员编写的高级语言代码翻译为机器能够识别的01码。</p>
<p>下面我们就以Java为例，来相对详细的说说这个过程。</p>
<p>和大多直接由高级语言翻译(编译执行与解释执行只是手段，其本质目的都还是翻译)为机器语言不同的是，Java将它内部的翻译过程又分为了两个阶段(当然，对外部使用者，也就是实际执行机器码的机器而言，这个过程是黑盒的)：首先会从程序员编写的，人类能够识别的Java语言翻译为.class文件(编译期)。而后再将.class文件翻译为机器能识别的机器码。</p>
<p>简单来说，程序员编写的Java语言遵循着一套语法(不妨标记为语法1)，机器识别机器码时遵循着另一套语法(语法3)。在此之外，Java又在其内部搞出了一个.class文件(语法2)。这样翻译链的顺序就变为了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法1 --&gt; 语法2 --&gt; 语法3</span></pre></td></tr></table></figure>

<p>之所以要这么搞，是为了实现Java语言的语言无关性。详见<a href="/2017/10/16/Java基础-技术体系/">Java 基础-技术体系</a>。</p>
<p>且不说翻译了几次，单说翻译行为本身，它的作用大致可归为以下两点：</p>
<ol>
<li>虽然翻译本身增加了额外的开销，却使得程序员得以用更加类似自然语言的语法编写程序，极大的降低了学习成本，同时提高了代码编写的便利性与可维护性。</li>
<li>完成了各级语言间的解耦。以语法1 –&gt; 语法2的过程为例。Java程序员只需要知道Java语言的语法，而它的翻译者(我们称其为编译器)在此基础上还需要知道.class文件的语法。这意味着，无论是语法1亦或是语法2发生了何种变化，只要另一种语法尚能实现相同的功能，那么对彼此而言，这种变化就是透明的：它会被翻译者消化掉。从这种意义上来讲，翻译者颇有些<a href="">2.Adapter模式</a>中的适配器的意思。</li>
</ol>
<p>将这种思想进一步扩展，得到的就是Interpreter模式。</p>
<p>主流的高级编程语言都是通用的，虽然各有擅长的点，但基本都能胜任绝大多数场景。而这种通用的另一面就是不够特化：高级语言语法的设计者当然不可能因为某个需求就修改语法。不过，高级语言的设计者虽然不能这么做，但需求的设计者却可以这样做：也就是说，我们为某个需求，或是某一类需求，定制一种”迷你语言”。如果我们将其称之为”语法0”的话，那么上文的翻译链就变为了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法0 --&gt; 语法1 --&gt; 语法2 --&gt; 语法3</span></pre></td></tr></table></figure>

<p>如果想要这么做的话，我们当然也可以在语法0前面加上个”语法-1”，使得翻译链无限的向上堆叠上去，只不过这会让程序变得复杂，而这种复杂通常是没什么意义的，所以通常都不会这么做。</p>
<p>具体到这个应用场景，我们再来说下引入”语法0”的好处：</p>
<ol>
<li>较之高级语言，迷你语言的语法简单，且为需求高度定制。使得代码(此时程序员写的当然就是迷你语言的代码啦)的书写更为容易，目的性也更强。</li>
<li>在这个场景下，高级语言的语法一般不会发生变化，迷你语言的语法通常也不会发生变化。发生变化的基本只会是使用迷你语言编写的代码。</li>
</ol>
<p>如果要使用Interpreter模式编写程序的话，难点通常并不是在于编写迷你语言本身，而是在于编写”语法0 –&gt; 语法1”的翻译器。因为迷你语言完全是程序员根据需求生造出来的，只有他自己才知道语法，因此也只有他本身才能编写翻译器。这也是Interpreter模式被称为”解释器模式”的原因所在。通常翻译器我们都会用”语法1”，也就是作为基底的高级语言来开发。</p>
<h1 id="控制人物移动的迷你语言"><a href="#控制人物移动的迷你语言" class="headerlink" title="控制人物移动的迷你语言"></a>控制人物移动的迷你语言</h1><p>下面我们就针对”控制人物移动”这个需求来创建一门全新的迷你语言吧！</p>
<p>首先介绍下本文用于作为行走角色的妹子，来自东方Project的<a href="https://baike.baidu.com/item/%E4%BC%8A%E5%90%B9%E8%90%83%E9%A6%99/8771754?fr=aladdin" target="_blank" rel="noopener">伊吹萃香</a>：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>萃香好可爱啊~融化了。</p>
<p>这是用到的行走图素材，也是萌萌哒：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/1.png" alt="1.png"></p>
<p>按需求，我们可以向人物下达如下3种指令：</p>
<ul>
<li>前进1个长度单位(go)</li>
<li>右转(right)</li>
<li>左转(left)</li>
</ul>
<p>其中左转与右转是严格意义上的原地转向。在此之上，为了构成一个相对复杂的语言，我们引入了新的指令：</p>
<ul>
<li>重复(repeat)</li>
</ul>
<p>这可以让人物重复一定次数的指令集合。至此，我们已得到构成本文迷你语言的全部指令。</p>
<p>要想被称之为一门语言，光有指令(相当于自然语言中的单词)是不够的，我们还需要规定一个语法将它们组合起来。对于本文的迷你语言，我们先来看一段最简单的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">end</span></pre></td></tr></table></figure>

<p>我们规定，这门迷你语言必须以program开头，后面跟随着指令集合(command list)。command list必须以end结尾。如果command list为空，那么就会出现上文中program后面直接跟着一个end的情况啦。显然，上述代码不会产生任何实际的效果。</p>
<p>程序可以采用换行，空格，tab等任何主流的分隔符，这意味上述代码我们也可以写成这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program end</span></pre></td></tr></table></figure>
<p>不过为了便于阅读，对于书写任意语言而言，适当的缩进都是很必要的。</p>
<p>然后我们再来看一段稍微复杂点的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">  go go right</span></pre></td></tr><tr><td class="code"><pre><span class="line">  go go right</span></pre></td></tr><tr><td class="code"><pre><span class="line">  go go right</span></pre></td></tr><tr><td class="code"><pre><span class="line">  go go right</span></pre></td></tr><tr><td class="code"><pre><span class="line">end</span></pre></td></tr></table></figure>

<p>程序会按指令的书写顺序执行它们。执行这段指令，可以输出：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>该代码会让人物走一个正方形，而后回到初始的位置和朝向。为了在静态的图片中表现出代码的执行过程，我们绘制了人物移动的轨迹。</p>
<p>如果仔细看一下上述代码的话，会发现我们将：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">go go right</span></pre></td></tr></table></figure>

<p>这个代码片段重复写了4遍。显然这是很low的行为。因此就需要repeat指令登场啦：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">  repeat 4 go go right end</span></pre></td></tr><tr><td class="code"><pre><span class="line">end</span></pre></td></tr></table></figure>

<p>repeat指令的语法规则为：首先是作为关键字的repeat，然后是表示循环次数的数字。最后是实际被循环的command list。执行该代码后输出与前图相同。</p>
<p>我们可以再来走一个更复杂的轨迹：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">  repeat 1000</span></pre></td></tr><tr><td class="code"><pre><span class="line">    repeat 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">      repeat 3 go right go left end</span></pre></td></tr><tr><td class="code"><pre><span class="line">      right</span></pre></td></tr><tr><td class="code"><pre><span class="line">    end</span></pre></td></tr><tr><td class="code"><pre><span class="line">  end</span></pre></td></tr><tr><td class="code"><pre><span class="line">end</span></pre></td></tr></table></figure>

<p>这段代码会重复一个相对复杂的轨迹1000次，贴几张移动过程中的截图吧：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/4.jpg" alt="4.jpg"></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/5.jpg" alt="5.jpg"></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/6.jpg" alt="6.jpg"></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/7.jpg" alt="7.jpg"></p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>迷你语言的语法结构至此就算是结束了，该语言非常简单，简单到只有顺序和循环结构，连分支结构都没有。不过用来作说明已经是足够了。此外，上文我们是以自然语言在进行描述，也就是说给产品经理听的。而技术人员如果要将该语法落实到代码中，还需要用更为准确的数学语言来描述才可以。</p>
<p>本文采取的描述方法为EBNF(Extended Backus–Naur Form，即扩展的巴科斯-瑙尔范式)。顾名思义，它是对BNF(Backus-Naur Form，巴科斯范式)的扩展。我们先给出全部的语法描述：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;program&gt; ::&#x3D; program &lt;command list&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;command list&gt; ::&#x3D; &lt;command&gt;* end</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;command&gt; ::&#x3D; &lt;repeat command&gt; | &lt;primitive command&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;repeat command&gt; ::&#x3D; repeat &lt;number&gt; &lt;command list&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;primitive command&gt; ::&#x3D; go | left | right</span></pre></td></tr></table></figure>

<p>较之自然语言，是不是简洁了许多呢(事实上，不仅仅是看起来简洁了，也更为精确了)？下面就来逐句分析一下吧！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;program&gt; ::&#x3D; program &lt;command list&gt;</span></pre></td></tr></table></figure>

<p>首先是第一句，这个::=我们简单的理解为赋值就可以啦！该句用于描述&lt;program&gt;这个标签，或者更确切的说，是构成语法树的&lt;program&gt;结点。按照描述，&lt;program&gt;节点就是program关键字后跟上一个&lt;command list&gt;。</p>
<p>至此&lt;program&gt;算是描述完了，但是我们却无法真正能说完全了解它，program作为一个普通的字符串没什么可说的，不过这个&lt;command list&gt;是什么呢？这就好比表达式y=x+3，如果我们不知道x是什么，自然也不能知道y是什么。</p>
<p>不过不要急，第二句就是在描述&lt;command list&gt;啦：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;command list&gt; ::&#x3D; &lt;command&gt;* end</span></pre></td></tr></table></figure>

<p>哦，原来&lt;command list&gt;是0到多个(描述范式中*所代表的含义，熟悉正则的朋友们应该会感到很亲切吧)&lt;command&gt;节点后再加上end关键字。那么这个&lt;command&gt;是什么呢：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;command&gt; ::&#x3D; &lt;repeat command&gt; | &lt;primitive command&gt;</span></pre></td></tr></table></figure>

<p>范式告诉我们，&lt;command&gt;是一个&lt;repeat command&gt;结点或是一个&lt;primitive command&gt;结点。</p>
<p>而&lt;repeat command&gt;：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;repeat command&gt; ::&#x3D; repeat &lt;number&gt; &lt;command list&gt;</span></pre></td></tr></table></figure>

<p>它是repeat关键字后跟随一个&lt;number&gt;结点，再跟随一个前文介绍过的&lt;command list&gt;结点。从而形成了递归结构。</p>
<p>最后是&lt;primitive command&gt;：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;primitive command&gt; ::&#x3D; go | left | right</span></pre></td></tr></table></figure>

<p>它是go,left,right这3个关键字中的某一个。在编程领域，像&lt;primitive command&gt;这样描述它的信息中不包含其他结点的，或者更直观的说，我们可以仅仅通过描述语句本身就完全弄明白含义的结点，被称为终结符表达式(Terminal Expression)。与之相对的，像&lt;command list&gt;，&lt;command&gt;等需要进一步展开的结点则被称为非终结符表达式(Nonterminal Expression)。所谓递归，其实就是因非终结符表达式而起，最后收束于终结符表达式。</p>
<p>细心的朋友想必可以发现，我们还剩一个&lt;number&gt;结点没有描述。其实是应该写的，它应该是一个大于等于0的整数，是一个终结符表达式。只不过它的描述较为复杂，这里便省略了。</p>
<p>完成了语法的数学化描述后，下一步就是根据该描述将迷你语言的代码依据语法规则翻译为语法树，并存入宿主语言(本文使用Java)中，这一步被称为解析。而后再执行语法树中存储的语义，得到输出。这么说还是会有一些抽象，还是让我们赶紧来看具体的代码吧。</p>
<p>本程序中的所有代码将被统一置于design23包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/8.jpg" alt="8.jpg"></p>
<p>迷你语言的示例程序使用前文介绍过的那个重复绘制1000次的复制图形。它被存储在名为code.txt的文件中。</p>
<p><strong>code.txt</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">program</span></pre></td></tr><tr><td class="code"><pre><span class="line">  repeat 1000</span></pre></td></tr><tr><td class="code"><pre><span class="line">    repeat 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">      repeat 3 go right go left end</span></pre></td></tr><tr><td class="code"><pre><span class="line">      right</span></pre></td></tr><tr><td class="code"><pre><span class="line">    end</span></pre></td></tr><tr><td class="code"><pre><span class="line">  end</span></pre></td></tr><tr><td class="code"><pre><span class="line">end</span></pre></td></tr></table></figure>

<p>然后我们介绍本文的重点，也就是model.parse包下的内容。这个包下的代码完成了前文说到的迷你语言的语法树的构建(即解析)以及执行。秉承Java语言”一切都是对象，对象就是一切”的思想，上文介绍的EBNF中的结点最终都被翻译为了类，这在后文的代码中将会有很明显的体现。</p>
<p><strong>Node类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.GameMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Node &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void parse(Context context) throws ParseException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void exe(GameMap map);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Node类是所有结点的抽象父类。按照需求，它约束自身的子类必须实现两个基本的功能：parse() –&gt; 解析 及 exe() –&gt; 执行。很显然，这两个方法的调用是有先后顺序的，即我们必须先完成解析，形成语法树，才能执行。</p>
<p>在解析方法parse()的方法定义中，我们抛出了自定义异常ParseException：</p>
<p><strong>ParseException类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ParseException extends Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ParseException(String msg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(msg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这只是一个很简单的异常类，就不多做赘述了。</p>
<p><strong>ProgramNode类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.GameMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * &lt;program&gt; ::&#x3D; program &lt;command list&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ProgramNode extends Node &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private CommandListNode commandListNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String PROGRAM_STR &#x3D; &quot;program&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void parse(Context context) throws ParseException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        context.skip(ProgramNode.PROGRAM_STR);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandListNode &#x3D; new CommandListNode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandListNode.parse(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;[&quot; + ProgramNode.PROGRAM_STR + &quot; &quot; + this.commandListNode + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void exe(GameMap map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandListNode.exe(map);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>终于到EBNF中介绍的真正的结点了。很显然，ProgramNode对应&lt;program&gt;，这在类首的注释中也有所体现。我们会为每一个结点都加上类似的类首注释，以表明它代表的是EBNF中的哪个结点，因此后文在介绍其他结点时就不会再显式的点出这种对应关系了。</p>
<p>关于将EBNF翻译为实际的类，有一个很重要的点就是”不要做多余的事”。简单来说，在我们编写ProgramNode时，能参照的就仅仅只是:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;program&gt; ::&#x3D; program &lt;command list&gt;</span></pre></td></tr></table></figure>

<p>其他的一切都不需要知道。也不要耍小聪明做一些EBNF中没有的事，如果实在是想加新功能，也需要修改EBNF，而不是在翻译出的代码中自作主张。语法的设计在EBNF中已全部完成了，从EBNF到具体的代码仅仅只需要机械的翻译。</p>
<p>因此，这些结点的代码本身其实没什么好说的，后续结点的代码我们将快速的贴出。</p>
<p><strong>CommandListNode类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.GameMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * &lt;command list&gt; ::&#x3D; &lt;command&gt;* end</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class CommandListNode extends Node &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;CommandNode&gt; commandList &#x3D; new ArrayList&lt;CommandNode&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void parse(Context context) throws ParseException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String current &#x3D; context.peek();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String endstr &#x3D; &quot;end&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null &#x3D;&#x3D; current) throw new ParseException(&quot;Missing &#39;&quot; + endstr + &quot;&#39;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (endstr.equals(current)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                context.skip(endstr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            CommandNode commandNode &#x3D; new CommandNode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.commandList.add(commandNode);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            commandNode.parse(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.commandList.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void exe(GameMap map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (CommandNode commandNode : this.commandList)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            commandNode.exe(map);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>CommandNode类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.GameMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * &lt;command&gt; ::&#x3D; &lt;repeat command&gt; | &lt;primitive command&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class CommandNode extends Node &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private CommandNode commandNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected static final String REPEAT_STR &#x3D; &quot;repeat&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void parse(Context context) throws ParseException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandNode &#x3D; CommandNode.REPEAT_STR.equals(context.peek()) ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           new RepeatCommandNode() :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           new PrimitiveCommandNode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandNode.parse(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.commandNode.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void exe(GameMap map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandNode.exe(map);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>RepeatCommandNode类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.GameMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * &lt;repeat command&gt; ::&#x3D; repeat &lt;number&gt; &lt;command list&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class RepeatCommandNode extends CommandNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int number;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private CommandListNode commandListNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void parse(Context context) throws ParseException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        context.skip(CommandNode.REPEAT_STR);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.number &#x3D; Integer.parseInt(context.peek());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (NumberFormatException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ParseException(&quot;fail to parse &quot; + CommandNode.REPEAT_STR + &quot; times.&quot; + e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        context.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandListNode &#x3D; new CommandListNode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commandListNode.parse(context);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;[&quot; + CommandNode.REPEAT_STR + &quot; &quot; + this.number + &quot; &quot; + this.commandListNode + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void exe(GameMap map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; this.number; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.commandListNode.exe(map);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>PrimitiveCommandNode类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.GameMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.Grid;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * &lt;primitive command&gt; ::&#x3D; go | left | right</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class PrimitiveCommandNode extends CommandNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static final String GO &#x3D; &quot;go&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static final String LEFT &#x3D; &quot;left&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static final String RIGHT &#x3D; &quot;right&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void parse(Context context) throws ParseException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; context.peek();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        context.skip(this.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!PrimitiveCommandNode.GO.equals(this.name) &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            !PrimitiveCommandNode.LEFT.equals(this.name) &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            !PrimitiveCommandNode.RIGHT.equals(this.name))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ParseException(&quot;command &quot; + this.name + &quot; is undefined&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void exe(GameMap map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int maxR &#x3D; map.getGrids().length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int maxC &#x3D; map.getGrids()[0].length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int focusR &#x3D; map.getFocusR();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int focusC &#x3D; map.getFocusC();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Grid focusGrid &#x3D; map.getGrids()[focusR][focusC];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int direction &#x3D; focusGrid.getDirection();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (PrimitiveCommandNode.GO.equals(this.name)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int newFocusR &#x3D; focusR;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int newFocusC &#x3D; focusC;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            switch (direction) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 0:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (focusR + 1 &#x3D;&#x3D; maxR) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newFocusR &#x3D; focusR + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (focusC &#x3D;&#x3D; 0) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newFocusC &#x3D; focusC - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (focusC + 1 &#x3D;&#x3D; maxC) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newFocusC &#x3D; focusC + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 3:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (focusR &#x3D;&#x3D; 0) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                newFocusR &#x3D; focusR - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 模拟走路动作</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; 0; i &lt; map.getStageCount(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setStage((focusGrid.getStage() + 1) % map.getStageCount());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (i &#x3D;&#x3D; map.getStageCount() &#x2F; 2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 设置新的焦点格</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    map.getGrids()[newFocusR][newFocusC].setDirection(direction);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    map.getGrids()[newFocusR][newFocusC].setStage(focusGrid.getStage());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    map.getGrids()[newFocusR][newFocusC].setTimes(map.getGrids()[newFocusR][newFocusC].getTimes() + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    map.setFocusR(newFocusR);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    map.setFocusC(newFocusC);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 设置原来的焦点格</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    focusGrid.setDirection(-1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    focusGrid.setStage(-1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else if (PrimitiveCommandNode.LEFT.equals(this.name)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            switch (direction) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 0:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(3);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 3:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            switch (direction) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 0:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 1:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(3);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case 3:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                focusGrid.setDirection(2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>至此，所有的结点我们都介绍完了。不过，为了能让翻译器接收到源码，我们还写了Context类：</p>
<p><strong>Context类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.parse;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.StringTokenizer;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Context &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private StringTokenizer st;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String current;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Context(String text) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.st &#x3D; new StringTokenizer(text);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String peek() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.current &#x3D; this.st.hasMoreTokens() ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       this.st.nextToken() :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void skip(String token) throws ParseException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!token.equals(this.current))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ParseException(&quot;need &quot; + token + &quot;, but &quot; + this.current + &quot; is found&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Context类的功能很简单，它将源码按分割符分割为一个个单词，然后作为解析器会逐个读取单词，而后根据单词生成新的结点，并将结点挂载到语法树合适的位置上。随着语法树的构建，Context中的文本信息会越来越少，直至读完。</p>
<p>至此，本文要介绍的核心功能就已经描述完了。后文要介绍的代码都只是为了得到一个可视化的结果。</p>
<p>首先来看model.entity包，这个包下存储了程序要展示的一些实体。一如前文中的截图看到的，我们希望游戏最终能实现RPG制作大师做出的游戏的效果。因此我们需要一张存储所有要素的游戏地图，该地图是由一个个”小格子”组成的。</p>
<p><strong>GameMap类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.entity;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameMap &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Grid[][] grids;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int focusR;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int focusC;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int stageCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param row 地图上小格子的行数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param column 地图上小格子的列数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param stageCount 人物的行走状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param focusR 初始时人物所在的小格子的行号</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param focusC 初始时人物所在的小格子的列号</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param initDirection 初始时人物的朝向 </span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public GameMap(int row, int column, int stageCount, int focusR, int focusC, int direction) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.stageCount &#x3D; stageCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.grids &#x3D; new Grid[row][column];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int r &#x3D; 0; r &lt; row; r++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int c &#x3D; 0; c &lt; column; c++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.grids[r][c] &#x3D; new Grid();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.focusR &#x3D; focusR;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.focusC &#x3D; focusC;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.grids[this.focusR][this.focusC].setDirection(direction);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.grids[this.focusR][this.focusC].setStage(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.grids[this.focusR][this.focusC].setTimes(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Grid[][] getGrids() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return grids;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getFocusR() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return focusR;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setFocusR(int focusR) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.focusR &#x3D; focusR;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getFocusC() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return focusC;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setFocusC(int focusC) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.focusC &#x3D; focusC;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getStageCount() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return stageCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Grid类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model.entity;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Grid &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int direction &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int stage &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int times;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getDirection() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return direction;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setDirection(int direction) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.direction &#x3D; direction;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getStage() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return stage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setStage(int stage) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.stage &#x3D; stage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getTimes() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return times;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setTimes(int times) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.times &#x3D; times;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>调用了GameMap的构造函数后，我们便构建了这样的一张地图：</p>
<ul>
<li>row行column列</li>
<li>初始时人物所在的格子位置：grids[this.focusR][this.focusC]</li>
<li>只会有一个格子处于焦点状态。未处于焦点状态的格子的direction和stage均默认为-1。</li>
<li>Grid的times属性是指人物来到该格子上的次数，绘制轨迹用。</li>
</ul>
<p>这里需要简单介绍下direction与stage的含义。其中direction表示人物当前的朝向。而stage则表示行走状态，在人物从1个格子移动到另一个格子的过程中，我们一共会变化出3张图片，从而模拟出”人物移动的动作”。</p>
<p>这两个字段实际都是服务于图character.png：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23Interpreter%E6%A8%A1%E5%BC%8F/9.png" alt="9.png"></p>
<p>纵向来看，0-3分别代表下左右上四个朝向。而横向的0-2则代表三个行走状态：站立不动是中间的那张状态1。当人物从一个格子移动到另一个格子上时，发生的变化为：状态1 –&gt; 状态2 –&gt; 状态0 –&gt; 状态1。</p>
<p>然后我们提供了将parse包及entity包整合起来并对外(指得就是View啦)提供功能接口的Model类：</p>
<p><strong>Model类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStreamReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.commons.lang.StringUtils;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.GameMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.parse.Context;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.parse.ParseException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.parse.ProgramNode;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Model &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private GameMap map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ProgramNode root &#x3D; new ProgramNode();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void initMap(int row, int column, int stageCount, int focusR, int focusC, int direction) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.map &#x3D; new GameMap(row, column, stageCount, focusR, focusC, direction);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void initInterpreter(String path) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.root.parse(new Context(this.loadCode(path)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ParseException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(this.root);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void exe() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Model.this.root.exe(Model.this.map);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public GameMap getMap() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String loadCode(String path) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileInputStream fi &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        InputStreamReader ir &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedReader br &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fi &#x3D; new FileInputStream(new File(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ir &#x3D; new InputStreamReader(fi, &quot;UTF-8&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            br &#x3D; new BufferedReader(ir);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String lineTxt &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (!StringUtils.isBlank((lineTxt &#x3D; br.readLine())))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sb.append(lineTxt).append(&quot; &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                br.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ir.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                fi.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (Exception ef) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ef.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后是作为GUI显示的View类，本文使用Java AWT：</p>
<p><strong>View类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23.view;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.Model;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.model.entity.Grid;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class View extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int gridSize &#x3D; 32;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int widebar &#x3D; 31;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int narrowbar &#x3D; 6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Model model &#x3D; new Model();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private BufferedImage img &#x3D; this.loadImg(&quot;character.png&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int gridRow &#x3D; 7;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int gridColumn &#x3D; 7;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.model.initMap(gridRow, gridColumn, 3, 3, 0, 3);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.model.initInterpreter(&quot;src&#x2F;main&#x2F;java&#x2F;design23&#x2F;code.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(800, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(this.narrowbar + this.gridSize * gridColumn + this.narrowbar, this.widebar + this.gridSize * gridRow + this.narrowbar);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.model.exe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Grid[][] grids &#x3D; this.model.getMap().getGrids();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int r &#x3D; 0; r &lt; grids.length; r++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int c &#x3D; 0; c &lt; grids[0].length; c++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Grid grid &#x3D; grids[r][c];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int dx1 &#x3D; this.narrowbar + c * this.gridSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int dy1 &#x3D; this.widebar + r * this.gridSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (grid.getTimes() &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Color tempColor &#x3D; g.getColor();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    g.setColor(Color.GRAY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    g.fillRect(dx1, dy1, this.gridSize, this.gridSize);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    g.setColor(tempColor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (grid.getDirection() &gt;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int direction &#x3D; grid.getDirection();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int stage &#x3D; grid.getStage();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    g.drawImage(this.img,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                dx1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                dy1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                this.narrowbar + c * this.gridSize + this.gridSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                this.widebar + r * this.gridSize + this.gridSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                stage * this.gridSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                direction * this.gridSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                stage * this.gridSize + this.gridSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                direction * this.gridSize + this.gridSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    View.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image bImage &#x3D; super.createImage(this.getWidth(), this.getHeight());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics bg &#x3D; bImage.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.paint(bg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bg.dispose();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(bImage, 0, 0, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private BufferedImage loadImg(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bImage &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bImage &#x3D; ImageIO.read(View.class.getClassLoader().getResource(&quot;design23&#x2F;&quot; + name));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return bImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在View的launchFrame()中，我们先调用model的initMap()初始化了地图，而后又调用model的initInterpreter()初始化了语法树。而后在需要的时候，也就是launchFrame()的最后，我们调用model的exe()方法来执行语法树。该方法会启一个新的线程，按设定的代码移动人物(其实就是改变地图中属性的值)。而View剩余要做的，就是不断的刷新并显示地图，将翻译器更新后的数据显示出来。</p>
<p>最后给出Main.java。执行该类后，即可得到结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design23;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design23.view.View;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new View().launchFrame();        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>需要注意的是，因为我们在Model初始化语法树时将语法树打印出来了。因此除了UI外，我们还会在控制台中得到这样的一句输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program [[repeat 1000 [[repeat 4 [[repeat 3 [go, right, go, left]], right]]]]]]</span></pre></td></tr></table></figure>

<p>大家可以对照前文的EBNF加深理解。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Interpreter模式的Java实现，下面咱们试着跳出语言层面，抽象出Interpreter模式中登场的角色。</p>
<p><strong>AbstractExpression(抽象表达式)</strong></p>
<p>定义结点的基本约束。在示例程序中，由Node类扮演这个角色。</p>
<p><strong>TerminalExpression(终结符表达式)</strong></p>
<p>即EBNF中的终结符表达式，在示例程序中，由PrimitiveCommandNode类扮演这个角色。</p>
<p><strong>NonterminalExpression(非终结符表达式)</strong></p>
<p>即EBNF中的非终结符表达式，在示例程序中，由ProgramNode类，CommandListNode类，CommandNode类，RepeatCommandNode类联袂扮演这个角色。</p>
<p><strong>Context(上下文)</strong></p>
<p>在示例程序中，由Context类扮演这个角色。</p>
<h1 id="迷你语言可以有哪些？"><a href="#迷你语言可以有哪些？" class="headerlink" title="迷你语言可以有哪些？"></a>迷你语言可以有哪些？</h1><p>其实说白了，只要功能允许，也就是语言A中所表述的实体在语言B中实际存在，那么就可以使用Interpreter模式将语言A至于语言B之上。下面列出的是几种常用和热门的。</p>
<p><strong>批处理语言</strong></p>
<p>也就是所谓的第二代语言。这种语言基本就是单词的拼接，能表达的含义远没有第三代语言多。但是在某些本来就不需要那么多含义的场景下，使用批处理语言会使程序”更纯粹”，反而有利于开发和维护。本文示例程序中设计的迷你语言即属于批处理语言。</p>
<p><strong>正则</strong></p>
<p>大多数主流语言都支持对正则语法的解析。实现细节虽然千差万别，但核心思想基本不出本文藩篱。</p>
<p><strong>自然语言</strong></p>
<p>自然语言的语义识别和语法树的构建是人工智能的关键技术之一。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-22.Command模式</title>
    <url>/2018/09/07/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-22Command%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Command模式被归入了第10部分<a href="">用类来表现</a>。在GoF原书中，Command模式则被归入了<a href="">行为型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在<a href="">19.State模式</a>中，我们介绍了用类来描述状态。今天我们介绍另一个可以用类来描述的相对抽象的概念：命令。</p>
<p>宏观的说，一个类与其他类的关系可以归为两种：</p>
<ul>
<li>向其他类发出命令促使其他类发生变化。</li>
<li>接到来自其他类的指令自身发生变化。</li>
</ul>
<p>通常来说，系统只会记录变化的结果，而不会记录变化的过程。换句话说，当我们在某个时间点对系统进行查询时，通常只能查到系统在当前时间的静态状态，也就是因命令导致的结果，而无法查知变化的过程。虽然程序一般都会把这个过程记录在日志中，但从严格的意义上来讲，日志文件已经不属于系统本身了。</p>
<p>变化过程本身无法记录，但是如果我们将触发变化的命令作为对象记录下来呢？</p>
<p>假设我们要画一系列的点(这也是本文的示例程序，先简要描述下)，通常来说，我们会告诉绘图实例：在位置p1绘制一个半径为r1，颜色为c1的点！绘图实例就赶紧按要求画了一个点。我们再说：在位置p2绘制一个半径为r2，颜色为c2的点！绘图程序赶紧又画了一个。最终我们得到了绘制着两个点的画布。但是触发绘制这两个点的命令却丢失了：因为我们根本不曾记录。</p>
<p>如果我们将这两个命令记录下来，形成表示命令的实例：</p>
<ul>
<li>命令1：在位置p1绘制一个半径为r1，颜色为c1的点！</li>
<li>命令2：在位置p2绘制一个半径为r2，颜色为c2的点！</li>
</ul>
<p>这样我们便算是将一个抽象的变化存储为了相对具体的实体。一旦完成了存储，我们可做的事一下子就变多了：</p>
<ol>
<li>引入命令后，类A将从直接调用类B转化为制造一条命令，而后执行这条命令：这就使得类A与类B之间完成了解耦。</li>
<li>接上条，这种解耦并不仅仅是空间上的，同样还可以是时间上的，如果对命令结果的需求没那么迫切，类A完全可以只负责制造命令，而后就可以继续做自己的事了。这使得命令的执行变成了异步的。</li>
<li>继续接上条，一旦命令的执行变为异步，就意味着我们可以把待执行的命令存储起来，形成一个指令集。在需要的时候统一执行。</li>
<li><a href="">18.Memento模式</a>可以让我们进行存档与恢复。其做法就是把某个时间点的对象像拍照那样存储下来，而后在需要时再进行恢复；引入命令后，我们也可以做到类似的事，比如某实例最初处于初始状态，而后经过了命令1，2，3后变为了状态2。如果我们想要记录状态2，方法之一自然是使用<a href="">18.Memento模式</a>将状态2照下来。但我们同样也可以存储命令1，2，3。当我们需要状态2时，我们只需要再找一个处于初始状态的实例，而后再按顺序执行一遍命令1，2，3即可。</li>
<li>接上条，很显然，如果要使用命令集来制作存档的话，在恢复存档时通常要比拍快照更花时间。</li>
</ol>
<p>将这种”引入命令”的思想理论化后，得到的就是Command模式啦。有时，我们也会将命令称为事件(event)，它与”事件驱动编程”中的”事件”的含义是相同的。我们会在GUI编程中大量的用到事件：点击一次鼠标是一个事件，按下键盘上的一个按键是一个事件。而每个事件其实都可以视为一个指令，以促使系统发生相应的变化。</p>
<h1 id="示例程序需求分析"><a href="#示例程序需求分析" class="headerlink" title="示例程序需求分析"></a>示例程序需求分析</h1><p>下面我们就来设计一个应用了Command模式的小例子吧。这是一个使用Java Swing技术实现的画图小程序。启动时的初始面板为：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22Command%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>区域介绍：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22Command%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>默认画笔粗细为10(画笔形成的点的半径为10个像素)，默认颜色为黑色，在画布上按住鼠标左键拖动即可绘制图形。下图为使用初始参数绘制一条线：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22Command%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>然后我们调整画笔粗细为5，颜色为绿，在线的下面再画一个圈：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22Command%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<p>点击”清空”按钮后，画布会被清空。不过画笔颜色及粗细不会恢复为默认值。例如我们可以撤销部分绘制圆的操作：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22Command%E6%A8%A1%E5%BC%8F/4.jpg" alt="4.jpg"></p>
<p>点击”撤销”按钮可以让我们撤销一次操作，即取消绘制一个点。不过并不会撤销对画笔颜色及粗细的选择。</p>
<p>点击”保存”按钮可以将当前画布上的图形保存到文件中。此后可以通过点击”读取”按钮恢复此前保存的图形。</p>
<p>功能基本就是这么多，最后附上一幅我用这个程序画的一幢好丑好丑的房子，哈哈哈：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22Command%E6%A8%A1%E5%BC%8F/5.jpg" alt="5.jpg"></p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>本程序中的所有代码将被统一置于design22包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22Command%E6%A8%A1%E5%BC%8F/6.jpg" alt="6.jpg"></p>
<p>下面将逐个贴出每个类的源码。</p>
<p>首先介绍command包里的类，顾名思义，这个包下自然全都是命令啦。</p>
<p><strong>Command接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22.command;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Command &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void execute();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;String&gt; strList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Command是最顶层的命令接口。内部只有两个方法。其中execute()表示执行命令。而strList()则会将命令转换为字符串以用于存档。之所以返回类型是List，是因为实际实现Command接口的命令有可能并非单独一条指令，而是一个指令集。</p>
<p><strong>MacroCommand类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22.command;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Point;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.BufferedWriter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStreamReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.OutputStreamWriter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Stack;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.apache.commons.lang.StringUtils;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSONObject;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.view.MyCanvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class MacroCommand implements Command &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Stack&lt;Command&gt; commands &#x3D; new Stack&lt;Command&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String SAVE &#x3D; &quot;src&#x2F;main&#x2F;java&#x2F;design22&#x2F;save&#x2F;save.txt&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String ENCODING &#x3D; &quot;UTF-8&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private MyCanvas canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MacroCommand(MyCanvas canvas) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas &#x3D; canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void execute() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Command&gt; iterator &#x3D; this.commands.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (iterator.hasNext()) iterator.next().execute();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void append(Command cmd) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this !&#x3D; cmd) this.commands.push(cmd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.commands.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void undo() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.commands.isEmpty()) this.commands.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void save() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; data &#x3D; this.strList();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileOutputStream fo &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        OutputStreamWriter ow &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedWriter bw &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fo &#x3D; new FileOutputStream(new File(MacroCommand.SAVE));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ow &#x3D; new OutputStreamWriter(fo, MacroCommand.ENCODING);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bw &#x3D; new BufferedWriter(ow);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (String str : data) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                bw.write(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                bw.newLine();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                bw.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ow.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                fo.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (Exception ef) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ef.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;String&gt; strList() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Command&gt; iterator &#x3D; this.commands.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (iterator.hasNext()) list.addAll(iterator.next().strList());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void load() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas.init();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileInputStream fi &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        InputStreamReader ir &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedReader br &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fi &#x3D; new FileInputStream(new File(MacroCommand.SAVE));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ir &#x3D; new InputStreamReader(fi, MacroCommand.ENCODING);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            br &#x3D; new BufferedReader(ir);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String lineTxt &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (!StringUtils.isBlank((lineTxt &#x3D; br.readLine()))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                JSONObject jo &#x3D; JSONObject.parseObject(lineTxt);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String className &#x3D; jo.get(&quot;type&quot;).toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Command cmd &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (DrawCommand.class.getName().equals(className)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    cmd &#x3D; new DrawCommand(this.canvas, new Point(Integer.parseInt(jo.get(&quot;pointX&quot;).toString()), Integer.parseInt(jo.get(&quot;pointY&quot;).toString())));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else if (ColorCommand.class.getName().equals(className)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    cmd &#x3D; new ColorCommand(this.canvas, new Color(Integer.parseInt(jo.get(&quot;colorRGB&quot;).toString())));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else if (BrushCommand.class.getName().equals(className)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    cmd &#x3D; new BrushCommand(this.canvas, Integer.parseInt(jo.get(&quot;brushWidth&quot;).toString()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (null !&#x3D; cmd) this.append(cmd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                br.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ir.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                fi.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (Exception ef) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ef.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>MacroCommand类就是前文提到的，实现了Command接口的指令集。其最核心的字段就是commands了。对于这个字段，我们有两点需要说明：</p>
<ol>
<li>之所以声明为栈，是为了便于进行撤销操作。</li>
<li>栈的泛型类型是Command，而MacroCommand类本身又实现了Command接口。这意味着commands字段中同样可以添加MacroCommand类型的数据。也就是说，指令集中的某条指令同样可以是另一个指令集，这在MacroCommand类execute()中也有所体现：最终我们是使用递归执行栈中的所有指令的(为防止无限递归下去，我们禁止将自身添加到commands字段中)。这其实是对<a href="">11.Composite模式</a>的一种应用。</li>
</ol>
<p>commands是本程序中最核心的字段，其中存储了所有的指令。程序做的所有操作最终其实都是在操作这个字段：</p>
<ul>
<li>清空画布：即清空commands字段。而后按照commands字段重绘图形，因为commands已被清空，自然就起到了清空画布的效果。</li>
<li>撤销最后一次操作：弹出最后一条指令，而后按照commands字段重绘图形，因为最后一条指令已被弹出，自然就相当于撤销操作了。</li>
<li>保存：将commands中的命令按顺序存储入文件。</li>
<li>读取：将文件中的命令按顺序读取入commands字段，而后依commands重绘图形，起到读档的作用。</li>
</ul>
<p><strong>DrawCommand类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22.command;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Point;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSONObject;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.view.MyCanvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class DrawCommand implements Command &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private MyCanvas canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Point point;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public DrawCommand(MyCanvas canvas, Point point) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas &#x3D; canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.point &#x3D; point;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void execute() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas.draw(this.point);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;String&gt; strList() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        JSONObject jo &#x3D; new JSONObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jo.put(&quot;type&quot;, DrawCommand.class.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jo.put(&quot;pointX&quot;, this.point.x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jo.put(&quot;pointY&quot;, this.point.y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(jo.toJSONString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>命令：在画布特定的位置上绘制一个点。</p>
<p><strong>ColorCommand类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22.command;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSONObject;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.view.MyCanvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ColorCommand implements Command &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private MyCanvas canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Color color;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ColorCommand(MyCanvas canvas, Color color) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas &#x3D; canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.color &#x3D; color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void execute() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas.setColor(this.color);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;String&gt; strList() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        JSONObject jo &#x3D; new JSONObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jo.put(&quot;type&quot;, ColorCommand.class.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jo.put(&quot;colorRGB&quot;, this.color.getRGB());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(jo.toJSONString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>命令：将画笔变更为特定的颜色。</p>
<p><strong>BrushCommand类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22.command;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import com.alibaba.fastjson.JSONObject;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.view.MyCanvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class BrushCommand implements Command &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private MyCanvas canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int width;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public BrushCommand(MyCanvas canvas, int width) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas &#x3D; canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.width &#x3D; width;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void execute() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas.setR(this.width);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;String&gt; strList() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        JSONObject jo &#x3D; new JSONObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jo.put(&quot;type&quot;, BrushCommand.class.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        jo.put(&quot;brushWidth&quot;, this.width);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(jo.toJSONString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>命令：将画笔变更为特定的粗细。</p>
<p>然后是view包：</p>
<p><strong>MyCanvas类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22.view;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Canvas;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Point;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.command.MacroCommand;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class MyCanvas extends Canvas &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final Color DEF_COLOR &#x3D; Color.BLACK;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int DEF_R &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Color color &#x3D; MyCanvas.DEF_COLOR;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int r &#x3D; MyCanvas.DEF_R;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MacroCommand history &#x3D; new MacroCommand(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyCanvas(int width, int height) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setSize(width, height);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setBackground(Color.WHITE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.init();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.history.execute();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void draw(Point point) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics g &#x3D; this.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.setColor(this.color);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillOval(point.x - this.r, point.y - this.r, 2 * this.r, 2 * this.r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setColor(Color color) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.color &#x3D; color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setR(int r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.r &#x3D; r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void init() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.color &#x3D; MyCanvas.DEF_COLOR;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.r &#x3D; MyCanvas.DEF_R;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>即为自己实现的画板类。</p>
<p><strong>View类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22.view;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.ActionEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.ActionListener;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.MouseEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.MouseMotionAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.swing.Box;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.swing.BoxLayout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.swing.ButtonGroup;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.swing.JButton;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.swing.JCheckBox;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.swing.JFrame;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.command.BrushCommand;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.command.ColorCommand;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.command.Command;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.command.DrawCommand;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class View extends JFrame implements ActionListener &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyCanvas canvas &#x3D; new MyCanvas(50 * 16, 50 * 9);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int maxBrush &#x3D; 20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;JCheckBox&gt; brushBoxs &#x3D; new ArrayList&lt;JCheckBox&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;ColorBox&gt; colorBoxs &#x3D; new ArrayList&lt;ColorBox&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;JButton&gt; buttons &#x3D; new ArrayList&lt;JButton&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public View() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 制作按钮</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttons.add(new JButton(&quot;清空&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttons.add(new JButton(&quot;撤销&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttons.add(new JButton(&quot;保存&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttons.add(new JButton(&quot;读取&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (JButton button : this.buttons) button.addActionListener(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 制作颜色CheckBox</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.BLACK, &quot;黑&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.DARK_GRAY, &quot;深灰&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.GRAY, &quot;灰&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.LIGHT_GRAY, &quot;浅灰&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.BLUE, &quot;蓝&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.CYAN, &quot;青&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.GREEN, &quot;绿&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.MAGENTA, &quot;洋红&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.RED, &quot;红&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.PINK, &quot;粉&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.ORANGE, &quot;橘&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.colorBoxs.add(new ColorBox(Color.YELLOW, &quot;黄&quot;, this));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ButtonGroup colorGroup &#x3D; new ButtonGroup();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (ColorBox colorBox : this.colorBoxs) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            colorBox.checkBox.addActionListener(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            colorGroup.add(colorBox.checkBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 制作画笔CheckBox</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ButtonGroup brushGroup &#x3D; new ButtonGroup();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; this.maxBrush; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            JCheckBox brushCheckBox &#x3D; new JCheckBox(i + &quot;&quot;, i &#x3D;&#x3D; this.canvas.r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.brushBoxs.add(brushCheckBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            brushCheckBox.addActionListener(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            brushGroup.add(brushCheckBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 画布拖动监听</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.canvas.addMouseMotionListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new MouseMotionAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void mouseDragged(MouseEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Command cmd &#x3D; new DrawCommand(View.this.canvas, e.getPoint());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    View.this.canvas.history.append(cmd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    cmd.execute();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 布局</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Box firstBox &#x3D; new Box(BoxLayout.X_AXIS);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (JButton button : this.buttons) firstBox.add(button);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Box secondBox &#x3D; new Box(BoxLayout.X_AXIS);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Box brushBox &#x3D; new Box(BoxLayout.Y_AXIS);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (JCheckBox temp : this.brushBoxs) brushBox.add(temp);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        secondBox.add(brushBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        secondBox.add(this.canvas);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Box colorBox &#x3D; new Box(BoxLayout.Y_AXIS);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (ColorBox temp : this.colorBoxs) colorBox.add(temp.checkBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        secondBox.add(colorBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Box mainBox &#x3D; new Box(BoxLayout.Y_AXIS);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mainBox.add(firstBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mainBox.add(secondBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.getContentPane().add(mainBox);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 关闭</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 显示</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.pack();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void actionPerformed(ActionEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (JButton button : this.buttons) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.getSource() &#x3D;&#x3D; button) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (&quot;清空&quot;.equals(button.getText())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    this.canvas.history.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    this.canvas.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else if (&quot;撤销&quot;.equals(button.getText())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    this.canvas.history.undo();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    this.canvas.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else if (&quot;保存&quot;.equals(button.getText())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    this.canvas.history.save();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else if (&quot;读取&quot;.equals(button.getText())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    this.canvas.history.load();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    this.canvas.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (ColorBox colorBox : this.colorBoxs) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.getSource() &#x3D;&#x3D; colorBox.checkBox) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Command cmd &#x3D; new ColorCommand(this.canvas, colorBox.color);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.canvas.history.append(cmd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cmd.execute();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (JCheckBox brushBox : this.brushBoxs) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (e.getSource() &#x3D;&#x3D; brushBox) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Command cmd &#x3D; new BrushCommand(this.canvas, Integer.parseInt(brushBox.getText()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.canvas.history.append(cmd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cmd.execute();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ColorBox &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Color color;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    JCheckBox checkBox;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String desc;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ColorBox (Color color, String desc, View view) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.color &#x3D; color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.checkBox &#x3D; new JCheckBox(desc, this.color &#x3D;&#x3D; view.canvas.color);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>View负责创建及调用命令。方式主要有两种。</p>
<p>第一种为创建命令并直接调用。以切换颜色为例，会触发actionPerformed()监听事件。从代码中可以看到，我们会创建并直接执行命令。当然，我们也会将该命令存入MacroCommand类的commands字段中，以形成存档，View作为面板，每个实例都会创建并绑定一个MyCanvas(画布)类的实例，而每一个画布，同样会创建并绑定一个MacroCommand类的实例：在MyCanvas中，这个MacroCommand被称为history。</p>
<p>第二种并不会创建新命令，但会导致commands中的已有命令会被重新全部执行一遍。例如当我们按下”撤销”按钮后，会触发actionPerformed()方法。其中undo()会导致commands中最新的命令被弹出，而repaint()则会先清空画布，而后将commands中剩余的命令重新执行一遍。</p>
<p><strong>save.txt</strong></p>
<p>我们会在save包下存放存档。该存档只有一份，反复存档只会导致存档覆盖。因为拖动时每一个点都会生成1条命令，因此这个文件行数通常都会很多。上文绘制房子的那个存档文件就有16000+的行数。现只截取最开始的那部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&quot;brushWidth&quot;:20,&quot;type&quot;:&quot;design22.command.BrushCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;colorRGB&quot;:-16711936,&quot;type&quot;:&quot;design22.command.ColorCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:4,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:6,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:8,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:10,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:13,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:16,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:20,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:25,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:29,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:32,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:35,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:37,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:40,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:42,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:45,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:48,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:52,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:54,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:56,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:60,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:63,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:67,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;&quot;pointX&quot;:72,&quot;pointY&quot;:412,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span></pre></td></tr></table></figure>

<p>最后是直接位于design22包下的Main.java：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design22;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design22.view.View;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new View();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行该类后，即可启动程序。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Command模式的Java实现，下面咱们试着跳出语言层面，抽象出Command模式中登场的角色。</p>
<p><strong>Command(命令)</strong></p>
<p>在示例程序中，由Command接口扮演这个角色。</p>
<p><strong>ConcreteCommand(具体的命令)</strong></p>
<p>在示例程序中，由MacroCommand类，DrawCommand类，ColorCommand类，BrushCommand类联袂扮演这个角色。</p>
<p><strong>Receiver(接收者)</strong></p>
<p>接收命令，或是受命令影响的角色。在示例程序中，由MyCanvas类扮演这个角色。</p>
<p><strong>Invoker(发动者)</strong></p>
<p>Invoker是Command的触发者(通常也是创建者)。在示例程序中，由View类扮演这个角色。</p>
<h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><p>在此，我想说点与Command模式没什么关系的事。</p>
<p>在示例程序中，View实现监听的方式是写匿名的适配器类。例如我们在为画布添加拖动鼠标的监听时，是这样做的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.canvas.addMouseMotionListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    new MouseMotionAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void mouseDragged(MouseEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Command cmd &#x3D; new DrawCommand(View.this.canvas, e.getPoint());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            View.this.canvas.history.append(cmd);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cmd.execute();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>

<p>我们不妨稍微看下源码。这个this.canvas.addMouseMotionListener()的方法定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized void addMouseMotionListener(MouseMotionListener l)</span></pre></td></tr></table></figure>

<p>很显然，它接收一个MouseMotionListener类型的数据，而这个MouseMotionListener则是一个接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.awt.event;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.EventListener;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface MouseMotionListener extends EventListener &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void mouseDragged(MouseEvent e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void mouseMoved(MouseEvent e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面是MouseMotionListener接口的全部源码。其中mouseDragged()表示”按住鼠标拖动”这一事件；而mouseMoved()则表示鼠标移动事件。</p>
<p>那么自然，我们传入的这个MouseMotionAdapter就该实现MouseMotionListener啦，那么是不是呢：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.awt.event;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class MouseMotionAdapter implements MouseMotionListener &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void mouseDragged(MouseEvent e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void mouseMoved(MouseEvent e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>代码不长，我就全部贴出了。可以看到，MouseMotionAdapter除了将接口中约束的两个方法声明非抽象的以外，实际上什么都没做。</p>
<p>其实比起这种使用匿名内部类，也就是适配器的做法，我们其实可以直接找一个类实现MouseMotionListener接口，然后将这个类的实例传给addMouseMotionListener()方法(通常来说，我们会让面板去实现这个接口，也就是说传入this)。那么二者各有什么利弊呢？</p>
<p>先说说使用匿名类的好处吧。如果要自己写一个类去实现监听接口，这就意味着必须要强制实现接口中所有约束的方法。例如，此时我们就必须实现mouseMoved()了，即便我们根本不关心鼠标移动事件，那也要写一个空方法放在那里才行。这在接口本身约束很多(例如WindowListener)，而实际用到的很少时尤其的麻烦：我们需要写大量的空方法，使得代码有失优雅。而使用适配器类则解决了这个问题。MouseMotionAdapter被声明为了抽象类，但其中并没有抽象方法。这样做的原因有二：类被声明为抽象的是不希望直接new出对象来，要写继承的子类才行；而方法均不是抽象的则让自己只需要重写需要的约束即可。</p>
<p>然后说一下继承接口的好处。使用匿名类的问题在于，每次使用都会初始化一个新的匿名类，在需要多次使用同一个监听时将会很不方便。如果专门弄一个类去监听，又显得小题大做。当然，直接让面板或其他组件更是糟糕的决策：从使用上讲，因为Java是单继承的语言，这会消耗掉宝贵的继承机会；另一方面，组件根本就不是监听器，也就是根本不符合里氏替换原则及合成聚合复用原则，从逻辑上更是说不通。因此，此时让面板直接实现接口就成为了最好的选择：View便直接实现了ActionListener，而后将需要此监听的按钮及选框均与其绑定。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-21.Proxy模式</title>
    <url>/2018/09/05/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-21Proxy%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Proxy模式被归入了第9部分<a href="">避免浪费</a>。在GoF原书中，Proxy模式则被归入了<a href="">结构型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在日常生活中，我们常会遇到如下类似的情况：</p>
<ul>
<li>场景1：<strong>消费者(角色1)</strong>想买菜，于是他找到<strong>商人(角色2)</strong>，商人卖给消费者他从<strong>菜农(角色3)</strong>那收上来的菜。</li>
<li>场景2：<strong>产品经理(角色2)</strong>收集<strong>用户(角色1)</strong>的需求，将其汇总整理后提给<strong>程序员(角色3)</strong>。</li>
<li>场景3：<strong>用户(角色1)</strong>发现了产品的问题，于是他打电话给<strong>客服(角色2)</strong>，客服再将问题转交给<strong>技术人员(角色3)</strong>。</li>
</ul>
<p>虽然场景不同，但是上述示例均由如下3个角色构成：</p>
<ul>
<li>角色1：提出需求的人</li>
<li>角色2：将角色1的需求转交给角色3</li>
<li>角色3：实际完成需求的人</li>
</ul>
<p>这么来看，角色二似乎是可有可无的。这也是为什么在古代商人一直遭人轻贱的重要原因之一。直至今日，也总会冒出下面这样的广告，试图甩掉角色2：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21Proxy%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>那么实际上是这样的吗？</p>
<p>当然不是。</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21Proxy%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>客观的说，如果必须要在这3个角色中拿掉一个的话，那么还是会拿掉角色2。因为角色1与角色3构成了事件的根基，二者如果缺了任一个事件本身就进展不下去了，这也是为什么我们会觉得角色2可有可无的原因。但是如果如果没有角色2，角色1与角色3的沟通将异常艰难，也很难形成健康的关系。这就好比物质基础与精神追求哪一个对人更重要那样：如果硬要只能选一个的话，那肯定是物质基础，毕竟活下去是前提条件。但是如果成为一个健全的人，精神追求是必不可少的。</p>
<p>我们可以具体分析一下角色2的作用。在上述需求中，角色3作为实际需求的处理者，往往不愿意，或者说是没能力直接对接角色1。我们以场景2为例。假如没有了产品经理，客户直接与程序员对接。那么在客户看来，我就只是说加一个按钮，面前这个家伙就神神叨叨的说了一大堆自己听不懂的专业名词；而在程序员看来，面前的这家伙就是个SB，提的都是什么智障需求，感觉做什么似乎都很容易。换句话说，我们需要这样一个角色，他既能听懂程序员在说什么，也知道说什么客户能听懂，这自然就是角色2，产品经理啦。</p>
<p>不仅如此，在所有场景中，角色1一般都是远多于角色3的。而每个角色1的需求又总会略有不同。如果角色1与角色3直接碰面。那么角色3就不得不面对形形色色的需求。但实际上，角色3通常都只会完成一个或者至多几个原型，将哪个原型交给哪个角色1，或者是将哪个原型微调1下交给角色1，这又是角色2的工作了。</p>
<p>简单来说，虽然角色3最终的目的是为角色1服务，但是在具体的需求中，角色3通常是无法面面俱到考虑到角色1所有的需求的。此时就需要角色2，也就是代理登场了。角色1与角色3完成了解耦，而角色2则承担起了代理人的作用。</p>
<p>由此，演化出来的设计模式就是Proxy模式。</p>
<p>说到这里，我们很容易就会想到另一个设计模式：<a href="">2.Adapter模式</a>。在Adapter模式中，也有如下3个角色：</p>
<ul>
<li>角色1：需要数据</li>
<li>角色2：转换数据格式以适配</li>
<li>角色3：提供数据</li>
</ul>
<p>这样看来，二者确实极为接近。不过，二者最本质的不同在于角色2，也就是各自的核心角色。在Adapter模式中，角色2被称为适配器，它只承载很简单的转换的功能，我们以显示器通过适配器连接主机为例，显示器(角色1)很明确最终数据还是主机(角色3)提供的，只不过格式对不上，因此需要适配器(角色2)转换一下，此时，角色2只是一个小小的原件。而在Proxy模式中，角色2被称为代理，顾名思义，在角色1看来，角色3仿佛是不存在的。或者说，角色2就是角色3。举个例子，作为消费者(角色1)，当我们向菜贩(角色2)买菜时，我们根本不会关心菜到底是哪个菜农(角色3)种的。</p>
<p>不仅如此，适配器仅仅只是在转换数据，不具有任何制造数据的能力。而在代理存在的场景中，角色1的核心需求由角色3完成。这意味着，对于一些不那么核心的需求而言，代理则无需麻烦角色3。以上文的场景3为例，客服并不会将用户所有的投诉都反馈给技术人员，对于那些明显简单或者明显逗逼的投诉客服自己就会处理掉 – 这是非常重要的，正如我们前文讲到的，在应用代理的场景下，角色1的数量往往远多于角色3。代理的这种能力能够在很大程度上缓解角色3的压力。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们来看一个应用了Proxy模式的小例子。该程序会通过代理(角色2)为调用者(角色1)找到工人(角色3)。首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21Proxy%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>本程序中的所有代码将被统一置于design21包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21Proxy%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Workable接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design21;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Workable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String getType();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void work();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Worker类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design21;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Worker implements Workable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String type;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Worker(String type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.type &#x3D; type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getType() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void work() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(this.type + &quot;在工作&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>WorkerProxy类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design21;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class WorkerProxy implements Workable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Worker worker;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String type;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public WorkerProxy(String type) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.type &#x3D; type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getType() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void work() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; worker) this.worker &#x3D; new Worker(this.type);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.worker.work();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design21;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Workable worker &#x3D; new WorkerProxy(&quot;水暖工&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(worker.getType());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        worker.work();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后，输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">水暖工</span></pre></td></tr><tr><td class="code"><pre><span class="line">水暖工在工作</span></pre></td></tr></table></figure>

<p>代码整体比较简单，不过还是有如下几点需要说明一下，大家可以对照着前文的综述加深理解。</p>
<p>本程序中，Main类是角色1，WorkerProxy类是角色2，而Worker类则是角色3。剩下的Workable接口则是抽象WorkerProxy与Worker后得到的。如果仅讨论Proxy模式最核心的功能，那么是不需要Workable，此时Main只能感知得到WorkerProxy。而在引入了Workable之后(通常我们都是会引入的)，Main连WorkerProxy都无需感知了。在示例程序中，WorkerProxy实例是在main方法中new出来的，这可能会给大家造成误解，不过在更常见的场景中，这个Workable应该是作为参数传递给角色1的，角色1根本不需要也不想要了解这个Workable到底是什么：这确实很合乎逻辑，对于调用者而言，他要的就是一个工人，或者更具体的来说，他要的不是工人，他要的是工作被完成。所以对调用者而言，其实他根部不在意这个Workable具体是个啥，到底做了啥，什么代理，什么委托，和调用者都没半毛钱的关系。因此抽象出Workable可以将调用者很好的与其他的角色解耦。</p>
<p>然后是问题二，调用者只需要一个Workable我们已经理解了。但是为什么要让WorkerProxy与Worker均实现Workable呢？换句话说，代理是代理，工人是工人。为什么要让角色2与角色3实现相同的接口呢？</p>
<p>这样的好处在于，代理与工人因此就具备了统一性。从逻辑上讲，对于调用者而言，为他服务的这个Workable其实只有一个身份：”能帮助自己完成工作的人”。至于这个人是自己亲自做还是委托给他人调用者并不在意，从这个角度来看，角色2与角色3的身份确实是统一的；从实际的代码结构来看，代理是可以分级的。换句话说，代理找到的并不一定是真正的工人，它还有可能是另一个代理，只要身份统一，它就可以扮演工人的角色。很显然，这是对<a href="">11.Composite模式</a>的应用。</p>
<p>正因为如此，这种将WorkerProxy与Worker统一起来的方式也成为了Proxy模式的默认思路。只不过，这同样会产生一些问题。因为Workable是调用者需要的接口，换句话说，它内部约束的那些方法就是调用者提出的需要。让WorkerProxy实现这个接口倒没什么。但是让Worker直接暴露在调用者的需求下却不太妥当。正如前文分析过的，角色3通常只会生成少量的几个原型，代理有一个很重要的工作就是将这几个原型稍加修改从而适应千变万化的需求。因此某些场景下，我们也会将角色2与角色3严格分隔开。这样角色1提出的需求对于角色3而言就是完全透明的了。</p>
<p>对于Main而言，当new出WorkerProxy时，它就认为工人已经生成好了。但是实际上，直到work()方法被调用之前，其实都并没有真正的生成工人。这其中还包括一个worker.getType()，也就是说main还像模像样的获取了一下工人的类型。只不过，该功能其实是被代理直接完成了，并不需要真正的工人(还记得综述中那个客服的例子吗)，因此依然不需要生成工人。直到不生成不行，也就是要让工人工作的时候，代理才通过懒加载的方式创建了工人，而后委托工人工作。这样就对工人的生成尽可能的做出了推迟，在系统规模较大时，这种将操作尽量移出初始化的做法可以极大的减少系统的启动时间。</p>
<p>在本示例中，Worker是无需感知到WorkerProxy的，这是理所当然的。而WorkerProxy为了能够将工作委托给Worker，则必须能够感知得到Worker才行(示例程序将Worker加为了WorkerProxy的字段)，这在逻辑上也是说得通的。不过在实际应用中，为了进一步提高灵活性，角色2与角色3也会解耦，即代理也不会记录实际工作的人是谁。在需要实际工人时，我们传递一个一个标志给代理，告诉它：”我要用这个工人！”。通常这会是一个表征类的字符串，然后代理会通过反射将其解析出来。这样的坏处在于：虽然将角色2与角色3进行了解耦，但需要在调用时由角色1告知角色2要用哪个角色3，无形中又将角色1与角色3耦合在了一起，所以其实是有利有弊。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Proxy模式的Java实现，下面咱们试着跳出语言层面，抽象出Proxy模式中登场的角色。</p>
<p><strong>Subject(主体功能)</strong></p>
<p>Subject抽象出了调用者的需求。Proxy与Real也因为Subject而具有了一致性。在示例程序中，由Workable接口扮演这个角色。</p>
<p><strong>Real(实际的工人)</strong></p>
<p>在示例程序中，由Worker类扮演这个角色。</p>
<p><strong>Proxy(代理人)</strong></p>
<p>在示例程序中，由WorkerProxy类扮演这个角色。</p>
<p><strong>Client(请求者)</strong></p>
<p>在示例程序中，由Main类扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21Proxy%E6%A8%A1%E5%BC%8F/4.jpg" alt="4.jpg"></p>
<h1 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h1><p>提到代理，我们很容易想到HTTP代理。HTTP代理是指位于HTTP服务器(Web服务器)和HTTP客户端(Web浏览器)之间的一组软件。我们可以把其看作是对Proxy模式的一种应用。其中，HTTP服务器是Real，HTTP代理是Proxy，Web浏览器则是Client。我们不妨以HTTP代理的缓存功能来说明一下。在我们通过Web浏览器访问Web页面时，并非每次都会真的去访问HTTP服务器，而是会先去获取HTTP代理缓存的页面，只有当没有缓存，缓存有更新或是缓存失效时才会真的去访问Web浏览器。</p>
<h1 id="代理的各种形式"><a href="#代理的各种形式" class="headerlink" title="代理的各种形式"></a>代理的各种形式</h1><p><strong>Virtual Proxy(虚拟代理)</strong></p>
<p>本文介绍的Proxy模式及给出的示例采用的就是这种方式，也是最基本的代理。只有当真正需要实例时才会生成。</p>
<p><strong>Remote Proxy(远程代理)</strong></p>
<p>当Real角色处于网络远端时，Remote Proxy可以让我们仿佛使用本地实例那样使用它们。Java的RMI(Remote Method Invocation，远程方法调用)就是Remote Proxy的应用。</p>
<p><strong>Access Proxy</strong></p>
<p>较之普通的Proxy，Access Proxy引入了访问权限。即我们可以只允许指定的用户调用指定的方法。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-20.Flyweight模式</title>
    <url>/2018/09/04/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-20Flyweight%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Flyweight模式被归入了第9部分<a href="">避免浪费</a>。在GoF原书中，Flyweight模式则被归入了<a href="">结构型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>flyweight这个单词的释义为”次最轻量级的拳击选手”。顾名思义，Flyweight模式的目的就是让对象”变轻”。更具体的来说，是让对象消耗的资源变少。其中最易于理解的消耗自然就是内存占用了。通俗来说，Flyweight模式就是在通过共享实例来尽量避免new出实例(少进行new的操作其实也相当于减少了时间的消耗，只是这没有内存减耗那么明显)。JVM所管理的”字符串常量池”遵循的其实也是类似的思想。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面来看一段应用了Flyweight模式的小例子。首先我们有0-9这10个数字的10张png图片：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20Flyweight%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>我们希望在输入一段数字后，程序能通过拼接这10张素材图片，从而生成一张新的图片。这里就用我的女神，苏联卫国战争时期的王牌女飞行员，被称为”斯大林格勒的白百合”的莉莉娅的生日为例吧</p>
<p>女神(↓↓)</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20Flyweight%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>输入19210818后，程序最终会输出：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20Flyweight%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>在具体编写代码之前，我们可以先思考一下如何去做。最为简单的思路就是需要什么我们就去加载什么。如果我们将每一张原始的素材图片都视为一个对象的话，那么，对于19210818而言，毫无疑问，我们需要生成8个这样的图片对象。然后将这8个对象拼接为一个新的对象。显然，这是可行的做法。但这真的是最优的做法吗？</p>
<p>当然不是。</p>
<p>细心的朋友们应该都已经注意到了，虽然最终拼接需要8个对象，但实际用到的数字只有”19208”这5个，有3个数字是重复的。省掉这3个重复的数字的空间就是Flyweight模式要做的工作。</p>
<p>下面就赶快来看代码吧~首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20Flyweight%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<p>本程序中的所有代码将被统一置于design20包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20Flyweight%E6%A8%A1%E5%BC%8F/4.jpg" alt="4.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。而img包下则是前文展示的那10张数字素材图片。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Img类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design19.view.View;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Img &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int number;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BufferedImage image;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Img(int number) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.image &#x3D; ImageIO.read(View.class.getClassLoader().getResource(&quot;design20&#x2F;img&#x2F;&quot; + number + &quot;.png&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>ImgFactory类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ImgFactory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Map&lt;Integer, Img&gt; pool &#x3D; new HashMap&lt;Integer, Img&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ImgFactory SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static final int WIDTH &#x3D; 88;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static final int HEIGHT &#x3D; 151;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ImgFactory() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static ImgFactory getInstance() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; ImgFactory.SINGLETON) ImgFactory.SINGLETON &#x3D; new ImgFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return ImgFactory.SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public BufferedImage getNumImg(int number) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.pool.containsKey(number)) this.pool.put(number, new Img(number));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.pool.get(number).image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>从逻辑的角度分析，生产Img的工厂是一个独立的个体，因此应该允许其生成实例而非使用类方法。同时工厂又只需要有一个，因此应用了<a href="">5.Singleton模式</a>。</p>
<p>对外界而言，是否应用Flyweight模式并没有什么不同。因为他们只是在调用getNumImg()方法获得自己想要的数字对应的图片。至于这个图片是新生成的还是复用之前已经存在的，他们并不在意。而在ImgFactory内部，我们创建了一个存储Img的”池”pool：调用方传入的数字千千万万，但池中最多只会存储0-9共计十张图片，这就从一定程度上节省了内存的开销。</p>
<p>虽然与Flyweight模式无关，本程序还在试图从另一个维度上节省开销。本文在创建Img的策略上采用了懒加载，初始时pool中是空的，只有当获取某个具体数字对应的图片时才会检查该图片是否已在pool中，如果在则返回，反之则创建后返回。这相当于将图片初始化的时间由pool的初始化推迟至调用时。不仅如此，我们还可以很容易想到，如果某个数字就是不会被调用，那么它永远不会被初始化，和一开始就全部初始化好相比，不仅节省了时间，还节省了空间。</p>
<p>当然，懒加载对时间的节省只是相对的。它能让程序启动时间大大减少。但正所谓出来混总是要还的，既然要使用，那么终究还是要初始化的，懒加载只是将初始化的实际延后了。不仅如此，这种延后还要付出更大的时间代价：如果最初就将pool中的图片全部初始化好，那么在getNumImg()时直接返回即可，因为我们确信此时pool中已经有了所有需要的图片了。反之，使用懒加载后，每次取图片时都需判断图片是否已经生成，反而相当于增加了时间开销。因此，是否使用懒加载，完全是要根据实际情况具体问题具体分析的。</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Main.createImg(&quot;19210818&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void createImg(String str) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int length &#x3D; str.length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bufferedImage &#x3D; new BufferedImage(ImgFactory.WIDTH * length, ImgFactory.HEIGHT, BufferedImage.TYPE_INT_RGB);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int tempNum &#x3D; Integer.parseInt(str.substring(i, i + 1));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            BufferedImage tempImg &#x3D; ImgFactory.getInstance().getNumImg(tempNum);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int y &#x3D; 0; y &lt; tempImg.getHeight(); y++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int x &#x3D; 0; x &lt; tempImg.getWidth(); x++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    bufferedImage.setRGB(x + i * ImgFactory.WIDTH, y, tempImg.getRGB(x, y));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ImageIO.write(bufferedImage, &quot;jpg&quot;, new File(&quot;D:\\img.jpg&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后，即可得到前文展示的结果。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Flyweight模式的Java实现，下面咱们试着跳出语言层面，抽象出Flyweight模式中登场的角色。</p>
<p><strong>Flyweight(轻量级类)</strong></p>
<p>即可共享的类，在示例程序中，由Img类扮演这个角色。</p>
<p><strong>FlyweightFactory(轻量级类工厂)</strong></p>
<p>即控制Flyweight共享情况的工厂。在示例程序中，由ImgFactory类扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20Flyweight%E6%A8%A1%E5%BC%8F/5.jpg" alt="5.jpg"></p>
<h1 id="Intrinsic与Extrinsic"><a href="#Intrinsic与Extrinsic" class="headerlink" title="Intrinsic与Extrinsic"></a>Intrinsic与Extrinsic</h1><p>Flyweight模式的核心在于共享实例。这里隐含着一个前提，那就是必须先判断实例能否被共享(因为共享实例的改变，会导致所有用到它的地方所得到的实例均会发生变化)，只有能被共享的实例，才有资格进一步考虑到底要不要共享。在编程领域，可以被共享的信息被称为Intrinsic信息，Intrinsic意思是”本质的，固有的”，顾名思义，这是指那些不会因调用环境不同而改变的信息；相对的，不能被共享的信息被称为Extrinsic信息，Extrinsic的含义是”外在的，非本质的”。</p>
<p>依这种思路来分析，类字段均应是Intrinsic信息，被定义为单例的实例中存储的也均应是Intrinsic信息。</p>
<p>在本示例中，每个数字对应的图片是唯一且不可变的，属于Intrinsic信息，当我们输入数字”11”时，这两个1对应的都是那同一张代表1的图片，因此这些图片实例可以成为Flyweight角色被共享。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-19.State模式</title>
    <url>/2018/08/31/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-19State%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，State模式被归入了第8部分<a href="">管理状态</a>。在GoF原书中，State模式则被归入了<a href="">行为型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在面向对象编程领域，有这样一句话：一切都是对象，对象就是一切。这话虽说有些绝对了，但也从一个侧面说明对象在面向对象编程领域的普遍性。在我们通常的认知中，对象指的是某个具体的事物，例如一张桌子，一把椅子。但是对象其实还可以表示一些抽象的事物，例如本文要提到的”状态”。</p>
<p>漫画《七龙珠》的主人公是卡卡罗特(孙悟空)。将卡卡罗特看作一个对象是比较好理解的。但我们同样也可以将卡卡罗特所处于的状态视为对象。例如我们可以将普通状态视为一个类，超级赛亚人状态视为另一个类。这样再描述卡卡罗特所处于的状态时，就可以用具体状态的实例来表示。</p>
<p>普通状态(左)与超级赛亚人状态(右)下的卡卡罗特：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>在编程领域，由此演化而来的设计模式就是State模式。以类来表示状态后，我们就能通过切换表示状态的类来方便的改变对象所处于的状态。同时，当需要增加新的状态时(例如为卡卡罗特再增加一个巨猿状态)，条理也会更为清晰。</p>
<h1 id="示例需求描述"><a href="#示例需求描述" class="headerlink" title="示例需求描述"></a>示例需求描述</h1><p>狂野女猎手-奈德丽(Nidalee)是一位出自游戏英雄联盟(LOL)的女英雄，在描述具体的需求之前，先展示几张她的皮肤原画吧~</p>
<p><strong>默认</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<hr>
<p><strong>雪装</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<hr>
<p><strong>丛林猎豹</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<hr>
<p><strong>法国女仆</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/4.jpg" alt="4.jpg"></p>
<hr>
<p><strong>艳后</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/5.jpg" alt="5.jpg"></p>
<hr>
<p><strong>魅惑女巫(2011年万圣节)</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/6.jpg" alt="6.jpg"></p>
<hr>
<p><strong>枭姬 孙尚香</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/7.jpg" alt="7.jpg"></p>
<hr>
<p><strong>勇者</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/8.jpg" alt="8.jpg"></p>
<p>好漂亮啊有没有，尤其是枭姬，英姿勃发。不过我们之所以介绍得这么详细并不完全是因为她生得俊俏(你够了)，而是因为她是具有双形态的英雄。下面就以枭姬这个皮肤的3D模型来展示一下：</p>
<p><strong>人形态</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/9.jpg" alt="9.jpg"></p>
<hr>
<p><strong>豹形态</strong></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/10.jpg" alt="10.jpg"></p>
<p>奈德丽的R技能为形态切换。在各自的形态下，她有着独立的两套QWE技能(传说中拥有7个主动技能的女人)。本文的示例程序将应用State模式模拟奈德丽的技能释放。</p>
<h1 id="示例需求分析"><a href="#示例需求分析" class="headerlink" title="示例需求分析"></a>示例需求分析</h1><p>不知不觉中GoF的23种设计模式也快介绍到尾声了(19/23)，之前给出的设计模式的示例程序大多很简单，也很粗糙，其目的仅仅是为了说明某个设计模式的核心思想。本文将打破这一点(毕竟总写一些实验性质的小demo着实无聊)，会写一个相对完整的产品出来。关于奈德丽具体的英雄参数可参见<a href="http://cha.17173.com/lol/heros/details/76.html" target="_blank" rel="noopener">奈德丽数据介绍</a>。本程序会以奈德丽的满级(18级)属性为基础，再进行适当的提升(因为人物是会穿装备的)。</p>
<p>GUI设计技术为Java AWT，程序启动后初始状态如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/11.jpg" alt="11.jpg"></p>
<p>这也是程序的主体面板界面。它的区域介绍如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/12.jpg" alt="12.jpg"></p>
<p>默认形态为人形态。此时：</p>
<ul>
<li><strong>区域一：</strong>人形态是有MP的，因此血条与蓝条均会展示，初始时默认血蓝全满。</li>
<li><strong>区域二：</strong>人形态下的立绘采用我最喜欢的枭姬皮肤(啦啦啦)。</li>
<li><strong>区域三：</strong>此时展示的是人形态下的技能图标。</li>
</ul>
<p>当按下键盘上的R键后，即被认为释放了一次R技能(QWE技能同理)，此时奈德丽会从人形态切换为豹形态：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/13.jpg" alt="13.jpg"></p>
<p>切换后：</p>
<ul>
<li><strong>区域一：</strong>因为奈德丽在豹形态下是没有MP的，因此不绘制蓝条。</li>
<li><strong>区域二：</strong>立绘切换为枭姬皮肤的豹形态(没找到太合适的图，比较遗憾)。</li>
<li><strong>区域三：</strong>技能图标切换为豹形态。</li>
</ul>
<p>关于技能图标，有以下几点需要说明：</p>
<p>第一，我们可以注意到上图中豹形态下的R技能”黑了一块”。这表示R技能在冷却。只有当它冷却完成后，我们才能再次释放，以切换为人形态。因为奈德丽的7个技能都是主动技能，因此其他技能的冷却机制同理。</p>
<p>当R技能冷却完成后：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/14.jpg" alt="14.jpg"></p>
<p>我们可以注意到，相较于人形态，奈德丽的R技能的图标并没有改变。这也是我们要说的第二点，QWE技能是独立的，而R技能只有一个(因此我们才说奈德丽有7个技能，而非8个)。</p>
<p>QWE独立还意味着，QWE技能的冷却时间计算也是独立的，例如我们可以在人形态下快速释放QWE(俗称脸滚键盘)，使他们均进入冷却状态：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/15.jpg" alt="15.jpg"></p>
<p>此时如果我们再按下R切换为豹形态，我们会发现豹形态下的QWE又是可释放的了，不过R技能因为人豹形态共用一个，因此进入了冷却状态。此时我们可以在豹形态下再QWE脸滚键盘一波：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/16.jpg" alt="16.jpg"></p>
<p>当R技能冷却完成后，我们又可以切换回人形态，如果我们进行如上人-豹-人的操作的速度足够快，当我们再切回人形态时，情况可能是这样的：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/17.jpg" alt="17.jpg"></p>
<p>R技能又开始接着计算冷却了，这个前文已经介绍过原因，并没有什么。但是除了冷却时间较短的Q技能之外，人形态下的WE技能并没有冷却完。这个效果当我们在R技能冷却好再次切到豹形态时也是同理的(只不过豹形态下技能CD普遍较短，不太容易看出来)。之所以会这样，是因为QWE技能独立同样意味着技能CD独立。举例来说，如果人形态的Q技能的CD为6秒，那么无论如何，它都只能6秒后才能再次释放，我们切换为豹形态会让我们看不到人形态Q技能的CD情况，但也仅仅只是看不到而已，它依然在不停的倒数自身的冷却时间。</p>
<p>由上文的技能CD介绍还能看出的是，人形态下释放QWE技能导致MP减少(蓝条变短)。而豹形态的技能则是无消耗的。R技能作为形态切换的桥梁也是无消耗的。这意味着，豹形态技能的释放只受CD的影响，而人形态在此之上，还需剩余的蓝量大于技能的消耗。</p>
<p>蓝条可以通过技能释放来减少。为了模拟血条减少，我们规定当按下键盘上的X键后，会扣一定数值的血量：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/18.jpg" alt="18.jpg"></p>
<p>虽然用静态的图片无法表现，不过HP与MP均会按一定速率自动回复。</p>
<p>按照一般游戏的设定，蓝条始终都会是蓝色的，而血条则会在减少的过程中逐渐由绿转黄，再由黄转红(所谓的满血，黄血，红血)。本程序也是如此。上文已经展示了血量比较健康时血条的颜色，下面我们来看一张半血时的：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/19.jpg" alt="19.jpg"></p>
<p>然后是残血时的：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/20.jpg" alt="20.jpg"></p>
<p>奈德丽人形态下的E技能会为指向的英雄回复一定的HP，本程序默认会对自身释放，因此人形态释放E技能后会回复一定数值的HP(按照设定，回复量在一个范围之间，HP越低回复量越多)。除此之外，除了R技能会导致形态切换，其他技能(人形态的QW，豹形态的QWE)均为对敌方造成伤害，在本程序中不会有所体现。</p>
<p>当HP降到0时，英雄会死亡：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/21.jpg" alt="21.jpg"></p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/22.jpg" alt="22.jpg"></p>
<p>形态会被定格在死亡的那一刻。届时将不再接受任何键盘输入，也不会提供初始化的方法，只能关掉重来。此时：</p>
<ul>
<li><strong>区域一：</strong>血条当然是清空了。而人形态下的蓝条将定格在死亡的时刻，不再变动。</li>
<li><strong>区域二：</strong>立绘将被虚化，同时添加表示阵亡的文字。</li>
<li><strong>区域三：</strong>技能图标将被虚化，同时清除可能会存在的尚未完成的CD遮挡。</li>
</ul>
<p>呼~需求终于大致描述完了。累死我了。</p>
<p>作为一名技术，我们很少会关注产品经理的工作，不过即便是这么小的一个需求，我在整理并力求没有歧义的描述清楚(而且我并不敢说真的就描述清楚了)时，也费了很大的力气。这说明产品经理确实在日常的工作中为我们屏蔽了很多技术不愿意关注的点。之所以会有矛盾冲突，我想大多是因为需求本身就充斥着更多的冲突，没有产品经理，技术将更难以工作。</p>
<h1 id="伪代码分析"><a href="#伪代码分析" class="headerlink" title="伪代码分析"></a>伪代码分析</h1><p>需求描述完了，下面就来思考一下怎么写。</p>
<p>假设我们只考虑Q技能的释放，那么最容易想到的写法是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类 奈德丽 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    方法 释放Q &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (当前状态为人形态) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    人形态下释放Q</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; else if (当前状态为豹形态) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    豹形态下释放Q</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样做当然没什么毛病，但是问题在于每当我们要做什么操作时都需要先判断一下状态。随着状态的增多，代码逻辑的复杂，这种判断的成本将越来越高，同时也越发的不易于维护。</p>
<p>如果使用State模式，我们就可以将形态抽象为类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类 人形态 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    方法 释放Q &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        人形态下释放Q</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">类 豹形态 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    方法 释放Q &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        豹形态下释放Q</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时奈德丽类就可以这样写了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类 奈德丽 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    字段 当前状态</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    方法 释放Q &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        当前状态.方法 释放Q</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>显然，代码逻辑变得清晰了许多，也更利于维护。</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><p>首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/23.jpg" alt="23.jpg"></p>
<p>因为希望能做出一个相对完整的产品，所以添加了很多无关State模式的代码。因此较之真实的程序，类图将只描述与State模式相关的那一部分。</p>
<p>本程序中的所有代码将被统一置于design19包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/24.jpg" alt="24.jpg"></p>
<p>下面将逐个贴出每个类的源码。</p>
<p>首先要说明的是，既然较之此前的设计模式(我想此后的其实也一样)，我费了更大的力气写需求分析。那么我在介绍示例代码时，也打算说得详细一些：并不仅仅是说State模式本身，而是把用到的其他的模式与想法也都详细介绍一下，算是我个人这段时间学习的总结。</p>
<p>程序是以简化版的MVC模式设计的(即只有M与V，没有C)。下面先来介绍M。</p>
<p><strong>Hero类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19.model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Hero &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected boolean ifDeath;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int maxHealth &#x3D; 2 * (370 + 90 * 17);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int healthRegen &#x3D; (int)(3 * (1 + 0.12 * 17));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int health &#x3D; maxHealth;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int ap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void useQ();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void useW();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void useE();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void useR();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract boolean ifHaveMana();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract double manaRate();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract String getImgKeyWord();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract double remainQ();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract double remainW();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract double remainE();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract double remainR();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Hero() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 回血</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Hero.this.ifDeath) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Hero.this.health &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        int tempHealth &#x3D; Hero.this.health + Hero.this.healthRegen;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Hero.this.health &#x3D; tempHealth &gt; Hero.this.maxHealth ? Hero.this.maxHealth : tempHealth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isDeath() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return ifDeath;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void damage(int value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int tempHealth &#x3D; this.health - value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (tempHealth &lt;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifDeath &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.health &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.health &#x3D; tempHealth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public double getHealthRate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 1.0 * this.health &#x2F; this.maxHealth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public double getManaRate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.ifHaveMana()) throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.manaRate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    long remainTime(Skill skill) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long pass &#x3D; System.currentTimeMillis() - skill.last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (pass - skill.cd) &gt;&#x3D; 0 ? 0 : (skill.cd - pass);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean check(String mark) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.ifDeath) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (&quot;Q&quot;.equals(mark))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.remainQ() &gt; 0) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (&quot;W&quot;.equals(mark))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.remainW() &gt; 0) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (&quot;E&quot;.equals(mark))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.remainE() &gt; 0) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (&quot;R&quot;.equals(mark))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.remainR() &gt; 0) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>从逻辑上来说，Hero类与后文要介绍的Skill类是model模块中外部(本程序中是View)能感知到的仅有的两个类。因为英雄联盟有很多位英雄，对于外部调用者而言，针对不同英雄写不同的代码是很不现实的，相反，正如其他MVC中的V那样，V需要的是M能提供一套通用的API。具体到本示例，就是”英雄释放技能，造成影响”。这都是很抽象的东西，换句话说，如果我们将奈德丽换为另一位英雄，例如寒冰射手艾希，View层不应做任何或只应做极少的修改。</p>
<p>因为本示例的逻辑相对简单，因此对外暴露的API仅仅只有Hero类一个。Skill类依逻辑可以暴露API，只是没必要。而model中的其他类则是不准暴露。这点务必要理解透彻才可以。</p>
<p>为了不使得程序看着过于臃肿，除非是需要对外提供的API，model内部各个类之间互相使用字段时尽量都没有写get-set方法，而仅仅只是通过访问权限来屏蔽外界，这在比较严谨的场合(例如实际工作时的代码)往往是不可以的。</p>
<p>之所以将Hero声明为抽象类而非接口，比较直观的解释自然就是我们希望在其中添加一些属于实例的字段及方法，以及我们确信在本程序中继承Hero的Nidalee类不会有其他父类。不过更本质的原因在于，这种继承关系遵循合成聚合复用原则(奈德丽是一位英雄，即ISA)及里氏替换原则，这才是原因所在，最开始说的那个所谓的”直观的解释”，比起原因，更像是由原因导致的现象。</p>
<p>作为LOL这种竞技游戏通常都会有的属性，HP与MP。我只将HP及HP相关的属性作为字段加入到了Hero类中。其原因就在于所有的英雄都有HP，但并不是所有的英雄都会有MP。比如就会有德玛西亚之力盖伦，不祥之刃卡特琳娜这种完全没有MP的英雄，或是盲僧李青，蛮族之王泰达米尔这种拥有能量或是怒气等与MP性质类似的东西的英雄。再或者是甚至像本文介绍的拥有双形态的奈德丽，某个形态下像大多英雄那样拥有MP，某个形态下又像盖伦那样无消耗。基于这个考虑，我将MP沉到了再下一个层级：如果这个英雄有MP，那么就在自己内部添加。而Hero这一层尽量只添加所有英雄都会有的字段。这也是抽象的本质思路所在：抽取相同的部分以形成更高的层级。因为相同的原因，就很容易理解Hero类中剩下的两个字段了：表示是否死亡的ifDeath，以及表示魔法能力的ap值。作为一个英雄，其实还会有更多复杂的属性，例如ad，护甲，魔抗，移速等等。本示例只使用了少量需要的部分。</p>
<p>除了字段之外，我们还将其他对HP的操作都尽量提到了Hero这一层，因为这是所有英雄通用的。我在Hero的构造函数中起了一个线程模拟回血。还提供了damage()方法供外部调用模拟扣血。</p>
<p>use Q/w/E/R方法表示外界按下了一次QWER键。而remain Q/w/E/R方法则返回QWER技能技能CD恢复的百分比。很显然，该值的取值范围为[0,1]。当该值等于0时说明技能没有进入冷却，可以释放(当然仅仅只是冷却好了，人形态下还要蓝够才可以)；而等于1则说明技能刚进入冷却。</p>
<p>ifHaveMana()这个方法会判断英雄是否有蓝条(本程序在设计时就不考虑怒气能量等奇怪的东西了)。依上文所说的MP下沉的思路，这个方法放在Hero类里虽然有点不太美观，但终归是还能接受。而getManaRate()方法就有些诡异了，它返回的是当前MP值占MP最大值的比例，是为了显示蓝条长度用的。由代码不难看出，当外部调用该方法后，会先再判断一次ifHaveMana()，如果返回false，即英雄没有MP，则抛出异常。反之才会调用子类本身计算比例的manaRate()方法，这里运用了Template Method模式。不过这不是重点。我想说的是，对于没有MP的英雄而言，这个方法是根本不该被调用的，这种提供了功能却在内部抛出异常的做法相当于甩锅给调用方，显然是很不优雅的。更有问题的是，明明将MP下沉到了更下一层，却还是在Hero这一层出现了这么具体的计算MP相关值的方法，看着着实扎眼。说了这么多，之所以千不该万不是还是把代码写成了这样，是因为我们在写代码时，比起面面俱到，更多时候是在两害相权取其轻。因为我们要向外界暴露一个通用的Hero而非具体的英雄，那么在外界需要蓝条时，只能做一个这样折中的方案。或是将程序写得更复杂：例如抽象出一个能统合MP，怒气，能量，甚至是无的东西，代表释放技能的代价。不过本程序显然没必要那么复杂就是了。</p>
<p><strong>Skill类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19.model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Skill &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    long cd;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    long last;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int cost;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Skill(long cd, int cost) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.cd &#x3D; cd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.cost &#x3D; cost;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>相对而言，Skill类就要简单得多了。也没有提供对外的API。</p>
<p><strong>Nidalee类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19.model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Nidalee extends Hero &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Skill skillR &#x3D; new Skill(4000L, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NidaleeState state;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Nidalee() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NidaleeState humanState &#x3D; new HumanState(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NidaleeState leopardState &#x3D; new LeopardState(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        humanState.otherState &#x3D; leopardState;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        leopardState.otherState &#x3D; humanState;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.state &#x3D; humanState;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void useQ() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.state.useQ();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void useW() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.state.useW();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void useE() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.state.useE();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void useR() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.state.useR();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean ifHaveMana() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.state.maxMana &gt; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public double manaRate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 1.0 * this.state.mana &#x2F; this.state.maxMana;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getImgKeyWord() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.state.type;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public double remainQ() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.ifDeath) return 0.0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 1.0 * this.remainTime(this.state.skillQ) &#x2F; this.state.skillQ.cd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public double remainW() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.ifDeath) return 0.0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 1.0 * this.remainTime(this.state.skillW) &#x2F; this.state.skillW.cd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public double remainE() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.ifDeath) return 0.0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 1.0 * this.remainTime(this.state.skillE) &#x2F; this.state.skillE.cd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public double remainR() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.ifDeath) return 0.0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 1.0 * this.remainTime(this.skillR) &#x2F; this.skillR.cd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>state字段表示奈德丽当前处于的状态。在构造函数中，我们将默认的状态设置为人形态。然后我们又声明了一个豹形态的对象。将人形态与豹形态互相绑定。这意味着，在按下R技能，需要进行形态切换时，Nidalee类是不需要做任何操作的，切换操作将由表示形态的类完成：人形态时变为豹形态，豹形态时变为人形态。进而，Nidalee类在使用state时(我们可以看到，Nidalee类中绝大多数的操作最终实际都是由state完成的)，并不关心当前到底处于什么形态，它都会当做只有一个形态那样去使用。</p>
<p>本程序中，Nidalee类中只会存储一个表示形态的字段。形态的切换由形态本身完成。它并不能统计出当前一共有多少种形态 – 这当然是State模式的设计方式之一。这样的好处在于既然Nidalee类将状态相关的处理都委托给各State类去做，那么”状态切换”显然也是相关处理之一。那么在它被触发的地方直接完成显然是最简洁干脆的做法 – 正如本文所做的那样。不过，这样做的问题在于，State之间需要彼此感知，因为唯有这样，一个State才能知道要切换为谁。这其实并不是十分符合逻辑：因为各State类之间其实是兄弟关系，并没有义务互相感知。从这个思路来想，负责切换的工作应该交给再上一层，也就是这些State类的宿主Nidalee类。此时，Nidalee类就需要记录自己保管的所有State类，以及它们之间的切换逻辑。</p>
<p>奈德丽共有7个不同的技能。我们将人形态的QWE与豹形态的QWE均放在了对应形态的类中，因为我们认为这些技能是属于那个形态特有的。而将人豹共用的R技能提到了Nidalee类中。同理，我们依然没有将MP放到Nidalee类中，而是将它继续下放：因为只有人形态下才有MP，豹形态下没有。</p>
<p><strong>NidaleeState类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19.model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class NidaleeState &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Nidalee nidalee;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String type;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected NidaleeState otherState;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int maxMana;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int manaRegen;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int mana;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Skill skillQ;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Skill skillW;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Skill skillE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract void handleQ();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract void handleW();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract void handleE();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NidaleeState(Nidalee nidalee) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.nidalee &#x3D; nidalee;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void useQ() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.nidalee.check(&quot;Q&quot;)) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.mana &lt; this.skillQ.cost) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillQ.last &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.handleQ();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void useW() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.nidalee.check(&quot;W&quot;)) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.mana &lt; this.skillW.cost) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillW.last &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.handleW();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void useE() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.nidalee.check(&quot;E&quot;)) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.mana &lt; this.skillE.cost) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillE.last &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.handleE();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void useR() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.nidalee.check(&quot;R&quot;)) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.nidalee.skillR.last &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.nidalee.state &#x3D; this.otherState;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>NidaleeState类是奈德丽这个英雄特有的，由其双状态提取共性后抽象出的类。正如V需要一个相对通用的Hero那样。Nidalee类也需要一个通用的表示状态的类。对于更上面的层级而言(Hero，View)，奈德丽拥有双形态是其自身内部的事，它们并不会，也不需要感知得到。</p>
<p>另外一个有趣的点是，Hero作为直接暴露在外的类，会提供很多与外部逻辑紧密相关的功能。例如Hero中的ifHaveMana()，而Nidalee作为它的子类也必须实现。但是作为最终工作者的NidaleeState中却没有这个方法 – Nidalee的ifHaveMana()实际是通过判断当前状态的maxMana来实现的。关于这一点我想说的是，外部需求是在不停扩充的，需求也将千变万化。而不论Hero也好，Nidalee也罢，其实都是model模块内部的类。这会导致model与外部需求耦合得过于紧密，不利于代码的维护。而通常的做法是，我们会在M与V之间再加入一个DAO，也就是数据传输层。因为本质上来说，MVC其实就是”V向M要数据”以及”V触发M修改自身的数据”(很少会出现”M主动向V推送数据”的情况，因为下层一般无需对上层负责，毕竟M都是被动的，笑)。而DAO则是M与V之间的桥梁。当引入DAO后，这部分与V耦合得过于紧密的代码就可以自M转移到DAO中了。从更大的视角来看，这个所谓的DAO，实际上是MVC中C所承载的功能的一部分。所以说，出来混终归是要还的。本示例程序节省了C这一层，终究还是给程序引入了风险(话是这么说没错啦，小程序其实问题不大。还是要具体问题具体分析)。</p>
<p><strong>HumanState类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19.model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class HumanState extends NidaleeState &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    HumanState(Nidalee nidalee) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(nidalee);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.type &#x3D; &quot;human&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.maxMana &#x3D; 4 * (220 + 45 * 17);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.manaRegen &#x3D; (int)(5 * (0.9 + 0.06 * 17));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mana &#x3D; maxMana;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillQ &#x3D; new Skill(6000L, 90);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillW &#x3D; new Skill(18000L, 60);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillE &#x3D; new Skill(10000L, 120);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 回蓝</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (HumanState.this.nidalee.ifDeath) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        int tempMana &#x3D; HumanState.this.mana + HumanState.this.manaRegen;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        HumanState.this.mana &#x3D; tempMana &gt; HumanState.this.maxMana ? HumanState.this.maxMana : tempMana;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void handleQ() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modMana(this.skillQ.cost);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void handleW() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modMana(this.skillW.cost);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void handleE() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modMana(this.skillE.cost);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        double loseHealthRate &#x3D; 1.0 - this.nidalee.getHealthRate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        double addHealthBase &#x3D; 115 + (230 - 115) * loseHealthRate;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        double addHealthAP &#x3D; this.nidalee.ap * (0.325 + (0.65 - 0.325) * loseHealthRate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int tempHealth &#x3D; this.nidalee.health + (int)(addHealthBase + addHealthAP);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.nidalee.health &#x3D; tempHealth &gt;&#x3D; this.nidalee.maxHealth ? this.nidalee.maxHealth : tempHealth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void modMana(int cost) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.mana &lt; cost) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int tempMana &#x3D; this.mana - cost;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mana &#x3D; tempMana &gt; 0 ? tempMana : 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>奈德丽的人形态。我们可以看到，MP相关的操作都在这个类中。</p>
<p><strong>LeopardState类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19.model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class LeopardState extends NidaleeState &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    LeopardState(Nidalee nidalee) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(nidalee);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.type &#x3D; &quot;leopard&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillQ &#x3D; new Skill(5000L, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillW &#x3D; new Skill(3500L, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.skillE &#x3D; new Skill(6000L, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void handleQ() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void handleW() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void handleE() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>handle Q/W/E方法都是空的，这意味着这些技能不会产生什么效果。实际中当然不会这样，因此这样写程序其实并没有问题。</p>
<p>介绍完了HumanState与LeopardState，我想说的是，很多时候，表征状态的类通常都是单例的，因为状态本就是一个相对抽象的东西。只不过，在本程序中，状态还和很多特有的属性(例如MP，技能恢复CD)挂钩，因此不能声明为单例。</p>
<p><strong>View类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19.view;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.KeyAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.KeyEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design19.model.Hero;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design19.model.Nidalee;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class View extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Hero nidalee &#x3D; new Nidalee();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(500, 200);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(330, 713);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addKeyListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new KeyAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void keyReleased(KeyEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    switch(e.getKeyCode()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_Q:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.nidalee.useQ();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_W:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.nidalee.useW();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_E:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.nidalee.useE();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_R:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.nidalee.useR();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_X:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.nidalee.damage(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 基本参数</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int leftBar &#x3D; 11;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int aboveBar &#x3D; 45;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int imgWidth &#x3D; 308;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int imgHeight &#x3D; 560;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int skillWidth &#x3D; 308 &#x2F; 4;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 血条蓝条</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int slotHeight &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.setColor(this.getHealthColor());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillRect(leftBar, aboveBar, (int)(imgWidth * this.nidalee.getHealthRate()), slotHeight);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.nidalee.ifHaveMana()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            g.setColor(Color.BLUE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            g.fillRect(leftBar, aboveBar + slotHeight, (int)(imgWidth * this.nidalee.getManaRate()), slotHeight);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 图片</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(this.loadImgWeaken(this.nidalee.getImgKeyWord() + &quot;.jpg&quot;), leftBar, aboveBar + 2 * slotHeight, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 技能图标</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int skillH &#x3D; aboveBar + 2 * slotHeight + imgHeight;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(this.loadImgWeaken(this.nidalee.getImgKeyWord() + &quot;Q.jpg&quot;), leftBar, skillH, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(this.loadImgWeaken(this.nidalee.getImgKeyWord() + &quot;W.jpg&quot;), leftBar + skillWidth, skillH, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(this.loadImgWeaken(this.nidalee.getImgKeyWord() + &quot;E.jpg&quot;), leftBar + skillWidth * 2, skillH, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(this.loadImgWeaken(&quot;R.jpg&quot;), leftBar + skillWidth * 3, skillH, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 技能冷却</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.setColor(Color.BLACK);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int qCDHeight &#x3D; (int)(this.nidalee.remainQ() * skillWidth);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillRect(leftBar, skillH + skillWidth - qCDHeight, skillWidth, qCDHeight);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int wCDHeight &#x3D; (int)(this.nidalee.remainW() * skillWidth);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillRect(leftBar + skillWidth, skillH + skillWidth - wCDHeight, skillWidth, wCDHeight);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int eCDHeight &#x3D; (int)(this.nidalee.remainE() * skillWidth);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillRect(leftBar + skillWidth * 2, skillH + skillWidth - eCDHeight, skillWidth, eCDHeight);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int rCDHeight &#x3D; (int)(this.nidalee.remainR() * skillWidth);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillRect(leftBar + skillWidth * 3, skillH + skillWidth - rCDHeight, skillWidth, rCDHeight);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 阵亡文字</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.nidalee.isDeath()) g.drawImage(this.loadImg(&quot;death.png&quot;), leftBar + 35, aboveBar + 250, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    View.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(40);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image bImage &#x3D; super.createImage(this.getWidth(), this.getHeight());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics bg &#x3D; bImage.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.paint(bg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bg.dispose();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(bImage, 0, 0, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private BufferedImage loadImg(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bImage &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bImage &#x3D; ImageIO.read(View.class.getClassLoader().getResource(&quot;design19&#x2F;img&#x2F;&quot; + name));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return bImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private BufferedImage loadImgWeaken(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bufferedImage &#x3D; this.loadImg(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.nidalee.isDeath()) return bufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int width &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean ifShowY &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int nowY &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int y &#x3D; 0; y &lt; bufferedImage.getHeight(); y++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!ifShowY) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int x &#x3D; 0; x &lt; bufferedImage.getWidth(); x++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    bufferedImage.setRGB(x, y, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                boolean ifShowX &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int nowX &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int x &#x3D; 0; x &lt; bufferedImage.getWidth(); x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if(!ifShowX) bufferedImage.setRGB(x, y, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    nowX++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (nowX &#x3D;&#x3D; width) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        nowX &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ifShowX &#x3D; !ifShowX;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nowY++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (nowY &#x3D;&#x3D; width) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                nowY &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ifShowY &#x3D; !ifShowY;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return bufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Color getHealthColor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int red;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int green;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.nidalee.getHealthRate() &gt;&#x3D; 0.5) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            green &#x3D; 255;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            red &#x3D; (int)(255 * (1.0 - this.nidalee.getHealthRate()) * 2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            red &#x3D; 255;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            green &#x3D; (int)(255 * this.nidalee.getHealthRate() * 2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Color(red, green, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>代码很长，不过其中大多是Java AWT套路话的东西，需要说的只有以下几点。</p>
<p>首先，为了代码书写简单，我写了很多硬编码。通常这种涉及面板参数的操作，都会写得更灵活，例如支持面板整体的缩放等。其次，在加载图片时，我其实是每刷新一次面板就重新加载了一次，这显然是很浪费CPU的，通常来说都会在一个地方将需要用的图片加载入内存，形成静态字段。</p>
<p>其次，就是两个小算法啦。先来说第一个：血条绿-黄-红的渐变。这个功能主要写在getHealthColor()方法中。本质上来说，这个算法就是通过控制RGB中RED-GREEN-BLUE三个分量的值来调制出需要的颜色。对于RGB颜色而言：</p>
<ul>
<li>绿：(0,255,0)</li>
<li>黄：(255,255,0)</li>
<li>红：(255,0,0)</li>
</ul>
<p>假如我们将HP的变化趋势考虑为递减(递增其实也同理，相当于是逆过程)：</p>
<p>首先，无论如何，蓝色分量均为0。</p>
<p>在HP由100%-50%的过程中，绿色分量始终为255，而红色分量由0逐渐增加至255。</p>
<p>当血量达到50%时，RGB颜色为(255,255,0)，即标准的黄色。</p>
<p>随后，在HP由50%-0的过程中，红色分量始终为255，而绿色分量则由255逐渐减少为0。</p>
<p>然后再来说第二个：也就是图片虚化效果的实现。功能代码在loadImgWeaken()方法中，实现的效果就是行与列均是每隔一个像素点输出一个，形成网格效果。同时，由于输出的像素点变少，图片整体也会变暗。具体的算法逻辑可参见<a href="/2018/05/20/JavaAWT-以像素为单位操纵图片/">Java AWT-以像素为单位操纵图片</a>。</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design19;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design19.view.View;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new View().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后，即可按需求输出结果。</p>
<p><strong>用到的图片</strong></p>
<p>最后，贴一下本程序用到的图片。</p>
<p>人形态立绘human.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/25.jpg" alt="25.jpg"></p>
<hr>
<p>豹形态立绘leopard.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/26.jpg" alt="26.jpg"></p>
<hr>
<p>人形态Q技能humanQ.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/27.jpg" alt="27.jpg"></p>
<hr>
<p>人形态W技能humanW.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/28.jpg" alt="28.jpg"></p>
<hr>
<p>人形态E技能humanE.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/29.jpg" alt="29.jpg"></p>
<hr>
<p>豹形态Q技能leopardQ.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/30.jpg" alt="30.jpg"></p>
<hr>
<p>豹形态W技能leopardW.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/31.jpg" alt="31.jpg"></p>
<hr>
<p>豹形态E技能leopardE.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/32.jpg" alt="32.jpg"></p>
<hr>
<p>R技能R.jpg</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/33.jpg" alt="33.jpg"></p>
<hr>
<p>死亡文字提示death.png</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/34.png" alt="34.png"></p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了State模式的Java实现，下面咱们试着跳出语言层面，抽象出State模式中登场的角色。</p>
<p><strong>State(状态)</strong></p>
<p>在示例程序中，由NidaleeState类扮演这个角色。</p>
<p><strong>ConcreteState(具体的状态)</strong></p>
<p>在示例程序中，由HumanState及LeopardState联袂扮演这个角色。</p>
<p><strong>Context(上下文)</strong></p>
<p>实际就是拥有State的宿主，在示例程序中，由Nidalee类扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19State%E6%A8%A1%E5%BC%8F/35.jpg" alt="35.jpg"></p>
<p>较之示例程序，本类图少了不少类。其原因就在于，从本质上来说。State模式就是在将State角色自Context角色中分离出去。因此核心角色其实就只有这两个。</p>
<p>此外，示例程序中的NidaleeState是一个抽象类，而本类图中的State是一个接口。之所以会产生这种不同，是因为State只要表示的含义是一个抽象的状态即可，具体的形式应依具体使用场景而定。</p>
<h1 id="易于增加xx，难以xx"><a href="#易于增加xx，难以xx" class="headerlink" title="易于增加xx，难以xx"></a>易于增加xx，难以xx</h1><p>在State模式中，增加一个新的State相对容易，我们只需要让它实现上层的抽象类或接口，然后按约束编写代码即可。而在上层的抽象类或接口中增加一个新的方法则相对费事：这需要每一个State都增加这个新的方法。因为代码相对分散，每个State的编码思路可能大不相同，所以写起来会麻烦得多。</p>
<p>仔细回忆此前写过的设计模式相关的博客，这种”易于xx，难以xx”其实已经出现过很多次了。例如，在<a href="">8.Abstract Factory模式</a>中我们就曾说过，Abstract Factory模式”易于扩展具体的工厂，难以增加新的零件”。</p>
<p>其实这种特性源于继承或是实现。按照抽象的上层的约束写成新的下层相对容易，因为这遵循开闭原则。此时只需增加新代码，而无需对原有代码做出修改。而在抽象的上层中添加新功能则相对困难，因为这相当于所有已有的下层类都需要修改，违背了开闭原则。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-18.Memento模式</title>
    <url>/2018/08/30/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-18Memento%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Observer模式被归入了第8部分<a href="">管理状态</a>。在GoF原书中，Observer模式则被归入了<a href="">行为型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>大多数的文本编辑软件，都会支持撤销操作：我们可以通过该操作将文本恢复为之前的版本。而且这种撤销通常可以进行不止一次，即我们能够通过反复撤销将文本恢复为很久以前的版本。</p>
<p>如果打算使用面向对象的语言实现这个功能的话，该怎么做呢？</p>
<p>首先，既然要恢复，就必须将此前的状态保存下来。那么到底该如何进行这个保存操作呢？比较容易想到的方案就是在哪里变更，就在变更之前进行保存。但是既然要保存对象，就必须能够访问对象内部的数据结构才行，如果需要保存的地方有多处，就会使得访问内部数据结构的逻辑散落在代码的多个位置，不利于程序的维护。在编程领域，这被称为”破坏了封装性”。</p>
<p>因此我们引入了Memento模式。Memento有”遗物，纪念品”的含义。顾名思义，它会将对象某个时间点需保存的属性记录下来，形成快照。然后在需要时再拿来使用。这样对对象状态的封装就被封装进了一个个Memento实例中。当外界需要快照时，就调用对象相关的方法生成Memento实例。而当需要恢复为某个Memento实例的状态时，就将该Memento实例传递给对象，让对象自行恢复到以前的状态(颇有些游戏存档-读档的意思)。这样，对于外部而言，对象内部的数据结构依然是黑盒的。</p>
<p>在这里要明确的是，Memento实例和它所记录的对象实例是不同的。这种不同一方面当然来自时间性上，对象本身是有时间维度的，它可能会随着时间的推进变更内部存储的值，而Memento实例则是记录某个时间点上对象的状态，仿佛就是一张定格的照片，是静态的。另一方面，Memento实例也并非是某个时间点上对对象属性的完全复制(拍照片还有失真呢)，当然我们也可以做到完全复制，不过这通常是没有意义的。我们往往只会将我们关心的，又会随时间变化的属性记录下来，用于恢复。</p>
<p>说到这里，大家有没有想到些什么呢？对啦！就是Java的序列化(java.io.Serializable接口)功能。实现了该接口的类就有能力保存自身在某个时间点上的状态，以供后续的恢复。其基本思路和Memento模式还是很像的。只不过，二者的应用目标还是不同的，Java的序列化主要是为了空间上的便利性：即在A地生成的对象，可以通过序列化存储至磁盘上，然后经由网络等通路传递至B地，再恢复为原对象。这是一个完整的对象打包再解包的过程，因此序列化通常会保存对象的所有核心属性(不管是否随时间变化的都会保存)。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们来看一个应用了Memento模式的小例子。作为一个demo小程序，我们当然不会实现一个记事本。在此我们用Java AWT实现了一个小窗体。小窗体上只有一个数字，表示得分：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18Memento%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>该程序会监听键盘事件：</p>
<ul>
<li>上箭头：加1分</li>
<li>下箭头：减1分</li>
<li>左箭头：撤销一次之前的加/减操作</li>
<li>右箭头：显示当前存储的快照</li>
<li>其他按键：无</li>
</ul>
<p>下面就赶快来看代码吧~首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18Memento%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>本程序中的所有代码将被统一置于design18包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18Memento%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Subject类</strong></p>
<p>首先是待保存状态的对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design18;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Subject &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int score;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Subject(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getScore() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setScore(int score) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.score &#x3D; score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Memento createSnapshot() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Memento(this.score);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void recovery(Memento memento) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.score &#x3D; memento.getScore();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Memento类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design18;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Memento &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int score;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Memento(int score) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.score &#x3D; score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int getScore() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Memento [score&#x3D;&quot; + score + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>虽然代码比较短，但毫无疑问，从名字上也能看出，Memento类就是Memento模式最重要的一个类了。在本示例中，它记录了Subject对象的状态。关于这个类，有如下几点需要说明：</p>
<ul>
<li>单从本文的代码来看，Memento与Subject似乎毫无关联。但实际上，Memento完全附属于Subject。因此实际情况下我们通常会将Memento写为Subject的内部类，或是非public类。本文将Memento单独提取出一个文件，主要是为了能使类图更清晰，便于理解。</li>
<li>Subject中有name和score两个属性，但是name是不会随时间变化的，因此Memento中就只记录了score。</li>
<li>除了toString()之外，Memento中的所有字段和方法的最高访问权限都只到无修饰符，也就是同包下可访问。说实话这个权限还是给大了，因为我们其实希望只有Subject类能访问到这些字段和方法，这也算是没有将Memento写为Subject的内部类的另一个后遗症吧，使得权限控制变得有些混乱了。</li>
</ul>
<p>接最后一小点。其实我们可以再扩展一下。在面向对象编程中，我们可以按访问权限将方法分为两类，需要注意的是，下文中说的接口指得其实是广义上的方法API，而非狭义上Java中的接口：</p>
<ul>
<li>wide interface(宽接口)：暴露大量内部信息的接口，通常只供比较”亲密”的内部人员调用。</li>
<li>narrow interface(窄接口)：只保留少量非核心的信息，供外部调用。</li>
</ul>
<p>这样做可以很好的划定模块间的界限，防止对象的封装性被破坏。显然，对于Memento而言，构造函数以及getScore()均是窄接口，而toString()则是宽接口。</p>
<p><strong>View类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design18;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Font;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.KeyAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.KeyEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class View extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Subject subject;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;Memento&gt; snapshotList &#x3D; new ArrayList&lt;Memento&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public View(Subject subject) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.subject &#x3D; subject;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(200, 150);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setTitle(this.subject.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addKeyListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new KeyAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void keyReleased(KeyEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    switch(e.getKeyCode()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_UP:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;上箭头被按下，加分。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.snapshotList.add(View.this.subject.createSnapshot());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.subject.setScore(View.this.subject.getScore() + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_DOWN:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;下箭头被按下，减分。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.snapshotList.add(View.this.subject.createSnapshot());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        View.this.subject.setScore(View.this.subject.getScore() - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_LEFT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;左箭头被按下，撤销上一次操作。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        if (View.this.snapshotList.size() &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            Memento lastMemento &#x3D; View.this.snapshotList.get(View.this.snapshotList.size() - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            View.this.snapshotList.remove(View.this.snapshotList.size() - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            View.this.subject.recovery(lastMemento);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    case KeyEvent.VK_RIGHT:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;右箭头被按下，在控制台中打印当前存储的快照。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        for (int i &#x3D; 0; i &lt; View.this.snapshotList.size(); i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(i + &quot;---&quot; + View.this.snapshotList.get(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    default:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;非法按键，键值&#x3D;&quot; + e.getKeyCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.setFont(new Font(null, Font.BOLD, 30));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawString(&quot;&quot; + View.this.subject.getScore(), 50, 100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    View.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(40);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image bImage &#x3D; super.createImage(this.getWidth(), this.getHeight());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics bg &#x3D; bImage.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.paint(bg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bg.dispose();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(bImage, 0, 0, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>代码看起来比较长，不过大部分都是Java AWT中模板化的东西。和本文最相关的那部分逻辑被封装在了launchFrame()方法的super.addKeyListener()中。从代码中我们可以看到，View对快照的生成过程是完全黑盒的，它只是调用了Subject的createSnapshot()方法，然后将其存储到自身管理的快照列表snapshotList中。而后在需要显示和恢复时，直接使用即可。不过即便是恢复，View也仅仅是将需要恢复为的那份Memento通过Subject的recovery()方法传递给Subject而已，这个过程依然是黑盒的。</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design18;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new View(new Subject(&quot;博丽灵梦&quot;)).launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行该类后，程序即可按照规定的由键盘控制分数的加减。在此输出部分最初的在控制台中打印的文字：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上箭头被按下，加分。</span></pre></td></tr><tr><td class="code"><pre><span class="line">右箭头被按下，在控制台中打印当前存储的快照。</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">0---Memento [score&#x3D;0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">上箭头被按下，加分。</span></pre></td></tr><tr><td class="code"><pre><span class="line">上箭头被按下，加分。</span></pre></td></tr><tr><td class="code"><pre><span class="line">上箭头被按下，加分。</span></pre></td></tr><tr><td class="code"><pre><span class="line">上箭头被按下，加分。</span></pre></td></tr><tr><td class="code"><pre><span class="line">下箭头被按下，减分。</span></pre></td></tr><tr><td class="code"><pre><span class="line">右箭头被按下，在控制台中打印当前存储的快照。</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">0---Memento [score&#x3D;0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">1---Memento [score&#x3D;1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">2---Memento [score&#x3D;2]</span></pre></td></tr><tr><td class="code"><pre><span class="line">3---Memento [score&#x3D;3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">4---Memento [score&#x3D;4]</span></pre></td></tr><tr><td class="code"><pre><span class="line">5---Memento [score&#x3D;5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">左箭头被按下，撤销上一次操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">左箭头被按下，撤销上一次操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">右箭头被按下，在控制台中打印当前存储的快照。</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">0---Memento [score&#x3D;0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">1---Memento [score&#x3D;1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">2---Memento [score&#x3D;2]</span></pre></td></tr><tr><td class="code"><pre><span class="line">3---Memento [score&#x3D;3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">左箭头被按下，撤销上一次操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">左箭头被按下，撤销上一次操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">右箭头被按下，在控制台中打印当前存储的快照。</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">0---Memento [score&#x3D;0]</span></pre></td></tr><tr><td class="code"><pre><span class="line">1---Memento [score&#x3D;1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Observer模式的Java实现，下面咱们试着跳出语言层面，抽象出Observer模式中登场的角色。</p>
<p><strong>Originator(生成者)</strong></p>
<p>Originator能够生成某时刻表示自身当前状态的Memento角色。也能根据传入的Memento恢复到此前的状态。在示例程序中，由Subject类扮演这个角色。</p>
<p><strong>Memento(纪念品)</strong></p>
<p>在示例程序中，由Memento类扮演这个角色。</p>
<p><strong>Caretaker(负责人)</strong></p>
<p>Caretaker相当于外部调用人。在需要时它会要求Originator生成Memento，并存储该Memento。不过Caretaker只能调用Memento提供的窄接口，更直白的说，相当于Originator及Memento对Caretaker而言依然还是黑盒的。在合适的时机，Caretaker会将此前的某个Memento传递给Originator，以让Originator恢复为当时的状态。在示例程序中，由View类扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18Memento%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<h1 id="Memento的过期"><a href="#Memento的过期" class="headerlink" title="Memento的过期"></a>Memento的过期</h1><p>在前文的分析中，我们说Java提供的序列化在空间上提供备份，Memento模式在时间上提供备份。这样说其实并不完善。从本质上来说，Memento模式就是保存对象某个时间点的快照，以供以后操作。事实上，Memento模式照下的快照也不总是在内存中的。最常见的就是游戏的存档，当游戏退出时，存档通常是会作为存档文件被保存在磁盘上的，下次启动或是需要的时候再读取某个档(SL大法万岁！)。</p>
<p>将快照保存为静态文件提高了程序的灵活性，却也增加了新的风险：我们要注意快照的过期。即随着程序的升级，如果对象的数据结构发生了较大的变化，新程序中的对象可能会无法读取之前版本的快照，此时就会导致快照”过期”。</p>
<h1 id="Memento的存储技巧"><a href="#Memento的存储技巧" class="headerlink" title="Memento的存储技巧"></a>Memento的存储技巧</h1><p>本文示例程序中每个Memento对象需要存储的信息很少。但是很多时候，比如前文提到的游戏存档，每个Memento可能都会占用大量的内存和磁盘空间。最基本的解决办法自然是使用各种压缩技术。不过在此之上，我们还有什么其他的好办法吗？</p>
<p>我们可以参考一下git管理代码的技术。git可以很方便的将代码恢复为之前的版本，从本质上来说实现的基本功能和Memento对象是类似的。只不过，假设我们在git上提交了一次代码，导致代码库由版本1升至了版本2。此时git并不是将版本1全部拍为快照，而是只记录快照间的变化情况。这样在恢复时只需要反向的追溯这种变化即可。在编程领域，这是少有的用时间换空间的例子。</p>
<p>类似的，虽然普通场景下两个连续的快照间的关联没有那么强，但是如果两次变动间绝大多数的数据都没有变化，那么我们也可以只记录发生变化的值，进而构建变化链，达到类似的节省空间的效果。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-17.Observer模式</title>
    <url>/2018/08/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-17Observer%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Observer模式被归入了第8部分<a href="">管理状态</a>。在GoF原书中，Observer模式则被归入了<a href="">行为型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Observer的含义是”观察者”，既然有观察者，那么自然就要有”观察对象”。在Observer模式中，观察者可以通过某种手段感知到观察对象某些状态的变化，进而做出相应的决策。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们来看一个应用了Observer模式的示例程序。该程序的观察对象会定时产生随机数，而观察者在感知到随机数变化后会在控制台打印出数值的变化情况。</p>
<p>首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17Observer%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design17包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17Observer%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Model类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design17;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Model implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int number;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    long sleepTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private View view;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int numberRange;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Model(long sleepTime, int numberRange) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sleepTime &#x3D; sleepTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.numberRange &#x3D; numberRange;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Random random &#x3D; new Random();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.number &#x3D; random.nextInt(this.numberRange);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.view.needUpdate.set(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread.sleep(this.sleepTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setView(View view) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.view &#x3D; view;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>View类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design17;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicBoolean;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class View implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AtomicBoolean needUpdate &#x3D; new AtomicBoolean();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Model model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private long sleepTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int lastNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public View(Model model) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.model &#x3D; model;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sleepTime &#x3D; this.model.sleepTime &#x2F; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.needUpdate.get()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(this.lastNumber + &quot; --&gt; &quot; + this.model.number);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.lastNumber &#x3D; this.model.number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                this.needUpdate.set(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread.sleep(this.sleepTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design17;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Model model &#x3D; new Model(1000L, 50);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        View view &#x3D; new View(model);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        model.setView(view);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(view).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(model).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行本类后，会不停的每隔1秒打印一个[0,49]之间的随机整数。截取部分最初的输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 --&gt; 30</span></pre></td></tr><tr><td class="code"><pre><span class="line">30 --&gt; 46</span></pre></td></tr><tr><td class="code"><pre><span class="line">46 --&gt; 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">3 --&gt; 23</span></pre></td></tr><tr><td class="code"><pre><span class="line">23 --&gt; 15</span></pre></td></tr><tr><td class="code"><pre><span class="line">15 --&gt; 49</span></pre></td></tr><tr><td class="code"><pre><span class="line">49 --&gt; 40</span></pre></td></tr><tr><td class="code"><pre><span class="line">40 --&gt; 29</span></pre></td></tr><tr><td class="code"><pre><span class="line">29 --&gt; 44</span></pre></td></tr><tr><td class="code"><pre><span class="line">44 --&gt; 39</span></pre></td></tr><tr><td class="code"><pre><span class="line">39 --&gt; 11</span></pre></td></tr></table></figure>

<p>程序的代码和功能都很简单。不过还是有一些需要说明的点：</p>
<p><strong>Model与View</strong></p>
<p>在示例程序中，Model类是观察对象，View是观察者。阅读代码后就不难发现，Observer模式与MVC是如此的相似：观察对象对应MVC中的M(model)，观察者对应MVC中的V(view)。这也是本例中类名的用意。</p>
<p><strong>声明为线程</strong></p>
<p>在编写设计模式的示例程序时，核心目的是为了介绍设计模式的基本功能点，因此这些设计模式业务逻辑大多非常简单，很少会用到多线程，一般都是单线程跑到底。</p>
<p>而本例的代码虽然简单，却起了共计3个线程：</p>
<ul>
<li>main线程</li>
<li>model线程</li>
<li>view线程</li>
</ul>
<p>之所以这么做，是为了模拟通信。如果我们不使用多线程，其实也可以实现看起来差不多的功能：观察对象发生变化后，通知观察者，观察者做出应对。</p>
<p>但是这样仅仅就只能是看起来差不多了。在真正的并发环境下，观察对象发出讯息后工作就结束了，他可以继续做其他事情，也就是说，此时的消息是异步的，这也是现实中实际上发生的情况。而如果只有一个线程，这就仅仅只是看起来发出了一个消息而已，因为此时的消息逻辑是同步的，观察对象必须要等观察者处理完才能做其他事情。</p>
<p>此外，Java其实提供了一套完整的synchronized-wait()-notify()通讯机制，可以更好的完成通讯的功能。不过它隐藏了一些通讯的细节，所以为了更好的描述消息的传递，本示例通过设置flag实现了一个简单的通讯机制(不能由model直接调用view的更新方法，因为这样的话消息又是同步的了)。</p>
<p><strong>抽象层级</strong></p>
<p>示例程序并没有将代码分层，之所以这样做，是因为分层是一个基础性的思路了，并不是Observer模式要讨论的重点。在实际应用中，观察对象与观察者均可以分层：</p>
<ul>
<li>观察者的分层是比较常见的。MVC模式中的V通常都会有多个，在接到相同M发来的消息后做出不同的应对。</li>
<li>相对来说，观察对象的分层就比较少见了。不过如果业务需要，我们只要设计好观察对象统一的对外接口及消息，一个观察者用相同的套路观察多个同一类的观察对象也是可以的。</li>
<li>最后，当然我们也可以设计出多观察者对多观察对象的代码。不过通常是不会有这样的需求的，就算有也要尽量避免，因为这会导致代码层次过于复杂，使人混乱。</li>
</ul>
<p><strong>观察对象与观察者的相互感知</strong></p>
<p>首先，既然叫做观察者，那么观察者必须要知道自己观察的是谁才行。其次，因为观察对象要将自己的变化通知给观察者，因此观察对象也必须能够感知到观察者。反映到代码中，就是我们在main方法中做的model与view的绑定了。</p>
<p>在本示例中，这种对绑定的需求是很明显的，如果我们用了Java提供的synchronized-wait()-notify()通讯机制，这种需求看似是变弱了，但实际上它们只是被封装起来而已。这其实是很好理解的：双向沟通的前提当然是要互相知道对方是谁才行。</p>
<p>这个逻辑其实是有些怪的。因为按照正常的思路来看，观察者需要知道自身观察的对象是理所当然的。但是观察对象其实是无需知道有谁在观察自身的。说明白点，”我就是我，你爱看不看。我变化了也没有义务要通知你”。从更宏观的角度来讲，这其实是因为底层无需对上层负责，就好比父类无需感知到子类那样。</p>
<h1 id="示例程序2"><a href="#示例程序2" class="headerlink" title="示例程序2"></a>示例程序2</h1><p>在上一个示例程序最后，我们提到了观察对象通知观察者自身变动逻辑上的问题。因此我们会在示例程序2种修改这个逻辑：观察对象无需在意观察者，观察者需要自行想办法获取观察对象的变动情况。本示例将采取观察者轮询观察对象的方式。这也是MVC模式下GUI程序中View最常采取的一种方式。为了使得示例程序更贴近实际情境(或者说更像一个真正的产品)，本示例将使用Java AWT技术来编写可视化的View。</p>
<p>首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17Observer%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>本程序中的所有代码将被统一置于design17_2包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17Observer%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Model类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design17_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Model implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int number;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    long sleepTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int numberRange;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Model(long sleepTime, int numberRange) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sleepTime &#x3D; sleepTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.numberRange &#x3D; numberRange;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Random random &#x3D; new Random();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.number &#x3D; random.nextInt(this.numberRange);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread.sleep(this.sleepTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>较之前例，Model类并没有什么太大的变化，只是去掉了与View的关联。即，此时的观察对象已无需感知到观察者。</p>
<p><strong>View类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design17_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Font;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class View extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Model model;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private long sleepTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int lastNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int nowNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public View (Model model) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.model &#x3D; model;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.sleepTime &#x3D; this.model.sleepTime &#x2F; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(300, 150);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.setFont(new Font(null, Font.BOLD, 30));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.nowNumber !&#x3D; this.model.number) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.lastNumber &#x3D; this.nowNumber;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.nowNumber &#x3D; this.model.number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawString(this.lastNumber + &quot; --&gt; &quot; + this.nowNumber, 100, 100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    View.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(View.this.sleepTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image bImage &#x3D; super.createImage(this.getWidth(), this.getHeight());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics bg &#x3D; bImage.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.paint(bg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bg.dispose();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(bImage, 0, 0, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>相较之下，View变得就复杂得多了。不过这里大部分都是Java AWT的代码，与Observer模式无关。虽然可能会不太明显，不过Java AWT起了独立线程RepaintRunnable类的实例每隔一段时间定时刷新面板，我们也正是借此完成了观察者对观察对象主动的轮询。</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design17_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Model model &#x3D; new Model(1000L, 50);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(model).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new View(model).launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后输出这样的一个面板：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17Observer%E6%A8%A1%E5%BC%8F/4.jpg" alt="4.jpg"></p>
<p>面板上的数字会依逻辑实时变动。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p><strong>Observer(观察者)</strong></p>
<p>在两个示例程序中，均由View类扮演这个角色。</p>
<p><strong>Subject(观察对象)</strong></p>
<p>在两个示例程序中，均由Model类扮演这个角色。</p>
<p>因为Observer模式中的观察者与观察对象间的关系灵活且相对简单，因此就不给出无关语言的通用的类图了。</p>
<h1 id="观察者也可以兼任改变者"><a href="#观察者也可以兼任改变者" class="headerlink" title="观察者也可以兼任改变者"></a>观察者也可以兼任改变者</h1><p>在本文的两个小例子，以及标准的MVC的定义中，观察者的职责是很明确的：它就仅仅负责观察被观察对象，并不会对被观察对象做出修改。不过有些情境下，观察对象在观测到被观察对象发生变化后，或者是其他条件的变化，可能会需要改变观察对象的某些属性。此时观察者相当于兼任了修改者的工作。</p>
<p>我们并不能说这种做法有错。只不过这会导致程序混乱，并且增大程序出错的可能。例如此时稍有不慎，就可能造成无休止的循环：</p>
<p>观察对象变化 –&gt; 观察者观测到这种变化 –&gt; 观察者修改观察对象，导致观察对象再次变化 –&gt; 观察者观测到这种变化…</p>
<p>当然，我们可以通过代码避免这种循环，比如不会对因自身造成的变化进行处理等。不过这样终究是平添了代码逻辑的复杂性，依然不能算是优雅的代码。究其原因，还是因为角色身份的混乱。如果我们实在要实现类似的功能。也应再创建一个修改者的角色，然后通过观察者与修改者的交互达到目的。而观察者依然只有观察这一个使命，保证角色功能的单一性。</p>
<h1 id="观察与通知"><a href="#观察与通知" class="headerlink" title="观察与通知"></a>观察与通知</h1><p>依笔者的拙见，Observer模式的标准样式应该是示例程序2那样的。然而，在GoF书官方给出的介绍中，示例程序1才是Observer模式的标准调用方式。示例程序2顶多算是Observer模式的变种。对此我是不太服气的，不过争论这些其实也没什么意义(正如一再提到的，设计模式其实没什么标准可言)，日常应用中其实还是示例程序2那种的多见一些。</p>
<p>针对示例程序1那样实现的Observer模式，我们还给它起了一个别名：Publish-Subscribe(发布-订阅)模式。私以为这个命名才是比较贴切的。从我个人的理解来看，我会将示例程序1认为是Publish-Subscribe模式，而将示例程序2认为是Observer模式。二者是同一个大的思路下很相近的两种设计模式。</p>
<h1 id="Java-API对Observer模式的应用"><a href="#Java-API对Observer模式的应用" class="headerlink" title="Java API对Observer模式的应用"></a>Java API对Observer模式的应用</h1><p>Java API提供了java.util.Observer接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Observer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void update(Observable o, Object arg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很显然这是Observer模式中的观察者。而java.util.Observable则是观察对象，这个类就有些复杂了，我们只给出类定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Observable</span></pre></td></tr></table></figure>

<p>不幸的是，看来Java API的开发人员与我的意见是相左的，他们使用的也是示例程序1的那种方式(不如说好像只有我一个人的想法不一样。看来关于这件事真的就是私下认为一下得了，对外和人沟通时还是采取示例程序1的思路)。观察者的update()方法除了接收观察对象本身之外，还会接收一个附加信息。</p>
<p>不过说实话，Java API提供的这套代码挺鸡肋的。究其原因，还是因为Observable被声明为了一个类，这样的好处自然是Java API的开发人员可以在其中封装很多逻辑，在要求不高的情况下，直接使用也是可以的。只不过Java是单继承的语言，这意味着如果要使用Observer-Observable，观察对象就不能再继承其他父类，不得不说这个限制还是很大的。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-16.Mediator模式</title>
    <url>/2018/08/23/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-16Mediator%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Mediator模式被归入了第7部分<a href="">简单化</a>。在GoF原书中，Mediator模式则被归入了<a href="">行为型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>假设有这样一个开发小组，组内共有10位程序员，每人负责一个模块，共同开发一个项目。既然同属一个项目，各模块自然需要协同工作。通常来说，每个模块都需对接多个其他的模块，显然这违反了最少知识法则(迪米特法则)，使得各模块间耦合得比较严重。不仅如此，每个程序员都会自然而然的更偏向于自己负责的模块，例如要添加一个需求时，我们很可能会听到如下对话：</p>
<p>小张：”这个需求不能放在我这做，因为这会导致我这的时间复杂度大幅提升。这是不能接受的，小王你负责的那个模块也能做吧。”</p>
<p>小王：”这可不行，放在我这边的话我的功能层次结构就乱了，从逻辑上来讲就不该我做。”</p>
<p>小张：”那用户响应慢10倍？这谁能接受？”</p>
<p>小王：”实际功能问题能和架构问题比吗？架构乱了还怎么维护？而且性能这种东西总是可以通过代码优化提升的，你代码写的有问题吧！”</p>
<p>小张：”you can you up啊，什么玩意就说提升就提升。。。”</p>
<p>就这样，每个人都考虑着自己模块的局部最优，进而指挥别人，导致整个项目组的气氛一点也不好，同时项目进度也会非常缓慢。</p>
<p>针对这个问题，一个有效的解决方案就是再为这个小组配备一个”调停者”。调停者并不负责具体的模块，也并不会细致的研究每个模块的技术细节，但是他会比较全面的了解所有模块的功能特点，从而起到调停小组中各组员的作用。</p>
<p>现在，小组中的各组员之间不会互相沟通，说得极端一些，他们都不需要知道彼此的存在(此时就遵循最少知识法则了)。在遇到问题时，他们都会把自身的看法告诉给调停者，调停者在汇聚所有人的想法后，会站在项目整体的角度上权衡利弊，选择出最合理的方案，并将该方案告知所有组员，即便违背了组员局部最优的利益，组员也会无条件的遵循调停者的指示。</p>
<p>由此演化而来的设计模式就是Mediator模式。其中Mediator是”调停者”的意思，自然就是Mediator模式中最核心的角色了。此外，继承上文的例子，该模式的另一个重要角色被称为Colleague，也就是”组员”。很显然，组员会有很多个，而调停者通常只会有1位。</p>
<p>在此我们可以再举一个更常见的例子：电脑。一台电脑若要正常工作，需要它的所有组件：CPU，内存，显卡，各种IO设备等协同工作，而且这种协同关系往往是很复杂的。对此，我们并没有将所有原件错综复杂的连接在一起，而是准备了一张主板，主板并不承担具体的功能，它的作用就是让所有的原件插到自己身上。这样某原件会通过主板向外界传递信息，同时也会从主板那里接到指令。这样整个系统的关系就从各器件间错综复杂的勾连进化到了大家都只和主板交互。显然，在这个例子中，主板就是调停者，而各器件则是组员。</p>
<p>下面我们不妨考虑一种极端的情况：假设有n个Colleague，它们两两之间都需要双向通信，那么共需要通路n(n-1)条。而引入Mediator模式后，同样的需求下只需要2n的通路，通路的复杂度相当于降低了一个量级。在n越大，连接关系越复杂时，Mediator模式对通路的优化效果越大。</p>
<p>如果我们站在一个更大的视角上来看待问题的话，调停者担任的其实是统筹全局的角色。在过去已经介绍过的设计模式中，类似作用的角色其实很常见了，例如<a href="">3.Template Method模式</a>中的AbstractClass(抽象类)，<a href="">4.Factory Method模式</a>中的Creator(创建者)，<a href="">7.Builder模式</a>中的Designer(设计者)等。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们来看一个应用了Mediator模式的示例程序。这是一个使用Java AWT制作的登录窗：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16Mediator%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>作为一个登录框，我们希望它具备如下功能：</p>
<ul>
<li>任何时候，取消(Cancel)按钮均会放开，点击该按钮会导致登录窗关闭，其效果和点击右上角的叉相同。</li>
<li>第一行是一个二选一，我们可以选择采用游客(Guest)模式或是登陆(Login)模式登入。</li>
<li>如果选择游客模式，用户名(Username)及密码(Password)文本框均会置灰。同时放开登陆(OK)按钮，点击该按钮后会直接以游客身份登入，登录框关闭。</li>
<li>如果选择登陆模式，用户名文本框会被放开，若此时用户名文本框中没有文字，则密码文本框及登陆按钮均会置灰。只有当用户名文本框中有文字后，密码文本框才会被放开，此时若密码文本框中没有文字，则登陆按钮依然置灰，反之，登陆按钮放开。此时若点击登陆按钮，若用户名密码匹配，则会以该身份登入，登录框关闭。反之，不做任何操作(会在控制台打印一句提示语句)。</li>
</ul>
<p>如果是这样掰开了揉碎了仔细分析的话，小小的登陆框的逻辑其实还是挺复杂。通常我们会将每个组件都声明为一个实例：</p>
<ul>
<li>Guest选框</li>
<li>Login选框</li>
<li>Username文本框</li>
<li>Password文本框</li>
<li>OK按钮</li>
<li>Cancel按钮</li>
</ul>
<p>按照上文的需求，这些实例之间的关系错综复杂(这么说有点过了哈，稍微夸张一下)，此时就可以使用Mediator模式啦。很显然，我们应该将这些组件视为Colleague。而Mediator则让承载这些组件的Frame担任。如此看来，Java AWT中的Frame的作用其实就是相当于计算机中的主板，本身不承载具体的功能，而是负责组件的安插及沟通。</p>
<p>说了这么多需求，下面就来看看具体的代码吧。首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16Mediator%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>本程序中的所有代码将被统一置于design16包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16Mediator%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Mediator接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design16;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Mediator &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void colleagueChanged(Colleague colleague);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该接口内部只有一个方法，是供Colleague调用告知自身情况的。依本示例的需求，Colleague会把自身作为参数传递给调停者。实际应用时该方法可以是任何形式，甚至可以不是一个方法而是一组方法，只要目的不变即可。</p>
<p><strong>Colleague接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design16;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Colleague &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void setColleagueEnabled(boolean enabled);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该接口内部同样只有一个方法，是供Mediator调用向各组员下达命令的。同上文的colleagueChanged()方法，该方法的组织形式依然多种多样，只要达到目的即可。</p>
<p>至此我们可以稍微总结一下了。Mediator作为调停者，提供了一个供组员调用报告自身情况的方法。同样Colleague作为组员，也提供了一个供调停者调用下达命令的方法。这样才能保证调停者与组员间信息沟通的通畅。在实际应用中，我们自然可以依据需要为Mediator或Colleague添加更多的代码，也可以改变colleagueChanged()及setColleagueEnabled()这两个方法的形式，不过这两个方法所代表的功能却是构成Mediator模式的基本要素，是一定要有的。</p>
<p><strong>ColleagueButton类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design16;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Button;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.ActionEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.ActionListener;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ColleagueButton extends Button implements ActionListener, Colleague &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Mediator mediator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ColleagueButton(Mediator mediator, String caption) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mediator &#x3D; mediator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setColleagueEnabled(boolean enabled) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setEnabled(enabled);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void actionPerformed(ActionEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mediator.colleagueChanged(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>具体的组员之一，前文需求中的OK按钮及Cancel按钮就是它的实例。</p>
<p>既然Mediator设置了一个colleagueChanged()方法供组员调用，那么这里隐含的前提条件就是组员要知道自己的调停者是谁才行。因此ColleagueButton中添加了mediator字段，用以记录自身的调停者。本程序是以构造函数传入调停者的，实际使用时自然也可以在其他时机传入，只要用的时候有就行。</p>
<p>其实不仅仅ColleagueButton，在后文中我们会看到，所有的组员都需要做类似的操作。很显然，这是重复代码。那么既然如此，我们为什么不将mediator提到更高的层级呢？其原因就在于，Java是单继承的，这就使得Colleague只能被声明为接口，无法承载记录mediator的功能。</p>
<p><strong>ColleagueCheckbox类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design16;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Checkbox;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.CheckboxGroup;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.ItemEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.ItemListener;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ColleagueCheckbox extends Checkbox implements ItemListener, Colleague &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Mediator mediator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ColleagueCheckbox(Mediator mediator, String caption, CheckboxGroup group, boolean state) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption, group, state);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mediator &#x3D; mediator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setColleagueEnabled(boolean enabled) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setEnabled(enabled);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void itemStateChanged(ItemEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mediator.colleagueChanged(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>具体的组员之一，前文需求中的Guest选框及Login选框就是它的实例。</p>
<p><strong>ColleagueTextField类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design16;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.TextField;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.TextEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.TextListener;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ColleagueTextField extends TextField implements TextListener, Colleague &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Mediator mediator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ColleagueTextField(Mediator mediator, String text, int columns) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(text, columns);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mediator &#x3D; mediator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setColleagueEnabled(boolean enabled) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setEnabled(enabled);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setBackground(enabled ? Color.WHITE : Color.LIGHT_GRAY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void textValueChanged(TextEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mediator.colleagueChanged(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>具体的组员之一，前文需求中的Username文本框及Password文本框就是它的实例。</p>
<p><strong>LoginFrame类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design16;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.CheckboxGroup;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.GridLayout;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Label;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class LoginFrame extends Frame implements Mediator &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Map&lt;String, String&gt; USERS &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ColleagueCheckbox checkGuest;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ColleagueCheckbox checkLogin;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ColleagueTextField textUser;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ColleagueTextField textPassword;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ColleagueButton buttonOK;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ColleagueButton buttonCancel;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        LoginFrame.USERS.put(&quot;reimu&quot;, &quot;reimuwang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public LoginFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(&quot;登陆窗口&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setBackground(Color.LIGHT_GRAY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setLayout(new GridLayout(4, 2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 生成并初始化设置各组件</span></pre></td></tr><tr><td class="code"><pre><span class="line">        CheckboxGroup group &#x3D; new CheckboxGroup();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.checkGuest &#x3D; new ColleagueCheckbox(this, &quot;Guest&quot;, group, true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.checkLogin &#x3D; new ColleagueCheckbox(this, &quot;Login&quot;, group, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int textTotalLength &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.textUser &#x3D; new ColleagueTextField(this, &quot;&quot;, textTotalLength);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.textUser.setColleagueEnabled(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.textPassword &#x3D; new ColleagueTextField(this, &quot;&quot;, textTotalLength);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.textPassword.setEchoChar(&#39;*&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.textPassword.setColleagueEnabled(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttonOK &#x3D; new ColleagueButton(this, &quot;OK&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttonCancel &#x3D; new ColleagueButton(this, &quot;Cancel&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 设置Listener</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.checkGuest.addItemListener(this.checkGuest);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.checkLogin.addItemListener(this.checkLogin);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.textUser.addTextListener(this.textUser);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.textPassword.addTextListener(this.textPassword);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttonOK.addActionListener(this.buttonOK);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.buttonCancel.addActionListener(this.buttonCancel);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 调停者记录自身需要管理哪些组员</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(this.checkGuest);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(this.checkLogin);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(new Label(&quot;Username:&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(this.textUser);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(new Label(&quot;Password:&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(this.textPassword);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(this.buttonOK);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.add(this.buttonCancel);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 设置点击关闭时需执行的操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 显示</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.pack();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void colleagueChanged(Colleague colleague) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String mode &#x3D; this.checkGuest.getState() ? &quot;游客模式&quot; : &quot;登陆模式&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (colleague &#x3D;&#x3D; this.checkGuest) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;切换至游客模式，用户名输入框被关闭，密码输入框被关闭&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.textUser.setColleagueEnabled(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.textPassword.setColleagueEnabled(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (colleague &#x3D;&#x3D; this.checkLogin) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot;切换至登陆模式，用户名输入框被放开。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.textUser.setColleagueEnabled(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.controlUser();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (colleague &#x3D;&#x3D; this.textUser) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(mode + &quot;下向用户名输入框中键入文字。&quot;);    &#x2F;&#x2F; 其实只可能是登陆模式，姑且记录下</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.controlUser();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (colleague &#x3D;&#x3D; this.textPassword) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(mode + &quot;下向密码输入框中键入文字。&quot;);    &#x2F;&#x2F; 其实只可能是登陆模式，姑且记录下</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.controlPassword();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (colleague &#x3D;&#x3D; this.buttonOK) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(mode + &quot;下OK按钮被按下。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.checkGuest.getState()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;以游客的身份进入成功，窗体退出&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (this.textPassword.getText().equals(LoginFrame.USERS.get(this.textUser.getText()))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(&quot;登陆成功，窗体退出&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(&quot;用户名与密码不比配&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (colleague &#x3D;&#x3D; this.buttonCancel) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;取消按钮被按下，窗体退出&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(colleague);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void controlUser() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.textUser.getText().length() &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot;用户名输入框中有文字，密码输入框被放开。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.textPassword.setColleagueEnabled(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.controlPassword();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot;用户名输入框中没有文字，密码输入框，OK按钮关闭。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.textPassword.setColleagueEnabled(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.buttonOK.setColleagueEnabled(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void controlPassword() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.textPassword.getText().length() &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot;密码输入框中有文字，OK按钮被放开。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.buttonOK.setColleagueEnabled(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot;密码输入框中没有文字，OK按钮关闭。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.buttonOK.setColleagueEnabled(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>终于来到最重要的Mediator了。很明显，因为程序主体的控制逻辑都在调停者中，因此它的代码看起来比组员要长得多，也复杂得多。这其实可以看作Mediator模式的一个特征，由于Mediator角色需要掌控全局，因此控制逻辑都会集中到Mediator中，这会导致Mediator相对来说不易维护，同时更容易产生bug。不过这其实是可以接受的，正所谓两害相权取其轻，如果我们将控制逻辑分散在各个组员中，那么一旦产生bug，调试起来将更为困难，因为我们不得不梳理分散在各处的代码。在编程领域，我们将这种情况称为”分散灾难”。</p>
<p>类似于我们在讨论组员时分析过的，既然组员提供了setColleagueEnabled()方法供调停者调用，那么调停者就一定要知道它管理的组员有哪些才行。本示例直接将各组员作为调停者的字段记录在调停者中了，这算是最见到的做法了，具体使用时依情况不同也可以采用其他方式。</p>
<p>另外，在本示例中，组员的生成也是由调停者完成的，这是由Java AWT的特性(通常我们在用Java AWT写控件时，组件都是直接在面板内生成的)决定的，实际上，组员的生成及设置并不归调停者管。更常见的例子时，调停者与组员的生成都是独立的，二者需要做的仅仅是完成绑定关系。</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design16;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new LoginFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该类的代码很简单，执行该类后，即可显示窗体，并按需求约束的那样工作。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Mediator模式的Java实现，下面咱们试着跳出语言层面，抽象出Mediator模式中登场的角色。</p>
<p><strong>Mediator(调停者)</strong></p>
<p>在示例程序中，由Mediator接口扮演这个角色，该角色会提供一个渠道供Colleague报告自身的情况。</p>
<p><strong>ConcreteMediator(具体的调停者)</strong></p>
<p>在示例程序中，由LoginFrame类扮演这个角色。通常，该角色只会有一个。</p>
<p><strong>Colleague(同事)</strong></p>
<p>在示例程序中，由Colleague接口扮演这个角色，该角色会提供一个渠道接收Mediator的指令。</p>
<p><strong>ConcreteColleague(具体的同事)</strong></p>
<p>在示例程序中，由ColleagueButton，ColleagueCheckbox，ColleagueTextField联袂扮演这个角色。通常，该角色不止一个。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16Mediator%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-15.Facade模式</title>
    <url>/2018/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-15Facade%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Facade模式被归入了第7部分<a href="">简单化</a>。在GoF原书中，Facade模式则被归入了<a href="">结构型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>程序终归是会越来越大的，无论我们所采用的架构多么的整洁清晰，代码之间的关系也会越来越复杂(因为业务逻辑本身就是这么复杂)，这是不可避免的。作为调用者，如果我们要使用某个模块，或者是某几个某块联合提供的某个功能是，我们显然是不希望也不需要了解它们内部的调用逻辑的，通常来说，我们需要的就是提出一个请求：我要这个。然后等待收到结果就好了。</p>
<p>基于这种需求，诞生的设计模式就是Facade模式。Facade这个单词源自法语，它的含义是”建筑物的正面”。因此Facade模式也可被翻译为”门面模式”。顾名思义，就是某系统将对外提供的功能都封装在一个门面中，外部请求只和这个门面交互，而无需关心系统内部的复杂逻辑。显然，这是对最少知识法则(迪米特法则)的应用。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>本文将复用<a href="">Abstract Factory模式</a>的示例。在Abstract Factory模式的示例中，Main.java的代码是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Page;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Factory factory &#x3D; Factory.getListFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 创建页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray tray &#x3D; factory.createTray(null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Page page &#x3D; factory.createPage(&quot;网页导航&quot;, tray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 视频网站</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray videoTray &#x3D; factory.createTray(&quot;视频网站&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tray.add(videoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray twoVideoTray &#x3D; factory.createTray(&quot;二次元&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray threeVideoTray &#x3D; factory.createTray(&quot;三次元&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        videoTray.add(twoVideoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        videoTray.add(threeVideoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        twoVideoTray.add(factory.createLink(&quot;哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;, &quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        twoVideoTray.add(factory.createLink(&quot;AcFun弹幕视频网&quot;, &quot;http:&#x2F;&#x2F;www.acfun.cn&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;腾讯视频&quot;, &quot;https:&#x2F;&#x2F;v.qq.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;爱奇艺&quot;, &quot;http:&#x2F;&#x2F;vip.iqiyi.com&#x2F;firstsix-new-pc.html&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;优酷&quot;, &quot;http:&#x2F;&#x2F;www.youku.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 搜索引擎</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray searchTray &#x3D; factory.createTray(&quot;搜索引擎&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tray.add(searchTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        searchTray.add(factory.createLink(&quot;百度&quot;, &quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        searchTray.add(factory.createLink(&quot;谷歌&quot;, &quot;http:&#x2F;&#x2F;www.google.cn&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 打印页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">        page.createFile(&quot;D:&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>作为Main.java，它承载的其实是调用者的角色。很显然，此时的调用者要了解大量关于抽象工厂的实现细节：</p>
<ul>
<li>需要通过getListFactory()拿到具体的工厂，如果具体的工厂不止一个，还要了解每个工厂的实现细节，自己做出甄别。</li>
<li>需要了解各个零件的含义及它们彼此间的关系。</li>
<li>需要自己组装零件，设计产品。</li>
</ul>
<p>在总结Abstract Factory模式时，我们说Abstract Factory模式仅仅只是提供了一套设备齐全的厂房及完成基本零件的工人，但是并没有提供设计产品的厂长。在上文的示例中，这个设计者的工作显然是让调用者来做了。这就导致调用者必须了解大量的抽象工厂的实现细节。而这往往是调用者不希望的。作为调用者我们的愿望通常是这样的：</p>
<ul>
<li>从最简洁的调用方式来说，我们就只调用一个方法，然后工厂为我们生产出默认的定制化的产品。简单来说，就是把main()中的内容全部封装在门面中，供调用者直接调用。</li>
<li>退一步来讲，工厂应在门面中提供几种样板样式，比如最终组装好的产品类型1,2,3。或者是接到定制化需求后定制新的产品。调用者拿到的是最终的产品，它们根本不关心这个产品都用了什么零件，这些零件该以何种方式组装，更不会关心具体是哪个工厂生产的零件。</li>
</ul>
<p>总结一下，抽象工厂就是拥有复杂类关系及业务逻辑的系统，而Facade模式则为它添加了门面，使得调用者无需了解抽象工厂内部的组织关系，直接拿到自己想要的产品。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Facade模式的Java实现，下面咱们试着跳出语言层面，抽象出Facade模式中登场的角色。</p>
<p><strong>Facade(门面)</strong></p>
<p>在示例程序中，由Main.java提取出的门面功能组成该角色。</p>
<p><strong>复杂的系统</strong></p>
<p>在示例程序中，由抽象工厂的主体组成该角色。</p>
<h1 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h1><p>可能大家已经注意到了，在登场角色这一小节中，我们并没有给出无关语言的类图。</p>
<p>之所以这样做，是因为Facade模式的类关系过于抽象，是无法通过一张具体的类图来描述的。</p>
<p>简单来说，应用Facade模式需要有两个前提：</p>
<ul>
<li>复杂的系统</li>
<li>调用者不希望了解系统内部的实现逻辑</li>
</ul>
<p>此时我们就可以为系统加上一个对外的门面，进而形成Facade模式。</p>
<p>Facade模式是非常灵活的。针对调用方的不同，一个系统可以形成多个门面。同时当多个系统协作构成更大的系统时，我们可以将这些系统的门面(因为门面就相当于是系统的API，外界在满足功能的前提下是无需了解系统的内部实现的)组合起来，此时这些门面又会形成新的，复杂的代码关系。我们便又可以基于这些门面形成新的门面，来作为这个新的大系统对外的接口。从而使得整个程序形成递归的门面结构，让代码逻辑更为清晰。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-14.Chain of Responsibility模式</title>
    <url>/2018/08/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-14ChainofResponsibility%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Chain of Responsibility模式被归入了第6部分<a href="">访问数据结构</a>。在GoF原书中，Chain of Responsibility模式则被归入了<a href="">行为型设计模式</a>。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>假设我们要去某公司领取材料。首先我们去公司的”前台”，”前台”告诉说去问”营业窗口”。到了”应该窗口”后又被告知要去”售后部门”，而后”售后部门”又说应该去”资料中心”，最后我们终于在”资料中心”取到了数据。</p>
<p>在上文的小例子中，我们被像皮球一样在各部门之间踢来踢去。对于取资料的人而言，公司的做法是推卸责任，显然是很不友好的。但是从公司的角度而言，这样做却是有其正面意义的：这样做可以明确各个部分的职责，同时控制对外暴露的模块。在上例中，对外暴露的仅仅就只有”前台”，我们之所以知道下一步要去”营业窗口”，那是”前台”告知的。如果”前台”告知的是别的地方，那么我们就会去别的被告知的地方。后续所有的模块所做的工作都是一样的，直到我们在”资料中心”拿到资料。</p>
<p>在编程领域中，这种处理问题的方式被称为”责任链”。由此发展而来的设计模式即为Chain of Responsibility模式。在这种模式下，责任链上的节点对自身能处理的问题是很明确的，一旦接到责任链上游传递过来的问题后，会首先判断自身能否处理，如果不能处理，则传递给下游。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们给出一个小例子，首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14ChainofResponsibility%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design14包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14ChainofResponsibility%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Trouble类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design14;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Trouble &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int number;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Trouble(int number) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.number &#x3D; number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getNumber() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;[Trouble &quot; + this.number + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Handler类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design14;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Handler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Handler next;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Handler(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Handler setNext(Handler next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.next &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static final Handler init() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Handler result &#x3D; new NoHandler();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.setNext(new SpecialHandler(5)).setNext(new LimitHandler(20)).setNext(new OddHandler());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public final void handle(Trouble trouble) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.resolve(trouble))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(trouble + &quot;is resolved by&quot; + this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else if (null !&#x3D; this.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(this + &quot; can&#39;t resolve &quot; + trouble + &quot;,pass to next handler:&quot; + this.next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.next.handle(trouble);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;all handler can&#39;t resolve &quot; + trouble);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract boolean resolve(Trouble trouble);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;[Handler &quot; + this.name + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>说明</p>
<ul>
<li>setNext()方法返回Handler的目的是可以像链接一样在一个语句内一直set下去。思路类似于StringBuilder的append()方法。</li>
<li>handle()中应用了<a href="">3.Template Method模式</a>，resolve()就是需要子类实现的抽象方法。</li>
<li>责任链的初始化被作为静态方法放到了Handler中。实际应用时可依需求灵活调整。</li>
<li>显然，责任链不是一成不变的，我们可以依需求灵活的调整节点的顺序及功能，从而形成各种各样的责任链。</li>
</ul>
<p>接下来的4个类是具体的解决问题的子类：</p>
<p><strong>NoHandler类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design14;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 不处理任何问题</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class NoHandler extends Handler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public NoHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(&quot;NoHandler&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected boolean resolve(Trouble trouble) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>SpecialHandler类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design14;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SpecialHandler extends Handler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int number;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public SpecialHandler(int number) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(&quot;SpecialHandler-&quot; + number);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.number &#x3D; number;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected boolean resolve(Trouble trouble) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (trouble.getNumber() &#x3D;&#x3D; this.number) return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>LimitHandler类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design14;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 只处理编号小于特定值的问题</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class LimitHandler extends Handler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int limit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public LimitHandler(int limit) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(&quot;LimitHandler-&quot; + limit);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.limit &#x3D; limit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected boolean resolve(Trouble trouble) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (trouble.getNumber() &lt; this.limit) return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>OddHandler类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design14;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 只处理编号为奇数的问题</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class OddHandler extends Handler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public OddHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(&quot;OddHandler&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected boolean resolve(Trouble trouble) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (trouble.getNumber() % 2 &#x3D;&#x3D; 1) return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design14;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Handler handler &#x3D; Handler.init();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 30; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            handler.handle(new Trouble(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 0],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 0],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 0]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 1],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 1],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 1]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 2],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 2],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 2]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 3],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 3],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 3]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 4],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 4],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 4]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 5],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 5]is resolved by[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 6],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 6],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 6]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 7],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 7],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 7]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 8],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 8],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 8]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 9],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 9],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 9]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 10],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 10],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 10]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 11],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 11],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 11]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 12],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 12],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 12]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 13],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 13],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 13]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 14],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 14],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 14]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 15],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 15],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 15]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 16],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 16],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 16]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 17],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 17],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 17]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 18],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 18],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 18]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 19],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 19],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 19]is resolved by[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 20],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 20],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 20],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">all handler can&#39;t resolve [Trouble 20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 21],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 21],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 21],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 21]is resolved by[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 22],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 22],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 22],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">all handler can&#39;t resolve [Trouble 22]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 23],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 23],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 23],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 23]is resolved by[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 24],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 24],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 24],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">all handler can&#39;t resolve [Trouble 24]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 25],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 25],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 25],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 25]is resolved by[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 26],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 26],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 26],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">all handler can&#39;t resolve [Trouble 26]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 27],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 27],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 27],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 27]is resolved by[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 28],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 28],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 28],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">all handler can&#39;t resolve [Trouble 28]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler NoHandler] can&#39;t resolve [Trouble 29],pass to next handler:[Handler SpecialHandler-5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler SpecialHandler-5] can&#39;t resolve [Trouble 29],pass to next handler:[Handler LimitHandler-20]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Handler LimitHandler-20] can&#39;t resolve [Trouble 29],pass to next handler:[Handler OddHandler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Trouble 29]is resolved by[Handler OddHandler]</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Chain of Responsibility模式的Java实现，下面咱们试着跳出语言层面，抽象出Chain of Responsibility模式中登场的角色。</p>
<p><strong>Handler(处理者)</strong></p>
<p>抽象父类，在示例程序中，由Handler类扮演这个角色。</p>
<p><strong>ConcreteHandler(具体的处理者)</strong></p>
<p>在示例程序中，由NoHandler，SpecialHandler，LimitHandler，OddHandler类联袂扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14ChainofResponsibility%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>从最本源的角度上来讲，Chain of Responsibility模式其实是不需要一个抽象的父类的，也就是不需要Handler：只要ConcreteHandler之间能形成链即可。不过通常来说，穿在同一个链子上的ConcreteHandler所能处理的问题终归是一个类型的，因此会再抽象出一个层级。</p>
<p>使用Chain of Responsibility模式可以弱化调用者及处理者之间的关联，也不需要有一个统筹全局的角色决定某问题究竟该由哪个ConcreteHandler处理，问题会沿着设定好的链子走下去，直到解决或者链子结束(不过话说回来，统筹全局的角色其实还是存在的，决定链子如何拼接其实就是一种全局的工作，只不过这种做法是静态的)。</p>
<p>较之有一个特定的决策者决定问题的处理人，使用Chain of Responsibility模式会增大处理问题的时间陈本，在对效率要求较高的场合应谨慎使用(话是这么说没错啦，不过推卸责任时通常仅仅只是判断一下自身能不能处理，一般是不会花费太多时间的)。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-13.Visitor模式</title>
    <url>/2018/08/08/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-13Visitor%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Visitor模式被归入了第6部分<a href="">访问数据结构</a>。在GoF原书中，Visitor模式则被归入了<a href="">行为型设计模式</a>。简单来说，Visitor模式可以被描述为：将数据结构的存储与处理分离开。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>所谓数据结构，就是指以某种特定结构存储的数据，不过显然，存储并不是目的，使用与处理才是。通常，我们会将处理数据结构的代码直接写在描述数据结构的代码中，这样的好处是直观简单，坏处则是违背了开闭原则，因为只要设计得得当，通常我们是不会修改数据结构的存储结构本身的，我们会做的往往只是添加操作它的方法。因此随着时间的增加，我们对该数据结构的操作会越来越多，越来越复杂，还将存储与操作集中在一个位置显然不利于代码的维护。</p>
<p>Visitor模式应运而生。Visitor是”访问者”的意思。简单来说，在这种模式下，数据结构是静态的仓库，只用于数据的存储。相应的，数据处理的功能被转移至访问者，从而实现了数据结构存储与处理的分离。当我们需要增加新的处理方法时，无需修改数据结构的代码本身，只需要增加新的访问者即可。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们给出一个小例子，首先是类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13Visitor%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design13包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13Visitor%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Warrior类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design13;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Warrior &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String race;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int attack;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int defense;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Warrior(String name, String race, int attack, int defense) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.race &#x3D; race;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.attack &#x3D; attack;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.defense &#x3D; defense;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void show(Visitor visitor) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        visitor.show(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 随机增强或减弱</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param max int, 增强或减弱的上限</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void change(Visitor visitor, int max) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        visitor.change(this, max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getRace() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return race;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getAttack() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return attack;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setAttack(int attack) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.attack &#x3D; attack;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getDefense() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return defense;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setDefense(int defense) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.defense &#x3D; defense;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Visitor类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design13;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Visitor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Random random &#x3D; new Random();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void show(Warrior warrior) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + warrior.getName() + &quot;][&quot; + warrior.getRace() + &quot;][攻击力：&quot; + warrior.getAttack() + &quot;][防御力：&quot; + warrior.getDefense() + &quot;]&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void change(Warrior warrior, int max) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int flag &#x3D; this.random.nextInt(2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (flag &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;恭喜~属性增强！所有属性提高&quot; + max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            warrior.setAttack(warrior.getAttack() + max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            warrior.setDefense(warrior.getDefense() + max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;真不幸~属性降低！所有属性减少&quot; + max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            warrior.setAttack(warrior.getAttack() - max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            warrior.setDefense(warrior.getDefense() - max);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design13;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Warrior warrior &#x3D; new Warrior(&quot;博丽灵梦&quot;, &quot;人类&quot;, 97, 85);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Visitor visitor &#x3D; new Visitor();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        warrior.show(visitor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        warrior.change(visitor, 10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        warrior.show(visitor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后，可能的输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[博丽灵梦][人类][攻击力：97][防御力：85]</span></pre></td></tr><tr><td class="code"><pre><span class="line">恭喜~属性增强！所有属性提高10</span></pre></td></tr><tr><td class="code"><pre><span class="line">[博丽灵梦][人类][攻击力：107][防御力：95]</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Visitor模式的Java实现，下面咱们试着跳出语言层面，抽象出Visitor模式中登场的角色。</p>
<p><strong>Structure(数据结构)</strong></p>
<p>在示例程序中，由Warrior类扮演这个角色。</p>
<p><strong>Visitor(访问者)</strong></p>
<p>在示例程序中，由Visitor类扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13Visitor%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h1><p>在GoF的23种设计模式中，Visitor模式确实是比较特殊的。这从它的类图就能看出来，Visitor模式中只有两个角色(这倒没什么)，而这两个角色之间是没有直接的关联的：不仅没有继承这种强联系，甚至连委托这种弱关系也没有。</p>
<p>那么Visitor模式的调用关系是什么样子的呢？</p>
<p>以示例程序中Warrior类的change()方法为例，该方法的作用是修改Warrior的属性。从调用者Main的角度来看，它是这样做的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">warrior.change(visitor, 10);</span></pre></td></tr></table></figure>

<p>也就是说，在它看来，问题依然还是warrior这个数据结构本身处理的，它并不知道有”数据结构的存储和操作分离”这回事(它也不care这事)。不过和最简单的调用相比，它还是多传入了一个visitor。而在change()方法内部，实际进行数据处理的是visitor，而由于被处理的对象是warrior，warrior还需把visitor处理问题时需要的数据传递给visitor(示例程序采用的是比较粗暴的方式，直接将this，也就是warrior本身传递给visitor了。实际情况往往只需要传递warrior的子集数据即可)。</p>
<p>不得不说，这和委托很像：调用者想要处理Structure，但是Structure本身没有处理能力，调用者也没有这个处理能力。因此调用者就找来了具有处理能力的Visitor，让它来协助Structure。从调用者来看，处理数据的依然是Structure，只不过在它的内部，实际的处理工作被委托给了Visitor。而Visitor如果想处理数据，往往又需要Structure提供必要的信息。</p>
<p>当然，这又不是委托。因为Structure同Visitor之间没有任何关系：Structure中并没有一个字段是Visitor类型的。在编程领域，这种调过来又调过去的做法被称为双重分发。</p>
<p>那么为什么使用双重分发而非委托呢？这是因为双重分发更为灵活。此时Visitor并没有与Structure绑定，这意味着我们在需要的时候可以很灵活的替换Visitor，通常来说，我们会声明一个抽象的Visitor，限定一下Visitor必须要遵循的规范，当想要进行新的操作时，只需要编写新的Visitor即可，而Structure则无需做任何修改，显然，这是遵循<a href="">开闭原则</a>的。</p>
<p>话说回来，Visitor模式相当于是将通常的Structure一分为二：即只有存储功能的Structure，和负责操作数据的Visitor。上文讨论了Visitor的替换，下面再来说说Structure的替换：相对而言，Structure的替换和修改就不那么容易了，因为如果要替换Structure，那么所有已有的Visitor都需要修改。这又是一个老问题了，我们在<a href="">8.Abstract Factory模式</a>也讨论过类似的困境。</p>
<p>因此，我们通常只会修改和新增Visitor，而不会动Structure。这是因为Structure是基础，所有的Visitor都是附属于Structure的。所谓”皮之不存毛将焉附”。其实从广义的角度来讲，虽然具体架构迥异，但是<a href="">1.Iterator模式</a>也算是一种Visitor模式的一种了。之所以这么说，是因为Visitor模式的核心点其实只有一个，那就是”将数据结构的存储与操作分离”，而Iterator模式的目标实际就是在将迭代操作自容器结构中分离出去。</p>
<p>提到分离，我们不禁又会想到另一种以分离为目标的设计模式：<a href="">9.Bridge模式</a>，二者在各个方面均差异巨大，不过其本源的思想却是一致的，那就是将复杂的结构和操作尽量的分解，从而让逻辑变得清晰。</p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">1.Iterator模式</a></strong></p>
<p>从广义的角度来讲，Iterator模式是Visitor模式的特例。</p>
<p>Visitor模式的目的是将处理自数据结构中分离出来，而Iterator模式的目的则是将迭代操作自容器结构中分离出来。</p>
<hr>
<p><strong><a href="">8.Abstract Factory模式</a></strong></p>
<p>二者均既遵循又违背了开闭原则。</p>
<p>Abstract Factory模式易于扩展具体的工厂，此时遵循开闭原则。难以增加新的零件，此时违背开闭原则。</p>
<p>Visitor模式易于增加新的Visitor，此时遵循开闭原则。难以修改Structure，此时违背开闭原则。</p>
<hr>
<p><strong><a href="">9.Bridge模式</a></strong></p>
<p>二者的核心思想均为”分离”。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-12.Decorator模式</title>
    <url>/2018/08/06/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-12Decorator%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Decorator模式被归入了第5部分<a href="">一致性</a>。在GoF原书中，Decorator模式则被归入了<a href="">结构型设计模式</a>。简单来说，Decorator模式可以被描述为：使装饰边框与被装饰物具有一致性。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>假设有一块蛋糕，它可以增加食用者的饱腹度及幸福感。当然，我们可以给这块蛋糕加一些装饰：比如，如果我们把草莓放在蛋糕上，那么它就变为了草莓蛋糕；如果我们在蛋糕外面淋上巧克力，那么它就变为了巧克力蛋糕，等等。当然，这些装饰是可以叠加的：比如，如果我们既在蛋糕外面淋上巧克力，又在蛋糕上面放了草莓，那么它就变为了草莓巧克力蛋糕(把自己写饿了…)。</p>
<p>不过，不管我们如何添加装饰，它本质上还是一块蛋糕，它的核心功能并没有变，依然还是增加食用者的饱腹度及幸福感，只不过具体增加的数值会依装饰物的不同而有所变化。</p>
<p>类比到编程领域，由这种思路演化而来的设计模式就是Decorator模式(decorator的含义是装饰物)。在Decorator模式中，首先会有一个被装饰物，它提供了核心的功能(或者说API)，然后我们对其添加装饰物，正如蛋糕放上草莓后依然还是蛋糕那样，被装饰物经过装饰后种类没有变，依然还是原被装饰物。这样，当我们需要添加新的装饰时，就可以在此基础上依同样的方法进行操作。从而在不改变最初的被装饰物代码的前提下，丰富它的功能。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们将综述中草莓蛋糕的小例子扩展为程序，从而说明Decorator模式的用法。</p>
<p>首先我们定义一个抽象类Dessert，用以表示甜点的概念，作为Decorator模式中的被装饰物。</p>
<p>然后我们定义具体的两种甜点：</p>
<ul>
<li>蛋糕：Cake</li>
<li>冰淇淋：IceCream</li>
</ul>
<p>然后我们再定义抽象类Decorator，顾名思义，它表示用来装饰甜点的添加物的概念。下面重点来了：Decorator中有一个Dessert类型的字段，这样它就可以通过委托的方式调用自身装饰的被装饰物的功能。同时Decorator又继承了Dessert，这样它在装饰完自己要装饰的被装饰物后，自身同样可以作为被装饰物再被其他的装饰物装饰(艾玛好绕)。</p>
<p>下面定义两个具体的装饰物：</p>
<ul>
<li>巧克力：Chocolate</li>
<li>草莓：Strawberry</li>
</ul>
<p>下面来详细介绍代码。首先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12Decorator%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design12包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12Decorator%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Dessert类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Dessert &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 饱腹感</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract int getSatiety();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 幸福度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract int getHappiness();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract String name();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;成分：&quot; + this.name() + &quot;\n饱腹感：&quot; + this.getSatiety() + &quot;，幸福度：&quot; + this.getHappiness();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这里的toString()方法应用了<a href="">3.Template Method模式</a>。</p>
<p><strong>Cake类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Cake extends Dessert &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getSatiety() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getHappiness() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 5;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String name() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;[蛋糕]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>IceCream类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class IceCream extends Dessert &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getSatiety() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 5;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getHappiness() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String name() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;[冰淇淋]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Decorator类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Decorator extends Dessert &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Dessert dessert;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Decorator(Dessert dessert) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.dessert &#x3D; dessert;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Chocolate类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Chocolate extends Decorator &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Chocolate(Dessert dessert) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(dessert);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getSatiety() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.dessert.getSatiety() + 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getHappiness() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.dessert.getHappiness() + 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String name() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.dessert.name() + &quot;[巧克力]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Strawberry类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Strawberry extends Decorator &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Strawberry(Dessert dessert) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(dessert);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getSatiety() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.dessert.getSatiety() + 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int getHappiness() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.dessert.getHappiness() + 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String name() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.dessert.name() + &quot;[草莓]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main.java</strong></p>
<p>首先，我们测试只有被装饰物的情况：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Dessert cake &#x3D; new Cake();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(cake);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">成分：[蛋糕]</span></pre></td></tr><tr><td class="code"><pre><span class="line">饱腹感：10，幸福度：5</span></pre></td></tr></table></figure>

<p>然后我们可以给这个蛋糕加一些装饰：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Dessert cake &#x3D; new Strawberry(new Chocolate(new Cake()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(cake);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">成分：[蛋糕][巧克力][草莓]</span></pre></td></tr><tr><td class="code"><pre><span class="line">饱腹感：15，幸福度：10</span></pre></td></tr></table></figure>

<p>首先，虽然具体new的东西变了，但是引用类型并没有变，依然还是Dessert，或者更具体的说，因为最底层的被修饰物是蛋糕，因此最终得到的依然还是蛋糕。上例中我们先给蛋糕装饰了巧克力，后装饰了草莓。当然我们也可以先装饰草莓，后装饰巧克力：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Dessert cake &#x3D; new Chocolate(new Strawberry(new Cake()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(cake);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">成分：[蛋糕][草莓][巧克力]</span></pre></td></tr><tr><td class="code"><pre><span class="line">饱腹感：15，幸福度：10</span></pre></td></tr></table></figure>

<p>在这个小例子中，这样的变换似乎意义不大。不过在很多场景中，交换装饰顺序是能在很大程度上影响最终效果的。</p>
<p>当然啦，我们也可以将被装饰物由蛋糕换为同为甜点的冰淇淋。所有的操作都是一样的，在此仅给出一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design12;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Dessert cake &#x3D; new Chocolate(new Strawberry(new IceCream()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(cake);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">成分：[冰淇淋][草莓][巧克力]</span></pre></td></tr><tr><td class="code"><pre><span class="line">饱腹感：10，幸福度：15</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Decorator模式的Java实现，下面咱们试着跳出语言层面，抽象出Decorator模式中登场的角色。</p>
<p><strong>Component(抽象的被装饰物)</strong></p>
<p>在示例程序中，由Dessert类扮演这个角色。</p>
<p><strong>ConcreteComponent(具体的被装饰物)</strong></p>
<p>在示例程序中，由Cake类及IceCream类联袂扮演这个角色。</p>
<p><strong>Decorator(抽象的装饰物)</strong></p>
<p>Decorator模式的核心角色。它内部保存了Component，这样就可以通过委托调用被装饰物的功能。同时它又继承了被装饰物，这样它又可以作为被装饰物再被其他装饰物装饰，即被装饰物的API并不会因装饰物而隐藏，在编程领域，这被称为API的透明性。在示例程序中，由Decorator类扮演这个角色。</p>
<p><strong>ConcreteDecorator(具体的装饰物)</strong></p>
<p>在示例程序中，由Chocolate类及Strawberry类联袂扮演这个角色。</p>
<p>在Decorator模式中，虽然核心功能来源于Component，但我们却可以通过Decorator很方便的为Component增加功能，这是Decorator模式的优点，不过这样做会增加许多功能类似的很小的类(也就是ConcreteDecorator)，算是白璧微瑕。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12Decorator%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">11.Composite模式</a></strong></p>
<p>二者均保证了不同类间的一致性，从而可以以递归的方式去操作它们。</p>
<h1 id="java-io包对Decorator模式的应用"><a href="#java-io包对Decorator模式的应用" class="headerlink" title="java.io包对Decorator模式的应用"></a>java.io包对Decorator模式的应用</h1><p>在使用java.io包时，我们可以按如下方式生成一个读取文件的实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reader reader &#x3D; new FileReader(&quot;a.txt&quot;);</span></pre></td></tr></table></figure>

<p>下面我们来分析下这条语句，在分析过程出现的类或接口，除了特殊说明以外，均位于java.io包中。</p>
<p>首先是FileReader，它的类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class FileReader extends InputStreamReader</span></pre></td></tr></table></figure>

<p>而这个InputStreamReader的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class InputStreamReader extends Reader</span></pre></td></tr></table></figure>

<p>果然，它继承了Reader类，因此我们才能将FileReader的实例赋给Reader。而Reader的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class Reader implements Readable, Closeable</span></pre></td></tr></table></figure>

<p>这个Reader就是本次讨论的顶点类了，相当于Decorator模式中的Component。而FileReader及InputStreamReader则均属于Decorator模式中的ConcreteComponent。</p>
<p>按照这种方法，我们可以得到一个比较基本的读取文件的实例。在此基础上，如果我们想增加一些功能，例如在读取文件时将其放入缓冲区，那么可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reader reader &#x3D; new BufferedReader(new FileReader(&quot;a.txt&quot;));</span></pre></td></tr></table></figure>

<p>显然，这个BufferedReader应该就是Decorator模式中的ConcreteDecorator了。我们来看一下它的类定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BufferedReader extends Reader</span></pre></td></tr></table></figure>

<p>这里需要注意一下，BufferedReader直接继承了Reader，也就是说此时是没有Decorator这个角色的，关于这一点，此前我们在讨论其他设计模式时已经说过很多次了：设计模式并非是一个死的标准，在使用时应根据具体情况做灵活的变通。具体这本场景，业务逻辑并没有那么复杂，即便去掉Decorator这一层代码结构依然很清晰，不存在Decorator也是很合理的做法。</p>
<p>而在BufferedReader类中，我们果不其然的找到了这样的字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private Reader in;</span></pre></td></tr></table></figure>

<p>很显然，这就是被委托的被装饰物了。为了印证这一点，我们不妨看一下所调用的构造函数的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BufferedReader(Reader in) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(in, defaultCharBufferSize);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>它内部调用的那个构造函数的源码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public BufferedReader(Reader in, int sz) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    super(in);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (sz &lt;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new IllegalArgumentException(&quot;Buffer size &lt;&#x3D; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.in &#x3D; in;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    cb &#x3D; new char[sz];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    nextChar &#x3D; nChars &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>与我们的预期相符。</p>
<p>当然，ConcreteDecorator一般不会只有一个，如果我们还需要增加管理行号的功能，那么可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reader reader &#x3D; new LineNumberReader(new BufferedReader(new FileReader(&quot;a.txt&quot;)));</span></pre></td></tr></table></figure>

<p>而这个LineNumberReader的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LineNumberReader extends BufferedReader</span></pre></td></tr></table></figure>

<p>哦，原来它是BufferedReader的子类，这里就不再赘述了。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-11.Composite模式</title>
    <url>/2018/08/03/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-11Composite%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Composite模式被归入了第5部分<a href="">一致性</a>。在GoF原书中，Composite模式则被归入了<a href="">结构型设计模式</a>。简单来说，Composite模式可以被描述为：使容器与内容具有一致性，以便于以同等的，递归的方式操作容器与内容。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在计算机的文件系统中，有名为”文件夹”的概念(也可称为目录)。相对的，还会有名为”文件”的概念。二者的不同之处在于，文件夹是容器，其内部还可放入文件夹或文件。而文件中则无法再放入其他东西了。</p>
<p>不过对于更上层的结构而言，文件夹和文件其实是一回事：例如我们将文件1及文件夹A放入文件夹B中。那么对于文件夹B而言，文件1与文件夹A其实是一类东西：都是文件夹B自身内部存储的内容。此时文件1与文件夹A均可被称为”目录条目”(directory entry)，可以使用相同的策略递归的进行操作。</p>
<p>扩展来说，基本所有的树状结构都可以采用这种思维方式进行组织，例如在视窗系统中，视窗中可以包含子视窗，也可以直接包含内容。GoF将其抽象为了一种设计模式，并命名为Composite模式(composite有”混合物，复合物”的含义)。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p><a href="">8.Abstract Factory模式</a>的示例程序中应用了完整的Composite模式，因此我们依然使用该示例程序介绍Composite模式。</p>
<p>具体的示例程序细节请参看<a href="">8.Abstract Factory模式</a>，在此我们仅再贴一下类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11Composite%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>这张类图看起来挺复杂的，不过其中绝大多数的内容都是用于Abstract Factory模式的。如果要研究Composite模式，只需要关注Item,Link,Tray就可以了。</p>
<p>Link代表链接，而Tray代表托盘。托盘中的content字段是一个列表，其中既可以存放其他托盘，也可以直接存放链接。为了能用一个字段同等对待，我们又定义了更抽象的概念Item，从而将Link及Tray统一起来。如图所示，content中存储的实际是Item，至于具体是Link还是Tray，则可依需求而定。</p>
<p>在示例程序中，Item,Link,Tray均是抽象类。不过这是Abstract Factory模式所致。如果只应用Composite模式的话，Item代表的是一个相对抽象的概念，因此往往还会是抽象类，而Link及Tray通常就是可以直接实例化的非抽象类了。</p>
<p>我们可以将Tray视为容器，Link视为内容。使用Composite模式可以使容器与内容具有一致性，也可以称其为多个和单个的一致性，即将多个对象结合在一起，当做一个对象进行处理。</p>
<p>此外，我还想说说类图中Tray内部的add()方法。add()方法的作用为向content中添加Item，只有Tray才需要它。它的可行的定义方式有如下4种：</p>
<p><strong>1.定义在Item中，抛出异常</strong></p>
<p>将add()定义在Item中并抛出异常，Link中不进行重写，Tray中依实际功能需求进行重写。</p>
<p>这样做的好处在于，对于调用者而言，可以采用一种统一方式，即只使用Item的实例就可以调用add()方法。示例程序中的Main.java是这样写的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Page;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Factory factory &#x3D; Factory.getListFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 创建页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray tray &#x3D; factory.createTray(null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Page page &#x3D; factory.createPage(&quot;网页导航&quot;, tray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 视频网站</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray videoTray &#x3D; factory.createTray(&quot;视频网站&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tray.add(videoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray twoVideoTray &#x3D; factory.createTray(&quot;二次元&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray threeVideoTray &#x3D; factory.createTray(&quot;三次元&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        videoTray.add(twoVideoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        videoTray.add(threeVideoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        twoVideoTray.add(factory.createLink(&quot;哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;, &quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        twoVideoTray.add(factory.createLink(&quot;AcFun弹幕视频网&quot;, &quot;http:&#x2F;&#x2F;www.acfun.cn&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;腾讯视频&quot;, &quot;https:&#x2F;&#x2F;v.qq.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;爱奇艺&quot;, &quot;http:&#x2F;&#x2F;vip.iqiyi.com&#x2F;firstsix-new-pc.html&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;优酷&quot;, &quot;http:&#x2F;&#x2F;www.youku.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 搜索引擎</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray searchTray &#x3D; factory.createTray(&quot;搜索引擎&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tray.add(searchTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        searchTray.add(factory.createLink(&quot;百度&quot;, &quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        searchTray.add(factory.createLink(&quot;谷歌&quot;, &quot;http:&#x2F;&#x2F;www.google.cn&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 打印页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">        page.createFile(&quot;D:&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们在定义Tray实例的引用时，是不能使用Item的，因为此时Item中并没有add()方法。这样的代码抽象度相对较低。而如果我们将add()方法定义在Item中，就可以完美的解决这个问题，只需要在调用时做好异常处理即可。</p>
<p>事实上，这算是相对最优的解决方案了。在Java API的集合框架中，也运用了这个思想：首先贴出AbstractCollection类中的add()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>抛出异常，表示不支持添加。而在它的子类AbstractList中，该方法被重写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    add(size(), e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>2.定义在Item中，并声明为抽象方法</strong></p>
<p>将add()定义在Item中并声明为抽象方法，所有子类依需求决定如何重写。具体来说Link抛出异常，而Tray则写具体的业务逻辑。</p>
<p>本方案的效果与方案1差不多。从易于理解的角度考虑，本方案的思路甚至还要更漂亮一些。不过较之方案1，本方案有一个强制的约束条件：因为我们要将add()方法声明为抽象方法，那么Item就必须为抽象类。这限制了该方案的使用范围。</p>
<p><strong>3.定义在Item中，并声明为空方法</strong></p>
<p>将add()定义在Item中并声明为空方法，Link中不进行重写，Tray中依实际功能需求进行重写。</p>
<p>这是很糟糕的做法，虽然这样做也能在调用add()方法时使用Item引用，但是调用者却无法得到足够的反馈：所有的添加仿佛都成功了，即便是不存在添加功能的Item及Link。事实上，如果真实类型不是Tray的话，再调用add()方法，从业务逻辑的角度来讲就是一种异常情况了，要让调用者能感知到才是健壮的代码。</p>
<p><strong>4.只定义在Tray中</strong></p>
<p>这也是实例程序中的做法。如果不在乎前几种方案中提到的引用问题(当然我们也可以进行强制类型转换，不过那就太糟了，尽量不要那么做)，那么这是思路最清晰的做法。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Composite模式的Java实现，下面咱们试着跳出语言层面，抽象出Composite模式中登场的角色。</p>
<p><strong>Content(内容)</strong></p>
<p>该角色中无法存入其他角色，在示例程序中，由Link类负责扮演。</p>
<p><strong>Container(容器)</strong></p>
<p>该角色中可以存入Component角色(具体来说，可以存入Content角色及Container角色)，在示例程序中，由Tray类负责扮演。</p>
<p><strong>Component(零件)</strong></p>
<p>该角色是Content角色及Container角色的父类。它的作用是将Content角色及Container角色统一起来。通常来说，Component只是一个概念，是无法实例化的。在示例程序中，由Item类负责扮演。</p>
<p>下面是抽象后，无关语言的类图。关于add()方法，将采用方案1：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11Composite%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">8.Abstract Factory模式</a></strong></p>
<p>正如示例程序所体现的，实现Abstract Factory模式的零件时往往会用到Composite模式。</p>
<p><strong><a href="">12.Decorator模式</a></strong></p>
<p>二者均保证了不同类间的一致性，从而可以以递归的方式去操作它们。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-10.Strategy模式</title>
    <url>/2018/07/27/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-10Strategy%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Strategy模式被归入了第4部分<a href="">分开考虑</a>。在GoF原书中，Strategy模式则被归入了<a href="">行为型设计模式</a>。简单来说，Strategy模式可以被描述为：整体的，便捷的替换解决同一个问题的不同算法。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>strategy的含义是”策略，战略”。在编程领域，我们可以将其理解为算法。Strategy模式可以整体的替换算法的实现部分，能让我们依场景灵活的使用不同算法解决同一个问题。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们给出一个应用Strategy模式的小例子。它可以使用不同的算法进行排序。</p>
<p>首先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10Strategy%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design10包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10Strategy%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，Utils.java是工具类，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Utils类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Utils &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Utils() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void swap(int[] a, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int temp &#x3D; a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[i] &#x3D; a[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[j] &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void check(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Sort接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Sort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void sort(int[] a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>BubbleSort类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class BubbleSort implements Sort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void sort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Utils.check(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; a.length - 1; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int j &#x3D; 0; j &lt; a.length - 1 - i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (a[j] &gt; a[j + 1]) Utils.swap(a, j, j + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>QuickSort类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class QuickSort implements Sort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void sort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Utils.check(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        QuickSort.quickSort(a, 0, a.length - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void quickSort(int[] a, int low, int high) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (low &gt;&#x3D; high) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int keyIndex &#x3D; partition(a, low, high);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        quickSort(a, low, keyIndex - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        quickSort(a, keyIndex + 1, high);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int partition(int[] a, int low, int high) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int left &#x3D; low, right &#x3D; high;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int keyValue &#x3D; a[low];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (left &lt; right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (right &gt; left &amp;&amp; a[right] &gt;&#x3D; keyValue) right--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (left &lt; right &amp;&amp; a[left] &lt;&#x3D; keyValue) left++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (left &lt; right) Utils.swap(a, left, right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[low] &#x3D; a[left];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[left] &#x3D; keyValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<p>首先测试一下BubbleSort：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[] a &#x3D; &#123;5, 1, 4, 3, 2, 1&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Sort sort &#x3D; new BubbleSort();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sort.sort(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Arrays.toString(a));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 1, 2, 3, 4, 5]</span></pre></td></tr></table></figure>

<p>然后将算法整体替换为QuickSort：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[] a &#x3D; &#123;5, 1, 4, 3, 2, 1&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Sort sort &#x3D; new QuickSort();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sort.sort(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Arrays.toString(a));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[1, 1, 2, 3, 4, 5]</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Strategy模式的Java实现，下面咱们试着跳出语言层面，抽象出Strategy模式中登场的角色。</p>
<p><strong>Strategy(抽象的策略)</strong></p>
<p>Strategy角色负责制定具体的策略必须实现的规范。在示例程序中，由Sort类扮演这个角色。</p>
<p><strong>ConcreteStrategy(具体的策略)</strong></p>
<p>ConcreteStrategy是实现了Strategy角色的约束的具体的策略。在示例程序中，由BubbleSort类及QuickSort类联袂扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10Strategy%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h1><p>很显然，Strategy模式与Java中的多态思想一脉相承。所不同的是，多态的重点在于”同一种行为的不同表现”。例如同样是”吃”，狗的吃与羊的吃所表现出的现象就完全不同。而Strategy模式则是”以不同的手段达成同一种表现”。</p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">3.Template Method模式</a></strong></p>
<p>Template Method模式与Strategy模式均与Java中多态的思想一脉相承。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-9.Bridge模式</title>
    <url>/2018/07/13/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-9Bridge%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Bridge模式被归入了第4部分<a href="">分开考虑</a>。在GoF原书中，Abstract Factory模式则被归入了<a href="">创建型设计模式</a>。简单来说，Bridge模式可以被描述为：将类的功能层次结构与实现层次结构分离。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Bridge是桥梁中的意思，就像在现实生活中，桥梁的作用是将河两岸的土地连接在一起那样，Bridge模式的作用也是将两样东西连接在一起，这两样东西是：</p>
<ul>
<li>类的功能层次结构</li>
<li>类的实现层次结构</li>
</ul>
<p>在讲解Bridge模式之前，有必要先介绍下这两种层次结构。</p>
<h1 id="类的两种层次结构"><a href="#类的两种层次结构" class="headerlink" title="类的两种层次结构"></a>类的两种层次结构</h1><p><strong>类的功能层次结构</strong></p>
<p>假设我们现在有名为Something的类，我们希望在不破坏Something的结构，即不修改Something代码的前提下基于Something类扩展出新的功能，或者更具体的说，希望能加入一个新的方法。那么最常见的做法自然就是写一个子类继承Something，比如名为SomethingGood，并将新的方法添加到SomethingGood中。当然如果我们想继续扩展，比如在SomethingGood的基础上再加点什么，那么我们可以再写一个SomethingGood的子类SomethingBetter，依次类推下去。当然，为了维护和理解的便利性，这种继承的层级不应过深。</p>
<p>这就是为了增加新功能而产生的层级结构，即：父类中具备基本功能，然后在子类中扩展新的功能。通常，我们会将这种层级结构称为”类的功能层次结构”。</p>
<p><strong>类的实现层次结构</strong></p>
<p>在Template Method模式中，父类定义了整体的流程，而具体的实现则没有定义，它们会以抽象方法的形式被声明，进而约束子类必须去实现。这种层级结构的设计目的显然就不是为了添加新功能了，反过来说，在这种层级结构中添加新功能会非常麻烦，因为要在父类中添加一个新的抽象方法，所有已有的子类都必须修改一遍。</p>
<p>那么这种层级结构的优势是什么呢？很显然，添加一个新的实现是非常容易的：此时无需修改任何已有代码，只要按照父类的约束生成新的子类即可。我们说Abstract Factory模式”易于扩展具体的工厂，难以增加新的零件”其实也是一样的道理。</p>
<p>这种层级结构就被称为”类的实现层次结构”。</p>
<p>反之，显然，类的功能层次结构虽然易于增加新的功能，却难以添加新的实现：因为新功能下沉到了下面的层级，导致上层的功能并不丰富，在我们想添加新的实现时，可能不得不添加重复的代码或者做较大的代码调整：例如将已沉在下层的功能提升到上层。</p>
<p><strong>两种层次结构的混合使用</strong></p>
<p>通过上文的分析，我们知道了这两种层次结构是不相容的：一个的优势就是另一个的劣势。但是我们的日常需求大多都不是单一的：绝大多数时候，我们会既希望增加新功能，又增加新实现。</p>
<p>Bridge模式就是为了解决这一矛盾而诞生的：它会将类的功能层次结构与类的实现层次结构分离，并在二者之间搭建桥梁。即在保证实现需求的前提下，优化代码层级关系。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们给出一个应用Bridge模式的小例子，该例子的作用是”显示一些东西”。这么说似乎有些抽象，不过具体看例子就很容易理解了。</p>
<p>首先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9Bridge%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design9包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9Bridge%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p>首先是类的功能层次结构：</p>
<p><strong>Display类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design9;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Display &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected DisplayImpl impl;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Display(DisplayImpl impl) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.impl &#x3D; impl;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public final void display() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.impl.open();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.impl.print();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.impl.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>CountDisplay类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design9;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class CountDisplay extends Display &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public CountDisplay(DisplayImpl impl) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(impl);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void multiDisplay(int times) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.impl.open();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; times; i++) this.impl.print();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.impl.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后是类的实现层次结构：</p>
<p><strong>DisplayImpl类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design9;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class DisplayImpl &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    abstract void open();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    abstract void print();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    abstract void close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>StringDisplayImpl类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design9;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class StringDisplayImpl extends DisplayImpl &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String str;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public StringDisplayImpl(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.str &#x3D; str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void open() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.printLine();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void print() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String ch &#x3D; &quot;|&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(ch + this.str + ch);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void close() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.printLine();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void printLine() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String ch &#x3D; &quot;+&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(ch);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; this.str.length(); i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(ch);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>最后是测试类：</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design9;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        DisplayImpl displayImpl &#x3D; new StringDisplayImpl(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Display display &#x3D; new Display(displayImpl);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        display.display();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|ReimuWang|</span></pre></td></tr><tr><td class="code"><pre><span class="line">+---------+</span></pre></td></tr></table></figure>

<p>如果我们将代码变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design9;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        DisplayImpl displayImpl &#x3D; new StringDisplayImpl(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Display display &#x3D; new CountDisplay(displayImpl);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        display.display();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>再次运行后，结果显然是不会变的。</p>
<p>如果我们将代码变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design9;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        DisplayImpl displayImpl &#x3D; new StringDisplayImpl(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        CountDisplay display &#x3D; new CountDisplay(displayImpl);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        display.multiDisplay(5);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|ReimuWang|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|ReimuWang|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|ReimuWang|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|ReimuWang|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|ReimuWang|</span></pre></td></tr><tr><td class="code"><pre><span class="line">+---------+</span></pre></td></tr></table></figure>

<h1 id="关于示例程序的说明"><a href="#关于示例程序的说明" class="headerlink" title="关于示例程序的说明"></a>关于示例程序的说明</h1><p>继承是强关联，例如示例程序中的Display与CountDisplay，DisplayImpl与StringDisplayImpl。</p>
<p>委托是弱关联，例如示例程序中的Display与DisplayImpl。对于调用者而言，他们只知道Display，而实际上，在Display内部，所有具体的工作都被委托给了DisplayImpl。</p>
<p>而Bridge模式的桥梁正是通过这种委托实现的。这有些类似于Builder模式(仅仅只是类似，其实还是有不小差别的)：功能层次结构这一侧类似于设计者，负责对外提供功能，而实现层次结构这一侧则类似于建造者，负责具体的细节。</p>
<p>这样，正像例子中演示的那样。如果我们想添加一个新的功能，我们就可以在功能层次结构这一侧定义一个子类CountDisplay，然后将我们需要添加的新功能作为一个方法multiDisplay写进去。因为实现方法的”小积木”在实现层次结构这一侧都已经做好了，我们只需要拼接出一个新的功能即可。这样本次改动仅仅就只是在功能层次结构这一侧增添了一个新的子类，而无需任何其他改动。</p>
<p>当然，这样说其实是默认了一个前提，就是构成新功能的”小积木”在实现层次结构都已经做好(这也是给实现层次结构提出的要求，所有功能都要尽量小，尽量单一，这样复用性才高)，但事实上，无论如何做准备，也无法预知到未来所需的一切功能：总会有”小积木”没有做好的时候，此时的改动量就要大一些了。因为除了要在功能层次结构这边增加一个子类之外，还需在实现层次结构那边的所有实现中补上欠缺的”小积木”。相对而言，在实现层次结构中增加新的实现就要简单很多了：无论如何，我们都只需要增加一个新的实现即可。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Bridge模式的Java实现，下面咱们试着跳出语言层面，抽象出Bridge模式中登场的角色。</p>
<p><strong>FunAbstract(功能层次结构中的父类)</strong></p>
<p>示例中，由Display类扮演这个角色。</p>
<p><strong>FunConcrete(功能层次结构中的子类)</strong></p>
<p>示例中，由CountDisplay类扮演这个角色。</p>
<p><strong>ImplAbstract(实现层次结构中的父类)</strong></p>
<p>示例中，由DisplayImpl类扮演这个角色。</p>
<p><strong>ImplConcrete(实现层次结构中的子类)</strong></p>
<p>示例中，由StringDisplayImpl类扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/9Bridge%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">7.Builder模式</a></strong></p>
<p>正如前文所分析的，二者有很多相似之处。</p>
<hr>
<p><strong><a href="">13.Visitor模式</a></strong></p>
<p>二者的核心思想均为”分离”。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-8.Abstract Factory模式</title>
    <url>/2018/07/09/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-8AbstractFactory%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Abstract Factory模式被归入了第3部分<a href="">生成实例</a>。在GoF原书中，Abstract Factory模式则被归入了<a href="">创建型设计模式</a>。简单来说，Abstract Factory模式可以被描述为：像在工厂中将各个零件组装成产品那样生成实例。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Abstract Factory的含义为”抽象工厂”。顾名思义，程序会被划分为两层：</p>
<p>第一层：抽象工厂将抽象零件组装成抽象产品。</p>
<p>第二层：具体工厂将具体零件组装成具体产品。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们给出一个应用Abstract Factory模式的小例子，该例子会创建一个具有层次结构的输出链接集合的html页面。</p>
<p>首先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8AbstractFactory%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design8包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8AbstractFactory%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p>首先是抽象层，统一位于design8.factory包下：</p>
<p><strong>Item类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Item &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String caption;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Item(String caption) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.caption &#x3D; caption;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract List&lt;String&gt; makeHtml();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Link类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 抽象零件：链接</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Link extends Item &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String url;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Link(String caption, String url) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.url &#x3D; url;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Tray类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 抽象零件：托盘。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 其中保存着托盘或者链接</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Tray extends Item &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected List&lt;Item&gt; content &#x3D; new ArrayList&lt;Item&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param caption, 为null则表示该tray是最大的那一个托盘</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Tray(String caption) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(Item item) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.content.add(item);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Page类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 抽象产品：页面</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 产品也可被视为一种零件，或者反过来说也成立。因为此时已经是一种一对一的关系了(该产品只由一种零件构成)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 其中保存着网页基本信息及存储主体内容的托盘</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Page extends Item &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Tray tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Page(String caption, Tray tray) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.tray &#x3D; tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void createFile(String outPutPath) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileOutputStream fos &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PrintStream ps &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fos &#x3D; new FileOutputStream(new File(outPutPath + File.separator + this.caption + &quot;.html&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ps &#x3D; new PrintStream(fos);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            List&lt;String&gt; strList &#x3D; this.makeHtml();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (String str : strList) ps.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ps.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fos.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Factory类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.listfactory.ListFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 抽象工厂</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Factory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Factory getListFactory() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return ListFactory.getInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract Link createLink(String caption, String url);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract Tray createTray(String caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract Page createPage(String caption, Tray tray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后是实现层，统一位于design8.listfactory包下：</p>
<p><strong>ListLink类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.listfactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Link;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ListLink extends Link &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListLink(String caption, String url) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption, url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;String&gt; makeHtml() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; result &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;li&gt;&lt;a href&#x3D;\&quot;&quot; + this.url + &quot;\&quot;&gt;&quot; + this.caption + &quot;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>ListTray类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.listfactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Item;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ListTray extends Tray &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListTray(String caption) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;String&gt; makeHtml() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; result &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; this.caption) this.addLi(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result.add(&quot;&lt;li&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result.add(this.caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.addLi(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result.add(&quot;&lt;&#x2F;li&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void addLi(List&lt;String&gt; result) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;ul&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Item item : this.content) result.addAll(item.makeHtml());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;&#x2F;ul&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>ListPage类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.listfactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Page;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ListPage extends Page &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected ListPage(String caption, Tray tray) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(caption, tray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;String&gt; makeHtml() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; result &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;html&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;head&gt;&lt;title&gt;&quot; + this.caption + &quot;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;body&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.addAll(this.tray.makeHtml());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;&#x2F;body&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result.add(&quot;&lt;&#x2F;html&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>ListFactory类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8.listfactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Link;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Page;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ListFactory extends Factory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ListFactory SINGLETON &#x3D; new ListFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private ListFactory() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static ListFactory getInstance() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return ListFactory.SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Link createLink(String caption, String url) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListLink(caption, url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Tray createTray(String caption) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListTray(caption);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Page createPage(String caption, Tray tray) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListPage(caption, tray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design8;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Page;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import design8.factory.Tray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Factory factory &#x3D; Factory.getListFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 创建页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray tray &#x3D; factory.createTray(null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Page page &#x3D; factory.createPage(&quot;网页导航&quot;, tray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 视频网站</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray videoTray &#x3D; factory.createTray(&quot;视频网站&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tray.add(videoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray twoVideoTray &#x3D; factory.createTray(&quot;二次元&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray threeVideoTray &#x3D; factory.createTray(&quot;三次元&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        videoTray.add(twoVideoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        videoTray.add(threeVideoTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        twoVideoTray.add(factory.createLink(&quot;哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&quot;, &quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        twoVideoTray.add(factory.createLink(&quot;AcFun弹幕视频网&quot;, &quot;http:&#x2F;&#x2F;www.acfun.cn&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;腾讯视频&quot;, &quot;https:&#x2F;&#x2F;v.qq.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;爱奇艺&quot;, &quot;http:&#x2F;&#x2F;vip.iqiyi.com&#x2F;firstsix-new-pc.html&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threeVideoTray.add(factory.createLink(&quot;优酷&quot;, &quot;http:&#x2F;&#x2F;www.youku.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 搜索引擎</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Tray searchTray &#x3D; factory.createTray(&quot;搜索引擎&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        tray.add(searchTray);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        searchTray.add(factory.createLink(&quot;百度&quot;, &quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        searchTray.add(factory.createLink(&quot;谷歌&quot;, &quot;http:&#x2F;&#x2F;www.google.cn&#x2F;&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 打印页面</span></pre></td></tr><tr><td class="code"><pre><span class="line">        page.createFile(&quot;D:&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后，会在D盘根目录下生成网页导航.html：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;head&gt;&lt;title&gt;网页导航&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">视频网站</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">二次元</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;&quot;&gt;哔哩哔哩 (゜-゜)つロ 干杯~-bilibili&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.acfun.cn&#x2F;&quot;&gt;AcFun弹幕视频网&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">三次元</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;v.qq.com&#x2F;&quot;&gt;腾讯视频&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;vip.iqiyi.com&#x2F;firstsix-new-pc.html&quot;&gt;爱奇艺&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.youku.com&#x2F;&quot;&gt;优酷&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">搜索引擎</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;li&gt;&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.google.cn&#x2F;&quot;&gt;谷歌&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;html&gt;</span></pre></td></tr></table></figure>

<p>没进行缩进处理~就这样吧。使用浏览器打开的效果为：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8AbstractFactory%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Abstract Factory模式的Java实现，下面咱们试着跳出语言层面，抽象出Abstract Factory模式中登场的角色。</p>
<p>Abstract Factory模式将程序分为了两层。首先是抽象层：</p>
<p><strong>AbstractComponent(抽象零件)</strong></p>
<p>之所以使用AbstractComponent而非AbstractProduct，是因为Abstract Factory模式的核心思想之一就是”将复杂的产品拆分为复数个零件，然后再在需要时将零件组装为产品”。当然，我们也可将AbstractProduct视为AbstractComponent的特例：如果某种产品只分解为了1个零件，那么此时零件与产品便是等价的了。</p>
<p>在例子中。抽象零件首先被分为两层。其次第二层又同时包含了身为零件的link，tray及由这两个零件及其他要素组成的最终产品page。本质上其实它们都是同一个角色。</p>
<p><strong>AbstractFactory(抽象工厂)</strong></p>
<p>AbstractFactory用于生产AbstractComponent。在示例程序中，由Factory类扮演这个角色。</p>
<p><strong>ConcreteComponent(具体零件)</strong></p>
<p>继承AbstractComponent。在例子中，由ListLink类，ListTray类及ListPage类共同扮演这个角色。</p>
<p><strong>ConcreteFactory(具体工厂)</strong></p>
<p>ConcreteFactory继承AbstractFactory并生产ConcreteComponent。在例子中，由ListFactory类扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/8AbstractFactory%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<p>如此的组织结构导致Abstract Factory模式具有如下特点：</p>
<ul>
<li><p>易于扩展具体的工厂：遵照AbstractFactory中约束的继承规范，再结合本次的需求，扩展出一个新的工厂是很容易的事情。只需要增加新代码，无需对原有代码做任何改变。遵守<a href="">开闭原则</a>。</p>
</li>
<li><p>难以增加新的零件：增加一个新的零件，需要自AbstractFactory起，向下直至所有已有的ConcreteFactory都需要修改。违背了开闭原则。</p>
</li>
</ul>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">3.Template Method模式</a></strong><br><strong><a href="">4.Factory Method模式</a></strong><br><strong><a href="">7.Builder模式</a></strong></p>
<p>面试时，我们经常会遇到这样的问题：Factory Method模式与Abstract Factory模式有何异同点？</p>
<p>之所以这样问，是因为二者本就很相近，再加上应用场景的重叠，很多时候我们往往既会使用Factory Method模式，又会使用Abstract Factory模式。再加上二者名称又很相似，引发这样的问题其实也是可以理解的。</p>
<p>在解答这个问题之前，首先需要强调的是，将不同设计模式间的界限分得那么清楚的意义其实不大，这个问题颇有些”茴香豆的茴字有几种写法”的意思。</p>
<p>不过如果我们就是要较真的话，那么其实不应该仅仅局限在这两种设计模式中，而是应该统合以下四种设计模式一起分析：</p>
<ul>
<li>Template Method模式</li>
<li>Factory Method模式</li>
<li>Builder模式</li>
<li>Abstract Factory模式</li>
</ul>
<p>首先，这4种设计模式最终的目的其实是一样的，就是通过某种策略，将一个复杂的问题变得条理清晰并易于扩展。</p>
<p>Template Method模式试图从时间的角度入手解决这个问题：父类中定义方法执行的流程(即从时间上将复杂事件分为很多小段)，子类中负责具体的实现(即具体实现推迟至子类中)。例如父类指定完成一个复杂事件需要经过如下3个步骤：</p>
<ol>
<li>m1()</li>
<li>m2()</li>
<li>m3()</li>
</ol>
<p>父类并不会真正的实现这3个方法，具体的实现交给子类。然后通过不同子类间的多态使得代码产出不同的结果。不过，虽然所有的细节(即m1,m2,m3的实现)均是子类完成的。但是子类却没有整个事件的主导权。所有子类无论如何实现m1,m2,m3，它们执行这3个方法的顺序是不能变的。</p>
<p>Factory Method模式则是Template Method模式的特例，它将父类执行的流程限定为了”生成实例”这件事。本质上与Template Method模式是相同的。</p>
<p>而Builder模式则采用了另一种视角，它试图从空间上将一个复杂的产品拆分为各种细小的零件。Builder模式有如下两个角色：设计者及建造者。例如我们要制造一个复杂物体A，它由1个零件B及两个零件C组装而成。那么最基本的，建造者会提供如下方法：</p>
<ul>
<li>生产一个零件B</li>
<li>生产一个零件C</li>
<li>将传入的零件按要求组装起来</li>
</ul>
<p>建造者拥有构建复杂物体A所有技术细节的能力。不过单单有建造者是无法构建A的，因为它只能生产零件，却没有设计产品的能力。我们说A是由”1个零件B及两个零件C组装而成”，为什么是这样的零件组合以及如何组装，这些全局上的东西都是设计者的工作。</p>
<p>此外，Template Method模式采用的是ISA的架构，父类与子类间是有层级关系的。而Builder模式采用的则是HASA的架构。设计者与建造者是平级的，我们不能说建造者是设计者的一种，反之亦然。设计者只是能指挥建造者去工作。</p>
<p>虽然Template Method模式与Builder模式采取的策略不同，不过二者之间却有一个共同点：那就是主视角是生产产品，或推动事件的人。在这两个模式的内部，均有负责统筹规划整体思路的角色。对于Template Method模式而言是父类，对于Builder模式而言是设计者。之所以要强调这一点，是为了体现Abstract Factory模式的不同之处。</p>
<p>而Abstract Factory模式，则是基于Template Method模式及Builder模式，结合工厂生产零件这类需求，诞生出的一种更高层级的设计模式。基本上，它是以Builder模式为基础的：工厂生产零件，然后将零件组装成产品。同时它又有着Template Method模式的影子：工厂生产零件与产品的方法被自父类抽象工厂推迟到了子类具体工厂。</p>
<p>不过我认为Abstract Factory模式与Template Method模式及Builder模式有着本质的不同，也就是视角的不同。Template Method模式及Builder模式的主视角是”工人”，并且正如前文已经提到的，不仅视角是”工人”，还会有统筹全局的”大将型”工人，这样在模式内部就可以完成一个完整的需求。而Abstract Factory模式的视角是工厂，工厂是死的，是没有主观能动性的，模式内部也不存在一个统筹全局的工人。正如前文的例子展示的那样，类似统筹全局的工作是在模式外部，也就是main方法中进行的。换句话说，Abstract Factory模式帮助我们构建出了一套完整的，高扩展性的厂房，厂房中虽然配备了工人，却没有设置统筹全局的领导。</p>
<hr>
<p><strong><a href="">5.Singleton模式</a></strong></p>
<p>正如前文的例子中展示的，Abstract Factory模式在创建具体工厂时可能会用到Singleton模式。</p>
<hr>
<p><strong><a href="">11.Composite模式</a></strong></p>
<p>正如示例程序所体现的，实现Abstract Factory模式的零件时往往会用到Composite模式。</p>
<hr>
<p><strong><a href="">13.Visitor模式</a></strong></p>
<p>二者均既遵循又违背了开闭原则。</p>
<p>Abstract Factory模式易于扩展具体的工厂，此时遵循开闭原则。难以增加新的零件，此时违背开闭原则。</p>
<p>Visitor模式易于增加新的Visitor，此时遵循开闭原则。难以修改Structure，此时违背开闭原则。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-7.Builder模式</title>
    <url>/2018/07/05/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-7Builder%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Builder模式被归入了第3部分<a href="">生成实例</a>。在GoF原书中，Builder模式则被归入了<a href="">创建型设计模式</a>。简单来说，Builder模式可以被描述为：通过各个阶段的处理以组装出复杂的实例。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在英语中，build通常用来指建造大型的建筑物。对于这种具有复杂建筑结构的大型物体而言，很难做到一蹴而就。我们往往需要分模块的建造各个部分，然后在合适的时机将它们组装到一起。将这种思想延伸到编程领域，诞生的就是Builder模式。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们给出一个应用Builder模式的小例子，该例子会根据需求打印出txt或html两种样式的文档。</p>
<p>首先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7Builder%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design7包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7Builder%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Builder类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design7;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Builder &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected List&lt;String&gt; result &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void bulidHead(String head);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void bulidTitle(String title);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void bulidString(String str);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void bulidItems(String[] items);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void bulidTail();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void createFile(String pathPre) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Field filed &#x3D; this.getClass().getDeclaredField(&quot;FILE_TYPE&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        filed.setAccessible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String fileType &#x3D; (String)filed.get(null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String outPutPath &#x3D; pathPre + &quot;.&quot; + fileType;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileOutputStream fos &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PrintStream ps &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fos &#x3D; new FileOutputStream(new File(outPutPath));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ps &#x3D; new PrintStream(fos);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (String str : this.result) ps.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ps.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fos.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>TextBuilder类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design7;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class TextBuilder extends Builder &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unused&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static String FILE_TYPE &#x3D; &quot;txt&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidHead(String head) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String decorate &#x3D; &quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(decorate + head + decorate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidTitle(String title) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String decorate &#x3D; &quot;#&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(decorate + title + decorate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidString(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidItems(String[] items) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String item : items)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.result.add(&quot;    · &quot; + item);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidTail() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>HtmlBuilder类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design7;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class HtmlBuilder extends Builder &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unused&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static String FILE_TYPE &#x3D; &quot;html&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidHead(String head) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(&quot;&lt;html&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(this.indent(1) + &quot;&lt;head&gt;&lt;title&gt;&quot; + head + &quot;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(this.indent(1) + &quot;&lt;body&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidTitle(String title) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(this.indent(2) + &quot;&lt;h1&gt;&quot; + title + &quot;&lt;&#x2F;h1&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidString(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(this.indent(2) + &quot;&lt;p&gt;&quot; + str + &quot;&lt;&#x2F;p&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidItems(String[] items) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(this.indent(2) + &quot;&lt;ul&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String item : items)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.result.add(this.indent(3) + &quot;&lt;li&gt;&quot; + item + &quot;&lt;&#x2F;li&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(this.indent(2) + &quot;&lt;&#x2F;ul&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void bulidTail() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(this.indent(1) + &quot;&lt;&#x2F;body&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.result.add(&quot;&lt;&#x2F;html&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String indent(int level) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; level; i++) sb.append(&quot;  &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Designer类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design7;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Designer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void construct(Builder builder, String path, String title) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidHead(title);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidTitle(&quot;红魔馆&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidString(&quot;红魔馆（こうまかん&#x2F;Koumakan）是蕾米莉亚·斯卡雷特拥有的一间房子。它位于雾之湖的边缘。从外面可以看见深红色的窗户，但是窗户并不多，因为吸血鬼不喜欢阳光。里面也有很多没有窗户的房间。屋顶上有一个钟楼，但钟只在晚上敲响。红魔馆内部比外面看起来大得多。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidString(&quot;主要成员：&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidItems(new String[] &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;蕾米莉亚·斯卡雷特（レミリア·スカーレット&#x2F;Remilia Scarlet）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;芙兰朵露·斯卡雷特（フランドール·スカーレット&#x2F;Flandre Scarlet）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;十六夜咲夜（いざよい さくや&#x2F;Sakuya Izayoi）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;帕秋莉·诺蕾姬（パチュリー·ノーレッジ&#x2F;Patchouli Knowledge）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;小恶魔（リートル デビッル&#x2F;Little Devil）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;红美铃（ホン メイリン&#x2F;Hong Meirin）&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidTitle(&quot;永远亭&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidString(&quot;永远亭是《东方project》中位于迷途竹林深处的一座日式建筑，是八意永琳、蓬莱山辉夜、因幡帝和铃仙·优昙华院·因幡的居住地。首次出现在《东方永夜抄》。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidString(&quot;主要成员：&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidItems(new String[] &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;蓬莱山辉夜（ほうらいさん かぐや&#x2F;Houraisan Kaguya）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;八意永琳(やごころ えいりん&#x2F;Eirin Yagokoro)&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;铃仙·优昙华院·因幡（レイセン・うどんげいん・イナバ&#x2F;Reisen Udongein Inaba）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;因幡帝（いなば てゐ&#x2F;Tewi Inaba）&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidTitle(&quot;白玉楼&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidString(&quot;白玉楼（はくぎょくろう&#x2F;Hakugyokurou）是《东方project》中位于冥界的一座有着庭院的屋子，是西行寺幽幽子和魂魄妖梦的居住地。首次出现在《东方妖妖梦》。&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidString(&quot;主要成员：&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.bulidItems(new String[] &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;西行寺幽幽子（さいぎょうじ　ゆゆこ&#x2F;Saigyouji Yuyuko）&quot;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &quot;魂魄 妖梦(こんぱく　ようむ&#x2F;Youmu Konpaku)&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        builder.createFile(path + title);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design7;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws ClassNotFoundException, NoSuchFieldException, SecurityException, IllegalArgumentException, IllegalAccessException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; &quot;D:&quot; + File.separator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String title &#x3D; &quot;东方幻想乡&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Designer().construct(new TextBuilder(), path, title);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Designer().construct(new HtmlBuilder(), path, title);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后，会在D盘根目录下生成东方幻想乡.txt及东方幻想乡.html两个文件。</p>
<p>东方幻想乡.txt的内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;东方幻想乡&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">#红魔馆#</span></pre></td></tr><tr><td class="code"><pre><span class="line">红魔馆（こうまかん&#x2F;Koumakan）是蕾米莉亚·斯卡雷特拥有的一间房子。它位于雾之湖的边缘。从外面可以看见深红色的窗户，但是窗户并不多，因为吸血鬼不喜欢阳光。里面也有很多没有窗户的房间。屋顶上有一个钟楼，但钟只在晚上敲响。红魔馆内部比外面看起来大得多。</span></pre></td></tr><tr><td class="code"><pre><span class="line">主要成员：</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 蕾米莉亚·斯卡雷特（レミリア·スカーレット&#x2F;Remilia Scarlet）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 芙兰朵露·斯卡雷特（フランドール·スカーレット&#x2F;Flandre Scarlet）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 十六夜咲夜（いざよい さくや&#x2F;Sakuya Izayoi）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 帕秋莉·诺蕾姬（パチュリー·ノーレッジ&#x2F;Patchouli Knowledge）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 小恶魔（リートル デビッル&#x2F;Little Devil）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 红美铃（ホン メイリン&#x2F;Hong Meirin）</span></pre></td></tr><tr><td class="code"><pre><span class="line">#永远亭#</span></pre></td></tr><tr><td class="code"><pre><span class="line">永远亭是《东方project》中位于迷途竹林深处的一座日式建筑，是八意永琳、蓬莱山辉夜、因幡帝和铃仙·优昙华院·因幡的居住地。首次出现在《东方永夜抄》。</span></pre></td></tr><tr><td class="code"><pre><span class="line">主要成员：</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 蓬莱山辉夜（ほうらいさん かぐや&#x2F;Houraisan Kaguya）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 八意永琳(やごころ えいりん&#x2F;Eirin Yagokoro)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 铃仙·优昙华院·因幡（レイセン・うどんげいん・イナバ&#x2F;Reisen Udongein Inaba）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 因幡帝（いなば てゐ&#x2F;Tewi Inaba）</span></pre></td></tr><tr><td class="code"><pre><span class="line">#白玉楼#</span></pre></td></tr><tr><td class="code"><pre><span class="line">白玉楼（はくぎょくろう&#x2F;Hakugyokurou）是《东方project》中位于冥界的一座有着庭院的屋子，是西行寺幽幽子和魂魄妖梦的居住地。首次出现在《东方妖妖梦》。</span></pre></td></tr><tr><td class="code"><pre><span class="line">主要成员：</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 西行寺幽幽子（さいぎょうじ　ゆゆこ&#x2F;Saigyouji Yuyuko）</span></pre></td></tr><tr><td class="code"><pre><span class="line">    · 魂魄 妖梦(こんぱく　ようむ&#x2F;Youmu Konpaku)</span></pre></td></tr></table></figure>

<p>东方幻想乡.html的内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;head&gt;&lt;title&gt;东方幻想乡&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;body&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;红魔馆&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;红魔馆（こうまかん&#x2F;Koumakan）是蕾米莉亚·斯卡雷特拥有的一间房子。它位于雾之湖的边缘。从外面可以看见深红色的窗户，但是窗户并不多，因为吸血鬼不喜欢阳光。里面也有很多没有窗户的房间。屋顶上有一个钟楼，但钟只在晚上敲响。红魔馆内部比外面看起来大得多。&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;主要成员：&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;蕾米莉亚·斯卡雷特（レミリア·スカーレット&#x2F;Remilia Scarlet）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;芙兰朵露·斯卡雷特（フランドール·スカーレット&#x2F;Flandre Scarlet）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;十六夜咲夜（いざよい さくや&#x2F;Sakuya Izayoi）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;帕秋莉·诺蕾姬（パチュリー·ノーレッジ&#x2F;Patchouli Knowledge）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;小恶魔（リートル デビッル&#x2F;Little Devil）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;红美铃（ホン メイリン&#x2F;Hong Meirin）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;永远亭&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;永远亭是《东方project》中位于迷途竹林深处的一座日式建筑，是八意永琳、蓬莱山辉夜、因幡帝和铃仙·优昙华院·因幡的居住地。首次出现在《东方永夜抄》。&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;主要成员：&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;蓬莱山辉夜（ほうらいさん かぐや&#x2F;Houraisan Kaguya）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;八意永琳(やごころ えいりん&#x2F;Eirin Yagokoro)&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;铃仙·优昙华院·因幡（レイセン・うどんげいん・イナバ&#x2F;Reisen Udongein Inaba）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;因幡帝（いなば てゐ&#x2F;Tewi Inaba）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;h1&gt;白玉楼&lt;&#x2F;h1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;白玉楼（はくぎょくろう&#x2F;Hakugyokurou）是《东方project》中位于冥界的一座有着庭院的屋子，是西行寺幽幽子和魂魄妖梦的居住地。首次出现在《东方妖妖梦》。&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;p&gt;主要成员：&lt;&#x2F;p&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;ul&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;西行寺幽幽子（さいぎょうじ　ゆゆこ&#x2F;Saigyouji Yuyuko）&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;li&gt;魂魄 妖梦(こんぱく　ようむ&#x2F;Youmu Konpaku)&lt;&#x2F;li&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;ul&gt;</span></pre></td></tr></table></figure>

<p>用浏览器打开东方幻想乡.html的效果为：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7Builder%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Builder模式的Java实现，下面咱们试着跳出语言层面，抽象出Builder模式中登场的角色。</p>
<p><strong>Builder(建造者)</strong></p>
<p>在构造复杂事物时，Builder是每一个具体细节的制造者，但却不负责整体的规划。换句话说，如果我们把要构建的事物拆散了来看，每一个小零件其实都是Builder制造的，但是Builder并不知道它到底造了个什么，也没能力建造出一个完整的事物。</p>
<p>以前文的小例子来说，如果我们把最后输出的文章视为待构造的复杂事物的话，Builder负责生成一篇文章的所有细节：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract void bulidHead(String head);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void bulidTitle(String title);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void bulidString(String str);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void bulidItems(String[] items);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void bulidTail();</span></pre></td></tr></table></figure>

<p>但是只有这些是无法形成一篇文章的，关键是如何组合这些细节，以及填入什么内容。这些就是下面马上就要介绍的Designer的工作了。</p>
<p>在例子中，由Builder，TextBuilder及HtmlBuilder共同扮演了Builder这个角色。当然，这种将角色分层的做法并不是Builder模式所关注的核心。</p>
<p><strong>Designer(设计者)</strong></p>
<p>在构造复杂事物时，Designer负责整体的设计，并不负责具体每个零件的实现。具体实现会交给Builder。在例子中，Designer类扮演了Designer这个角色。</p>
<p>某些时候，我们也会将Designer与Builder合二为一，形成超级工人(也就是老板最喜欢的那种)：既能做设计，又能具体动手实现。不过这样会导致一个角色承载的功能过多，不利于程序架构的划分，在程序规模不大，不容易引起混乱时可以使用。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/7Builder%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">3.Template Method模式</a></strong><br><strong><a href="">4.Factory Method模式</a></strong><br><strong><a href="">8.Abstract Factory模式</a></strong></p>
<p>关于这4个设计模式间的联系与区别，详见<a href="">8.Abstract Factory模式</a>。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-6.Prototype模式</title>
    <url>/2018/06/25/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-6Prototype%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Prototype模式被归入了第3部分<a href="">生成实例</a>。在GoF原书中，Prototype模式则被归入了<a href="">创建型设计模式</a>。简单来说，Prototype模式可以被描述为：复制已有实例以生成新的实例。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在Java中，如果我们想要获得一个实例，最通常的做法就是找到这个实例所属的类，然后通过new关键字生成。这种基于模版生成实例的做法最符合思维逻辑，但某些情境下却不大方便。</p>
<p>下面我们就来举一个这种”不大方便”的小例子吧。</p>
<p>假设我们用Java写了一个画图程序，然后我们用该程序画了一个圆。站在编程的角度考虑，我们画出的圆是实例，程序中会有一个名为”圆”的类作为模版来生成它。要描述一个圆，假定需要如下参数：</p>
<ul>
<li>圆心位置</li>
<li>半径</li>
<li>是否填充颜色，如果是，填充的颜色是什么</li>
<li>边线粗细(如果为0代表无边线)</li>
<li>边线颜色</li>
<li>边线是否为虚线，如果是，虚线的样式是什么样的？</li>
</ul>
<p>当我们第一次绘制这个圆的时候，自然是要用new关键字基于模版创建的。但如果我们要复制这个实例呢？</p>
<p>比较容易想到的方式自然就是再用相同的参数new一个新的圆啦！不过这样就需要我们把描述这个实例的参数都记录下来，或者是能做到从待复制实例中提取出来。在参数较多的时候，比如我们要复制的不是一个圆，而是用户绘制的一幅复杂的图画，这样的设计既繁琐又不利于维护。</p>
<p>不过话说回来，既然我们都打算把属性从实例中提取出来了，那么为什么不在复制时跳过模版这一层，直接复制实例以得到新的实例呢？我们当然可以这样做，由这种想法延伸出来的设计模式就是Prototype模式。</p>
<p>Prototype的含义是”原型”，也就是待复制的实例。我们可以这样来理解：传统的基于类生成实例的方式就好比打印机，它需要切实了解文档的内容，这样才能从无到有的打印出文档。而Prototype模式则好比是复印机，首先我们需要拿到一份文档实例，如果我们想复印它，那么我们并不需要了解它的内容，也不需要知道它是如何生成的，我们只需要原样复印即可。</p>
<p>当然，使用复印机必须先获得待复印的文档，而这第一份文档还是需要打印机生成的。上文中关于”圆”的那个例子也是这样：第一个圆的实例还是需要通过new关键字来生成。</p>
<p>幸运的是，Java API为我们提供了Cloneable接口，直接使用即可实现实例的复制。这里多说一句，Java API提供的是浅克隆(shallow copy)，也被叫做字段对字段的复制(field-to-field-copy)。即只会克隆一层。例如我们有对象a，a中有B类型字段b。假设我们通过克隆生成了对象a1，那么a1中的类型为B的字段已经是复制后的了，我们可以将它命名为b1，它与a中的b是两个不同的引用。不过二者指向的实体却没有变。这件事的道理和Java中的值传递与址传递类似(Java中只有值传递哦)，算是老生常谈的问题了。</p>
<p>如果我们想要实现N层拷贝，或者是真正意义上的深拷贝，那就只能重写clone()方法自己实现了。</p>
<p>另外，需要注意的是，Java API提供的复制只是基于原实例中的字段生成新的实例，并不会调用构造函数。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>下面我们给出一个更具体的小例子，来加深一下对Prototype模式的理解。该示例程序的功能为给字符串加上修饰符，修饰符可能是环绕文字的符号，也有可能是下划线。</p>
<p>首先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6Prototype%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design6包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6Prototype%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Initialize.java及Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Product接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Product extends Cloneable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体的打印逻辑</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void use(String str);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 复制自身</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Product createClone() throws CloneNotSupportedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Manager类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Manager &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Map&lt;String, Product&gt; showcase &#x3D; new HashMap&lt;String, Product&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void register(String name, Product proto) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.showcase.put(name, proto);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Product create(String name) throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.showcase.get(name).createClone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>MessageBox类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 在字符串周围加上环绕字符</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class MessageBox implements Product &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 用于环绕字符串的修饰字符</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private char decochar;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 字符串距左右修饰字符的间隙</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int padding;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MessageBox(char decochar, int padding) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.decochar &#x3D; decochar;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.padding &#x3D; padding;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void use(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.printLine(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(this.decochar);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; this.padding; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot; &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; this.padding; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot; &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(this.decochar);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.printLine(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Product createClone() throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (MessageBox)this.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void printLine(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; str.length() + (this.padding + 1) * 2; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(decochar);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>UnderlinePen类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 在字符串下方加上下划线</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class UnderlinePen implements Product &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 组成下划线的字符</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private char ulchar;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public UnderlinePen(char ulchar) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.ulchar &#x3D; ulchar;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void use(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; str.length(); i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(this.ulchar);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Product createClone() throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (UnderlinePen)this.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Initialize类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Initialize &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Manager initialize() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Manager manager &#x3D; new Manager();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        manager.register(&quot;big box&quot;, new MessageBox(&#39;$&#39;, 5));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        manager.register(&quot;small box&quot;, new MessageBox(&#39;&#x3D;&#39;, 2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        manager.register(&quot;strong underLine&quot;, new UnderlinePen(&#39;*&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        manager.register(&quot;weak underLine&quot;, new UnderlinePen(&#39;-&#39;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return manager;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其实Initialize与Main都是测试代码，和Prototype模式本身无关。之所以分成两个类是为了表达以下含义：原型的生成通常只会在系统初始化时进行一次。而原型的复制则是在每次需要时进行。</p>
<p><strong>Main类</strong></p>
<p>首先测试一下”大盒子”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Manager manager &#x3D; Initialize.initialize();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Product bigBox &#x3D; manager.create(&quot;big box&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bigBox.use(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$$$$$$$$$$$$$$$$$$$$$</span></pre></td></tr><tr><td class="code"><pre><span class="line">$     ReimuWang     $</span></pre></td></tr><tr><td class="code"><pre><span class="line">$$$$$$$$$$$$$$$$$$$$$</span></pre></td></tr></table></figure>

<p>稍微改造一下，再来看看”小盒子”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Manager manager &#x3D; Initialize.initialize();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Product smallBox &#x3D; manager.create(&quot;small box&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        smallBox.use(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;  ReimuWang  &#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr></table></figure>

<p>然后是强下划线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Manager manager &#x3D; Initialize.initialize();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Product strongUnderLine &#x3D; manager.create(&quot;strong underLine&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        strongUnderLine.use(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ReimuWang</span></pre></td></tr><tr><td class="code"><pre><span class="line">*********</span></pre></td></tr></table></figure>

<p>最后是弱下划线：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design6;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws CloneNotSupportedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Manager manager &#x3D; Initialize.initialize();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Product weakUnderLine &#x3D; manager.create(&quot;weak underLine&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        weakUnderLine.use(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ReimuWang</span></pre></td></tr><tr><td class="code"><pre><span class="line">---------</span></pre></td></tr></table></figure>

<h1 id="针对示例程序的说明"><a href="#针对示例程序的说明" class="headerlink" title="针对示例程序的说明"></a>针对示例程序的说明</h1><p><strong>原型与单例</strong></p>
<p>在Prototype模式中，作为原型的那个实例自然是唯一的。但并不意味着原型实例所属的那个类就要是单例的，因为同一个类可能会产生多个原型(例如上文示例中的big box与small box)，而且我们的目的就是对原型进行复制。</p>
<p>如果必要，我们还会修改复制出的结果。这点在上例中并不明显。因为我们都是拿到原型的克隆体后直接就用了。但是实际上，原型可以被理解为一个默认值，很多时候我们在拿到克隆体后是需要修改的。那么有人可能要问了，既然都要改了为什么不直接生成一个新的呢？那是因为我们需要的实例还是基于原型生成的，绝大多数的属性都与原型类似，因此在原型的基础上修改还是比生成一个新的实例容易。例如最开始的那个”圆”的例子，当我们拿到复制的圆后，也可以微调圆的形状。</p>
<p>进一步来说，原型到底是个什么东西呢？</p>
<p>我认为，原型是介于类与实例之间的一个东西。以上例的big box及small box为例，它们有一定的通用性，我们通常会希望像使用样式模版那样使用它们。但是它们又不足以作为一个类：毕竟它们仅仅只是一个样式而已，如果我们将这些样式都设计为类，那么系统中的类就会太多了。例子中是只设计了两种盒子，但是我们可以通过简单的参数调整就设计出无数个盒子：大大盒子，小小盒子等等。显然这是不利于维护的。</p>
<p><strong>使用与具体的实现解耦</strong></p>
<p>严格来说，这个特性并不是Prototype模式的核心特性。Prototype模式的核心特性其实就是”直接复制原型生成新的实例”。只不过，原型作为一种实例，量还是比较大的。因此对原型的管理也是很现实的问题。</p>
<p>首先，来看Product与 UnderlinePen/MessageBox。显然，如果原型逻辑比较简单，仅仅就是需要一种大的样式：例如只需要环绕字符串或者加下划线，也能够确定后续不会再扩展什么别的处理样式，那么完全可以不用设计这层抽象的Product。不过正如我们下文要论述的，这样不利于框架与实现的解耦，而且”确定后续不会再扩展什么别的处理样式”云云说得确实也太绝对了，没人能准确的预知未来的事情，因此花费少许的代价(多定义一层抽象的结构)，换得程序架构的清晰及后续的可扩展性还是很值得的。</p>
<p>然后观察上例中的Main.java及Initialize.java，我们可以发现两个特点：</p>
<p>第一，在Main中做调用时，只出现了作为框架的类Manager及Product，没有出现任何具体的实现类。显然，这样可以做到”高内聚，低耦合”，让使用与生成解耦。</p>
<p>第二，进一步的，Main中的使用者不仅不需要使用具体的实现类，他们甚至都不需要知道实现类到底是如何组织的。对于他们而言，他们只知道系统提供了四种修饰字符串的样式：</p>
<ul>
<li>big box</li>
<li>small box</li>
<li>strong underLine</li>
<li>weak underLine</li>
</ul>
<p>虽然从底层实现的角度来说，big box及small box这两种原型是基于MessageBox类生成的，而strong underLine及weak underLine这两种原型是基于UnderlinePen类生成的。但是如果使用者不需要知道这些细节，他们完全可以把这四种样式视为并列独立的，只管按名字调用即可。</p>
<p>也就是说，虽然系统提供的是原型，但使用者在使用时却仿佛在使用类。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Prototype模式的Java实现，下面咱们试着跳出语言层面，抽象出Prototype模式中登场的角色。</p>
<p><strong>Prototype(原型)</strong></p>
<p>Prototype提供了生成原型，复制原型以及对外提供克隆体的能力。在示例程序中，它首先被一分为二：管理原型及对外提供原型克隆体的功能被放入了Manager类中。而Product/UnderlinePen/MessageBox这一系则负责Prototype的核心功能：即原型的提供及复制。在这一系的内部，Product接口负责扮演抽象的框架的那一层(当然，不仅仅是接口，依需求不同，抽象类，甚至是非抽象类，都可以扮演这一层的角色)， UnderlinePen/MessageBox 类负责扮演具体实现的那一层。</p>
<p>可能有人会觉得Prototype模式的角色有些少，怎么会只有一个呢？但是从本质上来讲，Prototype模式的角色真的就只有Prototype这一个，示例程序中出现的其他的所有角色不过是为了让程序更好而做的补充。它们并不是Prototype模式所关注的重点。而且这些外围角色所承载的功能是需要依需求的不同灵活变化的。例如示例程序中Manager这个类，它只管理了Product这一系的原型。如果我们需要定义完全不同的另一系原型，那么我们依然可以将它们交由Manager管理。</p>
<p>这其实给了我们很好的启示：设计模式并不是孤立的，也并非一成不变的。说实话，当我们使用某个设计模式时，使用方式是否规范并不重要(话说回来，设计模式本来就是经验的总结，其实没什么规范可言)，基于需求做出最合理的应对才是最重要的。这也就是所谓的”黑猫白猫，抓到老鼠就是好猫”。因此，在研究设计模式时，应尽可能的探究它的理论内核，而不应被一些表象上的条条框框限制住。这样才能在需要时做出最佳的变通及组合。</p>
<p>进一步来说，我们研究设计模式，虽然明面上有什么23种GoF设计模式这一说，但这23种设计模式其实仅仅是供我们探究设计模式的跳板。当我们研习完这23种设计模式，如果仅仅是把它们背了下来，意义其实并不大(可能也就面试的时候忽悠一下面试官吧)，关键是透过现象看本质，找到这些设计模式中共通的”思想”。一旦领悟到这一层，其实就没有什么特定的设计模式可言了。基于需求，我们可以很自然的将几种设计模式组合变形，形成最适用当前环境的新的设计模式。</p>
<p>在[倚天屠龙记]中，张三丰在教授张无忌太极剑法时，曾反复问张无忌忘了多少剑招了，直到张无忌说全忘记了，老道才在众人的一片懵逼中笑道：”不坏不坏，忘得真快”。因为剑招其实都是次要的，剑意才是最重要的。如果硬要从技术的角度分析，太极剑法只有一招:那就是不断的画圈，大圈套小圈，正圈套斜圈。但是1招中却又蕴含着无穷多招，正所谓太极圆缺，无使断绝，无招胜有招。</p>
<p>说了这么多题外话，我想表述的就是在学习设计模式时，具体的设计模式都是招式，我们学会了可以快速上手运用，但是更重要的还是通过这些招式领会背后的”思想”。一旦融汇贯通，其实也就没什么23种设计模式可言了。对我们而言，设计模式其实只有一种，那就是”基于当前环境，生成的那种最恰当的设计模式”。而因为我们可能面对的环境有无穷多种，我们可用的设计模式自然也无穷无尽。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/6Prototype%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-5.Singleton模式</title>
    <url>/2018/06/19/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-5Singleton%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Singleton模式被归入了第3部分<a href="">生成实例</a>。在GoF原书中，Singleton模式则被归入了<a href="">创建型设计模式</a>。简单来说，Singleton模式可以被描述为：只允许生成一个实例。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>类作为模版，在程序运行时通常会生成许多个实例。例如Java中的java.lang.String类与字符串就是一一对应的关系：即如果我们声明了1000个不同的字符串，那么系统中就会有1000个String类的实例与之对应。</p>
<p>但是，有时我们也会有这样的需求：某个类的实例只会有一个。例如东方Project中的八云紫，她的种族是隙间妖怪，属于这个种族的妖怪只有她一个(厉害了我的紫婆婆)。再比如对应于程序配置文件的类，因为配置文件只有一个(假设程序只有一个配置文件)，那么与之对应的代表配置文件的类的实例自然只应该有一个。</p>
<p>为达成这个目的，其实我们可以什么也不用做。只要具体生成实例的代码具备自律性，即对于只需要一个实例的类，我们只调用一次new即可。</p>
<p>这样做的优点是简单，而缺点则是系统健壮性低：设计系统架构是最开始时打下的基础，而new实例这种操作则会随着时间的推进无休止的添加。也许一开始new实例的代码可以保证唯一性，但是随着时间的流逝，new实例的位置越来越多，犯错误的风险自然会越来越大。</p>
<p>类似的例子还有父类方法的重写。如果父类希望所有它的子类都能重写自己的方法m1()，它其实是可以什么都不用做的：只要子类们都自觉重写即可。但是这并非是强制的，如果未来某一天，某个子类决定不重写了，父类将无能为力。因此，为了保证强制力，父类可能会将自身声明为抽象类，进而可以将m1()声明为抽象方法，此时子类再继承该类时，就必须重写方法m1()了。</p>
<p>在保证某类实例的唯一性这个问题上，我们也可以通过某种手段强制保证这点。由此演化而成的设计模式就是Singleton模式。Singleton的含义是”只含有一个元素的集合”，也就是所谓的单例。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>首先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5Singleton%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design5包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5Singleton%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Singleton类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design5;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Singleton SINGLETON &#x3D; new Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Singleton() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Singleton getInstance() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return Singleton.SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Singleton的构造函数的方法体是空的，显式声明它的唯一目的就是为了将它的访问权限标志为private。这样就将Singleton能够实例化的位置限定在自身类的内部了。</p>
<p>外部是通过静态方法getInstance()来获取Singleton的实例的。虽然没有强制的规定，不过通常我们都会将单例模式中获取实例的方法命名为getInstance()。该方法会返回Singleton的类变量SINGLETON。由于SINGLETON的访问权限是private，这样外部就只能通过getInstance()方法来获取它了，进而实现了单例的功能。</p>
<p>在上例中，SINGLETON在声明时直接就初始化了，也就是说，SINGLETON会在类初始化的时候跟着一同初始化。这样的好处是SINGLETON在一开始就会处于一个随时可用的状态，但坏处则是有的时候这是一种浪费，尤其是在SINGLETON占用空间较大时：直到真正需要SINGLETON之前，这部分空间实际上都是浪费的，因此有的时候我们也会这样写单例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design5;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Singleton SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Singleton() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Singleton getInstance() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; Singleton.SINGLETON)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Singleton.SINGLETON &#x3D; new Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return Singleton.SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很显然，这又是程序员们熟悉的老话题了。也就是时间和空间上的权衡。</p>
<p>例子1一开始SINGLETON就是可用的，但是却会有一段SINGLETON无用却占用空间的时期。例子2则是每次在需要SINGLETON时去检查它是否初始化，节省了空间却增加了时间上的开销：每次获取实例都要多判断一次if。</p>
<p>例子1因为会在类初始化时就初始化SINGLETON，因此它先天就是线程安全的。而例子2则是线程不安全的，如果需在并发环境下使用，还需对getInstance()方法进行并发控制，例如如下的做法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design5;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Singleton SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Singleton() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static synchronized Singleton getInstance() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; Singleton.SINGLETON)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Singleton.SINGLETON &#x3D; new Singleton();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return Singleton.SINGLETON;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在单例模式中，例子1被称作”饿汉单例”–调用者很饿，调用者不能等，必须尽快返回结果；而例子2则被称作”懒汉单例”–生产者很懒，能拖就拖，不到万不得已不生产。</p>
<p>再扩展来说，”饿”与”懒”在编程领域其实是一组很常见的概念(例如懒加载等)。其核心基本都不出上文论述的藩篱：也就是到底是用时间换空间，还是用空间换时间的问题。</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design5;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Singleton s1 &#x3D; Singleton.getInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Singleton s2 &#x3D; Singleton.getInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(s1 &#x3D;&#x3D; s2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<p>说明我们通过多次调用getInstance()方法得到的实例确实是单例的。</p>
<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Singleton模式的Java实现，下面咱们试着跳出语言层面，抽象出Singleton模式中登场的角色。</p>
<p><strong>Singleton</strong></p>
<p>Singleton模式中只有Singleton这一个角色。它可以保证自身只生成一个实例。在示例程序中，由Singleton类来扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/5Singleton%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p>Singleton模式算是一个比较底层与基础的设计模式，只要是需要确保仅有一个实例的场合，都可以使用单例模式。例如，在以下模式中，很多角色一般都只需要生成一个实例：</p>
<ul>
<li><a href="">4.Factory Method模式</a></li>
<li><a href="">8.Abstract Factory模式</a></li>
<li><a href="">7.Builder模式</a></li>
<li><a href="">15.Facade模式</a></li>
</ul>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-4.Factory Method模式</title>
    <url>/2018/06/14/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-4FactoryMethod%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Factory Method模式被归入了第2部分<a href="">交给子类</a>。在GoF原书中，Factory Method模式则被归入了<a href="">创建型设计模式</a>。简单来说，Factory Method模式可以被描述为：在抽象的父类工厂中定义生成抽象的父类产品的逻辑，然后由具体的子类工厂生产出具体的子类产品。也就是所谓的”将实例的生成交给子类”。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>简单来说，我们可以认为Factory Method模式是<a href="">3.Template Method模式</a>的特例。Template Method模式是指父类定义流程，却不负责具体的实现。而Factory Method模式则是进一步将流程限定为”实例的生成”。</p>
<p>因此，后文在介绍Factory Method模式时，基本都会对照着Template Method模式来说。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>本程序会分种族的使用工厂创建东方Project的角色，下面先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4FactoryMethod%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design4包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4FactoryMethod%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>RoleFactory类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class RoleFactory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Role create(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.createRole(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract Role createRole(String name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中，create()方法就是Template Method模式中的模版方法，而createRole()方法则是Template Method模式中需子类实现的抽象方法。</p>
<p><strong>Role类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Role &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Role(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;我叫&quot; + this.name + &quot;，我的种族是&quot; + this.race();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract String race();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>HumanFactory类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class HumanFactory extends RoleFactory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Role createRole(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Human(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Human类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Human extends Role &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Human(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String race() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;人类&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>VampireFactory类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class VampireFactory extends RoleFactory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Role createRole(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Vampire(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Vampire类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Vampire extends Role &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Vampire(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected String race() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;吸血鬼&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Role&gt; roleList &#x3D; new ArrayList&lt;Role&gt;(5);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        RoleFactory roleFactory &#x3D; new HumanFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        roleList.add(roleFactory.create(&quot;博丽灵梦&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        roleList.add(roleFactory.create(&quot;雾雨魔理沙&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        roleList.add(roleFactory.create(&quot;十六夜咲夜&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        roleFactory &#x3D; new VampireFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        roleList.add(roleFactory.create(&quot;蕾米莉亚·斯卡雷特&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        roleList.add(roleFactory.create(&quot;芙兰朵露·斯卡蕾特&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Role role : roleList) System.out.println(role);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行Main.java后输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我叫博丽灵梦，我的种族是人类</span></pre></td></tr><tr><td class="code"><pre><span class="line">我叫雾雨魔理沙，我的种族是人类</span></pre></td></tr><tr><td class="code"><pre><span class="line">我叫十六夜咲夜，我的种族是人类</span></pre></td></tr><tr><td class="code"><pre><span class="line">我叫蕾米莉亚·斯卡雷特，我的种族是吸血鬼</span></pre></td></tr><tr><td class="code"><pre><span class="line">我叫芙兰朵露·斯卡蕾特，我的种族是吸血鬼</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Factory Method模式的Java实现，下面咱们试着跳出语言层面，抽象出Factory Method模式中登场的角色。</p>
<p><strong>Creator(创建者)</strong></p>
<p>Creator对应于Template Method模式中的抽象父类，其中至少应包含两个方法，首先是create()方法，它对应于Template Method模式中的模版方法，用来控制”生成实例”这个业务流程。然后是factoryMethod()方法，它对应于Template Method模式中的抽象方法，需要子类角色ConcreteCreator去具体的实现。</p>
<p>在示例程序中，抽象类RoleFactory扮演了这个角色。</p>
<p><strong>Product(产品)</strong></p>
<p>Product是Creator创建出的实例所属的类。当然，Creator是抽象的工厂，是无法创建实例的。因此Product是抽象的产品。</p>
<p>Creator与Product均是抽象上的概念，它们之间是互相对应的，不承载具体的业务逻辑。Creator就是抽象的生成产品的工厂，至于具体是生成什么产品的，它不知道。而Product是抽象意义上的产品，它不是某种具体的产品，它代表的是”产品”这个概念。</p>
<p>在示例程序中，抽象类Role扮演了这个角色。当然啦，在示例程序中，因为Role类中包含抽象方法race()，因此必须要被声明为抽象的。但实际上，Product中并非必须要包含抽象方法，所以仅从Java语言规范的角度来讲，此时Product也可以是非抽象的。</p>
<p>至于是否要将Product声明为抽象的，则要依具体的情境而定。如果Product非常抽象，真的就只是代表一个概念，绝不会被实例化，那么建议大家将Product声明为抽象的(即便其中没有抽象方法)，从语法的角度上讲，这可以保证Product不会被new出实例。更重要的是，这表明了一种态度：Product代表的是抽象的”产品”这一概念，而不是某个具体的产品。反之，如果Product虽然也代表”产品”这个概念，但是它却没有那么抽象，我们甚至可以实例化一个代表”产品”的实例出来，那么自然就不能声明为抽象的了。</p>
<p><strong>ConcreteCreator(具体的创建者)</strong></p>
<p>ConcreteCreator对应于Template Method模式中的子类，它会实现其抽象父类Creator中的抽象方法。在示例程序中，HumanFactory及VampireFactory均饰演这个角色。作为工厂它们分别负责生成具体的产品Human及Vampire。</p>
<p>之所以创建了两个工厂，是为了说明抽象与具体之间的关系：抽象角色(Creator,Product)是唯一的，Creator代表”工厂”这个概念，而”Product”代表”产品”这个概念，概念自然是唯一的。但是属于这个概念的个体则是无穷多个的，在本程序中，就有生产人类的工厂及生产吸血鬼的工厂。如果我们需要，还可以很轻松的添加其他的工厂：诸如生产魔法使的工厂及生产神的工厂等。</p>
<p><strong>ConcreteProduct(具体的产品)</strong></p>
<p>ConcreteProduct与ConcreteCreator是一一对应的。什么样的工厂就会生产什么样的产品。在示例程序中，Human及Vampire均扮演了这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/4FactoryMethod%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="Factory-Method模式的变种"><a href="#Factory-Method模式的变种" class="headerlink" title="Factory Method模式的变种"></a>Factory Method模式的变种</h1><p>除了实例代码中的RoleFactory类之外，Creator这个角色其实还可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TestFactory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public TestProduct create() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.createTest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected TestProduct createTest() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new TestProduct();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>较之前文中的示例程序，这段代码中的Creator角色其实就不完全遵循Template Method模式了。此时的Factory Method模式(假设我们还认为这样的变种算是Factory Method模式的话)就不再是Template Method模式的特例了，因为createTest()方法不再是抽象的了。相应的，因为需要切实的实例化，作为抽象产品的TestProduct类自然不能再被声明为abstract的了，这也就是前文我们在介绍Product角色时提到的”不那么抽象的情况”。</p>
<p>这样做的好处和坏处都是显而易见的。从好的角度来讲，此时抽象工厂实际上是有生产能力的了，所以从严格的意义上讲，TestFactory不应该被叫做抽象工厂，而应该被叫做默认工厂。相应的，Product也应该被叫做默认产品。在子类没有什么特殊需要的情况下，它们直接用父类提供的统一规格的产品就行。如果它们有特殊的需求，那么重写createTest()方法就好。</p>
<p>而从坏的角度上讲，这相当于是”坏了规矩”。此时的Creator及Product不再代表一个概念了，必须是非抽象的了，因为无论它们被声明的多通用化，它们都是有实体的了，是要产生实例的。而子类由重写父类抽象方法到重写父类非抽象方法，其强制力也进一步降低：前者是非做不可，而后者则是可做可不做。</p>
<p>说”坏了规矩”，貌似是个挺严重的事。不过在实际编程中，规矩有时也没那么重要，根据实际的情况，做出最合理的应对才是最重要的。事实上，并不仅仅是Factory Method模式，所有的设计模式说穿了都是经验的总结，并不是规范性的东西，因此一切设计模式，其实都应该根据实际情况做出灵活的应对。</p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">3.Template Method模式</a></strong><br><strong><a href="">7.Builder模式</a></strong><br><strong><a href="">8.Abstract Factory模式</a></strong></p>
<p>关于这4个设计模式间的联系与区别，详见<a href="">8.Abstract Factory模式</a>。</p>
<hr>
<p><strong><a href="">5.Singleton模式</a></strong></p>
<p>Creator与ConcreteCreator这个角色通常都是唯一的。Creator的唯一性比较好理解，表示”工厂”的概念只有一个，Creator自然只需要一个就够了。需要进一步解释一下的是ConcreteCreator这个角色。具体的工厂可以有多个类型，但是每个类型的工厂通常只需要一个。例如我们可以同时创建生产桔子与生产苹果的工厂。从总数上说，扮演ConcreteCreator角色的实例有两个，但具体到每种特定的类型，则只会有一个。</p>
<p>正因为这种唯一性，Creator与ConcreteCreator通常都会应用单例模式来确保单一性。实际上，并不仅仅是这两个角色，也不仅仅是局限在Factory Method模式，任何需要从逻辑上确保单一性的角色都可以应用单例模式。</p>
<p>当然，我们的示例程序仅仅只是举例，因此不想弄得太复杂，自然就没使用单例模式啦。</p>
<hr>
<p><strong><a href="">1.Iterator模式</a></strong></p>
<p>我们可以应用Factory Method模式来实现Iterator模式。角色对应如下：</p>
<ul>
<li>Creator：生产”迭代器”这个概念的抽象工厂。</li>
<li>Product：代表”迭代器”这个概念的抽象类。</li>
<li>ConcreteCreator：生成具体迭代器的工厂。</li>
<li>ConcreteProduct：具体的迭代器，例如链表的迭代器，数组的迭代器等。</li>
</ul>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-3.Template Method模式</title>
    <url>/2018/06/12/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3TemplateMethod%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Template Method模式被归入了第2部分<a href="">交给子类</a>。在GoF原书中，Template Method模式则被归入了<a href="">行为型设计模式</a>。简单来说，Template Method模式可以被描述为：在父类中定义处理框架，在子类中进行具体处理。也就是所谓的”将具体处理交给子类”。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>template这个单词的含义为”模版”，在介绍Template Method模式之前，我们有必要先介绍一下模版。</p>
<p>模版是指带有镂空文字的薄薄的塑料板，只要用笔在模版的镂空处进行临摹，即使是手写也能写出整齐的文字。不过，虽然写出的文字的样式都是相同的，但是具体的感觉则是依赖于具体的笔：使用铅笔的话写出的就是铅笔字，使用钢笔的话写出的就是钢笔字。</p>
<p>本文要介绍的Template Method模式就是带有模版功能的模式。作为模版的方法被定义在父类中，它就像镂空的那张模版，只规定样式，因此是抽象的。而具体的实现，也就是到底是铅笔还是钢笔，则被定义在了子类中。</p>
<p>像这样在父类中定义处理流程的框架，在子类中实现具体处理的模式就是Template Method模式。</p>
<p>按照这个定义来说，Template Method模式与多态极为类似。甚至可以认为就是由多态演化出的设计模式。因为在Java中，多态就是同一个行为具有多个不同表现形式或形态的能力。而要称之为多态，则需要3个必要条件：继承，重写，父类引用指向子类对象。很显然，这与Template Method模式的定义完美契合。</p>
<p>当然，多态只是Template Method模式演化的基础，作为一个模式，Template Method模式较之多态还是要复杂一些的：在Template Method模式中，父类里除了有会被子类继承的抽象方法之外，还会有作为模版功能存在的，描述业务流程的非抽象方法存在。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>本程序会将字符或字符串重复输出5次，下面先给出类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3TemplateMethod%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design3包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3TemplateMethod%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中Main.java是测试代码，并没有出现在类图中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>AbstractDisplay类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class AbstractDisplay &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int times;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected AbstractDisplay(int times) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.times &#x3D; times;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public final void display() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.open();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; this.times; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.print();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract void open();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract void print();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected abstract void close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中，display()是控制业务流程的模版方法。而open()，print()，close()则是交由子类去实现的具体方法。</p>
<p>需要注意的是，display()被强硬的声明为了final，通常来说，这在Template Method模式中是必须的。这其实就是AbstractDisplay作为父类在告诉子类：继承我可以，但是除了必须实现我未实现的抽象方法之外，还不能修改我制定的业务流程。</p>
<p>open()，print()，close()均被声明为了protected，不过这个就没什么强制性了。只不过通常来说，抽象方法就是用来被子类继承的，让外人看到也没用，使用protected只是一个编程时的好习惯。</p>
<p><strong>CharDisplay类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class CharDisplay extends AbstractDisplay &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private char ch;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public CharDisplay(char ch, int times) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(times);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.ch &#x3D; ch;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void open() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(&quot;&lt;&lt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void print() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(this.ch);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void close() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&gt;&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>StringDisplay类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class StringDisplay extends AbstractDisplay &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String str;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public StringDisplay(String str, int times) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(times);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.str &#x3D; str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void open() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.printLine();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void print() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;|&quot; + this.str + &quot;|&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void close() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.printLine();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void printLine() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(&quot;+&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; this.str.length(); i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;+&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main.java</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int times &#x3D; 5;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AbstractDisplay adChar &#x3D; new CharDisplay(&#39;蓬&#39;, times);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        adChar.display();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AbstractDisplay adStr &#x3D; new StringDisplay(&quot;I am the bone of my sword&quot;, times);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        adStr.display();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在使用中，AbstractDisplay类型的引用分别指向了其子类CharDisplay及StringDisplay的实例，这里是<a href="">里氏替换原则</a>的应用。</p>
<p>执行后输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;&lt;蓬蓬蓬蓬蓬&gt;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-------------------------+</span></pre></td></tr><tr><td class="code"><pre><span class="line">|I am the bone of my sword|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|I am the bone of my sword|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|I am the bone of my sword|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|I am the bone of my sword|</span></pre></td></tr><tr><td class="code"><pre><span class="line">|I am the bone of my sword|</span></pre></td></tr><tr><td class="code"><pre><span class="line">+-------------------------+</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Template Method模式的Java实现，下面咱们试着跳出语言层面，抽象出Template Method模式中登场的角色。</p>
<p><strong>AbstractClass(抽象类)</strong></p>
<p>AbstractClass会定义非抽象的模版方法及需由子类角色ConcreteClass具体去实现的抽象方法。在示例程序中，由AbstractDisplay类负责扮演这个角色。</p>
<p><strong>ConcreteClass(具体类)</strong></p>
<p>该角色负责实现AbstractClass角色中定义的抽象方法，这些方法将由AbstractClass角色的模版方法调用。在示例程序中，由CharDisplay类及StringDisplay类联袂扮演这个角色。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3TemplateMethod%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="InputStream对Template-Method模式的应用"><a href="#InputStream对Template-Method模式的应用" class="headerlink" title="InputStream对Template Method模式的应用"></a>InputStream对Template Method模式的应用</h1><p>Java API中的抽象类java.io.InputStream应用了Template Method模式。</p>
<p>InputStream的核心的读取流的方法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int read(byte b[], int off, int len) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (b &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else if (off &lt; 0 || len &lt; 0 || len &gt; b.length - off) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new IndexOutOfBoundsException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else if (len &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int c &#x3D; read();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (c &#x3D;&#x3D; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    b[off] &#x3D; (byte)c;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int i &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (; i &lt; len ; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            c &#x3D; read();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (c &#x3D;&#x3D; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            b[off + i] &#x3D; (byte)c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; catch (IOException ee) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>对于输入流的读取而言，无论是什么流，其实质都是由二进制的字节组成的有序集合：二进制字节仿佛水流一样流过。在上面的方法中我们也能看到，其最核心的读取字节的方法是read()，它每次会从特定位置向后再读一个字节。它在InputStream类中的源码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract int read() throws IOException;</span></pre></td></tr></table></figure>

<p>至此事情就很清晰了：首先介绍的那个非抽象read()方法是模版方法，其中规定了流程：一个一个取字节，直到取够数为止。而后面介绍的那个抽象的read()方法就是具体的”一个一个取字节”的方法，将由具体的子类实现。</p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">4.Factory Method模式</a></strong><br><strong><a href="">7.Builder模式</a></strong><br><strong><a href="">8.Abstract Factory模式</a></strong></p>
<p>关于这4个设计模式间的联系与区别，详见<a href="">8.Abstract Factory模式</a>。</p>
<p><strong><a href="">10.Strategy模式</a></strong></p>
<p>Strategy模式与Template Method模式均与Java中多态的思想一脉相承。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-2.Adapter模式</title>
    <url>/2018/06/08/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2Adapter%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Adapter模式被归入了第1部分<a href="">适应设计模式</a>。在GoF原书中，Adapter模式则被归入了<a href="">结构型设计模式</a>。简单来说，Adapter模式可以被描述为：连接具有不同接口(API)的类。也就是所谓的加个”适配器”以便于复用。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Adapter这个单词的释义为”使…相互适应的东西”。在计算机领域，它被翻译为”适配器”。</p>
<p>其实不仅仅是计算机领域，适配器在我们的生活中是很常见的东西。例如老式的电脑只能以VGA接口连接显示器，而时下的显示器很有可能已经取消VGA这个过时的接口了，而只有HDMI和DI接口。这种情况下电脑与显示器是无法连接的，换掉其中一方以适配又很浪费(毕竟它们都还是挺贵的)。这个时候相对来说便宜很多的”转接头”(这是通俗的叫法，其实就是适配器)就派上用场了：例如VGA-HDMI转接口，顾名思义，它的一端连接VAG接口，另一端连接HDMI接口。这样不同接口的电脑与显示器就可以相互连接了。</p>
<p>在程序世界中，适配器的作用大抵也是如此。例如我们经常会遇到现有的程序无法直接使用，需要做适当的变换之后才能使用的情况。这种用于填补”现有的程序”与”所需的程序”之间差异的设计模式就是Adapter模式。</p>
<p>Adapter模式也被称作Wrapper模式。Wrapper的含义是”包装器”。就像用精美的包装纸将普通商品包装成礼物那样，Wrapper会替我们把某样东西包起来，使其能够用于其他用途。</p>
<p>Adapter模式有以下两种具体的实现：</p>
<p>模式一：类适配器模式(使用继承的适配器)。</p>
<p>模式二：对象适配器模式(使用委托的适配器)。</p>
<p>本文将依次介绍这两种模式。</p>
<h1 id="模式一：类适配器模式-使用继承的适配器-示例程序"><a href="#模式一：类适配器模式-使用继承的适配器-示例程序" class="headerlink" title="模式一：类适配器模式(使用继承的适配器)示例程序"></a>模式一：类适配器模式(使用继承的适配器)示例程序</h1><p>首先，给出给出本程序的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>在介绍程序之前，我们不妨再更详细的分析一下本文开篇时提到的”显示器连接电脑”的问题。在这个问题中，一共出现了4个角色：</p>
<ol>
<li>电脑：待显示内容的提供者。负责提供数据。</li>
<li>显示器：与人类交互的接口。也就是说，显示器显示了一个画面，这个画面在电脑内部肯定是以某种形式存储的，然后显示器解析这个数据并将之转换为了易于人类理解的画面。显示器不实际生产数据，它只是向人类展现数据。对于人类而言，在显示画面这个需求上，他是不需要知道电脑的存在的，他只需要看显示器提供的画面即可。</li>
<li>适配器：如果电脑与显示器不是适配的，即电脑传输的数据显示器无法解析，那么就需要适配器将该数据转换为显示器能理解的格式。</li>
<li>人类：观看显示器展现的画面。</li>
</ol>
<p>类似的，本程序也有4个一一对应的角色：</p>
<ol>
<li>Banner类：对应于电脑。负责实际的功能。它内部包含两个方法。其中showWithParen()方法会为字符串加上()。showWithAster()方法会为字符串加上**。</li>
<li>Print接口：对应于显示器。不实际生产数据。但却是本程序中负责与观察者(即人类，或main函数)交互的组件。它内部包含两个方法。其中printWeak()方法会弱化字符串。printStrong()方法会强调字符串。</li>
<li>PrintBanner类：对应于适配器。</li>
<li>Main类：对应于观看屏幕的人。其中包含main方法，是程序的入口。会对本程序的功能进行调用。</li>
</ol>
<p>总结来说，就是Main类使用PrintBanner类以期实现Print接口所约束的功能。而该功能在PrintBanner类内部实际是通过Banner类实现的。</p>
<p>本程序中的所有代码将被统一置于design2包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>下面就来逐一看下具体的代码吧。</p>
<p><strong>Banner类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Banner &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String str;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Banner(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.str &#x3D; str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void showWithParen() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;(&quot; + this.str + &quot;)&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void showWithAster() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;*&quot; + this.str + &quot;*&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Print接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Print &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void printWeak();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void printStrong();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>PrintBanner类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class PrintBanner extends Banner implements Print &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public PrintBanner(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void printWeak() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.showWithParen();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void printStrong() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.showWithAster();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这里适配器直接调用了Banner类的方法。实际上，两个待适配的组件是不会匹配得这么好的(否则也不用适配了)，内容还是那些内容，不过适配器通常都要做一些组合和转换。</p>
<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Print print &#x3D; new PrintBanner(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print.printStrong();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print.printWeak();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行Main.java后输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*ReimuWang*</span></pre></td></tr><tr><td class="code"><pre><span class="line">(ReimuWang)</span></pre></td></tr></table></figure>

<p>本例中，为了简单起见，我们将PrintBanner类的声明放到了main函数中。但事实上，调用者是完全不需要知道PrintBanner的。对于使用者而言，它只管拿到一个实例，这个实例实现了Print接口，多数情况下，这个实例都是外部传递给调用者的，它根本不用操心这个实例是怎么来的，内部实现是什么样子的，它就只需要利用这个实例来调用Print接口约束的功能就可以了。</p>
<h1 id="模式二：对象适配器模式-使用委托的适配器-示例程序"><a href="#模式二：对象适配器模式-使用委托的适配器-示例程序" class="headerlink" title="模式二：对象适配器模式(使用委托的适配器)示例程序"></a>模式二：对象适配器模式(使用委托的适配器)示例程序</h1><p>在介绍对象适配器模式之前，有必要先简要介绍一下委托。</p>
<p>简单来说，委托就是”交给其他人”。比如我们需要去领取一份材料，但恰好没有时间。此时我们就可以委托他人代为领取。当然，如果这份材料足够重要的话(例如新办理好的身份证)，还需要我们出具一份委托书，大意就是”本人委托xx代我领取xx材料”。在编程语言中，委托的含义也是大抵如此，就是指将某个方法中的实际业务处理交付给另一个方法。</p>
<p>所谓适配器，最重要的一个特征就是要能同时兼容待适配的所有组件，如果无法做到这一点，那么后续一切的适配都将无从谈起。在电脑连接显示器的小例子中，转接头一端可以连接电脑，另一端可以连接显示器。而在上文介绍的类适配器模式的示例程序中，PrintBanner继承了Banner类，同时实现了Print接口。不过细心的朋友们想必已经注意到了，这种模式的局限性是比较大的，如果Print不是一个接口，而是一个类的话，该怎么办呢？Java是单继承的语言，我们是无法同时继承Banner类与Print类的。</p>
<p>这就可以使用本小节欲介绍的对象适配器模式了。照例先给出示例程序的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<p>较之前例，Banner类没有发生任何变化。不同的是，Print由接口变成了一个类。当然，它是一个抽象类，里面的方法printWeak()与printStrong()也均为抽象方法，没有具体的实现。</p>
<p>PrintBanner自然也要做出相应的更改。因为Java是单继承的，PrintBanner无法同时继承Print与Banner。权衡之下，PrintBanner最终还是选择继承了Print，因为从业务层面来说，PrintBanner还是与Print更为接近。对于使用者而言，虽然他实际用的是PrintBanner，但他一直都是当做Print在用的。而Banner更像是为PrintBanner实现功能提供技术支持，因此PrintBanner与Banner之间的关系变为了聚合：Banner成为了PrintBanner的一个成员变量。这样PrintBanner就能使用Banner提供的功能了。</p>
<p>说得简单些，就是Print要求Banner提供功能。Banner一看，发现虽然要的东西自己都有，但是格式却无法完全对上，而它又不想为了这一个单独的功能修改自身。因此它就委托了第三方PrintBanner，并把自己能提供的东西都交给它。PrintBanner并不会添加新的业务逻辑，它只会对Banner提供的东西做出组合和格式上的修改，然后把符合Print要求的内容交给Print。</p>
<p>当然这个委托关系也可以反着理解。Print要求PrintBanner提供功能。PrintBanner本身并没有实现功能，本质上它就相当于一个中间商。它会把需求委托给第三方Banner。当然，Banner并不是专为Print存在的，虽然Print要的东西Banner都有，基本需求也能满足，但是格式并不能完全对上。而PrintBanner则负责这个转换对接的工作。</p>
<p>两种对委托的理解方式本质上是一样的，只是视角不同而已。</p>
<p>本程序中的所有代码将被统一置于design2_2包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<p>下面来看具体的代码。</p>
<p><strong>Banner类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Banner &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String str;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Banner(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.str &#x3D; str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void showWithParen() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;(&quot; + this.str + &quot;)&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void showWithAster() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;*&quot; + this.str + &quot;*&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Banner类较之前例没有变化，在此再次贴出。</p>
<p><strong>Print类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class Print &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void printWeak();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void printStrong();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>PrintBanner类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class PrintBanner extends Print &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Banner banner;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public PrintBanner(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.banner &#x3D; new Banner(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void printWeak() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.banner.showWithParen();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void printStrong() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.banner.showWithAster();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Print print &#x3D; new PrintBanner(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print.printStrong();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print.printWeak();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Main类较之前例没有变化，依然原样贴出。</p>
<p>运行Main.java后输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*ReimuWang*</span></pre></td></tr><tr><td class="code"><pre><span class="line">(ReimuWang)</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>Adapter模式中有以下角色登场：</p>
<p><strong>Target(对象)</strong></p>
<p>对请求者可见的供请求的对象。在”电脑连接显示器”这个例子中，显示器扮演了这个角色。在上文的两段示例程序中，Print 接口/类 扮演了这个角色。</p>
<p><strong>Client(请求者)</strong></p>
<p>向Target提出功能申请的请求者。在”电脑连接显示器”这个例子中，观看显示器的人扮演了这个角色。在上文的两段示例程序中，Main类扮演了这个角色。</p>
<p><strong>Adaptee(被适配)</strong></p>
<p>提供实际功能的对象。在”电脑连接显示器”这个例子中，电脑扮演了这个角色。在上文的两段示例程序中，Banner类扮演了这个角色。</p>
<p><strong>Adapter(适配)</strong></p>
<p>提供Target-Adaptee之间内容格式的转换。在”电脑连接显示器”这个例子中，转接头扮演了这个角色。在上文的两段示例程序中，PrintBanner类扮演了这个角色。</p>
<p>下面给出抽象后，无关语言的类图。</p>
<p>首先是模式一：类适配器模式(使用继承的适配器)：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/4.jpg" alt="4.jpg"></p>
<p>然后是模式二：对象适配器模式(使用委托的适配器)：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/5.jpg" alt="5.jpg"></p>
<h1 id="Adapter模式的应用场景"><a href="#Adapter模式的应用场景" class="headerlink" title="Adapter模式的应用场景"></a>Adapter模式的应用场景</h1><p><strong>针对欲实现的新功能，当前程序已有部分的代码积累</strong></p>
<p>针对这种情况，除了使用本文介绍的Adapter模式之外，还可以有如下两种做法：</p>
<ol>
<li>完全无视已有的，类似功能的代码，重新写一套新的。尤其是当已有代码不是自己写的的时候，做出这种选择的程序员的比例会特别的高。因为没人愿意读其他人的代码，绝大多数时候，读他人的代码，进而理解他人的代码，其成本是远高于自己重新写一份的。不过这并不是一种负责的做法，从短期的角度来看，功能的实现是没问题的，开发工作量的减少导致工期得到缩短，上线后出bug的概率也会降低。不过从长远的角度来看，这显然不利于程序的维护。如果负责某个项目的程序员们更倾向于以这种方式管理代码，那么程序中冗余的东西将会越来越多，程序也将越来越难于理解，修改，或增加新功能。直到某一天，程序达到了临界点，不得不进行重构。这仿佛是在击鼓传炸弹，大家都只考虑眼前凑合写着，在谁手上炸算谁倒霉。而且这不仅仅是某几个程序员倒霉的问题，因为这种情况导致的强制重构会耗费大量的人力物力，严重提高程序的维护成本。</li>
<li>修改现有的代码，让它既能满足现在已有的需求，又能满足新的需求。这是我最不推荐的一种方式。因为这意味着这次需求所影响的将不再是它本身了，现在在线上正常运行的功能也会受到影响。那么本次上线需要测试的范围将大幅增加。更糟的是，很多时候，这种影响是无法评估的。很有可能，新功能上线后，一个完全意想不到的地方会报错，好不容易查出来，改好了，另一个地方又错了，进而陷入无休止的解线上bug的噩梦中。</li>
</ol>
<p>综上，在当前程序已有部分代码积累的情况下，推荐优先使用Adapter模式。</p>
<p><strong>当前程序并没有新功能相关的代码积累</strong></p>
<p>针对这种情况，首先我们需要对这次的新功能做出评估，分解抽象出它所需用到的功能点。如果这些功能点很特殊，换句话说，在我们可以预期的未来里，不会再有别的需求可能会复用到这些功能点了，那么就没必要使用Adapter模式，直接写就好了。</p>
<p>反之，如果这些功能点还挺常用的，以后很有可能会有类似的需要这些功能点的需求，那么这些功能点就不要写得太特殊，即不要与本次需求耦合得太紧。我们可以写出一个相对通用的功能点后再使用一个适配器将其特殊化，以完美匹配本次需求。这样，当再有类似需要来了，需要用到这个功能点时，我们就可以再写一个新的适配器，实现代码的复用。</p>
<p><strong>典型场景：历史版本兼容</strong></p>
<p>对于各种软件，尤其是客户端软件而言，历史版本的兼容是最基本的需求之一。例如某手机软件，最初客户端的版本是1.0，对应的服务端的版本同样也是1.0。过了一段时间，客户端与服务端的版本均升级为了2.0。服务端是唯一的，握在软件公司手里，因此服务端的升级可以由软件公司自由控制。然而，客户端却是复数个装在用户手机上的，其升级时机完全由用户自身控制。当然，软件公司可以要求用户强制升级：即如果还想用我们的软件，那么必须升级到最新版本才行。不过这有些过于粗暴了，通常只会在跨度特别大的版本更新时才会偶尔使用。如果总是这样做的话，会让用户觉得非常不方便，降低用户对软件的评价。</p>
<p>因此，绝大多数时候，都需要同时向前兼容很多个客户端软件的版本。以上文中版本1.0 –&gt; 版本2.0为例，我们给出示例图。</p>
<p>为了让模型尽可能的简单，我们不妨假设只有1个服务端及两个客户端。最开始大家都是1.0版本时的情况如下图所示：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/6.jpg" alt="6.jpg"></p>
<p>随后服务端及客户端1都升级为2.0版本，但客户端2并未升级，仍是1.0版本：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/7.jpg" alt="7.jpg"></p>
<p>这样便起到了兼容历史版本的效果。</p>
<h1 id="应用Adapter模式以调用Properties"><a href="#应用Adapter模式以调用Properties" class="headerlink" title="应用Adapter模式以调用Properties"></a>应用Adapter模式以调用Properties</h1><p>本程序将统一置于design2_test2包中，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/2Adapter%E6%A8%A1%E5%BC%8F/8.jpg" alt="8.jpg"></p>
<p>Java API中的java.util.Properties类为我们提供了管理键值对的方法。作为一个供所有Java程序员使用的基础组件，它自然不可能照顾到程序员所有的需求。因此我们可以让它扮演Adapter模式中的Adaptee角色。</p>
<p>然后我们可以设计一个FileIO接口以扮演Target的角色：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_test2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface FileIO &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void readFromFile(String filename) throws IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void writeToFile(String filename) throws IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void setTime();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Date getTime();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>每一个FileIO接口的实现的实例都负责管理一个Properties类的实例。Properties类中提供了大量的用于管理键值对的方法。不过本次需求中只会用到最基础的那一部分，同时由于需求的特殊性，还需要写一些特殊化的方法。</p>
<p>首先介绍一下该程序正常的使用流程：</p>
<ol>
<li><p>setTime()方法会向Properties实例中以键值对的方式写入当前时间。Key包括year,month,day,hour,minute,second。</p>
</li>
<li><p>writeToFile()方法会将设置好的Properties实例写入文件中。</p>
</li>
<li><p>readFromFile()方法会读取文件并将其中的内容写入Properties实例。</p>
</li>
<li><p>getTime()方法会得到当前Properties实例中存储的时间。</p>
</li>
</ol>
<p>因为只是一个简单的示例程序，因此就不写非正常流程下的容错机制啦。</p>
<p>既然我们将Target角色设计为了一个接口，那么显然，我们是要使用类适配器模式了(当然啦，这也得要Adaptee角色，也就是Properties类允许继承才行)。</p>
<p>然后就是Adapter模式的重点，也就是Adapter角色的扮演者啦：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_test2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Calendar;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Properties;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class FileProperties extends Properties implements FileIO &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; -2256749719985770822L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void readFromFile(String filename) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.load(new FileInputStream(filename));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void writeToFile(String filename) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.store(new FileOutputStream(filename), &quot;write by FileProperties&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setTime() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Calendar calendar &#x3D; Calendar.getInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setProperty(&quot;year&quot;, calendar.get(Calendar.YEAR) + &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setProperty(&quot;month&quot;, calendar.get(Calendar.MONTH) + &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setProperty(&quot;week&quot;, calendar.get(Calendar.WEEK_OF_MONTH) + &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setProperty(&quot;day&quot;, calendar.get(Calendar.DAY_OF_MONTH) + &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setProperty(&quot;hour&quot;, calendar.get(Calendar.HOUR_OF_DAY) + &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setProperty(&quot;minute&quot;, calendar.get(Calendar.MINUTE) + &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setProperty(&quot;second&quot;, calendar.get(Calendar.SECOND) + &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Date getTime() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Calendar calendar &#x3D; Calendar.getInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.YEAR, Integer.parseInt(super.getProperty(&quot;year&quot;)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.MONTH, Integer.parseInt(super.getProperty(&quot;month&quot;)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.WEEK_OF_MONTH, Integer.parseInt(super.getProperty(&quot;week&quot;)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(super.getProperty(&quot;day&quot;)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(super.getProperty(&quot;hour&quot;)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.MINUTE, Integer.parseInt(super.getProperty(&quot;minute&quot;)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.SECOND, Integer.parseInt(super.getProperty(&quot;second&quot;)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return calendar.getTime();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>最后是扮演Client角色的Main.java。首先我们先来写一个写入文件的需求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_test2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileIO fileIO &#x3D; new FileProperties();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fileIO.setTime();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fileIO.writeToFile(&quot;D:&quot; + File.separator + &quot;test.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行该代码，会在D盘下生成新文件test.txt：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#write by FileProperties</span></pre></td></tr><tr><td class="code"><pre><span class="line">#Tue Jun 12 16:32:28 CST 2018</span></pre></td></tr><tr><td class="code"><pre><span class="line">hour&#x3D;16</span></pre></td></tr><tr><td class="code"><pre><span class="line">day&#x3D;12</span></pre></td></tr><tr><td class="code"><pre><span class="line">second&#x3D;28</span></pre></td></tr><tr><td class="code"><pre><span class="line">week&#x3D;3</span></pre></td></tr><tr><td class="code"><pre><span class="line">year&#x3D;2018</span></pre></td></tr><tr><td class="code"><pre><span class="line">month&#x3D;5</span></pre></td></tr><tr><td class="code"><pre><span class="line">minute&#x3D;32</span></pre></td></tr></table></figure>

<p>注释方面，除了咱们自己指定的字符串”write by FileProperties”之外，Java API还默认的为我们添加了写入文件时的系统时间。</p>
<p>随后我们再来写一个读取文件的需求，待读取的文件自然就是刚刚生成的那个啦：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design2_test2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileIO fileIO &#x3D; new FileProperties();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fileIO.readFromFile(&quot;D:&quot; + File.separator + &quot;test.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(fileIO.getTime());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行该代码后输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tue Jun 12 16:32:28 CST 2018</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-1.Iterator模式</title>
    <url>/2018/06/05/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1Iterator%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>在《图解设计模式》一书中，Iterator模式被归入了第1部分<a href="">适应设计模式</a>。在GoF原书中，Iterator模式则被归入了<a href="">行为型设计模式</a>。简单来说，Iterator模式可以被描述为：从含有多个元素的集合中将各个元素逐一取出来。也就是所谓的”一个一个遍历”。</p>
<a id="more"></a>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>迭代输出数组中的元素是很常见的需求，在Java中，我们通常会这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; arr.length; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(arr[i]);</span></pre></td></tr></table></figure>

<p>如果我们将循环变量i的作用抽象化通用化，再将数组扩展为任意其他的集合性质的容器，就可以形成一种模式，GoF书将其称为Iterator模式。该模式的目的就是按照要求的顺序在集合中遍历元素。</p>
<p>iterate这个单词的含义是”反复做某件事”。在计算机领域，它的含义是”迭代”。自然而言的，iterator被称作”迭代器”。</p>
<h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>本示例程序会模拟一个书架(BookShelf)，书本(Book)会被放置到书架上。</p>
<p>首先，我们来总览一下本程序的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1Iterator%E6%A8%A1%E5%BC%8F/0.jpg" alt="0.jpg"></p>
<p>本程序中的所有代码将被统一置于design1包下，结构如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1Iterator%E6%A8%A1%E5%BC%8F/1.jpg" alt="1.jpg"></p>
<p>其中，Main.java是用来测试的类，并未出现在类图中。</p>
<p>BookShelfIterator作为非public类存在于BookShelf.java文件中。</p>
<p>下面将逐个贴出每个类的源码。</p>
<p><strong>Aggregate接口</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * Aggregate有&quot;使聚合，集合&quot;的意思</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 顾名思义，实现了该接口的类将成为一个可以保存多个元素的集合</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Aggregate&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 生成并返回一个用于遍历集合的迭代器</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;E&gt; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Iterator接口</strong></p>
<p>Iterator接口用于遍历集合中的元素，其作用相当于本文开篇中介绍的for循环中的那个i：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Iterator&lt;T&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若iterator游标当前所指向的位置还有元素则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若在本方法返回false时继续调用next()方法，则next()方法会抛出异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return boolean, true - 存在下一个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                  false - 不存在下一个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean hasNext();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回iterator游标当前所指向的元素，随后游标后移一位</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException iterator游标当前所指向的位置已无元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    T next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Book类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Book &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Book(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getName() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>BookShelf类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.NoSuchElementException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class BookShelf&lt;E&gt; implements Aggregate&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Book[] books;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * int, 书架上已有书数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int last;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public BookShelf(int maxsize) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (maxsize &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;bookShelf &#39;s maxsize &lt; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.books &#x3D; new Book[maxsize];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void appendBook(Book book) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; book)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;book is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.last &#x3D;&#x3D; this.books.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalStateException(&quot;bookShelf is full&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.books[last++] &#x3D; book;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new BookShelfIterator&lt;E&gt;(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int getLength() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.last;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book getBookAt(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt;&#x3D; books.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;index &lt; 0 || index &gt;&#x3D; bookShelf &#39;s length&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.books[index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>BookShelfIterator类</strong></p>
<p>BookShelfIterator作为非public类存在于BookShelf.java文件中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class BookShelfIterator&lt;E&gt; implements Iterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private BookShelf&lt;E&gt; bookShelf;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * int, 迭代器当前游标指向的位置，即下一次调用next()方法时返回的元素的索引</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int index;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BookShelfIterator(BookShelf&lt;E&gt; bookShelf) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.bookShelf &#x3D; bookShelf;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.bookShelf.getLength() &gt; this.index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!this.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NoSuchElementException(&quot;no more element for bookShelf&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (E)this.bookShelf.getBookAt(index++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>Main类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BookShelf&lt;Book&gt; bookShelf &#x3D; new BookShelf&lt;Book&gt;(5);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bookShelf.appendBook(new Book(&quot;秀逗魔导士&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bookShelf.appendBook(new Book(&quot;9S&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bookShelf.appendBook(new Book(&quot;为美好的世界献上祝福&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bookShelf.appendBook(new Book(&quot;犬神&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bookShelf.appendBook(new Book(&quot;钢铁白兔骑士团&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;Book&gt; iterator &#x3D; bookShelf.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (iterator.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(iterator.next().getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行Main.java，输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">秀逗魔导士</span></pre></td></tr><tr><td class="code"><pre><span class="line">9S</span></pre></td></tr><tr><td class="code"><pre><span class="line">为美好的世界献上祝福</span></pre></td></tr><tr><td class="code"><pre><span class="line">犬神</span></pre></td></tr><tr><td class="code"><pre><span class="line">钢铁白兔骑士团</span></pre></td></tr></table></figure>

<h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Iterator模式的Java实现，下面咱们试着跳出语言层面，抽象出Iterator模式中登场的角色。</p>
<p><strong>Iterator(迭代器)</strong></p>
<p>该角色负责制定按特定顺序逐个遍历集合中的元素的功能的约束，不针对特定的集合，也不提供具体的实现。在示例程序中，由Iterator接口扮演这个角色，并提供了出演这个角色须达到的最低标准：即对外提供hasNext()与next()这两个方法。其中hasNext()方法负责判断是否仍有下一个元素(即控制迭代何时结束)，next()负责切实的取到当前迭代出的元素。</p>
<p><strong>ConcreteIterator(具体的迭代器)</strong></p>
<p>该角色负责针对特定的集合，提供定制化的Iterator的实现。在示例程序中，由BookShelfIterator类扮演这个角色。它是专门为了迭代BookShelf这个集合而定制的Iterator，因为它只用于迭代BookShelf，因此也可被称为”BookShelf的专属迭代器”，可以被视为BookShelf的附属。因此在编写代码时，并没有为BookShelfIterator类专门创建一个文件，而是将其作为非public类放到了BookShelf.java中。</p>
<p>一个BookShelf实例可以创建多个BookShelfIterator实例，而对于每个BookShelfIterator实例而言，终其一生将只为一个BookShelf实例服务。因此在BookShelfIterator类的构造函数中，我们会传入BookShelf实例。并且当BookShelf类的代码发生变化时，BookShelfIterator也要做出相应的调整。</p>
<p>BookShelfIterator在实现了Iterator后，并未增加新的方法。也就是说只提供向后迭代(具体来说，是沿着数组索引增大的方向迭代)。事实上，对于特定的迭代器实现而言，可以根据具体的待迭代的集合的实现，设计不同的迭代方式。例如我们还可以提供向前迭代方法previous()，此时迭代将顺着索引减小的方式进行，相应的我们还要提供判断向前迭代结束条件的方法hasPrevious()。</p>
<p><strong>Aggregate(集合)</strong></p>
<p>该角色负责制定作为一个集合该有的基本约束，并不提供具体的实现。换句话说，某个具体的类只要实现了该角色，我们就可以将该类称为集合了。在示例程序中，由Aggregate接口扮演这个角色，并提供了出演这个角色须达到的最低标准：即提供iterator()方法。该方法返回一个从属于本集合的迭代器，我们可以通过它对集合完成迭代。</p>
<p><strong>ConcreteAggregate(具体的集合)</strong></p>
<p>该角色负责根据Aggregate这个角色的约束条件，结合具体的需求，生成一个特定的集合类。因为它满足了Aggregate这个角色的约束，因此它会实现iterator()方法，该方法返回的迭代器自然就是ConcreteIterator。在示例程序中，由BookShelf类负责扮演这个角色，它的iterator()方法返回的迭代器是BookShelfIterator。</p>
<p>下面是抽象后，无关语言的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1Iterator%E6%A8%A1%E5%BC%8F/2.jpg" alt="2.jpg"></p>
<h1 id="为什么要使用Iterator模式"><a href="#为什么要使用Iterator模式" class="headerlink" title="为什么要使用Iterator模式"></a>为什么要使用Iterator模式</h1><p>在示例程序中，具体的集合类BookShelf底层是以数组存储元素的，那么为何不像开篇介绍的那样，直接使用for循环遍历呢？</p>
<p>一个重要的原因就是，引入了Iterator模式后，我们便可以将遍历与实现分离开来。</p>
<p>举个例子，假如我们将BookShelf中的books字段的权限放开，那么此时可以这样遍历：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; books.length; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(books[i].getName());</span></pre></td></tr></table></figure>

<p>这样确实代码量更少，BookShelf也不用费心设计什么属于自己的迭代器了。但是这样做的问题在于，一旦我们改变了BookShelf底层的存储方式，比如我们改用链表作为数据的存储结构，那么调用者就必须要了解BookShelf内部的数据结构，然后做出相应的改动。</p>
<p>反观我们在示例程序中的迭代方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Book&gt; iterator &#x3D; bookShelf.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">while (iterator.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(iterator.next().getName());</span></pre></td></tr></table></figure>

<p>对于这种迭代方式而言，不论BookShelf底层的存储结构如何修改，只要它还实现Aggregate接口，即提供符合Iterator接口约束条件的迭代器，那么对于迭代操作而言，调用者的代码就无需做任何修改，也不需要关注BookShelf到底做了什么样的改动。</p>
<p>举一个实际的例子，books作为一个数组，一旦设定了maxsize就不可扩展了。假如我们现在需要书架是可扩展的了，那么我们就可以考虑使用ArrayList来作为底层存储结构。修改后的BookShelf类为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package design1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.NoSuchElementException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class BookShelf&lt;E&gt; implements Aggregate&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;Book&gt; books;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public BookShelf(int initsize) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (initsize &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;bookShelf &#39;s initsize &lt; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.books &#x3D; new ArrayList&lt;Book&gt;(initsize);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void appendBook(Book book) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; book)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;book is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.books.add(book);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new BookShelfIterator&lt;E&gt;(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int getLength() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.books.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Book getBookAt(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt;&#x3D; books.size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;index &lt; 0 || index &gt;&#x3D; bookShelf &#39;s size&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.books.get(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样书架就变成可扩展的了。Main.java的输出保持不变，此时即便添加了超出初始容量的书籍，代码也不会报错了。值得注意的是，因为此前books就没有暴露给BookShelfIterator，因此BookShelfIterator虽然是BookShelf的附属迭代器，但是我们同样无需修改它，只需要修改BookShelf就可以啦。</p>
<p>更进一步的来讲，即便我们将BookShelf整体的换掉，例如，我们不使用书架来存放书了，而改用书包，即Schoolbag类来存放书本，那么对于这段迭代调用的代码而言，依然无需做任何改动，调用者也无需了解Schoolbag到底是个什么东西，只要Schoolbag依然还实现着Aggregate接口，即还是一个符合约束的集合就行。这也是为什么我们在迭代时使用Iterator作为引用，而非BookShelfIterator的原因。其实，并不仅仅是Iterator模式，对于所有设计模式而言，使用抽象的抽象类和接口，而不是具体的实现类作为组件间沟通的桥梁是至关重要的(六原则中的<a href="">依赖倒转原则</a>)。</p>
<p>这在设计模式领域有着非凡的意义。因为设计模式的一个非常重要的目标就是编写”可复用”的”高内聚低耦合”的组件。这样一旦某一个组件发生变化，那么被它影响的组件将尽可能少，且即便是被它影响的组件，需要改动的地方也会尽可能的少(六原则中的<a href="">单一职责原则</a>)。</p>
<h1 id="Java集合框架对Iterator模式的应用"><a href="#Java集合框架对Iterator模式的应用" class="headerlink" title="Java集合框架对Iterator模式的应用"></a>Java集合框架对Iterator模式的应用</h1><p>Java的集合框架使用Iterator模式完成对集合中的元素的迭代。下面我们以具体的实现类ArrayList为例，来看看它到底是怎么做的。</p>
<p>下面给出类图。类图中只记述与迭代操作相关的字段及方法：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/1Iterator%E6%A8%A1%E5%BC%8F/3.jpg" alt="3.jpg"></p>
<h1 id="相关设计模式"><a href="#相关设计模式" class="headerlink" title="相关设计模式"></a>相关设计模式</h1><p><strong><a href="">13.Visitor模式</a></strong></p>
<p>从广义的角度来讲，Iterator模式是Visitor模式的特例。</p>
<p>Visitor模式的目的是将处理自数据结构中分离出来，而Iterator模式的目的则是将迭代操作自容器结构中分离出来。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-UML</title>
    <url>/2018/06/04/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-UML/</url>
    <content><![CDATA[<h1 id="什么是UML"><a href="#什么是UML" class="headerlink" title="什么是UML"></a>什么是UML</h1><p>UML(Unified Modeling Language，即统一建模语言)是让系统可视化，让规格和设计文档化的表现方法。</p>
<p>通常我们会用UML来描述设计模式中类和接口的关系。本文将使用Java语言为例来介绍UML，因此本文出现的术语其实都是Java中的术语，而非原生的，无关语言特性的标准UML术语。例如我们会用Java中的字段(field)取代UML中的属性(attribute)，用Java中的方法(method)取代UML中的操作(operation)。</p>
<a id="more"></a>

<h1 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h1><p>UML中的类图(Class Diagram)用于表示类与接口之间的静态关系。虽然名字叫作类图，但是类图中并不只有类。</p>
<p><strong>类与层次结构</strong></p>
<p>首先，我们来看一段示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abstract class ParentClass &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int field1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static char field2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    abstract void methodA();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    double methodB() &#123;return 0.0;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ChildClass extends ParentClass &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void methodA() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static void methodC() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后，我们给出它所对应的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/0.jpg" alt="0.jpg"></p>
<p>该图展示了ParentClass与ChildClass两个类之间的关系，其中的空心箭头表明了两者之间的层次关系：箭头由子类指向父类。换言之，这是表示继承(extends)的箭头，即表示ParentClass是ChildClass的父类。之所以箭头方向是从子类指向父类，实际上表示的是一种继承的感知：子类继承父类，说明子类在父类的下层，那么子类一定要能感知到父类才行，反映到图上就是子类能通过箭头的指引找到父类。相反，父类作为上层类并不需要感知到子类的存在。</p>
<p>图中的长方形表示类。长方形内部被两条线段自上至下分为了3部分：</p>
<ol>
<li>类名</li>
<li>字段名</li>
<li>方法名</li>
</ol>
<p>因为ChildClass中没有定义新的字段，因此它的第二部分是空的。</p>
<p>有时，表示类的长方形中还会写出其他信息(可见性，方法的参数个数参数顺序参数类型等)。在最为严谨的场合下，类图与代码是一一对应的：即我们可以通过类图无歧义的生成唯一的一份代码。不过通常，我们绘制UML只是为了说明代码的结构关系，并不需要表示的那么详细，因此都会做出一些删减。我们给出的实例采用的是最为精简的模式，即只提供了必需要有的那3个基本信息(类名，字段名，方法名)，没有附加任何其他信息。当然，这个时候我们就无法基于这张类图还原出源代码了。</p>
<p>关于这3个基本信息，我们还有一些更为详细的设定：</p>
<ul>
<li>虽然官方并没有明确设定，但是通常，我们都会将类名加粗表示，例如图中的ParentClass，ChildClass。</li>
<li>所有抽象的(即被abstract所修饰的)元素都以斜体表示。例如抽象类ParentClass，抽象方法methodA。</li>
<li>所有静态的(即被static所修饰的)元素都会加上下划线。例如静态字段field2，静态方法methodC。</li>
<li>父类的字段与方法，只要没在子类中被修改或重写，就无需在子类中再写一遍(对于字段而言，只要不是在字段声明时修改就不算修改)。</li>
</ul>
<p>前文已经提到了，本文在介绍UML时，使用的是Java的术语，而非UML规范中无关语言的通用的术语。事实上，每个语言都会有自身的术语，例如Java中的字段在C++中被称为成员变量(其实Java中也可以这样叫啦，毕竟Java算是脱胎自C++)，Java中的方法在C++中被称为成员函数。</p>
<p><strong>接口与实现</strong></p>
<p>下面我们继续来看下一段示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Printable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int FIELD1 &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void method1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class PrintClass implements Printable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void method1() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后给出它的类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/1.jpg" alt="1.jpg"></p>
<p>上例描述的是实现接口的类图。对于接口而言，它与前文介绍的类的类图有很多相似之处：</p>
<ul>
<li>以长方形表示接口，和类一样，内部也以两条横线分为3部分：接口名，字段名，方法名。</li>
<li>虽然官方并没有明确设定，但是通常，我们都会将接口名加粗表示。</li>
<li>接口名上方会默认添加&lt;&lt;interface&gt;&gt;以表示这是一个接口。</li>
<li>接口默认隐含了修饰符abstract。因此如果严格来说，接口名都应该是斜体的。不过由于这是所有接口都有的特性，所以有时候也会不使用斜体。通常我们会保留斜体。上例类图中我们就是这么做的。</li>
<li>虚线空心箭头表示PrintClass实现了接口Printable。箭头之所以是从实现类指向接口的原因与前文介绍的类在继承时箭头的方向的原因类似：实现类必须能感知到它所要实现的接口才行，反映到类图中就是实现类可以顺着箭头的方向找到它欲实现的接口。而接口则不需要知道哪些类实现了它。</li>
<li>接口中的字段默认隐含了修饰符public static final，而接口中的方法则默认隐含了public abstract。因此如果严格来说，字段都应被加上下划线，而方法都应是斜体的。不过依然因为这是所有接口都遵循的规则，因此有时也会不应用下划线或斜体。比如上例中我们保留了斜体，省略了下划线(因为下划线看着挺乱的。其实，在可以省略的情况下，我们一般都会保留斜体，而省略下划线)。</li>
<li>与继承的定义类似，接口中定义的方法需在实现类的长方形中再写一遍，因为实现类会重写接口中定义的方法(除非实现类是抽象类，方法是抽象方法，此时较之接口相当于依然没有发生变化，不用在实现类中重写)。而接口中的字段因为是final的，则无需在实现类中再次书写。</li>
</ul>
<p><strong>聚合</strong></p>
<p>看下一段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Color &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Fruit &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Color color;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Basket &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Fruit[] fruits;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>就算没有文档，这段代码所要表达的含义也是一目了然的：篮子里装了好多个水果，每个水果都有其自身的颜色。它可能的一种类图如下：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/2.jpg" alt="2.jpg"></p>
<p>首先借用本例补充一个小知识点：如果某类或接口中没有任何需要记录的字段或方法，那么就可以省略那两道横线，一如本例中的Color(事实上，Color作为Java API中的类，其中自然会有很多内容，但它们却不是本类图需要关注的，因此均被省略)。</p>
<p>前文介绍的类与接口之间的关系(继承，实现)是在系统中有强约束且唯一的。而本小节所介绍的聚合(aggregation)则更多表现的是一种逻辑与思路上的关系，它不再表示从属，其表示的是”持有”。同样一段代码，依想表述重点的不同，可以画出很多种表示不同聚合关系的类图。在上例中，聚合关系其实只有一种：篮子-水果-颜色。但实际上，篮子里可能不止有水果，Basket类中可能还有一个字段叫toys，顺着这条聚合的线，我们可以导出一条完全不同的聚合线路：篮子-玩具-材料。我们画类图是为了介绍代码，而每次介绍其实并不需要介绍全貌，而只是根据需求介绍听者感兴趣的部分，这意味着，也许我们只需要画其中一条聚合线的类图就足够了。这样就可以抛除掉本次叙述不关心的点，使得讲解更易于理解。</p>
<p>也就是说，聚合可供发挥的空间其实很大，我们可以根据需求自由的画出类图，从自己的角度去理解和分析代码，阐述自身的观点。</p>
<p>我们使用空心菱形为起点的箭头表示聚合，假如A持有B，那么箭头的方向就是自A指向B。其箭头方向的缘由与前文一脉相承：A持有B，那么A就要能够顺着箭头的方向找到B才行，反之，B作为被持有者，则无需知道A的存在。</p>
<p><strong>可见性(访问控制)</strong></p>
<p>看下一段代码吧DAZE~：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Something &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int privateField;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int packageField;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int protectedField;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int publicField;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void privateMethod() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void packageMethod() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void protectedMethod() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void publicMethod() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这段代码的类图为：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/3.jpg" alt="3.jpg"></p>
<p>该图主要展示了类图对于可见性的标记方式：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/4.jpg" alt="4.jpg"></p>
<p>接口中的字段与方法均隐含了(且只能是)默认的访问权限(public)，因此我们通常不会在类图中显式指定。</p>
<p><strong>内部类</strong></p>
<p>Java语法允许内部类的存在，此时基本的类图将再多出一格，最后一格描述内部类。先来看示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class In &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>它的类图为：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/5.jpg" alt="5.jpg"></p>
<p>如图所示，内部类的描述被置于外部类的第四部分。同时我们用一条起点为圆圈十字线的箭头由外部类指向内部类。</p>
<p>通常，为了使得内部类的所属能看得更清楚，我们在叙述内部类的类名时，会采用”外部类$内部类”的方式。形如本例中的”Out$In”。</p>
<p><strong>字段与方法的详细描述</strong></p>
<p>在前面的例子中，当我们记述字段与方法时，只描述了它们的名称。这往往是不够的(不过在画一些无关语言的伪代码性质的类图时够用了，而且那种情况下基本也画不出更具体的东西)，尤其对于方法而言，这样是无法分辨重载方法的。因此，在多数时候，我们都需要记述更详细的信息。</p>
<p>下面来看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Something &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int privateField;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Something(char ch) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    double packageMethod(int i, String s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 0.0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void privateMethod(String str) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>它的类图为：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/6.jpg" alt="6.jpg"></p>
<p>有如下几点说明：</p>
<ul>
<li>构造函数出现在方法的最前边，它们默认与类名相同，因此无需写方法名。且因其没有返回值，也不需要在最后补上冒号及返回值。</li>
<li>若方法的返回值为void，则只需在最后写上冒号即可。</li>
</ul>
<p><strong>包继承关系</strong></p>
<p>首先来看代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;&#125;</span></pre></td></tr></table></figure>

<p>如果想要表达Test.java在test包内，那么可以这样来画类图：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/7.jpg" alt="7.jpg"></p>
<p><strong>类的关联</strong></p>
<p>上文中我们介绍了聚合，这其实已经是一种很灵活的类图绘制方法了，不过此时我们依然还是基于代码的。其实UML还为我们提供了更为灵活的描述类之间关系的方式，例如：</p>
<hr>
<p>Client使用Target：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/8.jpg" alt="8.jpg"></p>
<hr>
<p>Factory生成Product：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/9.jpg" alt="9.jpg"></p>
<hr>
<p>Subject向Observer发送消息：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/10.jpg" alt="10.jpg"></p>
<hr>
<p>这种类图引入了更多的文字描述，可以表述的含义也更为丰富。其中黑色的实心三角代表了文字关系的传递方向。以”Client使用Target”为例，小三角与箭头均是自Client指向Target。</p>
<h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><p>UML的时序图(sequence diagram)用来表示程序在工作时其内部方法的调用顺序，以及事件的发生顺序。</p>
<p>类图描述的是”不因时间流逝而发生变化的关系”，也就是所谓的”静态关系”。而时序图则恰恰相反，它描述的是”随时间发生变化的东西”，也就是所谓的”动态行为”。</p>
<p>依然先来看代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Client &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Server server;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void work() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.server.open();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.server.print(&quot;ReimuWang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.server.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Device device;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void open() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void print(String s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.device.write(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void close() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Device &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void write(String s) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该代码模拟了一个非常简单的客户端请求服务端，服务端进而请求底层设备输出一句话的功能。它的时序图如下所示：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/11.jpg" alt="11.jpg"></p>
<p>最上方的3个长方形表示实例。从本质上来说，时序图描述的其实就是实例随着时间推进做出的行为。实例中的信息都会加上下划线。而通常来说，实例的描述格式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例名:类名</span></pre></td></tr></table></figure>

<p>上图采用的就是这种标准的格式。当然啦，实例名仅仅只是一个名字而已，其实并没有那么重要，因此很多时候我们也会不记录实例名，变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:类名</span></pre></td></tr></table></figure>

<p>如果用这种简化的规则的话，那么上图变为：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/UML/12.jpg" alt="12.jpg"></p>
<p>每个实例都会有一条自其下边起始，纵向垂直向下延伸的虚线段，在UML中，这条虚线被称为”生命线”。顾名思义，实例将随着虚线的出现而诞生，随着虚线的停止而死亡。</p>
<p>现在就颇有一些AOP的意味在其中了：很显然，由于生命线的这种设定规则，时间的流逝方向将是垂直向下的。水平线则表示某个时间点上发生的事件。</p>
<p>阅读时序图时，我们不妨将其想象为动态的，即将生命线想象为时间本身，随着它垂直自上而下流动来阅读时序图。在生命线流动过程中，可能会变为细长的矩形，实例处于细长矩形状态时表明实例正在进行某种活动，比如正在执行实例中的某个方法等。一旦活动结束，实例的生命线将脱离细长矩形的状态，恢复虚线状态。</p>
<p>了解了大致的规则后，我们不妨按照时间流逝的顺序读一下上例中的时序图。</p>
<p>首先，实例client因其方法work()被调用进入活跃状态，如图所示，方法的调用将采用水平的实线表示，箭头方向指向生命线，实线上仅写了方法名。方法调用后，实例client立刻进入细长矩形状态，直到图的最下端细长矩形结束，表示work()方法退出，实例client的生命线又恢复为虚线状态。在细长矩形结束时，会绘制一条水平虚线，表明方法的退出。虚线的箭头将从生命线向外指出。</p>
<p>在work()方法调用期间，具体又发生了以下事件：</p>
<ol>
<li><p>server实例的open()方法被调用，相应的，server实例的生命线马上转为细长矩形状态，open()方法执行完后又转回虚线状态。</p>
</li>
<li><p>server实例的print()方法被调用，而其内部又调用了device实例的write()方法。</p>
</li>
<li><p>server实例的close()方法被调用。</p>
</li>
</ol>
<p>最后需要说明的是，表示方法返回的水平虚线箭头其实是可以省略的，因为它和表示方法调用的水平实线箭头不同，水平实线箭头上是会写明方法名称的，而水平虚线箭头除了虚线本身之外不会附加任何信息，而纯粹从逻辑需求来讲，这条虚线其实是不用存在的：实例的生命线自细长矩形状态变回虚线状态自然就说明方法退出了，它仅会起到一个对齐的视觉效果。因此，在要求不严谨，或是图很复杂，不想那么多线看着心烦时，不画这条水平虚线也是很常见的。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 设计模式-综述</title>
    <url>/2018/06/01/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%BC%E8%BF%B0/</url>
    <content><![CDATA[<p>近年来，IT业界发生了翻天覆地的变化，各种开源框架层出不穷，机器学习大行其道。但是，在面向对象编程中，设计模式的重要性却不曾改变。在大规模的企业系统开发中，设计模式可以帮助我们实现系统结构化，很好的支撑起系统的稳定性和可扩展性。</p>
<a id="more"></a>

<h1 id="GoF"><a href="#GoF" class="headerlink" title="GoF"></a>GoF</h1><p>提起面向对象的设计模式，首先不得不说的就是由GoF联合编制的《Design Patterns: Elements of Reusable Object-Oriented Software》一书，中文译名为《设计模式：可复用面向对象软件的基础》(后文将简称为《设计模式》或GoF书)，它介绍了23种经典的设计模式，可谓是设计模式领域的”圣经”与基石(较真的说，该书介绍的仅仅只是面向对象编程的设计模式，面向过程的设计模式不在该书讨论的范畴之内。不过后文将不再纠结这个问题，除非特别声明，否则提到设计模式时默认均是指面向对象编程的设计模式)，有着极其重要的意义。</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%BC%E8%BF%B0/0.jpg" alt="0.jpg"></p>
<p>所谓GoF，实际是Gang of Four的缩写，也就是所谓的”四人组”(这命名颇有些F4，小虎队之类偶像团体的意思，不过这四个人确实也是计算机领域受万民敬仰的超级偶像了)，这四位大神分别是：</p>
<ul>
<li>Erich Gamma</li>
<li>Richard Helm</li>
<li>Ralph Johnson</li>
<li>John Vlissides</li>
</ul>
<p>GoF于1995年联合写成了《设计模式》一书，因此该书也被称作”GoF书”。</p>
<p>GoF书虽然有着重要的历史地位，但却存在两个阻碍初学者探究设计模式的小障碍：</p>
<ol>
<li><p>该书实际上是基于这4位大佬的博士论文整理而成的，因此学术性较强，初学者很难看懂书中想要表述的意思。</p>
</li>
<li><p>虽说设计模式是超脱于语言的存在，但是为了演示举例，终归还是需要一种实际的语言将其落到实处。GoF书采用的是C++与Smalltalk，这就使得对这两种语言不是很熟悉的程序员更加难以理解。</p>
</li>
</ol>
<p>因此，比起GoF书，对于设计模式的初学者而言，更为推荐的是对GoF书的二次解读。例如，对于Java程序员而言，我推荐结城浩编著的《图解设计模式》一书：</p>
<p><img src="/images/blog_pic/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%BC%E8%BF%B0/1.jpg" alt="1.jpg"></p>
<h1 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h1><p>想必大家在编写程序的时候，都曾遇到过这样的情况：接到了一个新的需求，虽然需求是新的，但对程序员而言，其实”并不是什么新东西”。此时，我们就可以将过往的经验应用到这个新的需求上，使得开发更为顺畅。随着工作经验的增长，尤其是当我们善于总结的时候，这种情况将出现得越来越频繁，新需求虽然千变万化，但是经过抽象建模与问题分解后，基本都能找到相对固定，经过时间检验的解决对策，也就是所谓的”套路”，或者我们可以换一个更严谨的名称：设计模式。所以通俗的说，设计模式就是指针对软件开发过程中重复发生的问题的解决办法。</p>
<p>GoF为常用的23种设计模式赋予了”名字”，并按类型对它们进行了整理，最终产出的就是那本大名鼎鼎的《设计模式》。这本书的意义是里程碑式的，之所以这么说，是因为它不仅仅是一本”武功秘籍”，可以快速的提高程序员的水平，更重要的是，它提供了一种标准。在GoF书诞生之前，设计模式其实是一直存在的：其实自打第一句Hello World被打印出来时设计模式就相应的存在了，每个程序员在编程中都会有意或无意的积累属于自己的”套路”，但是此时的设计模式仅仅只能是技术，它存在于每个程序员的心中，却无法成为科学：因为并没有一个统一的标准说这种”套路”就叫这种设计模式，虽然对于不同的程序员而言，随着编程能力的进步，在大的思路上，解决同一个问题的套路总是趋向于殊途同归，但是在细节上却终归是有着差距，这是无法避免的。</p>
<p>《设计模式》一书的诞生解决了这个问题，它所介绍的23种设计模式被所有主流程序员所学习与认同，这样，当两个程序员在讨论一个问题的解决策略时，如果一个程序员说出：我认为可以用GoF书中的<a href="">4.Factory Method模式</a>解决这个问题，那么另一个程序员马上就可以理解他想表达的是什么而不会产生歧义，这在需要多人参与开发的复杂项目中有着非凡的意义。不仅如此，GoF书通过介绍那23种设计模式还普及开了一套科学的描述设计模式的方法(主要是UML图)，因为实际需求总是有其特殊性的，我们不可能用这23种设计模式涵盖天下所有的需求，很多时候，我们需要使用某种设计模式的变种，或者组合某几种设计模式，甚至是创造出一种全新的设计模式，此时沟通的作用就更为重要了：如何从零让别人理解你的想法？如何从零理解别人的想法？在两人想法不同时，如何进行讨论？设计模式为开发人员提供了有益且丰富的词汇，让开发人员可以更容易的理解对方所要表达的意思。</p>
<p>GoF书中所介绍的23种设计模式并不是孤立的，而是互相关联的。设计模式不需要死记硬背，因为一个东西并不是成为了”套路”才是正确的，而是因为它是正确的，它是有用的，才能成为”套路”。因此学习设计模式，最重要的是多实践，多练习。在阅读代码时识别设计模式，在编写代码时运用设计模式。这一切都应是自然而然，水到渠成的。归根结底一句话：让GoF书中介绍的那23种设计模式成为属于自己的套路才是最重要的。</p>
<h1 id="设计模式与模式"><a href="#设计模式与模式" class="headerlink" title="设计模式与模式"></a>设计模式与模式</h1><p>严格地说，设计模式是模式的子概念。</p>
<p>不论是在什么领域，给”在某种场景下重复发生的问题的解决办法”赋予名字，并整理而成的东西一般都被称为”模式”。</p>
<p>设计模式是适用于软件设计和开发领域的模式，它是模式中的一种。</p>
<p>不过，有时候在软件领域也会将”设计模式”简称为”模式”(设计模式是模式的子概念，当然可以这样简称，是没有歧义的)。</p>
<p>例如，我们在介绍设计模式时，因为有一个很明确的范围，所以有时也会以”模式”来代指”设计模式”。比如，我们说”GoF书中介绍了23种模式”实际指得就是”GoF书中介绍了23种设计模式”。再比如，我们给这23种设计模式命名时，也会将其简称为xx模式。例如<a href="">1.Iterator模式</a>实际上指得就是”Iterator设计模式”。</p>
<h1 id="设计模式与算法"><a href="#设计模式与算法" class="headerlink" title="设计模式与算法"></a>设计模式与算法</h1><p>设计模式与算法是两个不同的概念，不过二者之间有着很深的联系。</p>
<p>算法(algorithm)是指根据输入数据获取输出数据的一系列机械的步骤。算法必须在有限的时间内结束。二分查找算法和快速排序算法等都是经典的算法。</p>
<p>我们也可以将算法看作是”解决问题的办法”，在不太严谨的场合，也可以将其视为设计模式，但是算法并不等同于设计模式。</p>
<p>设计模式不仅与算法有关，它还与习语(idiom)有关。习语是指编程时经常使用的固定语法(惯用语)。通常，习语具有”高度依赖于编程语言”的特征。与算法一样，习语也可以被看作是”解决问题的办法”，在不太严谨的场合，同样可以将其视为设计模式，但是习语依然并不等同于设计模式。</p>
<p>通常，我们在使用设计模式时，最终都会落实到具体的算法，进而落实到特定语言的实现(习语)。但是设计模式其实并非具体的实现，它是更抽象的东西：实现背后的思考方式和解决方法才是设计模式。</p>
<h1 id="接口和API"><a href="#接口和API" class="headerlink" title="接口和API"></a>接口和API</h1><p>在描述设计模式时，我们常会提起两个关键词：”接口”与”API”(Application Programming Interface，即应用程序编程接口)。</p>
<p>一般而言，在提到”某个类的接口”时，多是指该类所持有的方法的集合，在这种语境下，”接口”和”API”的含义基本是等同的，都是指类暴露给外部的功能。</p>
<p>不过对于Java程序员而言，”接口”指得就是”被interface关键字声明的代码”，而”API”则和通常的理解相同，指类暴露给外部的功能。</p>
<p>因为我将以Java来介绍设计模式，因此会以Java的规则严格区分”接口”与”API”。</p>
<h1 id="面向对象的”六原则一法则”"><a href="#面向对象的”六原则一法则”" class="headerlink" title="面向对象的”六原则一法则”"></a>面向对象的”六原则一法则”</h1><p>从具体的使用层面来讲，我们可以将设计模式分为多种(例如GoF就将设计模式分为了23种)，这就好比具体的武功，例如天山折梅手，六脉神剑之类的。而从更抽象的层面来讲，设计模式有着一些类似于原则或是法则之类的东西，它们不是具体的设计模式，但是具体的设计模式却是这些法则的具现。这就好比武学要义，例如”天下武功，唯快不破”。或者说，这些法则是指导思想，政治精神，而设计模式则是基于指导思想制定的具体策略。</p>
<p>在面向对象领域，它们被总结为了”六原则一法则”：</p>
<p>首先是六原则：</p>
<ul>
<li>单一职责原则：模块内部高内聚，实现的功能尽量保证单一纯粹。模块之间低耦合，系统中某模块的替换对系统的影响尽可能的小。</li>
<li>开闭原则(The Open-Closed Principle,OCP)：该原则由勃兰特·梅耶提出，而后RobertC.Martin在C++ Report(1996年1月)中的Engineering NoteBook专栏里对其进行了总结。简单来说，该原则可以被描述为：对扩展(extension)开放(open)，对修改(modification)关闭(close)。即：增加新功能时，尽量只需派生新类而无需修改已有代码。要点有二：1.设计好系统主线的继承关系。2.使用接口及抽象类抽象核心功能。</li>
<li>依赖倒转原则：即面向接口编程。声明方法的参数类型、方法的返回类型、变量的引用类型时，尽可能使用抽象类型而不用具体类型。</li>
<li>里氏替换原则(<br>  Liskov Substitution Principle,LSP)：任何时候，能用父类型的地方就一定能使用其子类型进行替换。换句话说，无论父类类型的引用具体指向的是它的哪个子类实例，程序都应该能正常运行。该原则常用于判断继承关系是否合理。例如，<a href="">3.Template Method模式</a>就是该原则的具体应用。</li>
<li>接口隔离原则：接口应高内聚。其所表示的能力应尽量保证单一纯粹。</li>
<li>合成聚合复用原则：类与类之间有三种关系：继承(Is-A)，关联(Has-A)，依赖(Use-A)。其中，关联根据其关联的强度又可以进一步划分为关联、聚合和合成。本原则的要义是优先使用关联/依赖而非继承复用代码。例如，任何时候都不要继承工具类：你使用工具，你并不是工具。</li>
</ul>
<p>然后是一法则：</p>
<ul>
<li>最少知识法则(迪米特法则)：一个对象应当对其他对象有尽可能少的了解。即不要和陌生人打交道，如果真的需要，找一个自己的朋友，让他替你和陌生人打交道。该法则是低耦合的体现，例如，<a href="">15.Facade模式</a>就是该法则的具体应用。</li>
</ul>
<h1 id="GoF书中的23种设计模式-《图解设计模式》一书中的划分方式"><a href="#GoF书中的23种设计模式-《图解设计模式》一书中的划分方式" class="headerlink" title="GoF书中的23种设计模式(《图解设计模式》一书中的划分方式)"></a>GoF书中的23种设计模式(《图解设计模式》一书中的划分方式)</h1><p>GoF书将它所介绍的那23种设计模式分为了3大类。从学习者的角度来看，这个划分稍显宽泛了些。个人更偏爱《图解设计模式》中的划分方式，该书将这23种设计模式划分为了10个部分：</p>
<p><strong>第1部分：适应设计模式</strong></p>
<p>该部分的设计模式相对而言都很易于理解，可以帮助初学者快速的适应设计模式的一些基本术语和概念。</p>
<ul>
<li><a href="">1.Iterator模式</a></li>
<li><a href="">2.Adapter模式</a></li>
</ul>
<p><strong>第2部分：交给子类</strong></p>
<p>该部分将介绍与类的继承相关的设计模式。</p>
<ul>
<li><a href="">3.Template Method模式</a></li>
<li><a href="">4.Factory Method模式</a></li>
</ul>
<p><strong>第3部分：生成实例</strong></p>
<p>该部分将介绍与生成实例相关的设计模式。</p>
<ul>
<li><a href="">5.Singleton模式</a></li>
<li><a href="">6.Prototype模式</a></li>
<li><a href="">7.Builder模式</a></li>
<li><a href="">8.Abstract Factory模式</a></li>
</ul>
<p><strong>第4部分：分开考虑</strong></p>
<p>将易变得杂乱无章的处理分开考虑。</p>
<ul>
<li><a href="">9.Bridge模式</a></li>
<li><a href="">10.Strategy模式</a></li>
</ul>
<p><strong>第5部分：一致性</strong></p>
<p>让两个看上去不同的对象的操作变得统一。</p>
<ul>
<li><a href="">11.Composite模式</a></li>
<li><a href="">12.Decorator模式</a></li>
</ul>
<p><strong>第6部分：访问数据结构</strong></p>
<p>该部分将介绍优化数据结构处理的设计模式。</p>
<ul>
<li><a href="">13.Visitor模式</a></li>
<li><a href="">14.Chain of Responsibility模式</a></li>
</ul>
<p><strong>第7部分：简单化</strong></p>
<p>让类与类之间的关系变得简单。</p>
<ul>
<li><a href="">15.Facade模式</a></li>
<li><a href="">16.Mediator模式</a></li>
</ul>
<p><strong>第8部分：管理状态</strong></p>
<p>该部分将介绍与状态相关的设计模式。</p>
<ul>
<li><a href="">17.Observer模式</a></li>
<li><a href="">18.Memento模式</a></li>
<li><a href="">19.State模式</a></li>
</ul>
<p><strong>第9部分：避免浪费</strong></p>
<p>该部分将介绍避免浪费，提高处理效率的设计模式。</p>
<ul>
<li><a href="">20.Flyweight模式</a></li>
<li><a href="">21.Proxy模式</a>。</li>
</ul>
<p><strong>第10部分：用类来表现</strong></p>
<p>用类来表现特殊的东西。</p>
<ul>
<li><a href="">22.Command模式</a></li>
<li><a href="">23.Interpreter模式</a></li>
</ul>
<h1 id="GoF书中的23种设计模式-原书中的划分方式"><a href="#GoF书中的23种设计模式-原书中的划分方式" class="headerlink" title="GoF书中的23种设计模式(原书中的划分方式)"></a>GoF书中的23种设计模式(原书中的划分方式)</h1><p>我们不妨将GoF书中原有的对23种设计模式的3种划分方式也贴出来：</p>
<p><strong>创建型设计模式：对类的实例化过程的抽象化</strong></p>
<ul>
<li><a href="">8.Abstract Factory模式</a></li>
<li><a href="">4.Factory Method模式</a></li>
<li><a href="">5.Singleton模式</a></li>
<li><a href="">7.Builder模式</a></li>
<li><a href="">6.Prototype模式</a></li>
</ul>
<p><strong>结构型设计模式：描述如何将类或对象结合在一起形成更大的结构</strong></p>
<ul>
<li><a href="">2.Adapter模式</a></li>
<li><a href="">11.Composite模式</a></li>
<li><a href="">15.Facade模式</a></li>
<li><a href="">21.Proxy模式</a></li>
<li><a href="">9.Bridge模式</a></li>
<li><a href="">12.Decorator模式</a></li>
<li><a href="">20.Flyweight模式</a></li>
</ul>
<p><strong>行为型设计模式：对在不同的对象之间划分责任和算法的抽象化</strong></p>
<ul>
<li><a href="">14.Chain of Responsibility模式</a></li>
<li><a href="">23.Interpreter模式</a></li>
<li><a href="">16.Mediator模式</a></li>
<li><a href="">17.Observer模式</a></li>
<li><a href="">10.Strategy模式</a></li>
<li><a href="">13.Visitor模式</a></li>
<li><a href="">22.Command模式</a></li>
<li><a href="">1.Iterator模式</a></li>
<li><a href="">18.Memento模式</a></li>
<li><a href="">19.State模式</a></li>
<li><a href="">3.Template Method模式</a></li>
</ul>
<h1 id="Java-API中用到的设计模式"><a href="#Java-API中用到的设计模式" class="headerlink" title="Java API中用到的设计模式"></a>Java API中用到的设计模式</h1><p>Java标准类库其实也是普通的基于Java语法实现特定功能的代码，其中自然也运用了大量的设计模式，有很多就包含在GoF所介绍的那23种设计模式之中。我们不妨举几个例子：</p>
<hr>
<p>java.util.Iterator是用于遍历元素集合的接口。这里使用了<a href="">1.Iterator模式</a>。</p>
<hr>
<p>java.util.Observer是用于观察对象状态变化的接口，这里使用了<a href="">17.Observer模式</a>。</p>
<hr>
<p>以下方法中使用了<a href="">4.Factory Method模式</a>：</p>
<ul>
<li>java.util.Calendar类的getInstance()方法。</li>
<li>java.security.SecureRandom类的getInstance()方法。</li>
<li>java.text.NumberFormat类的getInstance()方法。</li>
</ul>
<hr>
<p>java.awt.Component与java.awt.Container这两个类使用了<a href="">11.Composite模式</a>。</p>
]]></content>
      <categories>
        <category>Java 设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-21.Merge Two Sorted Lists</title>
    <url>/2018/05/30/LeetcodeAlgorithms-21MergeTwoSortedLists/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/description/" target="_blank" rel="noopener">Merge Two Sorted Lists - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/21MergeTwoSortedLists/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>思路</strong></p>
<p>注意在迭代的过程中不要将链表弄断即可。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * Definition for singly-linked list.</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * public class ListNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *     int val;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *     ListNode next;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *     ListNode(int x) &#123; val &#x3D; x; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListNode mergeTwoLists(ListNode l1, ListNode l2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode l1Current &#x3D; l1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode l2Current &#x3D; l2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; l1Current) return l2Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; l2Current) return l1Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode head &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (l1Current.val &lt; l2Current.val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head &#x3D; l1Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l1Current &#x3D; l1Current.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            head &#x3D; l2Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            l2Current &#x3D; l2Current.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListNode current &#x3D; head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (null !&#x3D; l1Current &amp;&amp; null !&#x3D; l2Current) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (l1Current.val &lt; l2Current.val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                current.next &#x3D; l1Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l1Current &#x3D; l1Current.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                current.next &#x3D; l2Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                l2Current &#x3D; l2Current.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            current &#x3D; current.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; l1Current) current.next &#x3D; l2Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; l2Current) current.next &#x3D; l1Current;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ListNode &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int val;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode next;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListNode(int x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        val &#x3D; x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-26.Remove Duplicates from Sorted Array</title>
    <url>/2018/05/30/LeetcodeAlgorithms-26RemoveDuplicatesfromSortedArray/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/" target="_blank" rel="noopener">Remove Duplicates from Sorted Array - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/26RemoveDuplicatesfromSortedArray/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int removeDuplicates(int[] nums) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums || nums.length &#x3D;&#x3D; 0) return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int lastIndex &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (nums[lastIndex] &#x3D;&#x3D; nums[i]) continue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nums[++lastIndex] &#x3D; nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return lastIndex + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-20.Valid Parentheses</title>
    <url>/2018/05/30/LeetcodeAlgorithms-20ValidParentheses/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/valid-parentheses/description/" target="_blank" rel="noopener">Valid Parentheses - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/20ValidParentheses/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>思路</strong></p>
<p>利用Java API提供的栈完成匹配</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Stack;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final Map&lt;String, String&gt; MAP &#x3D; new HashMap&lt;String, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.MAP.put(&quot;)&quot;, &quot;(&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.MAP.put(&quot;&#125;&quot;, &quot;&#123;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.MAP.put(&quot;]&quot;, &quot;[&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isValid(String s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;s is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (&quot;&quot;.equals(s)) return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Stack&lt;String&gt; stack &#x3D; new Stack&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; s.length(); i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String now &#x3D; s.substring(i, i + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!Solution.MAP.containsKey(now))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                stack.push(now);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (stack.size() &#x3D;&#x3D; 0) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String last &#x3D; stack.pop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (!Solution.MAP.get(now).equals(last)) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return stack.size() &#x3D;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-14.Longest Common Prefix</title>
    <url>/2018/05/24/LeetcodeAlgorithms-14LongestCommonPrefix/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/longest-common-prefix/description/" target="_blank" rel="noopener">Longest Common Prefix - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/14LongestCommonPrefix/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>思路</strong></p>
<p>首先，找到strs[0]与strs[1]之间的最长公共前缀，不妨命名为x。</p>
<p>而后再找到x与strs[2]之间的最长公共前缀，将x赋值为新找到的前缀。</p>
<p>…</p>
<p>依此类推，直至结束。</p>
<p>过程中任何时候x为””则停止循环，因为此时已不可能再找到更短的最长公共前缀了。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String longestCommonPrefix(String[] strs) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; strs || strs.length &#x3D;&#x3D; 0) return &quot;&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (strs.length &#x3D;&#x3D; 1) return strs[0];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String model &#x3D; strs[0];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 1; i &lt; strs.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String now &#x3D; strs[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (!now.startsWith(model))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                model &#x3D; model.substring(0, model.length() - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (&quot;&quot;.equals(model)) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return model;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-13.Roman to Integer</title>
    <url>/2018/05/24/LeetcodeAlgorithms-13RomantoInteger/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/roman-to-integer/description/" target="_blank" rel="noopener">Roman to Integer - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/13RomantoInteger/0.jpg" alt="0.jpg"></p>
<p><img src="/images/blog_pic/LeetcodeAlgorithms/13RomantoInteger/1.jpg" alt="1.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>思路</strong></p>
<p>此题考校的是将一个不太熟悉的(一般大家都不会深究罗马数字的计算规则)概念抽象为代码的能力，正确理解题意即可。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Map&lt;Character, Integer&gt; ROMAN_TO_ARAB &#x3D; new HashMap&lt;Character, Integer&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.ROMAN_TO_ARAB.put(&#39;M&#39;, 1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.ROMAN_TO_ARAB.put(&#39;D&#39;, 500);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.ROMAN_TO_ARAB.put(&#39;C&#39;, 100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.ROMAN_TO_ARAB.put(&#39;L&#39;, 50);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.ROMAN_TO_ARAB.put(&#39;X&#39;, 10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.ROMAN_TO_ARAB.put(&#39;V&#39;, 5);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Solution.ROMAN_TO_ARAB.put(&#39;I&#39;, 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int romanToInt(String s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; s || s.length() &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;s is empty&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; s.length() - 1; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if(Solution.ROMAN_TO_ARAB.get(s.charAt(i)) &lt; Solution.ROMAN_TO_ARAB.get(s.charAt(i + 1)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                result -&#x3D; Solution.ROMAN_TO_ARAB.get(s.charAt(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                result +&#x3D; Solution.ROMAN_TO_ARAB.get(s.charAt(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result +&#x3D; Solution.ROMAN_TO_ARAB.get(s.charAt(s.length() - 1));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构-异或运算</title>
    <url>/2018/05/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h1 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h1><p>异或(exclusive OR)是一种二元位运算运算符，计算机学中的常用缩写为xor，计算时的符号为^。</p>
<p>参与位运算的数字只有0,1两种，而异或又是一种二元运算符，因此所有的运算情况只有如下4种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0^0&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">1^0&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">0^1&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1^1&#x3D;0</span></pre></td></tr></table></figure>

<p>用自然语言描述一下就是：相同的返回0，不同的返回1。这也是”异或”这个名称的由来。</p>
<a id="more"></a>

<h1 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h1><p><strong>异或满足交换率</strong></p>
<p>穷举法即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0^0&#x3D;0^0&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">1^0&#x3D;0^1&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1^1&#x3D;1^1&#x3D;0</span></pre></td></tr></table></figure>

<hr>
<p><strong>任何数异或0后保持不变</strong></p>
<p><strong>证明：</strong></p>
<p>穷举法即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0^0&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">1^0&#x3D;1</span></pre></td></tr></table></figure>

<hr>
<p><strong>任何数异或1后取反</strong></p>
<p><strong>证明：</strong></p>
<p>穷举法即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0^1&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">1^1&#x3D;0</span></pre></td></tr></table></figure>

<hr>
<p><strong>任何数异或自身后变为0</strong></p>
<p><strong>证明：</strong></p>
<p>穷举法即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0^0&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">1^1&#x3D;0</span></pre></td></tr></table></figure>

<h1 id="应用：原地交换两个整数"><a href="#应用：原地交换两个整数" class="headerlink" title="应用：原地交换两个整数"></a>应用：原地交换两个整数</h1><p>需求：现有两个整数a,b。需交换它们之中存储的值。</p>
<p>最简单，也是最易于想到的方法自然就是再声明一个临时的中转变量了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int temp &#x3D; a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a &#x3D; b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">b &#x3D; temp;</span></pre></td></tr></table></figure>

<p>不过这种做法并不是原地的，我们还使用了额外的空间存储temp。</p>
<p>如果想要原地完成这个需求，可以使用异或操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; a ^ b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">b &#x3D; a ^ b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">a &#x3D; a ^ b;</span></pre></td></tr></table></figure>

<p>经过这样的操作后，a与b中的值就被交换过来了。</p>
<p>看起来挺玄乎的。下面我们具体来求证一下。</p>
<p>首先是第一步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; a ^ b;</span></pre></td></tr></table></figure>

<p>经过这步操作后a变为了a^b，b依然还是b。如果我们以原值来算的话，第二步的运算其实是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; a ^ b ^ b</span></pre></td></tr></table></figure>

<p>因异或满足交换律，如果我们将a看作一个整体，b^b看作一个整体的话，上式可变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; b ^ b ^ a</span></pre></td></tr></table></figure>

<p>又因为任何数异或自身后变为0，因此上式可进一步化简为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; 0 ^ a &#x3D; a ^ 0</span></pre></td></tr></table></figure>

<p>又因为任何数异或0后保持不变，则最终可化简为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b &#x3D; a</span></pre></td></tr></table></figure>

<p>即经过第二步的运算后，b中存储的值已经是a了。</p>
<p>然后我们再来看第三步，此时实际的运算是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; a ^ b ^ a &#x3D; a ^ a ^ b &#x3D; 0 ^ b &#x3D; b ^ 0 &#x3D; b</span></pre></td></tr></table></figure>

<p>证明思路与第二步时类似，我们就不写具体的推导过程了。</p>
<p>至此，a与b完成了值的交换。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>异或</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-476.Number Complement</title>
    <url>/2018/05/24/LeetcodeAlgorithms-476NumberComplement/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/number-complement/description/" target="_blank" rel="noopener">Number Complement - LeetCode</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/476NumberComplement/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>思路</strong></p>
<p>Integer.highestOneBit(i)的作用是求出i的最高位1的位置，然后将它的后续都以0填充。例如5=101，传入本函数后输出100=4。</p>
<p>本思路利用了异或运算的一个特性：任何数异或1都相当于取反。</p>
<p>说是任何数，听起来比较吓人，其实一共也就两个数，我们完全可以穷举：</p>
<p>0^1=1,1^1=0</p>
<p>相当于对原数进行取反。</p>
<p>关于异或的其他特性可详见<a href="/2018/05/24/数据结构-异或运算/">数据结构-异或运算</a>。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int findComplement(int num) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (num &lt;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;num &lt;&#x3D; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return num ^ ((Integer.highestOneBit(num) &lt;&lt; 1) - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-哲学家就餐问题</title>
    <url>/2018/05/23/Java%E5%B9%B6%E5%8F%91-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在<a href="/2017/10/04/Java并发-并发级别/">Java 并发-并发级别</a>一文中，我们讨论过多线程的活跃性问题。其中最严重的一种情况就是死锁。关于死锁，在那篇文章中我们做过简要的描述，现摘录如下：</p>
<p><strong>死锁</strong></p>
<p>简单的小例子：线程A持有资源x而欲请求资源y。线程B持有资源y而欲请求资源x。不巧的是x，y均为临界区。如果现状得不到改善(AB均不愿意放弃已到手的资源)，那么死锁将一直进行下去，永远看不到解决的希望。因此死锁是活跃性问题中最糟糕的情况：它会直接导致被锁住的线程卡死。</p>
<a id="more"></a>

<p>哲学家就餐问题就是一个用于描述死锁的经典案例：</p>
<p>假设有5位哲学家围坐在1张圆桌旁，他们从不沟通，且只会做以下两件事之一：吃饭或者思考。并且吃饭的时候不思考，思考的时候不吃饭。餐桌正中有1大盘意大利面，每个哲学家左右手边各有一把叉子，因为1把餐叉很难吃到面，因此设定哲学家必须同时取到左右手的餐叉才能吃到面，并且我们还设定哲学家只会使用他所临近的那两把叉子。</p>
<p>5位哲学家，保险起见应该有10把叉子才行。但是现在只有5把叉子。这就存在着死锁的可能性了，例如每个哲学家都拿起来他们左手边的叉子，又都不愿意放下已获得的叉子，这样大家都吃不到饭，导致全部饿死。</p>
<p>我们也可以简化一下这个问题，即将哲学家减少至两人，相对的叉子也就只有两把了。问题的本质还是一样的，依然会有死锁的可能。下面我们就以两位哲学家的情况为例编码验证一下，假设双方均拿起了左手边的叉子，触发死锁：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final Object FORK1 &#x3D; new Object();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final Object FORK2 &#x3D; new Object();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Object tool;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Test(Object tool) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.tool &#x3D; tool;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.tool &#x3D;&#x3D; Test.FORK1) this.setName(&quot;哲学家1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.tool &#x3D;&#x3D; Test.FORK2) this.setName(&quot;哲学家2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (&quot;哲学家1&quot;.equals(this.getName())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Test.FORK1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(500);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (Test.FORK2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(this.getName() + &quot;获得所需的两把叉子，开始吃饭&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (&quot;哲学家2&quot;.equals(this.getName())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Test.FORK2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(500);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (Test.FORK1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(this.getName() + &quot;获得所需的两把叉子，开始吃饭&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test t1 &#x3D; new Test(Test.FORK1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test t2 &#x3D; new Test(Test.FORK2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后，程序无法结束，陷入死锁。</p>
<p>在实际的生产工作中，如果某程序的相关进程不再工作，且CPU占用率为0或大幅下降(陷入死锁的线程是不会占用CPU的)，就要考虑是否有陷入死锁的可能性了。具体来说，我们可以使用JDK提供的一些小工具来检测死锁。</p>
<p>在<a href="/2017/11/03/JVM-JDK自带JVM工具/">JVM-JDK自带JVM工具</a>一文中，我们曾经详细介绍过这些小工具，现在以上文哲学家死锁的代码为例，再次温习下它们的使用方法吧。</p>
<p>首先，我们使用jps获得进程的核心数据(主要是LVMID):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wangyikai1@5CD6227DBW MINGW64 &#x2F;d&#x2F;work&#x2F;java&#x2F;jdk&#x2F;bin</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ .&#x2F;jps -l</span></pre></td></tr><tr><td class="code"><pre><span class="line">7540 sun.tools.jps.Jps</span></pre></td></tr><tr><td class="code"><pre><span class="line">1312 D:\work\eclipse\\plugins&#x2F;org.eclipse.equinox.launcher_1.3.0.v20140415-2008.jar</span></pre></td></tr><tr><td class="code"><pre><span class="line">2244 com.test.Test</span></pre></td></tr></table></figure>

<p>显然，其中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2244 com.test.Test</span></pre></td></tr></table></figure>

<p>就是我们要检测的进程啦！而2244是它的LVMID。</p>
<p>然后使用jstack来获得该进程的线程信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wangyikai1@5CD6227DBW MINGW64 &#x2F;d&#x2F;work&#x2F;java&#x2F;jdk&#x2F;bin</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ .&#x2F;jstack -l 2244 &gt; &#x2F;e&#x2F;1.txt</span></pre></td></tr></table></figure>

<p>此时线程信息被我重定向到了/e/1.txt中，赶紧来看下它里面的内容吧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2018-05-24 10:38:44</span></pre></td></tr><tr><td class="code"><pre><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.80-b11 mixed mode):</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;DestroyJavaVM&quot; prio&#x3D;6 tid&#x3D;0x000000000253e800 nid&#x3D;0x179c waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;哲学家2&quot; prio&#x3D;6 tid&#x3D;0x000000000c2a1800 nid&#x3D;0x1a20 waiting for monitor entry [0x000000000cf3f000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.run(Test.java:36)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting to lock &lt;0x00000007d5d9b028&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d9b038&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;哲学家1&quot; prio&#x3D;6 tid&#x3D;0x000000000c29f000 nid&#x3D;0x14ac waiting for monitor entry [0x000000000cd5f000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.run(Test.java:24)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting to lock &lt;0x00000007d5d9b038&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d9b028&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Service Thread&quot; daemon prio&#x3D;6 tid&#x3D;0x000000000c284800 nid&#x3D;0x870 runnable [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;C2 CompilerThread1&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000c282800 nid&#x3D;0x1b54 waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;C2 CompilerThread0&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000aea9000 nid&#x3D;0x4c4 waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Attach Listener&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000aecf000 nid&#x3D;0xe10 waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Signal Dispatcher&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000aeca000 nid&#x3D;0x11f0 runnable [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Finalizer&quot; daemon prio&#x3D;8 tid&#x3D;0x000000000ae52800 nid&#x3D;0xcdc in Object.wait() [0x000000000c13f000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting on &lt;0x00000007d5d04858&gt; (a java.lang.ref.ReferenceQueue$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d04858&gt; (a java.lang.ref.ReferenceQueue$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Reference Handler&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000ae51000 nid&#x3D;0x18e8 in Object.wait() [0x000000000bf3f000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting on &lt;0x00000007d5d04470&gt; (a java.lang.ref.Reference$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Object.java:503)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d04470&gt; (a java.lang.ref.Reference$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;VM Thread&quot; prio&#x3D;10 tid&#x3D;0x000000000ae4e000 nid&#x3D;0xab8 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x000000000258d000 nid&#x3D;0x1bb4 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x000000000258e800 nid&#x3D;0x1be4 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#2 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x0000000002590800 nid&#x3D;0x19f8 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#3 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x0000000002592000 nid&#x3D;0x1b60 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;VM Periodic Task Thread&quot; prio&#x3D;10 tid&#x3D;0x000000000c29d800 nid&#x3D;0x13a4 waiting on condition </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">JNI global references: 107</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Found one Java-level deadlock:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;哲学家2&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  waiting to lock monitor 0x000000000ae5d1e8 (object 0x00000007d5d9b028, a java.lang.Object),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  which is held by &quot;哲学家1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;哲学家1&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  waiting to lock monitor 0x000000000ae5bd48 (object 0x00000007d5d9b038, a java.lang.Object),</span></pre></td></tr><tr><td class="code"><pre><span class="line">  which is held by &quot;哲学家2&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Java stack information for the threads listed above:</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;哲学家2&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.run(Test.java:36)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting to lock &lt;0x00000007d5d9b028&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d9b038&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;哲学家1&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.run(Test.java:24)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting to lock &lt;0x00000007d5d9b038&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d9b028&gt; (a java.lang.Object)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Found 1 deadlock.</span></pre></td></tr></table></figure>

<p>很显然，我们成功检测到了死锁，并且详细列出了死锁的具体情况。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-SynchronousQueue</title>
    <url>/2018/05/22/Java%E5%B9%B6%E5%8F%91-SynchronousQueue/</url>
    <content><![CDATA[<p>在<a href="/2017/10/03/Java并发-线程池/">Java 并发-线程池</a>中，我们提到了一个线程池常用的阻塞队列：SynchronousQueue。当时对它的描述很简略，在这里再次摘录如下：</p>
<p><strong>SynchronousQueue</strong></p>
<p>即直接提交队列。其实这已经不能算作一种队列了：它并没有容量，即容量为0。换句话说，任何一个对SynchronousQueue的写需要等待一个对SynchronousQueue的读，反之亦然。因此，SynchronousQueue与其说是一个队列，更像是一个数据的中转站。</p>
<a id="more"></a>

<p>虽然当时没有细说，不过这实在是一个很奇特的队列了，那么它是如何实现的呢？</p>
<p>SynchronousQueue内部使用了大量的无锁(CAS)操作来进行并发控制，作为一个队列，外部最关心也最常用的自然就是它的put()和take()方法了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void put(E o) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (o &#x3D;&#x3D; null) throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (transferer.transfer(o, false, 0) &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.interrupted();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new InterruptedException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public E take() throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object e &#x3D; transferer.transfer(null, false, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (e !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (E)e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread.interrupted();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throw new InterruptedException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>


<p>实在是有趣！两个功能完全相反的方法内部调用的核心方法居然是同一个(正所谓殊途同归)，即transferer.transfer()方法。而transferer是SynchronousQueue的成员变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private transient volatile Transferer transferer;</span></pre></td></tr></table></figure>

<p>而Transferer是SynchronousQueue的静态内部类，它的代码很短，全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abstract static class Transferer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param e, 若e&#x3D;&#x3D;null，说明这是一次take()操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *           若e!&#x3D;null，说明这是一次put()操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param timed, 是否存在timeout时间</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param nanos, 在timed&#x3D;&#x3D;true的前提下，表示timeout的最大容忍时长</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return 为null表示本次操作失败(超时或者中断)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         反之操作成功：take()时为取到的元素；put()时为新放入的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    abstract Object transfer(Object e, boolean timed, long nanos);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这是一个抽象类，要想真的能new出实例，自然还需要非抽象的子类，我们来看一下SynchronousQueue的transferer是怎么new的，按照我们已有的经验，这种重要的成员变量的初始化一般都会在构造函数中，因此我们不妨看一下SynchronousQueue的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public SynchronousQueue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * fair, true - 线程等待队列为公平队列，即遵循FIFO</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *       false - 线程排序不定</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public SynchronousQueue(boolean fair) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    transferer &#x3D; fair ? new TransferQueue() : new TransferStack();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这里提到了一个线程等待队列，后文将详述。很显然，SynchronousQueue针对这个线程等待队列是否公平设计了两种实现，我想这就是为什么Transferer被设计为抽象类的原因吧，显然，这两个类都应是Transferer的子类。这两个类也均为SynchronousQueue的静态内部类，这里只贴出它们的类定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static final class TransferQueue extends Transferer</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">static final class TransferStack extends Transferer</span></pre></td></tr></table></figure>

<p>接下来，就让我们详细说说这个线程等待队列吧！</p>
<p>简单来说，我们可以认为SynchronousQueue实际上维护的就是这个线程等待队列，只不过它因为一些限制，使得外部观测者认为这个队列的容量为零。</p>
<p>我们可以这样认为，线程等待队列中的元素是线程的请求。我们不妨举一个小例子，假设有如下线程等待队列：</p>
<ul>
<li><strong>元素1：</strong>线程1请求写入数据1</li>
<li><strong>元素2：</strong>线程2请求写入数据2</li>
<li><strong>元素3：</strong>线程3请求写入数据3</li>
<li><strong>元素4：</strong>线程4请求写入数据4</li>
<li><strong>元素5：</strong>线程4请求写入数据5</li>
</ul>
<p>此时来了一个新的请求，例如线程5请求写入数据5。它与队首元素1的请求类型相同，不符合SynchronousQueue的基本规定(任何一个对SynchronousQueue的写需要等待一个对SynchronousQueue的读，反之亦然)，线程5就会被存入线程等待队列的队首，</p>
<ul>
<li><strong>元素1：</strong>线程5请求写入数据5</li>
<li><strong>元素2：</strong>线程1请求写入数据1</li>
<li><strong>元素3：</strong>线程2请求写入数据2</li>
<li><strong>元素4：</strong>线程3请求写入数据3</li>
<li><strong>元素5：</strong>线程4请求写入数据4</li>
</ul>
<p>然后又来了一个新的请求：线程6请求读取数据。这与队首的元素1就不冲突了。此时元素1会被弹出，构成元素1-新请求的请求对，然后处理这个请求对。经过该步，线程等待队列变为:</p>
<ul>
<li><strong>元素1：</strong>完成状态请求对：线程5请求写入数据5-线程6请求读取数据</li>
<li><strong>元素2：</strong>线程1请求写入数据1</li>
<li><strong>元素3：</strong>线程2请求写入数据2</li>
<li><strong>元素4：</strong>线程3请求写入数据3</li>
<li><strong>元素5：</strong>线程4请求写入数据4</li>
</ul>
<p>请求对处理完成后，线程等待队列变为：</p>
<ul>
<li><strong>元素1：</strong>线程1请求写入数据1</li>
<li><strong>元素2：</strong>线程2请求写入数据2</li>
<li><strong>元素3：</strong>线程3请求写入数据3</li>
<li><strong>元素4：</strong>线程4请求写入数据4</li>
</ul>
<p>介绍完核心思想，我们再以具体的实现TransferStack.transfer()为例，看看具体的源码是如何实现的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object transfer(Object e, boolean timed, long nanos) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SNode s &#x3D; null;    &#x2F;&#x2F; 封装当前请求的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int mode &#x3D; (e &#x3D;&#x3D; null) ? REQUEST : DATA;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SNode h &#x3D; head;    &#x2F;&#x2F; 线程等待队列中的队首元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (h &#x3D;&#x3D; null || h.mode &#x3D;&#x3D; mode) &#123;    &#x2F;&#x2F; 队列为空，或队首元素与当前请求的类型相同(均为读，或均为写)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (timed &amp;&amp; nanos &lt;&#x3D; 0) &#123;    &#x2F;&#x2F; 不进行等待</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (h !&#x3D; null &amp;&amp; h.isCancelled())    &#x2F;&#x2F; 当前队首元素处于取消状态的话，帮助队首元素处理它的取消行为</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    casHead(h, h.next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return null;    &#x2F;&#x2F; 直接判定为失败，新请求无法进入队列</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else if (casHead(h, s &#x3D; snode(s, e, h, mode))) &#123;    &#x2F;&#x2F; 将新请求生成为元素，并插入到队首且插入成功</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; awaitFulfill()方法会进行自旋，若自旋结束后也未出现新的匹配请求(即当前元素为读的话，出现了为写的请求；或当前元素为写的话，出现了读的请求)，则会挂起线程</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 当匹配请求出现后，线程被唤醒</span></pre></td></tr><tr><td class="code"><pre><span class="line">                SNode m &#x3D; awaitFulfill(s, timed, nanos);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (m &#x3D;&#x3D; s) &#123;    &#x2F;&#x2F; 其他线程已帮助该元素完成了它的工作，后续流程取消</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    clean(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 继续向下走了，说明没有接到别人的帮助</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if ((h &#x3D; head) !&#x3D; null &amp;&amp; h.next &#x3D;&#x3D; s)    &#x2F;&#x2F; 帮助临近的后续元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    casHead(h, s.next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return (mode &#x3D;&#x3D; REQUEST) ? m.item : s.item;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else if (!isFulfilling(h.mode)) &#123;    &#x2F;&#x2F; 队首元素与当前请求的类型不同</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (h.isCancelled())    &#x2F;&#x2F; 若该队首元素已在其他线程的帮助下被取消了</span></pre></td></tr><tr><td class="code"><pre><span class="line">                casHead(h, h.next);    &#x2F;&#x2F; 弹出当前队首，并重试</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 能进入下面的else if说明当前已能构成请求对</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else if (casHead(h, s&#x3D;snode(s, e, h, FULFILLING|mode))) &#123;    &#x2F;&#x2F; 以当前请求对生成一个新的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                                         &#x2F;&#x2F; 将它置为完成态</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                                         &#x2F;&#x2F; 并置于队首</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (;;) &#123;    &#x2F;&#x2F; 除非队列为空，否则一直检测匹配者</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    SNode m &#x3D; s.next;    &#x2F;&#x2F; 设置m(原队列队首)为s(当前请求元素)的匹配者</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (m &#x3D;&#x3D; null) &#123;    &#x2F;&#x2F; 循环到最后也没找到匹配者</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        casHead(s, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        s &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    SNode mn &#x3D; m.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; tryMatch()会激活一个等待线程，并将m传递给那个线程</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (m.tryMatch(s)) &#123;    &#x2F;&#x2F; 设置成功，数据投递完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                            &#x2F;&#x2F; s,m均可弹出了</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        casHead(s, mn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        return (mode &#x3D;&#x3D; REQUEST) ? m.item : s.item;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else    &#x2F;&#x2F; 设置失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              &#x2F;&#x2F; 说明已有其他线程帮助完成了该工作</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              &#x2F;&#x2F; 弹出m即可</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        s.casNext(m, mn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;    &#x2F;&#x2F; 头部元素恰好是完成态</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 说明此时恰有一个线程处于上一个else if中的匹配过程中</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 那么对于当前线程而言，比起处理目前手中已有的新进请求</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 更优先的事项是帮助其他线程完成这个完成态的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">            SNode m &#x3D; h.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (m &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                casHead(h, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                SNode mn &#x3D; m.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (m.tryMatch(h))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    casHead(h, mn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    h.casNext(m, mn);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>值得关注的是，上文中有很多线程间互助的操作，例如：</p>
<ul>
<li><strong>第10行：</strong>当前队首元素处于取消状态的话，帮助队首元素处理它的取消行为</li>
<li><strong>第18行：</strong>其他线程已帮助该元素完成了它的工作，后续流程取消</li>
<li><strong>第23行：</strong>帮助临近的后续元素</li>
<li><strong>第56行：</strong>更优先的事项是帮助其他线程完成这个完成态的元素</li>
</ul>
<p>由此可知，在SynchronousQueue中，线程间不再仅仅只是竞争关系了，还体现着一种协作：线程进入线程等待队列意味着被挂起，那么那些没挂起的，还尚有余力的线程就可以帮助其他线程完成任务，这种模式可以更大程度上减少饥饿的可能，提高系统整体的并行性。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>SynchronousQueue</tag>
        <tag>无锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Java AWT-以像素为单位操纵图片</title>
    <url>/2018/05/20/JavaAWT-%E4%BB%A5%E5%83%8F%E7%B4%A0%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%93%8D%E7%BA%B5%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<p>我们先准备一张示例图片，将其命名为0.jpg并放在D盘根目录下：</p>
<p><img src="/images/blog_pic/JavaAWT/%E4%BB%A5%E5%83%8F%E7%B4%A0%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%93%8D%E7%BA%B5%E5%9B%BE%E7%89%87/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<p>通过Windows属性查看器，可以看到该图片的属性信息中有如下描述：</p>
<p><img src="/images/blog_pic/JavaAWT/%E4%BB%A5%E5%83%8F%E7%B4%A0%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%93%8D%E7%BA%B5%E5%9B%BE%E7%89%87/1.jpg" alt="1.jpg"></p>
<p>这也就是咱们常说的图片的宽与高。那么从本质上讲，它们到底是什么呢？</p>
<p>简单来说，我们看到的绝大多数图片都是RGB图片。而从本质上讲，RGB图片是一个二维数组。数组中的元素是RGB像素点(Red-Green-Blue三基色调和而成)。也就是说，图片本质上是离散的，但是如果像素点足够密集的话，便可以欺骗人的眼睛，让其看起来是连续的。</p>
<p>回到本例，本例中的图片其实就是一个这样的二维数组：数组有711行，每行有1280个像素点。</p>
<p>那么，如果我们想操作图片，最底层，也是灵活性最高的做法自然就是以像素点为单位了，这样，我们就可以很容易的做到任何我们能想到的和图片相关的操作了。</p>
<p>下面给出一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String oldPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .append(&quot;0.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File oldFile &#x3D; new File(oldPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bufferedImage &#x3D; ImageIO.read(oldFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String newPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;1.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File newFile &#x3D; new File(newPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ImageIO.write(bufferedImage, &quot;jpg&quot;, newFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行该代码后，D盘下将生成1.jpg，因为我们将内存中的bufferedImage原样输出了，因此它与原有的0.jpg一模一样。</p>
<p>下面我们来看下bufferedImage中的像素点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String oldPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .append(&quot;0.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File oldFile &#x3D; new File(oldPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bufferedImage &#x3D; ImageIO.read(oldFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int y &#x3D; 0; y &lt; bufferedImage.getHeight(); y++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int x &#x3D; 0; x &lt; bufferedImage.getWidth(); x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int p &#x3D; bufferedImage.getRGB(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int r &#x3D; (p &amp; 0xff);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int g &#x3D; (p &amp; 0xff00) &gt;&gt; 8;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int b &#x3D; (p &amp; 0xff0000) &gt;&gt; 16;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[R,G,B]&#x3D;[&quot; + r + &quot;,&quot; + g + &quot;,&quot; + b + &quot;]&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String newPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;1.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File newFile &#x3D; new File(newPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ImageIO.write(bufferedImage, &quot;jpg&quot;, newFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>图片输出依然没变，不过这次我们还逐行打印了该图片所有像素点的RGB值，它的部分输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[172,148,136]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[172,149,134]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[174,147,133]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[171,144,130]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[166,140,126]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[162,136,122]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[155,131,119]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[147,125,114]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[139,115,109]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[133,108,104]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[R,G,B]&#x3D;[121,100,99]</span></pre></td></tr></table></figure>

<p>接着我们需要稍微补充一些RGB的基础知识了。</p>
<p>常见的图片中的RGB都是8位真彩色。也就是分别用8位来表示一种单色，因为2^8=256，即有256种红色，256种绿色，256种蓝色。这三种基色再进行调和，共可以得到2^24种颜色，这其实已经是一个足够大的数字了，临近的两种离散的颜色的色差其实已经很小了，用来欺骗我们的眼睛基本是足够了。正如上文的输出结果所证实的，RGB像素点每一个分量的值均在[0,255]的范围内。</p>
<p>然后我们再简要介绍下Java中RGB像素点的存储方式。Java是使用一个整型数据来存储一个RGB像素点的。1个整型数据长32位，RGB像素点只使用最后的24位。在这24位中：首先是8位的B，然后是8位的G，最后是8位的R。这也是上文代码的取值依据。</p>
<p>知道了这些，再要操作图片就容易了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String oldPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .append(&quot;0.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File oldFile &#x3D; new File(oldPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bufferedImage &#x3D; ImageIO.read(oldFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int y &#x3D; 0; y &lt; bufferedImage.getHeight(); y++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int x &#x3D; 0; x &lt; bufferedImage.getWidth(); x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int p &#x3D; bufferedImage.getRGB(x, y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int r &#x3D; p &amp; 0xff;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int g &#x3D; (p &amp; 0xff00) &gt;&gt; 8;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int b &#x3D; (p &amp; 0xff0000) &gt;&gt; 16;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int newP &#x3D; (255 - r) | ((255 - g) &lt;&lt; 8) | ((255 - b) &lt;&lt; 16);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                bufferedImage.setRGB(x, y, newP);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String newPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;1.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File newFile &#x3D; new File(newPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ImageIO.write(bufferedImage, &quot;jpg&quot;, newFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>例如，上述代码将1.jpg中的每个像素点都置为了0.jpg对应位置像素点的反色，即：</p>
<p><img src="/images/blog_pic/JavaAWT/%E4%BB%A5%E5%83%8F%E7%B4%A0%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%93%8D%E7%BA%B5%E5%9B%BE%E7%89%87/2.jpg" alt="2.jpg"></p>
<p>再比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.image.BufferedImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String oldPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .append(&quot;0.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File oldFile &#x3D; new File(oldPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedImage bufferedImage &#x3D; ImageIO.read(oldFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int width &#x3D; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean ifShowY &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int nowY &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int y &#x3D; 0; y &lt; bufferedImage.getHeight(); y++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!ifShowY) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int x &#x3D; 0; x &lt; bufferedImage.getWidth(); x++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    bufferedImage.setRGB(x, y, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                boolean ifShowX &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int nowX &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int x &#x3D; 0; x &lt; bufferedImage.getWidth(); x++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if(!ifShowX) bufferedImage.setRGB(x, y, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    nowX++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (nowX &#x3D;&#x3D; width) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        nowX &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ifShowX &#x3D; !ifShowX;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nowY++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (nowY &#x3D;&#x3D; width) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                nowY &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ifShowY &#x3D; !ifShowY;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String newPath &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;1.jpg&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File newFile &#x3D; new File(newPath);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ImageIO.write(bufferedImage, &quot;jpg&quot;, newFile);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述代码实现了一种网格化效果，每个小网格的大小位2*2。因为有3/4的点没有输出，因此图片显得很暗：</p>
<p><img src="/images/blog_pic/JavaAWT/%E4%BB%A5%E5%83%8F%E7%B4%A0%E4%B8%BA%E5%8D%95%E4%BD%8D%E6%93%8D%E7%BA%B5%E5%9B%BE%E7%89%87/3.jpg" alt="3.jpg"></p>
]]></content>
      <categories>
        <category>Java AWT</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GUI</tag>
        <tag>AWT</tag>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>Java AWT-播放音乐</title>
    <url>/2018/05/20/JavaAWT-%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<p>使用Maven管理jar包，首先在pom.xml中导入所需jar：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;com.googlecode.soundlibs&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;jlayer&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;1.0.1.4&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>然后准备一首mp3格式的音乐作为例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DiGiTAL WiNG - 恋ノ蟲.mp3</span></pre></td></tr></table></figure>

<p>下面给出使用示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import javazoom.jl.decoder.JavaLayerException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import javazoom.jl.player.Player;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws JavaLayerException, IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;DiGiTAL WiNG - 恋ノ蟲.mp3&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try (FileInputStream fis &#x3D; new FileInputStream(file);) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try (BufferedInputStream bis &#x3D; new BufferedInputStream(fis);) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Player player &#x3D; new Player(bis);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    player.play();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    player.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>歌曲播放完成后程序退出。</p>
]]></content>
      <categories>
        <category>Java AWT</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GUI</tag>
        <tag>AWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-无锁的Vector实现</title>
    <url>/2018/05/17/Java%E5%B9%B6%E5%8F%91-%E6%97%A0%E9%94%81%E7%9A%84Vector%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>java.util.Vector是Java API提供的容器，它可以被看作是线程安全的java.util.ArrayList。该Vector是以synchronized来保证容器的线程安全性的。在<a href="/2018/05/11/Java并发-无锁/">Java 并发-无锁</a>中，我们介绍一些Java API中基础的，利用CAS做并发控制的小例子。下面，让我们跳出Java API，来分析一种第三方类库提供的Vector的无锁(即使用CAS做并发控制)实现。</p>
<a id="more"></a>

<p>该第三方jar包被称为Amino框架，它是一个采用无锁方式实现并行计算的框架。遗憾的是，我并未在Maven仓库或网上其他地方找到这个jar包，也无法找到它的源码。因此本文中的源码和分析完全来自于[实战Java高并发程序设计]一书。</p>
<p>在Amino框架中，该Vector被称作LockFreeVector。它的特点是可以根据需求动态扩展其内部的空间。其实际用于存储的数据结构为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final AtomicReferenceArray&lt;AtomicReferenceArray&lt;E&gt;&gt; buckets;</span></pre></td></tr></table></figure>

<p>值得注意的是，该变量是final的，而Vector内存储的数据显然又需要是可变的，这就说明不变的仅仅是引用指向buckets这一点，buckets内部还是需要变化的。</p>
<p>另外，较之普通的Java API中的集合类的容器，buckets的数据结构是比较复杂的：它是一个数组，其元素又是一个数组(也就是我们常说的二维数组)。而且这些数组全部都是AtomicReferenceArray，这样从最底层的存储数据的容器开始，LockFreeVector就获得了一定的线程安全能力。</p>
<p>那么问题来了，我们都知道Vector实际存储的数据是一维的。那么为什么要用一个二维的数据结构呢？简单来说，这是为了便于容器的动态扩展(下文将进行详述，算法很巧妙，也很有趣)。我们可以稍稍回顾下AtomicReferenceArray内部用于存储数据的数据结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final Object[] array;</span></pre></td></tr></table></figure>

<p>它只是一个不可变的普通数组，如果只使用一维的AtomicReferenceArray的话，扩展将会非常麻烦。</p>
<p>此外，为了能对数组进行更有序的读写，还定义了一个名为Descriptor的类。它的作用是使用CAS操作写入新数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class Descriptor&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 整个Vector的长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 负责实际的写入</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile WriteDescriptor&lt;E&gt; writeop;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Descriptor(int size, WriteDescriptor&lt;E&gt; writeop) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.size &#x3D; size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.writeop &#x3D; writeop;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 写入</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void completeWrite() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        WriteDescriptor&lt;E&gt; tmpOp &#x3D; writeop;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (tmpOp !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            tmpOp.doIt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            writeop &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">static class WriteDescriptor&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E oldV;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 待写入的新值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E newV;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需修改的原子数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public AtomicReferenceArray&lt;E&gt; addr;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 数组需修改的索引位置</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int addr_ind;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public WriteDescriptor(AtomicReferenceArray&lt;E&gt; addr, int addr_ind, E oldV, E newV) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.addr &#x3D; addr;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.addr_ind &#x3D; addr_ind;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.oldV &#x3D; oldV;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.newV &#x3D; newV;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void doIt() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        addr.compareAndSet(addr_ind, oldV, newV);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在构造LockFreeVector的实例时，显然需要初始化它的核心组件buckets及descriptor：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public LockFreeVector() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    buckets &#x3D; new AtomicReferenceArray&lt;AtomicReferenceArray&lt;E&gt;&gt;(N_BUCKET);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    buckets.set(0, new AtomicReferenceArray&lt;E&gt;(FIRST_BUCKET_SIZE));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 在Descriptor外又包装了一层AtomicReference</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 初始时Vector长度为0。未指定WriteDescriptor</span></pre></td></tr><tr><td class="code"><pre><span class="line">    descriptor &#x3D; new AtomicReference&lt;Descriptor&lt;E&gt;&gt;(new Descriptor&lt;E&gt;(0, null));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中N_BUCKET及FIRST_BUCKET_SIZE均为常量值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">N_BUCKET &#x3D; 30;</span></pre></td></tr><tr><td class="code"><pre><span class="line">FIRST_BUCKET_SIZE &#x3D; 8;</span></pre></td></tr></table></figure>

<p>这里需要注意的是，buckets是final的，这意味着对于通过该构造函数生成的LockFreeVector实例而言，终其一生buckets的长度只能是30了。</p>
<p>同时，该构造函数还初始化了buckets的第一个元素，并将其的长度设为了8。而AtomicReferenceArray内部用于存储数据的数据结构为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final Object[] array;</span></pre></td></tr></table></figure>

<p>它也是final的。这就说明第一个元素，也就是第一个数组的长度固定为8。</p>
<p>如果我们以此为依据推断的话，假设buckets的后续元素的长度也都是8，那么buckets岂不是只能存储240个数据吗？不管怎么说，这都实在是太少了点。</p>
<p>我们先来回顾下Vector的扩展逻辑，在不显式指定扩展规则的情况下，默认每次容量翻倍(多说一句，ArrayList无法显式指定，只能按默认方式扩展，默认每次容量变为原来的1.5倍)。其实LockFreeVector的思路也类似：buckets的第二维数组存储数据本身，第一维数组以冗余的方式存储扩展。后一个元素就是前一个元素下一次的扩展，扩展默认每次翻倍，也就是说，buckets中元素的长度其实是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">元素0：长度2^3</span></pre></td></tr><tr><td class="code"><pre><span class="line">元素1：长度2^4</span></pre></td></tr><tr><td class="code"><pre><span class="line">元素2：长度2^5</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr><tr><td class="code"><pre><span class="line">元素29：长度2^32</span></pre></td></tr></table></figure>

<p>因此，buckets能存储的元素总数其实是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2^3 + 2^4 + 2^5 + ... + 2^32</span></pre></td></tr></table></figure>

<p>这已经是一个非常巨大的数字了，通常的需求都可以满足。</p>
<p>这里还有一个需要注意的点，无论是Vector还是ArrayList，同一个时间点维护的容器只有1份，也就是说进行扩展后，上一个容器就丢掉了。之前已有的数据还要复制到新容器中，可用容量的上限也是新容器的长度。但是，对于LockFreeVector而言，每次扩展后，老容器不会被抛弃，仍可继续，此时就没有将老容器中的元素复制到新容器中的必要了。buckets容积的上限为所有已有容器的和。</p>
<p>当有一个新元素需加入LockFreeVector时，会调用它的push_back()方法。该方法会将待添加元素放到LockFreeVector的末尾。对于Vector或是ArrayList，这是一个很简单的操作，直接将新元素丢到最后一个元素之后即可，如果容量不够就扩展。但是对于LockFreeVector而言，问题就要稍微复杂一些了。在丢元素之前我们需要先确定新元素的位置：即它位于第几个数组的第几号索引。</p>
<p>前文我们介绍过负责写入的类Descriptor，它有一个名为size的字段。其含义是当前LockFreeVector已有元素的个数。我们会用它来计算新元素的位置。</p>
<p>我们先来确定新元素位于第几个数组。</p>
<p>我们不妨模拟一个情景，当前已使用了4个数组，且4个数组都恰好装满(也就是说，我们要找的LockFreeVector的最后一个元素就是第4个数组的最后一个元素)，我们不妨用二进制的int型来表示这4个数组的长度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数组1：00000000 00000000 00000000 00001000 &#x3D; 2 ^ 3， 28个前导零</span></pre></td></tr><tr><td class="code"><pre><span class="line">数组2：00000000 00000000 00000000 00010000 &#x3D; 2 ^ 4， 27个前导零</span></pre></td></tr><tr><td class="code"><pre><span class="line">数组3：00000000 00000000 00000000 00100000 &#x3D; 2 ^ 5， 26个前导零</span></pre></td></tr><tr><td class="code"><pre><span class="line">数组4：00000000 00000000 00000000 01000000 &#x3D; 2 ^ 6， 25个前导零</span></pre></td></tr></table></figure>

<p>此时的size自然是这4个数字的和了，也就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size &#x3D; 00000000 00000000 00000000 01111000</span></pre></td></tr></table></figure>

<p>如果我们想要引起1次进位，那么最小需要加的数字就是1000，也就是8了。加后值为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size &#x3D; 00000000 00000000 00000000 10000000</span></pre></td></tr></table></figure>

<p>这刚好进入了第5个数组的领域，即新元素会位于第5个数组。</p>
<p>如果添加前元素没有装满呢？</p>
<p>因为此时已使用了4个数组，这就说明前3个数组均是装满了的，只有第4个数组还有空缺。在此前提下数组4已有元素肯定是小于它的最大容量的，即小于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000 00000000 00000000 01000000</span></pre></td></tr></table></figure>

<p>此时如果我们再求size，它的值肯定也是小于上文的最大值的，即小于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000 00000000 00000000 01111000</span></pre></td></tr></table></figure>

<p>如果我们依然按照上文的方式加二进制的1000，那么肯定是不会引起进位的。进而可以确认新元素依然还在第四个数组的范围内。</p>
<p>上文我们都是以最高位1为判断依据的，事实上，为了更为方便，我们还可以使用最高位1前有几个零来判断(本质上二者是一回事)。例如落于第4个数组中时前导零个数为25。落入第5个数组中时前导零个数为24。</p>
<p>确定了位于哪个数组后，我们再来确定新元素在该数组中的位置。</p>
<p>很显然，将最高位1置为0后，剩余数字就是新元素在数组中的位置。我们依然以第一个恰好填满4个数组的临界状态来分析。此时，新元素的加入导致了一次进位，即创建了一个新的数组，该新元素称为了新数组的第一个元素，即索引为0。我们还以第5个数组为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00000000 00000000 00000000 10000000</span></pre></td></tr></table></figure>

<p>它共可容纳2^7个元素，此时如果我们不看代表第5个数组的最高位的这个1，它后面的这7位就是它内部元素的索引，且该规律不仅仅是针对初始为0000000时有效，只要没引起进位，直到1111111其实都是有效的。</p>
<p>推广下去，不管是第几个数组，其实都是这个道理。而如果数组没有装满，这不过是代表它在前面介绍的0000000-1111111增长变化的路上，依然符合规律。</p>
<p>说了这么多，我们总结以下使用size(现有元素数)求新元素位置的方法：</p>
<p>位于哪个数组：加二进制的1000后，根据前导零个数推断。<br>在数组中的索引：将最高位1置为0后的值。</p>
<p>分析结束，下面我们来看一下push_back()方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void push_back(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Descriptor&lt;E&gt; desc;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Descriptor&lt;E&gt; newd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    do &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        desc &#x3D; descriptor.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        desc.completeWrite();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        int pos &#x3D; desc.size + FIRST_BUCKET_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int zeroNumPos &#x3D; Integer.numberOfLeadingZeros(pos);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int bucketInd &#x3D; zeroNumFirst - zeroNumPos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (buckets.get(bucketInd) &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int newLen &#x3D; 2 * buckets.get(bucketInd - 1).length();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (debug)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;New Length is:&quot; + newLen);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            buckets.compareAndSet(bucketInd, null, new AtomicReferenceArray&lt;E&gt;(newLen));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int idx &#x3D; (0x80000000&gt;&gt;&gt;zeroNumPos) ^ pos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        newd &#x3D; new Descriptor&lt;E&gt;(desc.size() + 1, new WriteDescriptor&lt;E&gt;(buckets.get(bucketInd), idx, null, e));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; while (!descriptor.compareAndSet(desc, newd));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    descriptor.get().completeWrite();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>最后，同理，让我们再来看下LockFreeVector的get()方法的源码。push_back()需要确定的是新元素需插入的位置，而get()需要确定的是待查询元素的位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int pos &#x3D; index + FIRST_BUCKET_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int zeroNumPos &#x3D; Integer.numberOfLeadingZeros(pos);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int bucketInd &#x3D; zeroNumFirst - zeroNumPos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int idx &#x3D; (0x80000000&gt;&gt;&gt;zeroNumPos) ^ pos;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return buckets.get(bucketInd).get(idx);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>无锁</tag>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-无锁</title>
    <url>/2018/05/11/Java%E5%B9%B6%E5%8F%91-%E6%97%A0%E9%94%81/</url>
    <content><![CDATA[<p>在<a href="/2017/10/04/Java并发-并发级别/">Java 并发-并发级别</a>中，我们曾对无锁有过简要的介绍。本文将对其做更为具体的讲解。</p>
<a id="more"></a>

<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><p>无锁是一种非阻塞的并发级别。它所采用的策略为比较交换(Compare And Swap, CAS)。</p>
<p>简单来说，CAS的模型是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CAS(V, E, N)</span></pre></td></tr></table></figure>

<p>其中：</p>
<ul>
<li>V: 欲更新的变量</li>
<li>E: 对欲更新变量的预期值</li>
<li>N: 对欲更新变量要赋的新值</li>
</ul>
<p>换句话说，V是变量，而E,N是V可能为的值。若欲将V赋值为N，会在赋值之前检查V当前的值，当且仅当当前值仍为E时，即说明并未有其他线程修改V时，才会将V赋值为N。否则将什么都不做。然后无论此前做了什么，CAS都会返回V的当前值。</p>
<p>其实更较真的来说，当前值仍为E其实并不能说明在此期间就没有其他线程修改V。很有可能的是，V的值经历了很多次的修改，恰好在该线程检查时值又被赋回了E。不过这其实并不重要：因为我们只关注结果，只要在线程需要修改V时，它的值仍是期望值即可。</p>
<p>至于如果修改失败，线程打算做什么，那就不是CAS关注的事情了，会完全交给线程自身去判断：如果线程接受失败，那么就放弃这次并发操作。反之，它就再次尝试，直到成功为止。</p>
<p>在硬件层面，大部分的现代处理器都会支持原子化的CAS指令。自JDK1.5起，JVM会直接使用这些指令来实现部分的并发操作和并发数据结构。很显然，这样做的性能是远高于使用锁及同步的。举个小例子，我们在<a href="/2018/02/05/Java并发-ConcurrentLinkedQueue/">Java 并发-ConcurrentLinkedQueue</a>中介绍过的ConcurrentLinkedQueue就是一个基于无锁实现的线程安全的容器。在此我们不妨再次贴出其中核心类Node的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; item,next支撑起了Node作为链表的节点的基础</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile E item;    &#x2F;&#x2F; 节点中存储的数据值</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile Node&lt;E&gt; next;    &#x2F;&#x2F; 下一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node(E item) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSAFE.putObject(this, itemOffset, item);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置节点中存储的数据值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 利用CAS保证线程安全性：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置时当前值与期望值相同则设置为目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param cmp E, 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param val E, 目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return boolean, true--设置成功，false--设置失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casItem(E cmp, E val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, itemOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void lazySetNext(Node&lt;E&gt; val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UNSAFE.putOrderedObject(this, nextOffset, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置本节点的下一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 利用CAS保证线程安全性：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置时当前值与期望值相同则设置为目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param cmp Node&lt;E&gt;, 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param val Node&lt;E&gt;, 目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return boolean, true--设置成功,false--设置失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casNext(Node&lt;E&gt; cmp, Node&lt;E&gt; val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final sun.misc.Unsafe UNSAFE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long itemOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long nextOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            UNSAFE &#x3D; sun.misc.Unsafe.getUnsafe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Class k &#x3D; Node.class;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            itemOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (k.getDeclaredField(&quot;item&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nextOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (k.getDeclaredField(&quot;next&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new Error(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>CAS操作在Java API中很常见，不过调用方式都是大同小异，核心围绕的都是UNSAFE.compareAndSwapObject()。这个方法是属于UNSAFE类的，也就是说它是不对外开放的，只供Java API内部使用。官方下载的JDK中也没有附带它的源码，不过我们可以通过它的接收参数以及功能很明显的看出这就是一个CAS。只不过它的返回值是boolean，看来方法内部对原生的CAS做了包装。其实这是更符合我们的调用思维的：调用者其实并不太关心当前V的值，而是更关心此次修改是否成功。</p>
<h1 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h1><p>为了让Java程序员能直接受益于CAS等CPU指令，JDK提供了如下包：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.util.concurrent.atomic</span></pre></td></tr></table></figure>

<p>该包中实现了一些直接使用CAS操作的线程安全的类型。下面我们介绍一下其中最常用的类：AtomicInteger。它的类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class AtomicInteger extends Number implements java.io.Serializable</span></pre></td></tr></table></figure>

<p>简单来说，AtomicInteger可以被视为一个32位的整数，但与Integer不同的是，AtomicInteger是可变的，并且是线程安全的。它的任何并发操作，都是基于CAS指令进行的(也就是说AtomicInteger使用无锁进行并发控制)。我们先来简单概述一下AtomicInteger常用的方法，对于其他的原子类，操作也是非常类似的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final int get()    &#x2F;&#x2F; 取得当前值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final void set(int newValue)    &#x2F;&#x2F; 设置当前值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndSet(int newValue)    &#x2F;&#x2F; 设置新值，并返回旧值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final boolean compareAndSet(int expect, int update)    &#x2F;&#x2F; 如果当前值为expect，则设置为update</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndIncrement()    &#x2F;&#x2F; 当前值加1，返回旧值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndDecrement()    &#x2F;&#x2F; 当前值减1，返回旧值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndAdd(int delta)    &#x2F;&#x2F; 当前值增加delta，返回旧值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int incrementAndGet()    &#x2F;&#x2F; 当前值加1，返回新值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int decrementAndGet()    &#x2F;&#x2F; 当前值减1，返回新值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int addAndGet(int delta)    &#x2F;&#x2F; 当前值增加delta，返回新值</span></pre></td></tr></table></figure>

<p>AtomicInteger类中最核心的成员变量为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private volatile int value;</span></pre></td></tr></table></figure>

<p>value中存储的值就是AtomicInteger的当前实际取值。此外还有一个字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final long valueOffset;</span></pre></td></tr></table></figure>

<p>该字段为value的偏移量，它是AtomicInteger进行并发控制的关键。</p>
<p>我们先来看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static AtomicInteger AI &#x3D; new AtomicInteger();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int i &#x3D; 0; i &lt; 10000; i++) Test.AI.incrementAndGet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int threadCount &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread[] threadArray &#x3D; new Thread[threadCount];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadCount; i++) threadArray[i] &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadCount; i++) threadArray[i].start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadCount; i++) threadArray[i].join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Test.AI);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">100000</span></pre></td></tr></table></figure>

<p>显然，AtomicInteger很好的进行了并发控制。接下来让我们来看一下incrementAndGet()的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final int incrementAndGet() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int current &#x3D; get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int next &#x3D; current + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (compareAndSet(current, next))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>它内部调用的get()方法很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final int get() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>类似于AtomicInteger，AtomicLong对应于long型，AtomicBoolean对应于boolean，AtomicReference对应于引用。</p>
<h1 id="Unsafe"><a href="#Unsafe" class="headerlink" title="Unsafe"></a>Unsafe</h1><p>接上一小节AtomicInteger，我们在分析它的incrementAndGet()方法的源码时并未看其中的核心方法compareAndSet()，现在我们具体的来看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final boolean compareAndSet(int expect, int update) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>而unsafe是AtomicInteger的类变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final Unsafe unsafe &#x3D; Unsafe.getUnsafe();</span></pre></td></tr></table></figure>

<p>果然，它仅仅做了一个封装，其内部调用的依然是我们在介绍CAS时提到的UNSAFE类。</p>
<p>现在就让我们来具体介绍一下这个类吧。</p>
<p>如前文所述，JDK并不希望程序员直接调用Unsafe类，因此也没有提供它的源码。不过我们依然可以查到它所属的包为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sun.misc</span></pre></td></tr></table></figure>

<p>顾名思义，Unsafe类中应该是封装了一些不安全的操作(这样的话，不希望程序员们调用也就可以理解了)，那么什么是不安全的操作呢？</p>
<p>在 C/C++ 中，有一个很重要的数据结构，名为指针。众所周知，指针是不安全的，这也是Java不准程序员显式定义和使用指针的原因。</p>
<p>请注意上文中的措辞，Java只是不准程序员显式的定义及使用指针，并不意味着Java移除了指针。事实上，指针所实现的功能是无可替代的：我们总要用一个数据结构去指向变量。如果不是特别较真的话，我们可以把引用看作Java中的指针，然而引用是非常上层的东西了，它并不会真正导致指针会造成的那些错误：例如，数组越界。如果是指针的话，那么当真就是在系统底层指到了数组外面。而如果是引用，则是JVM内部的行为，它会在内部”计算”是否越界，如果越界了那么返回异常，并没有实际在底层进行操作，相当于只进行了一次预先演算。这样便规避了实际运行时可能会产生的风险。</p>
<p>然而，终归是要实际运行的。我们此前也提到，指针的功能是无可替代的。事实上，Java将指针大部分的功能封装在了Unsafe类中。换句话说，与引用相比，说Unsafe是Java的指针要更准确一些(仅仅只是更准确一些，Unsafe也无法完全代替指针)。</p>
<p>我们继续来分析compareAndSwapInt()。虽然官网上下载不到源码，但我们总是有搞到源码的渠道的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * o 待操作对象</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * offset 对象内的偏移量</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *        是一个字段到对象头部的偏移量</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *        通过这个偏移量可以快速定位字段</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * expected 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * x 要设置的值</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *   若有当前值等于expected，则设置为x</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final native boolean compareAndSwapInt(Object o, long offset, int expected, int x);</span></pre></td></tr></table></figure>

<p>原来是native方法，不过这也与我们在前文中的推测相符：直接调用底层的CAS指令，无需再用Java代码做什么了。</p>
<p>此外，从名字上我们就不难推测出，compareAndSwapInt()方法是处理int型数据的，而我们在前文(开篇CAS那一小节)中提到的compareAndSwapObject()方法自然就是服务于Object对象的了。类比下去，常用的数据类型，long，double等应该也都会有特定的一族方法。</p>
<p>在此我们以int型为例，看看Unsafe还提供了哪些其他功能的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获得o在偏移量offset上的字段的int值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public native int getInt(Object o, long offset);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设定o在偏移量offset上的字段的int值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public native void putInt(Object o, long offset, int x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获得字段在对象中的偏移量</span></pre></td></tr><tr><td class="code"><pre><span class="line">public native long objectFieldOffset(Field f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用volatile语义，设定o在偏移量offset上的字段的int值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public native void putIntVolatile(Object o, long offset, int x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 使用volatile语义，获得o在偏移量offset上的字段的int值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public native int getIntVolatile(Object o, long offset);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 在putIntVolatile()的基础上，还要求被操作字段就是volatile的</span></pre></td></tr><tr><td class="code"><pre><span class="line">public native void putOrderedInt(Object o, long offset, int x);</span></pre></td></tr></table></figure>

<p>为了继续分析Unsafe类，我们不妨将上文中Node的代码再贴一遍：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; item,next支撑起了Node作为链表的节点的基础</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile E item;    &#x2F;&#x2F; 节点中存储的数据值</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile Node&lt;E&gt; next;    &#x2F;&#x2F; 下一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node(E item) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSAFE.putObject(this, itemOffset, item);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置节点中存储的数据值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 利用CAS保证线程安全性：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置时当前值与期望值相同则设置为目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param cmp E, 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param val E, 目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return boolean, true--设置成功，false--设置失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casItem(E cmp, E val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, itemOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void lazySetNext(Node&lt;E&gt; val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UNSAFE.putOrderedObject(this, nextOffset, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置本节点的下一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 利用CAS保证线程安全性：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置时当前值与期望值相同则设置为目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param cmp Node&lt;E&gt;, 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param val Node&lt;E&gt;, 目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return boolean, true--设置成功,false--设置失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casNext(Node&lt;E&gt; cmp, Node&lt;E&gt; val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final sun.misc.Unsafe UNSAFE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long itemOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long nextOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            UNSAFE &#x3D; sun.misc.Unsafe.getUnsafe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Class k &#x3D; Node.class;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            itemOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (k.getDeclaredField(&quot;item&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nextOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (k.getDeclaredField(&quot;next&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new Error(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中，得到Unsafe类实例的代码在static代码块中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UNSAFE &#x3D; sun.misc.Unsafe.getUnsafe();</span></pre></td></tr></table></figure>

<p>虽然官方不提供，但我们依然可以从其他渠道拿到它的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static Unsafe getUnsafe() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Class cc &#x3D; Reflection.getCallerClass();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (cc.getClassLoader() !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new SecurityException(&quot;Unsafe&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return theUnsafe;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>显然，该方法会检查调用者所属的类，如果该类的ClassLoader不为null，则说明该请求并非来自JDK内部，而正如前文中提到的，Unsafe类被设计成只供JDK内部调用，因此会抛出异常，拒绝响应。</p>
<p>关于能进行这样判断的依据，可详见<a href="/2017/12/04/JVM-类加载器/">JVM-类加载器</a>。</p>
<h1 id="AtomicReference"><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h1><p>从名字上我们就不难推测，AtomicReference与前文介绍的AtomicInteger即为类似。只不过AtomicInteger保证的是整数的线程安全性，而AtomicReference保证得则是普通的对象引用。</p>
<p>在开篇介绍CAS时，我们曾有如下论述：</p>
<p>其实更较真的来说，当前值仍为E其实并不能说明在此期间就没有其他线程修改V。很有可能的是，V的值经历了很多次的修改，恰好在该线程检查时值又被赋回了E。不过这其实并不重要：因为我们只关注结果，只要在线程需要修改V时，它的值仍是期望值即可。</p>
<p>这里说的”其实并不重要”指得是通常情况下，某些时候，该机制是会产生问题的。我们先来看下面的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicReference;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int STANDARD &#x3D; 20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static AtomicReference&lt;Integer&gt; AR &#x3D; new AtomicReference&lt;Integer&gt;(Test.STANDARD - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Test.AR.compareAndSet(value, value + Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Test.AR.compareAndSet(value, value + Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上面这段代码使用两个线程并发修改AR的值。如果AR的值小于20则会加上20。只会修改1次。运行后输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[9]当前值&#x3D;19,小于20，进行修改并修改成功，修改后值&#x3D;39</span></pre></td></tr><tr><td class="code"><pre><span class="line">[10]当前值&#x3D;39,大于等于20，无需修改</span></pre></td></tr></table></figure>

<p>代码是没有问题的。</p>
<p>现在我们再添加线程3，它会减少AR中的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicReference;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int STANDARD &#x3D; 20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static AtomicReference&lt;Integer&gt; AR &#x3D; new AtomicReference&lt;Integer&gt;(Test.STANDARD - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Test.AR.compareAndSet(value, value + Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Test.AR.compareAndSet(value, value + Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t3 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Test.AR.compareAndSet(value, value - Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,成功减少&quot; + Test.STANDARD + &quot;，减少后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t3.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[9]当前值&#x3D;19,小于20，进行修改并修改成功，修改后值&#x3D;39</span></pre></td></tr><tr><td class="code"><pre><span class="line">[10]当前值&#x3D;39,大于等于20，无需修改</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11]当前值&#x3D;39,成功减少20，减少后值&#x3D;19</span></pre></td></tr></table></figure>

<p>依然是没有问题的。</p>
<p>然后我们有意的控制一下这3个线程执行过程中的耗时：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicReference;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int STANDARD &#x3D; 20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static AtomicReference&lt;Integer&gt; AR &#x3D; new AtomicReference&lt;Integer&gt;(Test.STANDARD - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        if (Test.AR.compareAndSet(value, value + Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        if (Test.AR.compareAndSet(value, value + Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t3 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(20);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Integer value &#x3D; Test.AR.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        if (Test.AR.compareAndSet(value, value - Test.STANDARD)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,成功减少&quot; + Test.STANDARD + &quot;，减少后值&#x3D;&quot; + Test.AR.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t3.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[9]当前值&#x3D;19,小于20，进行修改并修改成功，修改后值&#x3D;39</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11]当前值&#x3D;39,成功减少20，减少后值&#x3D;19</span></pre></td></tr><tr><td class="code"><pre><span class="line">[10]当前值&#x3D;19,小于20，进行修改并修改成功，修改后值&#x3D;39</span></pre></td></tr></table></figure>

<p>现在便有问题了，AR的值被修改了两次。用语言描述的话，其执行顺序是下面这样的：</p>
<ol>
<li>t1获得AR当前值=19，小于20，判断需要增加20。</li>
<li>t2获得AR当前值=19，小于20，判断需要增加20。</li>
<li>t1成功增加AR，增加后值为39。</li>
<li>t3将AR的值减少20，减少后值变回19。</li>
<li>t2开始进行CAS，因为当前值与期望值相同，故再次增加AR，增加后值为39。</li>
</ol>
<p>如上所述，AR的值被增加了两次，变成了脏值。</p>
<p>上面的小例子是在控制了苛刻的执行顺序后产生的特例，一般不会发生。但这并不代表着它一定就不会发生。而且这种错误一旦发生，排查起来也是非常困难。因此依然有必要为此找到一个解决策略。而这个解决策略就是下面我们马上要介绍的AtomicStampedReference。</p>
<h1 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a>AtomicStampedReference</h1><p>继续上一节，其实并不仅仅是AtomicReference，绝大多数Atomic这一族的类都会有相同的并发问题。归根结底，还是因为这是CAS算法本身的问题。简单来说，这个问题就是：CAS只能判断进行比较时的那一个时间点上的当前值是否与期望值相同，而并非真正的知道在此期间值是否发生了变化。不过既然知道了症结所在，那么解决策略也就很显然了：用某种手段记录下值的变化情况即可。</p>
<p>不过，虽说是要记录值的变化情况，其实也并非就一定是做类似下面这样的详细记录：</p>
<ul>
<li>线程1将V改为1</li>
<li>线程2将V改为2</li>
<li>线程3将V改为3<br>…</li>
</ul>
<p>事实上，我们只需要知道在此期间是否有其他线程修改过变量即可。至于它们到底将它改成了什么样子，其实并不重要：因为只要知道已被修改过就足以判断这次修改失败了，不用再需要其他的信息了。</p>
<p>AtomicStampedReference就是Java API给出的解决策略，它的内部不仅维护了对象值，还维护了一个时间戳(并非严格意义上的时间戳，而是一个任意的可以记录修改状态的整数)。若修改成功，不仅仅会修改AtomicStampedReference的值，还需要修改它的时间戳。同理，在进行修改的CAS尝试时，不仅会判断对象值是否满足期望，还会判断时间戳是否满足期望。</p>
<p>较之AtomicReference，AtomicStampedReference增加了一些时间戳相关的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * expectedReference, 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * newReference, 新值</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * expectedStamp, 期望时间戳</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * newStamp, 新时间戳</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获得当前对象引用</span></pre></td></tr><tr><td class="code"><pre><span class="line">public V getReference()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获得当前时间戳</span></pre></td></tr><tr><td class="code"><pre><span class="line">public int getStamp()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置当前对象引用和时间戳</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void set(V newReference, int newStamp)</span></pre></td></tr></table></figure>

<p>现在，就让我们用AtomicStampedReference来重写上文中使用AtomicReference时出现错误的代码吧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicStampedReference;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int STANDARD &#x3D; 20;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 构造函数传入的两个参数依次为：初始值，初始时间戳</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static AtomicStampedReference&lt;Integer&gt; ASR &#x3D; new AtomicStampedReference&lt;Integer&gt;(Test.STANDARD - 1, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Integer value &#x3D; Test.ASR.getReference();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int timestamp &#x3D; Test.ASR.getStamp();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        if (Test.ASR.compareAndSet(value, value + Test.STANDARD, timestamp, timestamp + 1)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.ASR.getReference());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.ASR.getReference());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Integer value &#x3D; Test.ASR.getReference();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int timestamp &#x3D; Test.ASR.getStamp();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (value &lt; Test.STANDARD) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        if (Test.ASR.compareAndSet(value, value + Test.STANDARD, timestamp, timestamp + 1)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改成功，修改后值&#x3D;&quot; + Test.ASR.getReference());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,小于&quot; + Test.STANDARD + &quot;，进行修改并修改失败，此时值&#x3D;&quot; + Test.ASR.getReference());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,大于等于&quot; + Test.STANDARD + &quot;，无需修改&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t3 &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(20);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String threadId &#x3D; &quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Integer value &#x3D; Test.ASR.getReference();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int timestamp &#x3D; Test.ASR.getStamp();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        if (Test.ASR.compareAndSet(value, value - Test.STANDARD, timestamp, timestamp + 1)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(threadId + &quot;当前值&#x3D;&quot; + value + &quot;,成功减少&quot; + Test.STANDARD + &quot;，减少后值&#x3D;&quot; + Test.ASR.getReference());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t3.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[9]当前值&#x3D;19,小于20，进行修改并修改成功，修改后值&#x3D;39</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11]当前值&#x3D;39,成功减少20，减少后值&#x3D;19</span></pre></td></tr><tr><td class="code"><pre><span class="line">[10]当前值&#x3D;19,小于20，进行修改并修改失败，此时值&#x3D;19</span></pre></td></tr></table></figure>

<p>可以看到，值只被增加了1次，问题解决了。</p>
<h1 id="AtomicIntegerArray"><a href="#AtomicIntegerArray" class="headerlink" title="AtomicIntegerArray"></a>AtomicIntegerArray</h1><p>Atomic一族中还有原子类性的容器，即原子数组，包括：AtomicIntegerArray,AtomicLongArray,AtomicReferenceArray。顾名思义，它们分别代表int型数组，long型数组及普通的对象数组。</p>
<p>这里我们以AtomicIntegerArray为例，介绍下原子数组的使用方式。</p>
<p>从本质上来讲，AtomicIntegerArray是对int[]的线程安全化封装。同其他Atomic一族的类一样，它的内部也是通过Unsafe类的CAS操作实现的。我们先简要介绍几个它的核心方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获得数组索引为i的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int get(int i)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 获得数组的长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int length()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将数组索引为i的元素设置为newValue，并返回旧值</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndSet(int i, int newValue)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 进行CAS操作，若数组索引为i的元素等于期望值(expect)，则将之设置为新值(update)。设置成功后返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final boolean compareAndSet(int i, int expect, int update)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将索引为i的元素加1</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndIncrement(int i)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将索引为i的元素减1</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndDecrement(int i)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将索引为i的元素加delta</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final int getAndAdd(int i, int delta)</span></pre></td></tr></table></figure>

<p>下面我们来看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicIntegerArray;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int arrayLength &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicIntegerArray aia &#x3D; new AtomicIntegerArray(arrayLength);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    for (int j &#x3D; 0; j &lt; arrayLength; j++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        aia.getAndIncrement(j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread[] threadArray &#x3D; new Thread[arrayLength];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; arrayLength; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i] &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(aia);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000, 10000]</span></pre></td></tr></table></figure>

<p>符合预期。</p>
<p>最后我想说明的是。AtomicIntegerArray内实际用于存储数据的结构为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final int[] array;</span></pre></td></tr></table></figure>

<p>这是一个被final修饰的变量。也就是说，从外观上看，AtomicIntegerArray除了具有线程安全性之外，与普通的数组基本是一致的：声明后自然也是不能动态扩容的。</p>
<h1 id="AtomicIntegerFieldUpdater"><a href="#AtomicIntegerFieldUpdater" class="headerlink" title="AtomicIntegerFieldUpdater"></a>AtomicIntegerFieldUpdater</h1><p>在<a href="/2018/02/01/Java并发-容器线程安全化方法/">Java 并发-容器线程安全化方法</a>中，我们介绍了将线程不安全的容器简单快速的改造为线程安全的容器的方法。同理，对于单独的变量，有时我们也需要能够将其简单的改造为线程安全的变量的方法。</p>
<p>Atomic一族中有一组以Updater结尾的类被用以解决这个需求，它们分别是AtomicIntegerFieldUpdater,AtomicLongFieldUpdater,AtomicReferenceFieldUpdater。顾名思义，它们会以CAS操作分别对int,long及普通对象进行线程安全化处理。</p>
<p>下面我们不妨以AtomicIntegerFieldUpdater为例，来看看具体的使用方法。</p>
<p>我们不妨模拟一个小场景：选举人参与竞选。只要投票人投了某选举人一票，该选举人即获得一分。投票结束后将统计各选举人获得的总分数。显然，这是一个身处并发环境下的问题，不过因为某些原因，得分字段并非是线程安全的，因此便需要使用AtomicIntegerFieldUpdater进行线程安全化处理。</p>
<p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicIntegerFieldUpdater&lt;Candidate&gt; aifu &#x3D; AtomicIntegerFieldUpdater.newUpdater(Candidate.class, &quot;score&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 检验AtomicIntegerFieldUpdater是否正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicInteger check &#x3D; new AtomicInteger(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final Candidate candidate &#x3D; new Candidate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread[] threadArray &#x3D; new Thread[10000];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadArray.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i] &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Math.random() &gt; 0.4) &#123;    &#x2F;&#x2F; 约有60%的选民会投该候选人</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        aifu.incrementAndGet(candidate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        check.incrementAndGet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicIntegerFieldUpdater&#x3D;&quot; + candidate.score);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicInteger&#x3D;&quot; + check.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Candidate &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 得分并非是线程安全的</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile int score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AtomicIntegerFieldUpdater&#x3D;6104</span></pre></td></tr><tr><td class="code"><pre><span class="line">AtomicInteger&#x3D;6104</span></pre></td></tr></table></figure>

<p>经过多次重复实验，结果均一致，符合预期。</p>
<p>虽然上文中已证明了AtomicIntegerFieldUpdater可以按照预期完成任务，不过它(其他的Updater也一样)依然存在着一些限制：</p>
<p>第一，本质上来说，Updater是使用反射来获得变量的，因此它只能修改它可见的变量。如果变量不可见，则会出错。例如，如果我们将上文代码中的score的访问权限设置为private，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicIntegerFieldUpdater&lt;Candidate&gt; aifu &#x3D; AtomicIntegerFieldUpdater.newUpdater(Candidate.class, &quot;score&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 检验AtomicIntegerFieldUpdater是否正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicInteger check &#x3D; new AtomicInteger(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final Candidate candidate &#x3D; new Candidate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread[] threadArray &#x3D; new Thread[10000];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadArray.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i] &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Math.random() &gt; 0.4) &#123;    &#x2F;&#x2F; 约有60%的选民会投该候选人</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        aifu.incrementAndGet(candidate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        check.incrementAndGet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicIntegerFieldUpdater&#x3D;&quot; + candidate.getScore());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicInteger&#x3D;&quot; + check.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Candidate &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 得分并非是线程安全的</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private volatile int score;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getScore() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>可以通过编译，不过输出时会报异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.RuntimeException: java.lang.IllegalAccessException: Class com.test.Test can not access a member of class com.test.Candidate with modifiers &quot;private volatile&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.&lt;init&gt;(AtomicIntegerFieldUpdater.java:284)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(AtomicIntegerFieldUpdater.java:76)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:9)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Caused by: java.lang.IllegalAccessException: Class com.test.Test can not access a member of class com.test.Candidate with modifiers &quot;private volatile&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.Reflection.ensureMemberAccess(Reflection.java:110)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.misc.ReflectUtil.ensureMemberAccess(ReflectUtil.java:103)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.&lt;init&gt;(AtomicIntegerFieldUpdater.java:280)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	... 2 more</span></pre></td></tr></table></figure>

<p>显然这是因为反射时访问权限不足导致的。</p>
<hr>
<p>第二，为了确保变量的修改效果及时得到体现，字段必须是volatile类型的。现在，我们将原正确代码中score的volatile修饰去掉，即变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicIntegerFieldUpdater&lt;Candidate&gt; aifu &#x3D; AtomicIntegerFieldUpdater.newUpdater(Candidate.class, &quot;score&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 检验AtomicIntegerFieldUpdater是否正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicInteger check &#x3D; new AtomicInteger(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final Candidate candidate &#x3D; new Candidate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread[] threadArray &#x3D; new Thread[10000];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadArray.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i] &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Math.random() &gt; 0.4) &#123;    &#x2F;&#x2F; 约有60%的选民会投该候选人</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        aifu.incrementAndGet(candidate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        check.incrementAndGet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicIntegerFieldUpdater&#x3D;&quot; + candidate.score);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicInteger&#x3D;&quot; + check.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Candidate &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 得分并非是线程安全的</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>编译通过，输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Must be volatile type</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.&lt;init&gt;(AtomicIntegerFieldUpdater.java:292)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(AtomicIntegerFieldUpdater.java:76)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:9)</span></pre></td></tr></table></figure>

<p>错误很明显，就是由volatile导致的。</p>
<p>从严格意义上讲，这个规定其实是破坏了开闭原则的。因为我们已经无法完全做到在不修改原程序代码的基础上进行字段的线程安全化了。不过好在volatile通常不会对程序逻辑造成什么影响，因此通常这是可以接收的。</p>
<hr>
<p>第三，同其他的Atomic一族的类一样，Updater底层是以Unsafe类来实现CAS操作的。具体来说，它调用得是Unsafe的objectFieldOffset()，而该方法并不支持类变量。因此，Updater自然也不会支持类变量的修改了。和前文的代码一样，我们将score设置为static的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicInteger;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicIntegerFieldUpdater&lt;Candidate&gt; aifu &#x3D; AtomicIntegerFieldUpdater.newUpdater(Candidate.class, &quot;score&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 检验AtomicIntegerFieldUpdater是否正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final AtomicInteger check &#x3D; new AtomicInteger(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final Candidate candidate &#x3D; new Candidate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread[] threadArray &#x3D; new Thread[10000];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadArray.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i] &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (Math.random() &gt; 0.4) &#123;    &#x2F;&#x2F; 约有60%的选民会投该候选人</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        aifu.incrementAndGet(candidate);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        check.incrementAndGet();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            threadArray[i].join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicIntegerFieldUpdater&#x3D;&quot; + candidate.score);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;AtomicInteger&#x3D;&quot; + check.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Candidate &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 得分并非是线程安全的</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile static int score;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>编译通过，输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.misc.Unsafe.objectFieldOffset(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.atomic.AtomicIntegerFieldUpdater$AtomicIntegerFieldUpdaterImpl.&lt;init&gt;(AtomicIntegerFieldUpdater.java:297)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater(AtomicIntegerFieldUpdater.java:76)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:9)</span></pre></td></tr></table></figure>

<p>objectFieldOffset()方法报了异常。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>无锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-ThreadLocal</title>
    <url>/2018/05/02/Java%E5%B9%B6%E5%8F%91-ThreadLocal/</url>
    <content><![CDATA[<p>模拟一种场景：100个人需要填写个人信息表。有如下两种实施策略：</p>
<ol>
<li><p>只准备一支笔，这样做的好处是节省开销，坏处是同时只能有一个人在填表，效率低下，同时还必须花费时间和精力决策这支笔何时给何人使用。</p>
</li>
<li><p>准备100支笔，即做到”人手一支笔”。这样做的好处就是每个人都可以并行的自己填自己的了，效率很高，同时也免去了对笔的调度问题。坏处就是100支笔较之一支笔开销剧增。</p>
</li>
</ol>
<a id="more"></a>

<p>JVM中的锁及同步使用的就是第一种思路：即典型的用时间换空间(空间可理解为开销)。而本文欲介绍的ThreadLocal使用的就是第二种思路了：即用空间换时间。ThreadLocal就是”人手一支笔”的管理者。</p>
<p>稍微扩展一下，在并发环境中，通过用空间换时间的做法，将线程不安全的临界区变为线程安全的例子其实还有很多。例如，<a href="/2017/10/18/JVM-堆中对象的创建及布局/">JVM-堆中对象的创建及布局</a>中所介绍的JVM为实例分配内存时用到的本地线程分配缓冲(Thread Local Allocation Buffer, TLAB)运用的就是这种思想。再比如，<a href="/2018/01/08/Java并发-读写锁ReadWriteLock/">Java 并发-读写锁ReadWriteLock</a>的实现思路也是类似的。</p>
<h1 id="ThreadLocal的简单使用"><a href="#ThreadLocal的简单使用" class="headerlink" title="ThreadLocal的简单使用"></a>ThreadLocal的简单使用</h1><p>ThreadLocal在java.lang包中，其类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ThreadLocal&lt;T&gt;</span></pre></td></tr></table></figure>

<p>我们先来看一段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.DateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.ParseException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final DateFormat DF &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class Parsedate implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private int i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private Parsedate(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.i &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Date date &#x3D; Test.DF.parse(&quot;1990-06-05 14:21:&quot; + (this.i % 60));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(this.i + &quot;:&quot; + date);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (ParseException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) es.execute(new Parsedate(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">	es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	at com.test.Test$Parsedate.run(Test.java:25)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr><tr><td class="code"><pre><span class="line">650:Tue Jun 05 14:21:50 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">651:Tue Jun 05 14:21:51 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">652:Tue Jun 05 14:21:52 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">653:Mon Jun 05 14:21:53 CST 9690</span></pre></td></tr><tr><td class="code"><pre><span class="line">655:Tue Jun 05 14:21:55 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">656:Tue Jun 05 14:21:56 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">Exception in thread &quot;pool-1-thread-231&quot; java.lang.NumberFormatException: empty String</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1020)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Double.parseDouble(Double.java:540)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.text.DigitList.getDouble(DigitList.java:168)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.text.DecimalFormat.parse(DecimalFormat.java:1321)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.text.SimpleDateFormat.subParse(SimpleDateFormat.java:1793)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.text.SimpleDateFormat.parse(SimpleDateFormat.java:1455)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.text.DateFormat.parse(DateFormat.java:355)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$Parsedate.run(Test.java:25)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr><tr><td class="code"><pre><span class="line">657:Tue Jun 05 14:21:57 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">659:Thu May 31 14:21:59 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">660:Tue Jun 05 14:21:00 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">663:Tue Jun 05 14:21:03 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">664:Tue Jun 05 14:21:04 CDT 1990</span></pre></td></tr></table></figure>

<p>输出很长，在这里我们只截取其中一部分，因为这就足以说明问题了：很显然，程序获得了部分输出，却也抛出了异常，说明程序是有问题的。其问题就在于SimpleDateFormat的parse()方法不是线程安全的，将其置于并发环境中自然会产生问题。</p>
<p>为了解决这个问题，首先，我们可以使用思路一：即最常见的，使用锁或同步限制线程对临界区的访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.DateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.ParseException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.Lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final DateFormat DF &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Lock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class Parsedate implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private int i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private Parsedate(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.i &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Date date &#x3D; Test.DF.parse(&quot;1990-06-05 14:21:&quot; + (this.i % 60));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(this.i + &quot;:&quot; + date);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (ParseException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) es.execute(new Parsedate(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出依然很长，不过不会有异常发生了。在此我们只截取最开始的那部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6:Tue Jun 05 14:21:06 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">5:Tue Jun 05 14:21:05 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">7:Tue Jun 05 14:21:07 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">4:Tue Jun 05 14:21:04 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">3:Tue Jun 05 14:21:03 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">1:Tue Jun 05 14:21:01 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">0:Tue Jun 05 14:21:00 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">2:Tue Jun 05 14:21:02 CDT 1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">9:Tue Jun 05 14:21:09 CDT 1990</span></pre></td></tr></table></figure>

<p>下面我们采取思路二，即使用ThreadLocal：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.DateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.ParseException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ThreadLocal&lt;DateFormat&gt; TL &#x3D; new ThreadLocal&lt;DateFormat&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class Parsedate implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private int i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private Parsedate(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.i &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (null &#x3D;&#x3D; Test.TL.get())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.TL.set(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Date date &#x3D; Test.TL.get().parse(&quot;1990-06-05 14:21:&quot; + (this.i % 60));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(this.i + &quot;:&quot; + date);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (ParseException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 1000; i++) es.execute(new Parsedate(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出同前文使用锁的代码时一样，就不再赘述了。</p>
<h1 id="ThreadLocal的实现原理"><a href="#ThreadLocal的实现原理" class="headerlink" title="ThreadLocal的实现原理"></a>ThreadLocal的实现原理</h1><p>虽然使用ThreadLocal成功实现了功能。但是上节中ThreadLocal的Demo代码与我最初的设想却不大一样。我的想法是ThreadLocal既然是为每个线程分配的私有空间。那么应该以线程的成员变量的形式出现。然而它却是一个从属于类的静态变量，是唯一的。看来为每个线程划分空间的操作是在其内部实现的了。而其重点，自然就是set()及get()方法了。</p>
<p>咱们先来看set()方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void set(T value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread t &#x3D; Thread.currentThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocalMap map &#x3D; getMap(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (map !&#x3D; null)    &#x2F;&#x2F; 懒加载，使用前确认是否真的存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.set(this, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    else</span></pre></td></tr><tr><td class="code"><pre><span class="line">        createMap(t, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>哈哈！代码并不长，而且正如我们所推测的，set()内部进行了线程私有空间的划分。显然，ThreadLocalMap类型的变量map正是这个空间。</p>
<p>那么我们具体来看看它到底是个啥吧。首先是getMap(t)的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ThreadLocalMap getMap(Thread t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return t.threadLocals;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后是createMap(t, value)的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void createMap(Thread t, T firstValue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    t.threadLocals &#x3D; new ThreadLocalMap(this, firstValue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>代码都很短，而且我们惊奇的发现，实际所使用的空间居然是线程本身的局部变量threadLocals：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ThreadLocal.ThreadLocalMap threadLocals &#x3D; null;</span></pre></td></tr></table></figure>

<p>ThreadLocalMap居然又是ThreadLocal的一个静态内部类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class ThreadLocalMap</span></pre></td></tr></table></figure>

<p>因为ThreadLocal与Thread同在java.lang包中，所以这些类和变量都可自由的访问。</p>
<p>乍看一下，这关系可真够乱的。不过仔细梳理一下，其实还是很有条理的：既然是线程的私有空间，那么理应是存在于线程内部，这就是threadLocals。它的类型是ThreadLocalMap，其可以被理解为一个Map(虽然其实并没有实现Map接口，但是可以这样理解)。既然是Map，那么最核心的自然是key-value。它的key是ThreadLocal，而value则是实际需存储的变量。</p>
<p>依然是有点乱…</p>
<p>不过没关系，我们不妨举一个更具体的小例子：假设有3个ThreadLocal，我们不妨将其命名为t1,t2,t3。然后当前系统中并发工作的线程同样有3个。实际存储线程私有变量的容器是线程的threadLocals。如果需保存的私有变量就是字符串的话，那么某时刻系统的状态可能是这样的：</p>
<p>-线程1的threadLocals：{t1:”1-1”,t2:”2-1”,t3:”3-1”}<br>-线程2的threadLocals：{t1:”1-2”,t2:”2-2”,t3:”3-2”}<br>-线程3的threadLocals：{t1:”1-3”,t2:”2-3”,t3:”3-3”}</p>
<p>那么我们为什么会产生之前的误解呢？</p>
<p>我们回到文首，有这样一段话：</p>
<p><strong><em>JVM中的锁及同步使用的就是第一种思路：即典型的用时间换空间(空间可理解为开销)。而本文欲介绍的ThreadLocal使用的就是第二种思路了：即用空间换时间。ThreadLocal就是”人手一支笔”的管理者</em></strong></p>
<p>其中说ThreadLocal是”人手一支笔”的管理者，但是我(我想应该不仅仅是我，很多人都会这样想)却理所当然的将ThreadLocal看作是那支笔本身。但实际上ThreadLocal却是笔的记录者，并不是笔本身，笔还是在线程手中。</p>
<p>如果还是有些迷糊，我们不妨将上文中t1,t2,t3的小例子说得更具体一些。即继续扩展文章开头的那个填信息表的小例子：</p>
<p>-t1:笔的管理者<br>-t2:修改工具的管理者<br>-t3:纸张的管理者</p>
<p>线程1，2，3则分别对应于答卷人1，2，3。</p>
<p>那么在答卷过程中，某一时刻的资源分配状况可能是这样的：</p>
<p>-答卷人1：{拥有的笔:钢笔,拥有的修改工具:胶带,拥有的纸张:A4纸}<br>-答卷人2：{拥有的笔:铅笔,拥有的修改工具:修改液,拥有的纸张:B5纸}<br>-答卷人3：{拥有的笔:圆珠笔,拥有的修改工具:橡皮,拥有的纸张:A3纸}</p>
<p>而t1作为笔的管理者，其可以通过某种渠道查询到所有答卷人对笔的拥有情况。</p>
<p>所以简单来说，ThreadLocal可以被理解为某一类型资源的指针，该类型资源的实体还是存在于线程本身的内部。</p>
<p>然后，我们再来继续看get()方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public T get() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread t &#x3D; Thread.currentThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocalMap map &#x3D; getMap(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (map !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadLocalMap.Entry e &#x3D; map.getEntry(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (e !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (T)e.value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return setInitialValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>有了上文的分析，方法本身其实没什么好说的了。我们可以来看下setInitialValue()，它会在没有查到值时设置并返回一个默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private T setInitialValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    T value &#x3D; initialValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread t &#x3D; Thread.currentThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocalMap map &#x3D; getMap(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (map !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.set(this, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    else</span></pre></td></tr><tr><td class="code"><pre><span class="line">        createMap(t, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>基本的代码逻辑与前文介绍的set()方法相似，只是设置的值为默认值，用到了initialValue()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected T initialValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>直接返回一个null，简单粗暴。之所以封装为一个方法，推测是为了方便继承时重写，提高代码的灵活度。</p>
<p>通过上文的分析，我们知道了作为线程私有空间的threadLocals是Thread类的一个成员变量，那么我们很容易得出的一个结论就是：只要线程不退出(即Thread对象不被销毁)，threadLocals就不会被回收–因为Thread对象对它的引用将一直存在的。</p>
<p>我们先来说说线程退出时会发生什么。当线程欲退出时，系统会调用Thread对象的exit()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void exit() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (group !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        group.threadTerminated(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        group &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    target &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 加速资源清理</span></pre></td></tr><tr><td class="code"><pre><span class="line">    threadLocals &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    inheritableThreadLocals &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    inheritedAccessControlContext &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    blocker &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    uncaughtExceptionHandler &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很常见的套路，基本是将该Thread关联的所有引用都断掉了，其中就包括threadLocals。</p>
<p>而正如上文所分析的，若Thread对象不销毁，其所关联的threadLocals就不会被回收，那么这会导致什么问题呢？</p>
<p>通常来说，是不会有问题的。</p>
<p>但是Thread却并不是一个通常的类。说它不通常，倒不在这个类本身的代码编写上。而是在人的认识上：通常我们认为的线程被销毁，其实是任务被销毁了，而非线程本身。</p>
<p>举个例子，当我们在使用线程池时，线程池管理的是容器Thread，我们提交的Runnable则是其灵魂。任务完成，灵魂死去，但这并不意味着容器也一定被销毁了(可能被销毁，也可能没有，其结果是不受程序员控制的)。很有可能当下一个Runnable来的时候仍然是在复用上一个Thread。也就是说：我们认为Thead被销毁了，但是其实并没有。而只要Thread对象没有被真正的回收，它所关联的threadLocals就不会被回收，如果此时我们仍误以为上一个任务填入的ThreadLocal这个key已被销毁，就会导致threadLocals越来越大，有内存泄漏的风险。另外，如果读先发生于写的话，此时取出来的将不会是默认的空值，而是上一个任务留下的脏值(这里我们假定线程均共用一个ThreadLocal)。</p>
<p>因此，为了避免这种情况的发生，可以在任务完成时，手动显式的移除已没有用的变量。用到的方法为ThreadLocal中的remove()：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ThreadLocalMap m &#x3D; getMap(Thread.currentThread());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (m !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        m.remove(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述做法是建立在ThreadLocal对象还有用的前提下，如果我们确认该ThreadLocal对象已经没用了，或者我们愿意在下次使用前重新new出ThreadLocal对象的值，那其实可以采取更简单的策略：直接将该ThreadLocal对象置为null即可。</p>
<p>先不说”为什么”，咱们先来证明”是不是”：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.DateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.CountDownLatch;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static volatile ThreadLocal&lt;DateFormat&gt; TL &#x3D; new ThreadLocal&lt;DateFormat&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        protected void finalize() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(this.toString() + &quot; is gc&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int CD_LENGTH &#x3D; 10000;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static volatile CountDownLatch CD &#x3D; new CountDownLatch(Test.CD_LENGTH);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class Parsedate implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        @SuppressWarnings(&quot;serial&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (null &#x3D;&#x3D; Test.TL.get()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.TL.set(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        protected void finalize() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(this.toString() + &quot; is gc&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(Thread.currentThread().getId() + &quot; create SimpleDateFormat&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.CD.countDown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; Test.CD_LENGTH; i++) es.execute(new Parsedate());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CD.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;first round complete&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.TL &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;first gc complete&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">13 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">11 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">18 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">14 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">16 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">17 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">12 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">15 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">10 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">first round complete</span></pre></td></tr><tr><td class="code"><pre><span class="line">first gc complete</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$1@261c2628 is gc</span></pre></td></tr></table></figure>

<p>com.test.Test$1@261c2628其实就是TL，不过因为是匿名内部类，因此看上去名字有些怪。</p>
<p>令我们感到遗憾的是，我们申请的那些SimpleDateFormat并没有被回收。不过不要急，我们对代码稍加修改，再跑一轮：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.DateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.CountDownLatch;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static volatile ThreadLocal&lt;DateFormat&gt; TL &#x3D; new ThreadLocal&lt;DateFormat&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        protected void finalize() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(this.toString() + &quot; is gc&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int CD_LENGTH &#x3D; 10000;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static volatile CountDownLatch CD &#x3D; new CountDownLatch(Test.CD_LENGTH);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class Parsedate implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        @SuppressWarnings(&quot;serial&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (null &#x3D;&#x3D; Test.TL.get()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.TL.set(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        protected void finalize() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            System.out.println(this.toString() + &quot; is gc&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(Thread.currentThread().getId() + &quot; create SimpleDateFormat&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.CD.countDown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; Test.CD_LENGTH; i++) es.execute(new Parsedate());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CD.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;first round complete&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.TL &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;first gc complete&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.TL &#x3D; new ThreadLocal&lt;DateFormat&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CD &#x3D; new CountDownLatch(Test.CD_LENGTH);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; Test.CD_LENGTH; i++) es.execute(new Parsedate());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CD.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;second round complete&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;second gc complete&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">18 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">12 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">10 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">13 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">11 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">14 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">16 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">15 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">17 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">9 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">first round complete</span></pre></td></tr><tr><td class="code"><pre><span class="line">first gc complete</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$1@5d3f57b3 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">15 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">9 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">17 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">18 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">10 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">11 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">16 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">13 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">12 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">14 create SimpleDateFormat</span></pre></td></tr><tr><td class="code"><pre><span class="line">second round complete</span></pre></td></tr><tr><td class="code"><pre><span class="line">second gc complete</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$Parsedate$1@4f76f1a0 is gc</span></pre></td></tr></table></figure>

<p>很显然，这一次成了。那一串(正好10个)com.test.Test$Parsedate$1就是我们欲回收的第一轮的SimpleDateFormat。</p>
<p>虽然效果达到了，不过我们仍然有两个未解的问题：</p>
<ol>
<li>为什么第一轮不行，需要再跑一轮才能回收上一轮的资源呢？</li>
<li>为什么居然能被回收？</li>
</ol>
<p>我们先来解释下为什么第二个问题中要用”居然”这个词，也就是依常理来说下，为什么它们不该被回收。</p>
<p>我们在前文中说ThreadLocalMap类似于一个Map，那么我们不妨就以HashMap为例，来看看为什么不会被回收：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;Object, String&gt; map &#x3D; new HashMap&lt;Object, String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object o1 &#x3D; new Object();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object o2 &#x3D; o1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(o1, &quot;v&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        o1 &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(map.get(o2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这是一个很适合作为面试笔试题的小程序，它的输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">v</span></pre></td></tr></table></figure>

<p>o1指向一个Object实例，而后以o1为key将其放入map中，然后再将o1置为null。此时发生变化的仅仅只是o1指向的位置。对其原来指向的Object实例并没有影响。map中依然存在一个该Object实例的key，仅仅只是o1不指向它了而已。本程序中，为了能将该Object实例更容易的输出出来，还定义了另一个指向它的引用o2。事实上即便没有o2这个引用，map与Object实例依然是强引用关系。</p>
<p>因此，如果我们将ThreadLocalMap看作一个普通的Map的话，自然就会产生疑问：因为即便我们将作为key的ThreadLocal置为null，也仅仅是引用的变更，对ThreadLocal实例本身是没影响的，那么在ThreadLocalMap中作为该ThreadLocal实例value的SimpleDateFormat实例自然就不该被回收。</p>
<p>其原因就在于，正如前文所说的，ThreadLocalMap虽然可以被看作一个Map，但它却并非一个Map。硬要说的话，它更类似于WeakHashMap。ThreadLocalMap在其内部又定义了一个静态内部类Entry用以存储它所管理的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class Entry extends WeakReference&lt;ThreadLocal&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Entry(ThreadLocal k, Object v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(k);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        value &#x3D; v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>因此，如果说普通的引用关系是强引用的话，ThreadLocalMap所采用的就是弱引用。</p>
<p>我们曾在<a href="/2017/10/26/JVM-垃圾收集/">JVM-垃圾收集</a>中详细讨论过垃圾收集器对各种引用的处理策略。我们不妨将其再次摘录一遍：</p>
<p>从JDK1.2起，Java将引用的概念扩充为4种，强度从强至弱依次为：</p>
<ol>
<li><p>强引用(Strong Reference)：即为JDK1.1中的传统意义上的引用。程序中绝大多数的引用(诸如Object o = new Object())均是强引用。垃圾收集器绝不会收集通过强引用可达GC ROOT的对象。</p>
</li>
<li><p>软引用(Soft Reference)：使用SoftReference类实现。该引用即为前文”例如”所描述的那种引用：当某次垃圾收集后内存依然不够用，会进行第二次垃圾收集，此次收集将无视软引用。</p>
</li>
<li><p>弱引用(Weak Reference)：使用WeakReference类实现。也就是所谓的”消耗性引用”：经过一次垃圾收集后，该引用即失效。</p>
</li>
<li><p>虚引用(Phantom Reference)：使用PhantomReference类实现。又名幽灵引用或幻影引用。该引用并不是一个真正的引用，也无法在可达性计算中发挥任何作用，其存在价值仅仅为对象被回收后能发出一个系统通知。</p>
</li>
</ol>
<p>太棒了！</p>
<p>很显然，它完美的解决了我们的第二个疑问。不仅如此，它还解决了我们的第一个疑问：因为弱引用是消耗性引用，因此它至少还能坚持过一次gc。</p>
<h1 id="引入ThreadLocal的意义"><a href="#引入ThreadLocal的意义" class="headerlink" title="引入ThreadLocal的意义"></a>引入ThreadLocal的意义</h1><p>在均能实现功能的前提下，锁/同步 与ThreadLocal的选取还是要具体问题具体分析。通常来说，如果线程对临界区的争夺容易产生较大的性能损失，那么就更为推荐使用ThreadLocal了。一个典型的例子就是在并发环境下产生随机数。</p>
<p>话不多说，直接看代码吧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Callable;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutionException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Future;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * int, 每个线程产生的随机数个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int GEN_COUNT &#x3D; 1000_0000;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * long, 保证计算结果准确，两种计算方式所使用的Random的种子应相同</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 随便定义一个值即可</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不设定种子，种子将默认为Random的创建时间</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long SEED &#x3D; 777L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Random, 这是一个线程安全的Java类</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final Random RANDOM &#x3D; new Random(Test.SEED);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ThreadLocal&lt;Random&gt; T_RANDOW &#x3D; new ThreadLocal&lt;Random&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        protected Random initialValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 统一赋初值，这样就不用每次都set了</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return new Random(Test.SEED);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 进行比对的任务类。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 有两种工作模式：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * mode &#x3D;&#x3D; 0: 使用锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * mode &#x3D;&#x3D; 1: 使用ThreadLocal</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class RandomTask implements Callable&lt;Long&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private int mode;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private RandomTask(int mode) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.mode &#x3D; mode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public Long call() throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            long begin &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Random r &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.mode &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                r &#x3D; Test.RANDOM;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else if (this.mode &#x3D;&#x3D; 1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                r &#x3D; Test.T_RANDOW.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; 0; i &lt; Test.GEN_COUNT; i++) r.nextInt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            long end &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            long cost &#x3D; end - begin;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getId() + &quot; cost &quot; + cost + &quot;ms&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cost;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void run(ExecutorService es, Future&lt;Long&gt;[] f, int model) throws InterruptedException, ExecutionException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; f.length; i++) f[i] &#x3D; es.submit(new RandomTask(model));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long totalTime &#x3D; 0L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; f.length; i++) totalTime +&#x3D; f[i].get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String keyWord &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (model &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            keyWord &#x3D; &quot;lock&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else if (model &#x3D;&#x3D; 1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            keyWord &#x3D; &quot;ThreadLocal&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;use &quot; + keyWord + &quot; cost &quot; + totalTime + &quot;ms&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int threadCount &#x3D; 10;    &#x2F;&#x2F; 线程个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(threadCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Future&lt;Long&gt;[] f &#x3D; new Future[threadCount];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.run(es, f, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.run(es, f, 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11 cost 4263ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">17 cost 5531ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">15 cost 6006ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">16 cost 7025ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">14 cost 7944ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">10 cost 7993ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">12 cost 8021ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">18 cost 8073ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">9 cost 8095ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">13 cost 8092ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">use lock cost 71043ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">14 cost 298ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">15 cost 331ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">11 cost 340ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">12 cost 294ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">16 cost 367ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">10 cost 362ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">18 cost 329ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">9 cost 340ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">17 cost 434ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">13 cost 330ms</span></pre></td></tr><tr><td class="code"><pre><span class="line">use ThreadLocal cost 3425ms</span></pre></td></tr></table></figure>

<p>很显然，此时ThreadLocal的性能要远优于使用锁。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>ThreadLocal</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-JVM所做的锁优化</title>
    <url>/2018/04/27/Java%E5%B9%B6%E5%8F%91-JVM%E6%89%80%E5%81%9A%E7%9A%84%E9%94%81%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>本文将向大家简单介绍几种JVM内部的”锁”优化策略。</p>
<a id="more"></a>

<h1 id="锁偏向"><a href="#锁偏向" class="headerlink" title="锁偏向"></a>锁偏向</h1><p>锁偏向是一种针对加锁操作的优化手段。它的核心思想为：</p>
<p><strong>如果一个线程获得了锁，那么锁就会进入偏向模式。当这个线程再次请求该锁时，无需再做任何同步操作。</strong></p>
<p>这样便能节省大量有关锁申请的操作，从而提高系统的性能。</p>
<p>对于几乎没有锁竞争的场合，偏向锁的优化效果较好。因为连续多次极有可能是同一个线程请求相同的锁。而对于锁竞争较为激烈的场合，其效果则不佳：最坏的情况下锁不会接到任何连续的来自同一个线程的请求，此时偏向模式等同于失效，其性能还不如不开启偏向锁(准备了一大顿没用上)。</p>
<p>使用JVM参数-XX:+UseBiasedLocking可以开启偏向锁。</p>
<h1 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h1><p>锁偏向失败后，JVM仍不会按通常套路为线程申请锁(我们将这种锁称为重量级锁)，而是会为线程申请轻量级锁。简单来说，锁偏向的目的是为了不要申请，而在锁偏向失败后，就不得不申请了，轻量级锁的目的是为了申请的成本低一些：它会在锁对象头部开辟出一片空间，作为指针指向持有该锁的线程，如果这一指向操作成功，则线程成功获得轻量级锁。如果该操作失败，说明此前该指针已指向别的线程了(即有其他线程优先获得了该轻量级锁)，此时对于该线程而言，锁将膨胀为重量级锁。</p>
<h1 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h1><p>一旦膨胀为重量级锁，说明此时已有其他线程占有了该锁。那么理论上，线程应进入锁的等待队列，并有可能被真实的在操作系统层面挂起：很多时候，这是不太合理的，比如虽然现在尚无法获得锁，但在很短的时间后(比如几个CPU时钟周期)就能获取锁了，那么此时简单粗暴的频繁挂起及恢复线程就不是一个合理的做法。不过话又说回来，谁又能明确知道多久能获得锁呢？万一时间非常久呢？此种情况下，挂起线程，让出它已占据的资源才是合理的做法。</p>
<p>对此，JVM采取了一个折中的方案。当锁膨胀为重量级锁后，线程并不会立即被挂起，而是会做几个空循环(这也是自旋锁名称的由来)，说穿了，这就是在为了避免被立即挂起而争取时间：线程会在自旋结束后再次对锁发起申请，如果仍未获得锁，那么才会真正的进入锁的等待队列，并有可能真实的在操作系统层面被挂起。</p>
<h1 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h1><p>前文我们已讨论了3种优化策略：</p>
<ul>
<li>锁偏向</li>
<li>轻量级锁</li>
<li>自旋锁</li>
</ul>
<p>它们都有一个大的前提：那就是默认加锁操作确实是必要的。而锁消除是一种更彻底的优化，它在探讨更深的论题：代码里虽然写了要加锁，但这不过是程序员的主观判断，那么实际上到底是否真的需要加锁呢？对此，JVM在进行JIT编译时，会通过对运行上下文的扫描，去除不可能存在资源竞争的锁。</p>
<p>说到这里，我们不禁会去想，这算不算系统为程序员的不足买单呢？事实上并非完全如此。首先，程序员确实可能会错误的加锁，但是这是很难避免的，很多时候，当我们使用Java API或第三方提供的某些容器时，并不会特别较真的研究它的底层实现，到底哪里加了锁，性能又如何如何，往往功能满足需求即可。当然，知道的话更好，但对广大基层程序员提出那么高的门槛要求是不现实的。此外，我们使用线程安全的容器往往是因为它会身处于并发环境中，但这并不意味着对它所有的请求都是并发的。实际情况往往是并行与串行的请求共存，而只要有并行的请求存在，程序员就会选用线程安全的容器。那些没必要加锁的情景也需要系统的优化。</p>
<p>举一个小例子吧，我们来看如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Integer[] test() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int length &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Vector&lt;Integer&gt; v &#x3D; new Vector&lt;Integer&gt;(length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (int i &#x3D; 0; i &lt; length; i++) v.add(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return v.toArray(new Integer[length]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上例中的Vector是一个线程安全的容器，然而它却只是一个单纯的局部变量，终其一生也没有逃逸出它所属的test()方法。换句话说，它的整个生命周期都是在虚拟机栈的栈帧中读过的，这是一个串行的环境，因此，此时的加锁就是没有必要的。当系统检测到后，就会将相应的锁消除。</p>
<p>因此，判断是否可进行锁消除的最重要的依据就是变量是否逃逸出了串行环境。该技术被称为逃逸分析：即判断某一个变量是否会逃出某一个作用域。在上例中，变量v显然没有逃出test()函数之外，因此JVM才敢于将v内部的加锁操作消除。如果test()函数返回的是v本身，也就是说v逃逸出了当前函数，它就有可能身处于并发的环境中了，进而被其他线程访问到。此时仅以这一个函数所掌握的情报就无法对v进行锁消除了。</p>
<p>使用-XX:+EliminateLocks可开启锁消除。如前所述，若欲开启锁消除，还需开启它所依赖的逃逸分析。逃逸分析只能在-server模式下运行，使用-XX:+DoEscapeAnalysis开启。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-提高锁的性能的几个思路</title>
    <url>/2018/04/27/Java%E5%B9%B6%E5%8F%91-%E6%8F%90%E9%AB%98%E9%94%81%E7%9A%84%E6%80%A7%E8%83%BD%E7%9A%84%E5%87%A0%E4%B8%AA%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>“锁”是最常用的同步策略之一。在高并发的环境下，激烈的锁竞争会导致程序的性能下降。所以锁的性能的优化是一个很值得探讨的话题，例如：避免死锁，减小锁粒度，锁分离等。</p>
<a id="more"></a>

<p>在多核机器中，较之单线程串行执行，使用多线程可以显著提高系统的性能，却也会增加额外的系统开销。对于单任务或者单线程的应用而言，其资源消耗基本都花费在任务本身上：它既不需要维护并行数据结构间的一致性状态，也不需要为线程的切换及调度花费时间。但对多线程的应用而言，除了需要满足任务本身的需求，还需要额外维护多线程环境的特有信息，例如：线程本身的元数据，线程的调度，线程上下文的切换等。正因为如此，在单核CPU上，采用并行算法的效率通常要低于对应的串行算法。</p>
<p>而对同步策略(也就是本文要探讨的锁)的优化，最重要的目标也就是优化这一部分因引入多线程而增加的”额外操作”，例如进行更合理的任务调度，更充分的压榨每个CPU的性能等等。本文将从比较高的维度介绍几个常用的优化思路。</p>
<p><strong>注意：</strong>本文提到的”锁”是广义上的，即同时包含了Lock及synchronized。</p>
<h1 id="减少锁的持有时间"><a href="#减少锁的持有时间" class="headerlink" title="减少锁的持有时间"></a>减少锁的持有时间</h1><p>无论如何优化加锁操作本身，只要进行加锁就会产生”额外”的系统消耗，那么尽可能的缩小需要加锁的区域，减少每个线程的持锁时间，就是最自然，也是最容易想到的优化思路。</p>
<p>具体来说，我们可以看如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized void syncMethod() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    m1();    &#x2F;&#x2F; 无需同步控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">    syncM();    &#x2F;&#x2F; 需同步控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">    m2();    &#x2F;&#x2F; 无需同步控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很显然，线程在执行m1()及m2()时是无需加锁的。很自然的，我们就可以想到如下优化策略：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void syncMethod() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    m1();    &#x2F;&#x2F; 无需同步控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">    synchronized(this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        syncM();    &#x2F;&#x2F; 需同步控制   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    m2();    &#x2F;&#x2F; 无需同步控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>JDK的源码中有很多地方都应用了这种优化策略，例如处理正则表达式的java.util.regex.Pattern中就有如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Matcher matcher(CharSequence input) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (!compiled) &#123;    &#x2F;&#x2F; 只有在表达式未编译时，才会进行局部的加锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized(this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!compiled)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                compile();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Matcher m &#x3D; new Matcher(this, input);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>关于这个方法，有一个很有趣的点:if (!compiled)被连续判断了两次。做第一次判断时并未进行并发控制，无额外的开销。而只要进入了同步代码块，就是线程安全的了。但是我们无法保证在第一次判断至进入同步代码块期间(当然，仅从代码来看，二者是紧邻着的)不会发生同步问题：例如恰好有另一个线程利用这段时间完成了一次完成的编译操作。因此，我们有必要在进入同步代码块后再进行一次判断。</p>
<p>那么为什么不在第一次判断外面就包一层同步代码块呢？这样不就只需要一次判断了吗？这就是本小节优化思路的应用了：若if (!compiled) == false，也就是已经编译完了，无需再编译了，那么此时是不需要进行同步控制的，而很显然，在字符串匹配的整个周期中，编译只需要1次，绝大多数时候，当我们调用matcher(CharSequence input)方法时，字符串都是编译好的，因此我们需要缩小需要加锁的范围：只有当确实没编译时才执行加锁操作。这是本思路下比较高级的优化了：加锁范围缩窄的不是具体的代码，而是不同的条件分支。</p>
<h1 id="减小锁粒度"><a href="#减小锁粒度" class="headerlink" title="减小锁粒度"></a>减小锁粒度</h1><p>在JDK中，本思路的典型应用是java.util.concurrent.ConcurrentHashMap，其类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ConcurrentHashMap&lt;K, V&gt; extends AbstractMap&lt;K, V&gt; implements ConcurrentMap&lt;K, V&gt;, Serializable</span></pre></td></tr></table></figure>

<p>作为一个Map，最重要也是最常用的两个方法自然就是get()与put()了。而ConcurrentHashMap作为一个线程安全的容器，这种修改操作自然是要进行并发控制的。而最容易想到的并发策略自然就是对整个容器加锁。但这样做，我们就认为加锁的粒度太大了：因此ConcurrentHashMap在内部进一步的又被分为若干个小的Map，称之为段(Segment)，默认情况下，一个ConcurrentHashMap会被分为16段(额外多说一句，这种分段加锁的思想的应用还有<a href="/2018/02/07/Java并发-ConcurrentSkipListMap/">Java 并发-ConcurrentSkipListMap</a>)。</p>
<p>如果要在ConcurrentHashMap中增加一个新的元素，并不需要对整个容器加锁，而是首先根据元素的hashcode值计算出该元素应该被存放在哪个段中，然后只对该段加锁，随后完成put()操作。这样，在并发环境中，如果有多个线程同时进行put()操作，只要被加入的元素不在同一个段中，就无需进行并发控制。由于默认有16个段，那么ConcurrentHashMap最多可供16个线程同时插入。</p>
<p>下面我们贴出put()方法的具体代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Segment&lt;K,V&gt; s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (value &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int hash &#x3D; hash(key);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int j &#x3D; (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if ((s &#x3D; (Segment&lt;K,V&gt;)UNSAFE.getObject</span></pre></td></tr><tr><td class="code"><pre><span class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s &#x3D; ensureSegment(j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return s.put(key, hash, value, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>但是，减小锁粒度会引入一个新的问题：当系统需要取得容器的全局锁时，反而会变得麻烦。具体来说，如果要将整个容器都锁住，那么就需要将所有段的锁都拿在手里才行。比如说size()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Segment&lt;K,V&gt;[] segments &#x3D; this.segments;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean overflow;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    long sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    long last &#x3D; 0L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int retries &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (retries++ &#x3D;&#x3D; RETRIES_BEFORE_LOCK) &#123;    &#x2F;&#x2F; 为所有段加锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int j &#x3D; 0; j &lt; segments.length; ++j)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ensureSegment(j).lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sum &#x3D; 0L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            size &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            overflow &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int j &#x3D; 0; j &lt; segments.length; ++j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Segment&lt;K,V&gt; seg &#x3D; segmentAt(segments, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (seg !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    sum +&#x3D; seg.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int c &#x3D; seg.count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (c &lt; 0 || (size +&#x3D; c) &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        overflow &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (sum &#x3D;&#x3D; last)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            last &#x3D; sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (retries &gt; RETRIES_BEFORE_LOCK) &#123;    &#x2F;&#x2F; 为所有段解锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int j &#x3D; 0; j &lt; segments.length; ++j)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                segmentAt(segments, j).unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return overflow ? Integer.MAX_VALUE : size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>通常我们看到的JDK源码中的容器的size()方法，往往只有几句代码，逻辑也很清晰。然而ConcurrentHashMap的size()显然就很复杂了。要获得所有段的锁后才能实际开始求值。单就size()方法而言，ConcurrentHashMap在并发环境下的性能甚至是还不如由java.util.Collections.synchronizedMap()方法得到的线程安全的Map的。</p>
<p>这给了我们一个启示：对于ConcurrentHashMap这种分段加锁的容器而言，其调用需要全局锁的方法时的性能往往不如全局加锁控制线程安全的容器。因此选择并发容器时还应该看场景才行。</p>
<h1 id="使用读写分离锁"><a href="#使用读写分离锁" class="headerlink" title="使用读写分离锁"></a>使用读写分离锁</h1><p>在JDK中，本思路的典型应用是<a href="/2018/01/08/Java并发-读写锁ReadWriteLock/">Java 并发-读写锁ReadWriteLock</a></p>
<p>事实上，读写分离锁这种优化思路可以看作是减小锁粒度这一优化思路的特例：上文中提到的ConcurrentHashMap是从数据的角度减小锁粒度，而使用读写分离锁则是从功能的角度上减小锁粒度。</p>
<h1 id="锁分离"><a href="#锁分离" class="headerlink" title="锁分离"></a>锁分离</h1><p>锁分离是读写分离锁的扩展，因此也可看作是减小锁粒度的特例。读写分离锁划分功能的依据是”读与写”，那么我们同样可以依据其他功能来划分。比较典型的例子就是java.util.concurrent.LinkedBlockingQueue，其类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LinkedBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt; implements BlockingQueue&lt;E&gt;, java.io.Serializable</span></pre></td></tr></table></figure>

<p>它是<a href="/2018/02/07/Java并发-BlockingQueue/">Java 并发-BlockingQueue</a>的具体实现，在这篇文章中，我们讨论了LinkedBlockingQueue的近亲ArrayBlockingQueue，现在我们再来看看LinkedBlockingQueue。</p>
<p>作为BlockingQueue，最重要也是最常用的两个方法自然是take()及put()，它们分别代表阻塞式的读及写。因为LinkedBlockingQueue底层是以链表实现的，那么take()为弹出队首，put()则为向队尾追加新值。若使用独占锁，那么这两个操作是无法同时进行的。但事实上，这两个操作可以并行进行，彼此间并不会产生冲突。</p>
<p>具体来说，LinkedBlockingQueue将独占锁一分为二，分别用于take()及put()。LinkedBlockingQueue中有如下实例成员：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final ReentrantLock takeLock &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private final Condition notEmpty &#x3D; takeLock.newCondition();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private final ReentrantLock putLock &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private final Condition notFull &#x3D; putLock.newCondition();</span></pre></td></tr></table></figure>

<p>自然，相应的Condition会绑在对应的锁上：take()时需等待notEmpty，put()时则需等待notFull。</p>
<p>然后我们具体来看下take()的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public E take() throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int c &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final AtomicInteger count &#x3D; this.count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock takeLock &#x3D; this.takeLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLock.lockInterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (count.get() &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notEmpty.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        x &#x3D; dequeue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c &#x3D; count.getAndDecrement();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (c &gt; 1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notEmpty.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        takeLock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (c &#x3D;&#x3D; capacity)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        signalNotFull();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private void signalNotFull() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock putLock &#x3D; this.putLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    putLock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        notFull.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        putLock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>再来看下put()：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void put(E e) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (e &#x3D;&#x3D; null) throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int c &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; node &#x3D; new Node(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock putLock &#x3D; this.putLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final AtomicInteger count &#x3D; this.count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    putLock.lockInterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (count.get() &#x3D;&#x3D; capacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notFull.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        enqueue(node);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c &#x3D; count.getAndIncrement();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (c + 1 &lt; capacity)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notFull.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        putLock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (c &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        signalNotEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private void signalNotEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock takeLock &#x3D; this.takeLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeLock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        notEmpty.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        takeLock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>基本思路与ArrayBlockingQueue一致。不过由于LinkedBlockingQueue有两把不同的锁，两个Condition条件则是分别绑在对应的锁上，导致要发另一个锁的Condition条件时不大方便：需要再加锁解锁一次(也就是上例中的signalNotFull()及signalNotEmpty())。因此，在take()方法中，若在本次拿取后依然还有元素，则会发送一个notEmpty，供其他take()使用。同理，在put()方法中，若在本次添加后仍未到达最大容量，则会发送一个notFull，供其他put()使用。</p>
<h1 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h1><p>我们提出的第一个锁优化策略为”减少锁的持有时间”，其目的旨在尽可能的压缩每个线程占有锁的时间。然而有趣的是，我们本小节意欲介绍的优化策略正好站在它的反面：即适当延长线程对锁的占有时间。其缘由就在于加锁解锁是需要消耗系统资源的，如果加锁解锁的操作较为频繁，而实际的加锁后的业务时间又不是很长，这就导致系统用于加锁解锁调度切换的时间比重较之实际运行业务代码的时间增大，若该值大到一定程度，还不如不要释放锁，一直持有到阶段性任务完结得好。</p>
<p>其实，JVM会依据一定的算法，隐式的帮助我们完成部分的锁粗化操作：例如，在JVM遇到一连串的对同一个锁的加锁解锁操作时，便可能会将所有的锁操作整合为对锁的一次请求，例如如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    synchronized (this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; do sth1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 不需要并发控制的代码，很快能完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">    synchronized (this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; do sth2</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>则其可能会被整合为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    synchronized (this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; do sth1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 不需要并发控制的代码，很快能完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; do sth2</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>写代码时，我们也应有意识的判断是否应进行锁的粗化。例如如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i &#x3D; 0; i &lt; 1000; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    synchronized (this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这段代码会在每次for循环内部进行一次加锁解锁，而每次循环实际的业务仅仅是简单的i++，显然这是很不合理的，因此改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">synchronized (this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (int i &#x3D; 0; i &lt; 1000; i++) i++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样就会合理得多。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Centos6.x中Python2.6升级至2.7</title>
    <url>/2018/03/08/Python-Centos6x%E4%B8%ADPython26%E5%8D%87%E7%BA%A7%E8%87%B327/</url>
    <content><![CDATA[<p>本文安装方法面向系统：</p>
<ul>
<li>Centos6.x</li>
</ul>
<a id="more"></a>

<h1 id="确定版本"><a href="#确定版本" class="headerlink" title="确定版本"></a>确定版本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python --version</span></pre></td></tr></table></figure>

<p>若版本为2.6(Centos6.x中默认自带的Python就是2.6的)则可依本文升级为2.7。</p>
<h1 id="下载Python"><a href="#下载Python" class="headerlink" title="下载Python"></a>下载Python</h1><ul>
<li><a href="https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz" target="_blank" rel="noopener">Python-2.7.12官方下载</a></li>
<li><a href="https://pan.baidu.com/s/1bYiJf1VY_rMBEaaHCRz3pg" target="_blank" rel="noopener">Python-2.7.12个人存档</a></li>
</ul>
<h1 id="安装Python2-7"><a href="#安装Python2-7" class="headerlink" title="安装Python2.7"></a>安装Python2.7</h1><p>以Python-2.7.12.tgz为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf Python-2.7.12.tgz</span></pre></td></tr><tr><td class="code"><pre><span class="line">cd Python-2.7.12</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;configure  </span></pre></td></tr><tr><td class="code"><pre><span class="line">make all             </span></pre></td></tr><tr><td class="code"><pre><span class="line">make install  </span></pre></td></tr><tr><td class="code"><pre><span class="line">make clean  </span></pre></td></tr><tr><td class="code"><pre><span class="line">make distclean</span></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python2.7 -V</span></pre></td></tr></table></figure>

<p>若输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python 2.7.12</span></pre></td></tr></table></figure>

<p>则说明安装完成，可删除安装包。</p>
<p>此时虽然已完成2.7的安装，但系统默认的Python依然是2.6的。因此需建立软连接，使系统默认的Python指向Python2.7：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;usr&#x2F;bin&#x2F;python &#x2F;usr&#x2F;bin&#x2F;python2.6.6  </span></pre></td></tr><tr><td class="code"><pre><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python2.7 &#x2F;usr&#x2F;bin&#x2F;python</span></pre></td></tr></table></figure>

<p>然后再查看系统默认的Python版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -V</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python 2.7.12</span></pre></td></tr></table></figure>

<p>至此系统默认的Python已指向Python2.7。</p>
<h1 id="修改yum配置文件"><a href="#修改yum配置文件" class="headerlink" title="修改yum配置文件"></a>修改yum配置文件</h1><p>因yum需在Python2.6的环境下运行，因此需将其所用的Python环境单独改回2.6：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;usr&#x2F;bin&#x2F;yum  </span></pre></td></tr><tr><td class="code"><pre><span class="line">将文件头部的</span></pre></td></tr><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python</span></pre></td></tr><tr><td class="code"><pre><span class="line">改成</span></pre></td></tr><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;python2.6.6</span></pre></td></tr></table></figure>

<h1 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;bootstrap.pypa.io&#x2F;get-pip.py  </span></pre></td></tr><tr><td class="code"><pre><span class="line">python get-pip.py</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-Nginx安装及简单使用</title>
    <url>/2018/03/08/Nginx-Nginx%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>本文安装方法面向系统：</p>
<ul>
<li>CentOS 6.x</li>
</ul>
<a id="more"></a>

<ul>
<li><p><a href="http://openresty.org/cn/download.html" target="_blank" rel="noopener">openresty官网下载地址</a></p>
</li>
<li><p><a href="https://pan.baidu.com/s/1PJLD0LG0IBY2Xeq9ZnGonw" target="_blank" rel="noopener">CentOS 6.x源码安装包个人存档</a></p>
</li>
</ul>
<p>openresty官网中有详尽的安装教程，在此总结CentOS 6.x下源码安装的步骤。安装包不妨以openresty-1.13.6.1.tar.gz为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -xzvf openresty-1.13.6.1.tar.gz</span></pre></td></tr><tr><td class="code"><pre><span class="line">cd openresty-1.13.6.1&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">.&#x2F;configure</span></pre></td></tr><tr><td class="code"><pre><span class="line">make</span></pre></td></tr><tr><td class="code"><pre><span class="line">make install</span></pre></td></tr></table></figure>

<p>其中./configure默认为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty</span></pre></td></tr></table></figure>

<p>也可自行指定安装目录，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;reimu&#x2F;soft&#x2F;openresty</span></pre></td></tr></table></figure>

<h1 id="基本组件位置"><a href="#基本组件位置" class="headerlink" title="基本组件位置"></a>基本组件位置</h1><p>不妨设根目录为/reimu/soft/openresty，则：</p>
<p>Nginx程序位置：/reimu/soft/openresty/nginx/sbin/nginx</p>
<p>Nginx配置文件位置：/reimu/soft/openresty/nginx/conf/nginx.conf</p>
<p>Nginx默认日志文件夹：/reimu/soft/openresty/nginx/logs</p>
<h1 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h1><p>启动Nginx：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;reimu&#x2F;soft&#x2F;openresty&#x2F;nginx&#x2F;sbin&#x2F;nginx -c &#x2F;reimu&#x2F;soft&#x2F;openresty&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</span></pre></td></tr></table></figure>

<hr>
<p>验证Nginx配置文件正否符合规范：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;reimu&#x2F;soft&#x2F;openresty&#x2F;nginx&#x2F;sbin&#x2F;nginx -t</span></pre></td></tr></table></figure>

<p>若符合规范，则输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file &#x2F;reimu&#x2F;soft&#x2F;openresty&#x2F;nginx&#x2F;conf&#x2F;nginx.conf syntax is ok</span></pre></td></tr><tr><td class="code"><pre><span class="line">nginx: configuration file &#x2F;reimu&#x2F;soft&#x2F;openresty&#x2F;nginx&#x2F;conf&#x2F;nginx.conf test is successful</span></pre></td></tr></table></figure>

<hr>
<p>刷新配置文件配置，重启程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;reimu&#x2F;soft&#x2F;openresty&#x2F;nginx&#x2F;sbin&#x2F;nginx -s reload</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-ConcurrentSkipListMap</title>
    <url>/2018/02/07/Java%E5%B9%B6%E5%8F%91-ConcurrentSkipListMap/</url>
    <content><![CDATA[<h1 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h1><p>跳表(SkipList)是一种可用来进行快速查找的数据结构，时间复杂度为O(logn)，有点类似于平衡树。之所以这么说，是因为它们都可以对元素进行快速的查找。但二者有一个重要的区别：对平衡树的修改(也就是所谓的插入和删除)往往很可能会导致平衡树进行一次全局的调整(也就是所谓的调平)，而对跳表而言，插入和删除只需要对整个数据结构的局部进行调整即可。这样的好处是显而易见的：</p>
<ol>
<li><p>需要调整的规模较小，且数据量越大所带来的性能提升自然也越大。</p>
</li>
<li><p>在并发环境下，当需要修改跳表时，我们不需要将整张表锁起来，而可以只锁住本次修改所影响的区域，提高性能。</p>
</li>
</ol>
<a id="more"></a>

<p>跳表的另一个特点就是随机算法。跳表的本质是同时维护多个链表，且这些链表是分层的。如下图所示：</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/ConcurrentSkipListMap/0.jpg" alt="0.jpg"></p>
<p>最底层的链表包含跳表的所有元素，每往上一层的链表都是下面链表的子集(又是典型的用空间换时间的策略)，一个元素被插入哪些层完全是随机的(当然，最下面那层是必然会被插入的)，因此如果运气不好的话，也许会得到一个性能很糟糕的结构。不过在实际使用中，尤其是数据量较大时，概率将会极大的掩盖运气，跳表的性能通常都是非常好的。</p>
<p>跳表内所有链表的元素都是具有偏序关系的(所以才说跳表和平衡树像嘛)。查找时，通常是从顶层链表开始找起，一旦发现元素值大于待搜索值，或者找到末尾也未找到，则说明本层已无找到的可能，便进入下一层，直到找到或是遍历完底层也没找到(此时说明确实没有)。</p>
<p>下图是一个查找值7的小例子：</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/ConcurrentSkipListMap/1.jpg" alt="1.jpg"></p>
<h1 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h1><p>java API中提供的跳表为java.util.concurrent.ConcurrentSkipListMap，类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ConcurrentSkipListMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements ConcurrentNavigableMap&lt;K,V&gt;, Cloneable, java.io.Serializable</span></pre></td></tr></table></figure>

<p>这是一个Map，它与我们在Java API中最常见的使用哈希算法实现的Map有一个显著的不同：哈希并不会保存元素的顺序，而跳表因其特性其元素自然是有序的(所以说，并非所有Map都是无序的)。因此如果需要一个有序的Map，那么跳表可能是很好的选择。</p>
<p>我们可以先来看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ConcurrentSkipListMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;Integer, Integer&gt; map &#x3D; new ConcurrentSkipListMap&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) map.put(i, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(entry.getKey());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span></pre></td></tr><tr><td class="code"><pre><span class="line">1</span></pre></td></tr><tr><td class="code"><pre><span class="line">2</span></pre></td></tr><tr><td class="code"><pre><span class="line">3</span></pre></td></tr><tr><td class="code"><pre><span class="line">4</span></pre></td></tr></table></figure>

<p>既然跳表底层是以链表实现的，那么它最重要的数据结构自然就是节点了。对于ConcurrentSkipListMap而言，节点类是他的静态成员内部类。全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static final class Node&lt;K,V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; key与value组合构成了链表节点本身存储的元素值</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final K key;    &#x2F;&#x2F; 即map的key</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile Object value;    &#x2F;&#x2F; 即map的value</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile Node&lt;K,V&gt; next;    &#x2F;&#x2F; 下一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node(K key, Object value, Node&lt;K,V&gt; next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.key &#x3D; key;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.next &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node(Node&lt;K,V&gt; next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.key &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.next &#x3D; next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置value字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用CAS来进行并发控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casValue(Object cmp, Object val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, valueOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置next字段</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用CAS来进行并发控制</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casNext(Node&lt;K,V&gt; cmp, Node&lt;K,V&gt; val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isMarker() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return value &#x3D;&#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isBaseHeader() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return value &#x3D;&#x3D; BASE_HEADER;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean appendMarker(Node&lt;K,V&gt; f) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return casNext(f, new Node&lt;K,V&gt;(f));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void helpDelete(Node&lt;K,V&gt; b, Node&lt;K,V&gt; f) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (f &#x3D;&#x3D; next &amp;&amp; this &#x3D;&#x3D; b.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (f &#x3D;&#x3D; null || f.value !&#x3D; f)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                appendMarker(f);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                b.casNext(this, f.next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    V getValidValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object v &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (v &#x3D;&#x3D; this || v &#x3D;&#x3D; BASE_HEADER)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (V)v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    AbstractMap.SimpleImmutableEntry&lt;K,V&gt; createSnapshot() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        V v &#x3D; getValidValue();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (v &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new AbstractMap.SimpleImmutableEntry&lt;K,V&gt;(key, v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final sun.misc.Unsafe UNSAFE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long valueOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long nextOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            UNSAFE &#x3D; sun.misc.Unsafe.getUnsafe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Class k &#x3D; Node.class;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            valueOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    (k.getDeclaredField(&quot;value&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nextOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    (k.getDeclaredField(&quot;next&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new Error(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>简单看下来，最大的感触自然就是全程没有出现synchronized或Lock，看来又是一个只依赖CAS实现并发控制的线程安全的容器(之所以说又，是因为我想到了<a href="/2018/02/05/Java并发-ConcurrentLinkedQueue/">Java 并发-ConcurrentLinkedQueue</a>)</p>
<p>除了Node外，ConcurrentSkipListMap中另一个重要的数据结构名为Index。它也是ConcurrentSkipListMap的静态成员内部类，类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class Index&lt;K,V&gt;</span></pre></td></tr></table></figure>

<p>Index负责将各层链表拼接起来，它有如下关键的实例成员变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Index内部封装的节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">final Node&lt;K,V&gt; node;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 向下的引用</span></pre></td></tr><tr><td class="code"><pre><span class="line">final Index&lt;K,V&gt; down;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 向右的引用</span></pre></td></tr><tr><td class="code"><pre><span class="line">volatile Index&lt;K,V&gt; right;</span></pre></td></tr></table></figure>

<p>也就是说，从外部看，ConcurrentSkipListMap中存储的基本元素是Index，它负责进行网络的构建，其内部封装着存储实际业务逻辑的Node。</p>
<p>此外，每一层链表的表头Index中还要存储本行链表是第几层。ConcurrentSkipListMap将这种表头Index定义为它的静态成员内部类HeadIndex。既然是特殊的Index，那么HeadIndex自然是Index的子类。该类的代码很短，全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static final class HeadIndex&lt;K,V&gt; extends Index&lt;K,V&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final int level;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    HeadIndex(Node&lt;K,V&gt; node, Index&lt;K,V&gt; down, Index&lt;K,V&gt; right, int level) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(node, down, right);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.level &#x3D; level;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-BlockingQueue</title>
    <url>/2018/02/07/Java%E5%B9%B6%E5%8F%91-BlockingQueue/</url>
    <content><![CDATA[<p>在工作中，我们经常会遇到生产者-消费者模型的应用，例如：如果两个系统需要进行消息的沟通，我们往往会使用某个基于AMQP(Advanced Message Queuing Protocol)协议的消息队列，例如RabbitMQ,Qpid等。</p>
<p>而如果是在一个程序的内部，两个模块间需要线程安全的通信又该怎么做呢？</p>
<p>Java API为我们提供了java.util.concurrent.BlockingQueue接口，它的接口定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface BlockingQueue&lt;E&gt; extends Queue&lt;E&gt;</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>它是一个线程安全的，高性能的阻塞队列。通常被用于模块间消息通讯的缓冲区。Java API为我们提供了很多实现，最常用的是如下两个：</p>
<p>java.util.concurrent.ArrayBlockingQueue，类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ArrayBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt; implements BlockingQueue&lt;E&gt;, java.io.Serializable</span></pre></td></tr></table></figure>

<p>java.util.concurrent.LinkedBlockingQueue，类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LinkedBlockingQueue&lt;E&gt; extends AbstractQueue&lt;E&gt; implements BlockingQueue&lt;E&gt;, java.io.Serializable</span></pre></td></tr></table></figure>

<p>顾名思义，ArrayBlockingQueue底层以数组实现，而LinkedBlockingQueue底层则以链表实现。二者的优缺点比较基本也就是数组与链表的优缺点比较。因此，ArrayBlockingQueue常用做有界队列，这样就避免了因扩展数组而造成的性能损失。而LinkedBlockingQueue常做无界队列，不会因初始值过大而在一开始便吃掉系统大量的内存。</p>
<p>而BlockingQueue之所以能作为阻塞队列，其关键还在于Blocking。而所有的阻塞队列都需要考虑一个基本的问题：当读线程消费完当前队列中所有的消息后，它如何得知下一条消息何时到来呢？当写线程因阻塞队列已满而无法写入新消息时，它如何知道何时才会有空间写入呢？</p>
<p>最为简单粗暴的方式就是让读写线程在空闲时不断的轮询阻塞队列，这样做虽然理论上可行，但显然造成了很多不必要的性能损失，而且轮训的间隔周期也不好确定。</p>
<p>BlockingQueue则是在队列为空时让读线程等待，待有消息进入阻塞队列后再将其唤醒。反之写线程也是同理。那么它是如何实现的呢？</p>
<p>我们不妨以ArrayBlockingQueue为例来说明这个问题。</p>
<p>顾名思义，ArrayBlockingQueue的底层数据结构自然是一个数组，它是ArrayBlockingQueue的一个实例成员变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final Object[] items;</span></pre></td></tr></table></figure>

<p>向队列插入数据常用offer()方法或put()方法。我们先来说较为简单的offer()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean offer(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    checkNotNull(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock lock &#x3D; this.lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (count &#x3D;&#x3D; items.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            insert(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该方法定义在Queue接口中，而ArrayBlockingQueue的实现也是在保证线程安全的基础上完全遵循了Queue接口的规范：若插入成功返回true，若因容量已满插入失败则立刻返回false。并未起到阻塞的作用。它的代码逻辑也很简单清晰，就不赘述了。</p>
<p>那么，实现阻塞的大任自然是着落在另一个插入方法put()上了。该方法插入成功当然也是立刻返回true，因容量已满而导致插入失败时则会让写线程一直等待，直到阻塞队列倒出空间。</p>
<p>同理，弹出队首元素常用poll()方法或take()方法。poll()方法的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public E poll() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock lock &#x3D; this.lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (count &#x3D;&#x3D; 0) ? null : extract();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>同offer()方法，poll()方法依然是声明于Queue接口中，而ArrayBlockingQueue除了将其线程安全化之外依然没做额外的操作：若队列不为空则返回队首元素，反之则立刻返回null。</p>
<p>而take()方法就是那个阻塞的弹出方法了：若队列不为空则返回队首元素，反之则让读线程一直等待，直到队列非空。</p>
<p>为了实现put()及take()方法的功能，ArrayBlockingQueue在它的锁对象上绑定了两个Condition：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final ReentrantLock lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private final Condition notEmpty;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private final Condition notFull;</span></pre></td></tr></table></figure>

<p>看到这里我想大家已经能隐隐猜到Doug Lea的套路了：当读线程调用take()方法时，如果队列为空，则让读线程等待notEmpty。同理，当写线程调用put()方法时，若队列已满，则让写线程等待notFull。</p>
<p>那么到底是不是这样呢？我们赶紧来看看take()方法的源码吧：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public E take() throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock lock &#x3D; this.lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.lockInterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (count &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notEmpty.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return extract();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中extract()方法是在确保了非空后的取消息操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private E extract() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Object[] items &#x3D; this.items;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E x &#x3D; this.&lt;E&gt;cast(items[takeIndex]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    items[takeIndex] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeIndex &#x3D; inc(takeIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    --count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    notFull.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>除了正常的取值操作外，最只得我们关注的就是notFull.signal();这一句了：因为取了一个元素，便空出了一个位子，自然可以发一个非空的信号了。看了一个信号对应一个元素。</p>
<p>进一步的，我们也不难推测出，put()方法因为放入了一个元素，队列自然就非空了，那么应该会释放一个notEmpty.signal();才对。那么是不是这样呢，我们再来看put()方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void put(E e) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    checkNotNull(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock lock &#x3D; this.lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.lockInterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (count &#x3D;&#x3D; items.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notFull.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        insert(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private void insert(E x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    items[putIndex] &#x3D; x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    putIndex &#x3D; inc(putIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ++count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    notEmpty.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>哦耶！推测完全正确。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-CopyOnWriteArrayList</title>
    <url>/2018/02/07/Java%E5%B9%B6%E5%8F%91-CopyOnWriteArrayList/</url>
    <content><![CDATA[<p>很多时候，我们对某些容器的操作确实是并发的，然而读却远多于写。这其实是一个比较尴尬的局面：因为确实存在并发的写操作，因此必须设置线程安全策略，然后由于读远多于写，该策略登场的机会不高，毕竟纯粹是读的话即便是并发环境也是不需要容器是线程安全的。</p>
<a id="more"></a>

<p>因此，操作系统中提出了读写锁的概念，算是针对这种情况对普通的锁进行了特化。简单来说：</p>
<ul>
<li><p>情况1：若已有读者，则新的读者不会被阻塞。</p>
</li>
<li><p>情况2：若已有读者，则新的写者会被阻塞。</p>
</li>
<li><p>情况3：若已有写者，则新的读者会被阻塞。</p>
</li>
<li><p>情况4：若已有写者，则新的写者会被阻塞。</p>
</li>
</ul>
<p>实际上，只有情况1得到了优化。不过由于应用场景本就是读远多于写，因此对性能的提升还是巨大的。</p>
<p>Java API中的java.util.concurrent.CopyOnWriteArrayList也提供了类似于读写锁的功能。不过它更进一步，不仅是情况1，情况2,3也不会被阻塞了。也就是阻塞范围被缩小为只有写者-写者。</p>
<p>那么它是如何做到的呢？玄机其实就藏在它的类名中：CopyOnWrite。也就是在写操作前，会进行一次自我复制，这是典型的用空间换时间的做法。</p>
<p>具体来说，当CopyOnWriteArrayList需要被修改时，我们并不会修改原内容(这就保证了读线程的数据一致性)，而是生成一份源数据的副本，将修改都作用到这份副本上，而后再在合适的时机用修改后的副本替换源数据。</p>
<p>CopyOnWriteArrayList的类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CopyOnWriteArrayList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span></pre></td></tr></table></figure>

<p>和预想的稍有不同，看名字还以为它是ArrayList的子类，结果二者并没有直接的联系。不过既然CopyOnWriteArrayList的名称中包含ArrayList，那么它底层用于存储数据的结构就应该是一个数组。事实上也确然如此。CopyOnWriteArrayList中有如下成员变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private volatile transient Object[] array;</span></pre></td></tr></table></figure>

<p>所谓的读写，实际上就是在折腾这个数组。读操作举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return get(getArray(), index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这是最常见的以索引index取元素的方法，它调用了两个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final Object[] getArray() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return array;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private E get(Object[] a, int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return (E) a[index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这些方法的逻辑都非常简单，也没有任何的线程安全策略。</p>
<p>相对来说，写操作就要复杂一些了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock lock &#x3D; this.lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object[] elements &#x3D; getArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int len &#x3D; elements.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 生成一份副本，为容纳新元素，副本容积+1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object[] newElements &#x3D; Arrays.copyOf(elements, len + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        newElements[len] &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 用副本替换源数据</span></pre></td></tr><tr><td class="code"><pre><span class="line">        setArray(newElements);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>使用了重入锁ReentrantLock做并发控制，总体来说，逻辑还是很清晰的(相对于<a href="/2018/02/05/Java并发-ConcurrentLinkedQueue/">Java 并发-ConcurrentLinkedQueue</a>这种使用无锁CAS的容器而言)。</p>
<p>本以为其中的setArray()方法里面会有什么牛逼的套路，点开之后却发现非常简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final void setArray(Object[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    array &#x3D; a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>稍微有点不理解大神是怎么想的，这么简单的代码为啥不直接写，还要在外面包一个方法？</p>
<p>最后还需要特别声明的一点就是array是被volatile修饰的，这样才能保证写操作对a的替换修改能立刻为读操作所见。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-使用dom4j解析xml</title>
    <url>/2018/02/06/Java%E5%9F%BA%E7%A1%80-%E4%BD%BF%E7%94%A8dom4j%E8%A7%A3%E6%9E%90xml/</url>
    <content><![CDATA[<p>首先在pom文件中添加dom4j的Maven地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;dom4j&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;dom4j&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;1.6.1&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>随后创建配置文件conf.xml，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;幻想乡 设定者&#x3D;&quot;ZUN&quot; 整数值&#x3D;&quot;3&quot; 浮点数值&#x3D;&quot;2.2&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;长者&gt;八云紫&lt;&#x2F;长者&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;少女&gt;博丽灵梦&lt;&#x2F;少女&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;少女&gt;雾雨魔理沙&lt;&#x2F;少女&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;少女&gt;十六夜咲夜&lt;&#x2F;少女&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;幻想乡&gt;</span></pre></td></tr></table></figure>

<p>标签值自然是不推荐用中文的(和代码中不推荐将类名及变量名等定义为中文是一个道理)，本文这么写只是为了强调标签值其实也可以是中文的。</p>
<p>然后基本的前置准备代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SAXReader sReader &#x3D; new SAXReader();</span></pre></td></tr><tr><td class="code"><pre><span class="line">Document document &#x3D; sReader.read(new File(&quot;conf.xml&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">Element root &#x3D; document.getRootElement();</span></pre></td></tr></table></figure>

<p>其中document代表配置文件本身，而root则是根节点的元素值。根节点必须是唯一的，也就是说：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;test1&gt;&lt;&#x2F;test1&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;test2&gt;&lt;&#x2F;test2&gt;</span></pre></td></tr></table></figure>

<p>这样的xml文件是非法的。</p>
<p>从宏观上看，Element是xml文件基本的，也是唯一的数据结构。所谓xml文件就是由一个个Element以一定的架构关联在一起的集合。每个Element都由以下4部分构成：</p>
<ul>
<li><p>标签名</p>
</li>
<li><p>属性列表</p>
</li>
<li><p>文本值</p>
</li>
<li><p>子元素列表</p>
</li>
</ul>
<h1 id="标签名"><a href="#标签名" class="headerlink" title="标签名"></a>标签名</h1><p>是Element最基本的属性，用来表示元素是什么：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(root.getName());</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">幻想乡</span></pre></td></tr></table></figure>

<h1 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h1><p>属性(Attribute)列表出现在标签中，可有多个，用来表示元素有哪些属性，其格式为key-value对。</p>
<p>若示例代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List&lt;Attribute&gt; list &#x3D; root.attributes();</span></pre></td></tr><tr><td class="code"><pre><span class="line">for (Attribute attribute : list) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(attribute.getName() + &quot; : &quot; + attribute.getValue());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设定者 : ZUN</span></pre></td></tr><tr><td class="code"><pre><span class="line">整数值 : 3</span></pre></td></tr><tr><td class="code"><pre><span class="line">浮点数值 : 2.2</span></pre></td></tr></table></figure>

<p>这样便可以列出某元素中的所有属性。需要注意的是xml文件中所有的属性值都必须用双引号引起来，且attribute.getValue()的返回值为String。</p>
<p>如果我们想依元素属性的key值获得特定的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Attribute a &#x3D; root.attribute(&quot;设定者&quot;);</span></pre></td></tr></table></figure>

<p>这样便拿到了root节点中的属性”设定者”。</p>
<h1 id="文本值"><a href="#文本值" class="headerlink" title="文本值"></a>文本值</h1><p>元素的值可以为一个简单的文本，也可以是一系列的子元素。二者只能取其一。</p>
<p>文本值获取举例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Element e &#x3D; root.element(&quot;长者&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(e.getText());</span></pre></td></tr></table></figure>

<p>这样便取到了”幻想乡.长者”中存储的文本值。纯从存储的角度来讲，除了根节点外，这种元素其实都是没有意义的，因为它们完全可以化为其父元素的一个属性。不过从业务逻辑的角度考虑：属性是元素的特征，而子元素是元素的孩子，二者的含义还是有很大的区别的。</p>
<h1 id="子元素列表"><a href="#子元素列表" class="headerlink" title="子元素列表"></a>子元素列表</h1><p>可依如下方式迭代某元素下所有的子元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Element&gt; iterator &#x3D; root.elementIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">while (iterator.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Element e &#x3D; iterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(e.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">长者</span></pre></td></tr><tr><td class="code"><pre><span class="line">少女</span></pre></td></tr><tr><td class="code"><pre><span class="line">少女</span></pre></td></tr><tr><td class="code"><pre><span class="line">少女</span></pre></td></tr></table></figure>

<p>至于按照子元素标签值取某元素下的特定子元素，上一小节中已在取”幻想乡.长者”的例子中展示过。</p>
<p>这里需要注意的是，若取的标签值为”少女”，得到的子元素不止一个的时候该怎么办呢？事实上，此时如果依然采用上一小节中的root.element(“长者”)的方法返回是空：这其实很好理解，程序并不知道该在复数个结果中选择哪个返回给我们。</p>
<p>解决办法也很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Element&gt; iterator &#x3D; root.elementIterator(&quot;少女&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">while (iterator.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Element e &#x3D; iterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    System.out.println(e.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>指定标签值即可，输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">少女</span></pre></td></tr><tr><td class="code"><pre><span class="line">少女</span></pre></td></tr><tr><td class="code"><pre><span class="line">少女</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>dom4j</tag>
        <tag>xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-读取properties</title>
    <url>/2018/02/06/Spring-%E8%AF%BB%E5%8F%96properties/</url>
    <content><![CDATA[<p>本文介绍的方法为通过注解直接将properties文件中的值注入到某个已被bean管理的实例的实例成员变量中。该实例通常为单例。因为如果不是单例而其某实例变量又被注入了相同的值的话，那么该字段就不该声明为实例变量，而应是类变量。</p>
<a id="more"></a>

<p>首先创建配置文件config.properties，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cTest1&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">cTest2&#x3D;reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">cTest3&#x3D;2.4</span></pre></td></tr></table></figure>

<p>properties中可填入任意类型的值(原则上不支持中文字符，如果实在要用请用UTF-8编码，不过不推荐这么做，因为没人能直接看得懂UTF-8编码后的汉字，不利于后期配置文件的维护)。</p>
<p>properties是按照</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">key&#x3D;value</span></pre></td></tr></table></figure>

<p>的方式存储的，其中key不能包含.，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">view.frame.size&#x3D;50</span></pre></td></tr></table></figure>

<p>试图存储这样的key是不可以的。</p>
<p>随后在Spring的配置文件applicationContext.xml的beans中添加如下bean：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;config&quot; class&#x3D;&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;property name&#x3D;&quot;locations&quot;&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;array&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;value&gt;classpath:config.properties&lt;&#x2F;value&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;array&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;property&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;bean&gt;</span></pre></td></tr></table></figure>

<p>其中array标签中填入配置文件config.properties的路径。既然标签名为数组，那么自然可在其中填入多个properties，本文为了方便举例，只填入一个。</p>
<p>最后，在需注入的实例类中按如下方式声明字段(注意该类必须加载入beans的管理体系中)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int test1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String test2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private double test3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Value(&quot;#&#123;config.cTest1&#125;&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setTest1(int test1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.test1 &#x3D; test1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Value(&quot;#&#123;config.cTest2&#125;&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setTest2(String test2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.test2 &#x3D; test2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Value(&quot;#&#123;config.cTest3&#125;&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setTest3(double test3) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.test3 &#x3D; test3;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如上代码所示，当然实例变量名是可以与properties对应的key值不同的。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>properties</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-ConcurrentLinkedQueue</title>
    <url>/2018/02/05/Java%E5%B9%B6%E5%8F%91-ConcurrentLinkedQueue/</url>
    <content><![CDATA[<p>java.util.concurrent.ConcurrentLinkedQueue可以看作线程安全的高效并发的java.util.LinkedList，它应该是高并发环境下Java API提供的性能最高的队列了。它的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ConcurrentLinkedQueue&lt;E&gt; extends AbstractQueue&lt;E&gt; implements Queue&lt;E&gt;, java.io.Serializable</span></pre></td></tr></table></figure>

<h1 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h1><p>顾名思义，ConcurrentLinkedQueue底层是以链表实现的。而作为一个链表，最核心的数据结构自然是构成链表的节点了。ConcurrentLinkedQueue的节点是其自身的静态成员内部类，该节点类的全部代码如下：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static class Node&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; item,next支撑起了Node作为链表的节点的基础</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile E item;    &#x2F;&#x2F; 节点中存储的数据值</span></pre></td></tr><tr><td class="code"><pre><span class="line">    volatile Node&lt;E&gt; next;    &#x2F;&#x2F; 下一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node(E item) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NSAFE.putObject(this, itemOffset, item);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置节点中存储的数据值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 利用CAS保证线程安全性：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置时当前值与期望值相同则设置为目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param cmp E, 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param val E, 目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return boolean, true--设置成功，false--设置失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casItem(E cmp, E val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, itemOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void lazySetNext(Node&lt;E&gt; val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        UNSAFE.putOrderedObject(this, nextOffset, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置本节点的下一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 利用CAS保证线程安全性：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置时当前值与期望值相同则设置为目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param cmp Node&lt;E&gt;, 期望值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param val Node&lt;E&gt;, 目标值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return boolean, true--设置成功,false--设置失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean casNext(Node&lt;E&gt; cmp, Node&lt;E&gt; val) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return UNSAFE.compareAndSwapObject(this, nextOffset, cmp, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final sun.misc.Unsafe UNSAFE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long itemOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long nextOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            UNSAFE &#x3D; sun.misc.Unsafe.getUnsafe();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Class k &#x3D; Node.class;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            itemOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (k.getDeclaredField(&quot;item&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            nextOffset &#x3D; UNSAFE.objectFieldOffset</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (k.getDeclaredField(&quot;next&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new Error(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="head与tail"><a href="#head与tail" class="headerlink" title="head与tail"></a>head与tail</h1><p>ConcurrentLinkedQueue类中记录了两个特殊的节点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private transient volatile Node&lt;E&gt; head;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private transient volatile Node&lt;E&gt; tail;</span></pre></td></tr></table></figure>

<p>head指向队首节点，tail指向队尾节点。它们都不为null，但其中的item可能为null。</p>
<p>在ConcurrentLinkedQueue内部，可通过ConcurrentLinkedQueue.succ()完成队列自特定节点起的遍历：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final Node&lt;E&gt; succ(Node&lt;E&gt; p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Node&lt;E&gt; next &#x3D; p.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return (p &#x3D;&#x3D; next) ? head : next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>关于这个方法，需要注意的有两点：</p>
<ol>
<li><p>该方法并没有任何的并发安全控制，但由于它的访问权限为默认，因此在调用它的地方，如果必要的话，应该都会加上相应的线程安全措施。</p>
</li>
<li><p>p == next代表next指向其本身的节点，它们被称为”哨兵节点”。这种节点是指那些原则上已不存在，却因为各种原因(例如并发安全问题)暂时还未来得及删掉的节点：例如要删除的节点，或者空节点。此时因已无法通过哨兵节点拿到next，故只能返回head从头再来。</p>
</li>
</ol>
<p>按照定义，我们理所当然的会认为head指向队列的第一个节点，tail指向队列的最后的一个节点。但实际上，如果我们将链表中一次取next操作视为时间复杂度计算中的基本步骤的话，它们的准确定义为：</p>
<ul>
<li><p>head:以该节点为起点，遍历至实际有效的第一个节点的时间复杂度为O(1)。</p>
</li>
<li><p>tail:以该节点为起点，遍历至实际有效的最后一个节点的时间复杂度为O(1)。</p>
</li>
</ul>
<p>Oh,No!这是何等操蛋又让人迷茫的定义啊。我们不妨以从零开始逐个插入节点为例来加深一下蛋疼感：</p>
<p>当插入元素为列表的第奇数个节点时，tail不会实际移动，此时tail指向得是倒数第二个节点；当插入元素为列表的第偶数个节点时，tail会连续移动过两个节点，指向队列的最后一个节点。</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/ConcurrentLinkedQueue/0.png" alt="0.png"></p>
<p>弹出节点的套路也是类似：若被弹出的节点是奇数个节点时，head不会实际移动，此时head指向得是第一个节点的前一个节点，也就是一个已实际上被移除的节点；若被弹出的节点是偶数个节点时，head会连续移动两次，指向队列的第一个节点。</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/ConcurrentLinkedQueue/1.png" alt="1.png"></p>
<p>……额……</p>
<p>为什么这么搞暂时不知，姑且记下，有空详查。</p>
<h1 id="offer-方法"><a href="#offer-方法" class="headerlink" title="offer()方法"></a>offer()方法</h1><p>作为一个队列，最重要的自然就是offer()及poll()方法了。先来看offer的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean offer(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    checkNotNull(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Node&lt;E&gt; newNode &#x3D; new Node&lt;E&gt;(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 该方法的核心目标就是找到真正的最后一个节点，而后将e插入到它的后面</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (Node&lt;E&gt; t &#x3D; tail, p &#x3D; t;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 由于tail未必是真正的最后一个节点，因此第一次循环开始前设置的p&#x3D;tail也未必是最后一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 然而tail必然可以在O(1)时间内找到真正的最后一个节点，因此for循环的定义体中并未设置出口：找到前一直循环下去，总会出去的</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node&lt;E&gt; q &#x3D; p.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (q &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; q&#x3D;&#x3D;null说明p当真是最后一个节点了</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (p.casNext(null, newNode)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 成功将p.next设置为e。此时插入动作已完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 下面的这个if是专门用来处理tail奇数个节点时不动偶数个节点时连动两次的逻辑的</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (p !&#x3D; t)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; p!&#x3D;t说明上一个节点是奇数个节点，那么本节点就是偶数个节点了，要连动两次</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 并未针对casTail()的返回值做处理。也就是说不管tail更新成功与否都无妨</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 不得不说这里的设计思路屌爆了，给大神点赞：</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 设置成功：没什么说的，成了。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 设置失败：失败说明在设置时又有新节点插入了，那么本节点自然也就不可能是tail了，自然失败就失败了</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    casTail(t, newNode);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 唯一出口，也就是说本方法是不可能返回false的&#x3D;-&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; p.next设置为e失败了，再重来一次。</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 因该分支中并未修改p的值，因此再次重来p还是进入本if之前的那个p</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else if (p &#x3D;&#x3D; q)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; p是哨兵节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 首先不管怎么样，经过下面的语句后t都会被修正为t&#x3D;tail</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; t是在for循环开始前设置等于tail的，串行环境下应始终有t&#x3D;tail才是</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 如果执行下面语句前t都不等于tail了，说明这个for循环的根基已被动摇，只能从head开始遍历</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 如果将本方法的思路视为乐观锁，那么从head开始遍历实在是最糟糕的情况了</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 如果执行下面语句前依然有t&#x3D;tail，说明本for循环等根基还在，可以从t(也就是此时最新的tail)再次来过</span></pre></td></tr><tr><td class="code"><pre><span class="line">            p &#x3D; (t !&#x3D; (t &#x3D; tail)) ? t : head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; q并非最后一个节点，还要再向后遍历</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 简单来看，直接设置p&#x3D;q即可，这样便可实现向后遍历</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 不过大神提到了一种特殊情况：p不是t了(也就是p已经移动过了)且t不是tail了(前面已经提到，串行环境下是不可能的。显然是出现了并发问题，动摇了本for循环的根基)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 此时要从t开始遍历，依然是乐观锁思想下的悲观情况</span></pre></td></tr><tr><td class="code"><pre><span class="line">            p &#x3D; (p !&#x3D; t &amp;&amp; t !&#x3D; (t &#x3D; tail)) ? t : q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>代码其实并不长，但却不大好理解(我写的注释比代码还多)。不过简单看一下就可以发现：该方法并没有使用synchronized或是Lock，它只调用了两个方法casNext(),casTail()，而这两个方法也只用到了CAS。</p>
<p>唔，=-=。。。</p>
<p>这说明了什么！这说明了什么！！这说明了什么！！！</p>
<p>这说明ConcurrentLinkedQueue是一个无锁的队列，它只用底层的CAS就保证了线程安全性！</p>
<p>难怪doc都说ConcurrentLinkedQueue是高并发环境下Java API提供的性能最高的队列，给Doug Lea爸爸跪了。</p>
<p>需要强调一下的是：t!=t并不是原子操作，也就说是先取一次t存起来，然后再取第二次t，而后比较这两次取得的t的结果。因此在并发环境中，t!=t返回true是完全有可能。我们不妨以一个小例子来证明一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object o1 &#x3D; new Object();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(o1 !&#x3D; o1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们用javap反编译一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;D:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2018-2-6; size 487 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum 76721705c54f8bd636869e0cfab7f65e</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #2.#18         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Class              #19            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; Fieldref           #20.#21        &#x2F;&#x2F;  java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Methodref          #22.#23        &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream.println:(Z)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Class              #24            &#x2F;&#x2F;  Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               main</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               ([Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Utf8               StackMapTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Class              #25            &#x2F;&#x2F;  &quot;[Ljava&#x2F;lang&#x2F;String;&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Class              #19            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; Class              #26            &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; NameAndType        #6:#7          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #19 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #20 &#x3D; Class              #27            &#x2F;&#x2F;  java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #21 &#x3D; NameAndType        #28:#29        &#x2F;&#x2F;  out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #22 &#x3D; Class              #26            &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #23 &#x3D; NameAndType        #30:#31        &#x2F;&#x2F;  println:(Z)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #24 &#x3D; Utf8               Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #25 &#x3D; Utf8               [Ljava&#x2F;lang&#x2F;String;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #26 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #27 &#x3D; Utf8               java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #28 &#x3D; Utf8               out</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #29 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #30 &#x3D; Utf8               println</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #31 &#x3D; Utf8               (Z)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 1: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public static void main(java.lang.String[]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;3, locals&#x3D;2, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: new           #2                  &#x2F;&#x2F; class java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">         3: dup           </span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         7: astore_1      </span></pre></td></tr><tr><td class="code"><pre><span class="line">         8: getstatic     #3                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        11: aload_1       </span></pre></td></tr><tr><td class="code"><pre><span class="line">        12: aload_1       </span></pre></td></tr><tr><td class="code"><pre><span class="line">        13: if_acmpeq     20</span></pre></td></tr><tr><td class="code"><pre><span class="line">        16: iconst_1      </span></pre></td></tr><tr><td class="code"><pre><span class="line">        17: goto          21</span></pre></td></tr><tr><td class="code"><pre><span class="line">        20: iconst_0      </span></pre></td></tr><tr><td class="code"><pre><span class="line">        21: invokevirtual #4                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Z)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">        24: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 4: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 5: 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 6: 24</span></pre></td></tr><tr><td class="code"><pre><span class="line">      StackMapTable: number_of_entries &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">           frame_type &#x3D; 255 &#x2F;* full_frame *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          offset_delta &#x3D; 20</span></pre></td></tr><tr><td class="code"><pre><span class="line">          locals &#x3D; [ class &quot;[Ljava&#x2F;lang&#x2F;String;&quot;, class java&#x2F;lang&#x2F;Object ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          stack &#x3D; [ class java&#x2F;io&#x2F;PrintStream ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">           frame_type &#x3D; 255 &#x2F;* full_frame *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          offset_delta &#x3D; 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">          locals &#x3D; [ class &quot;[Ljava&#x2F;lang&#x2F;String;&quot;, class java&#x2F;lang&#x2F;Object ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          stack &#x3D; [ class java&#x2F;io&#x2F;PrintStream, int ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们来看main方法，o1于指令7被存入局部变量表索引为1的位置。然后11,12连取了两次，随后13行才开始计较。很显然，在并发环境中，11,12两行的取值操作并非线程安全的。</p>
<h1 id="poll-方法"><a href="#poll-方法" class="headerlink" title="poll()方法"></a>poll()方法</h1><p>代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public E poll() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 这里用了因为不太好驾驭以及可能导致代码混乱而不被推荐的goto</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; ...</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; 大神这么屌当然是可以驾驭的，所以没毛病</span></pre></td></tr><tr><td class="code"><pre><span class="line">    restartFromHead:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (Node&lt;E&gt; h &#x3D; head, p &#x3D; h, q;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 由于head未必是真正的第一个节点，因此第一次循环开始前设置的p&#x3D;head也未必是第一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 然而head必然可以在O(1)时间内找到真正的第一个节点，因此for循环的定义体中并未设置出口：找到前一直循环下去，总会出去的</span></pre></td></tr><tr><td class="code"><pre><span class="line">                E item &#x3D; p.item;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (item !&#x3D; null &amp;&amp; p.casItem(item, null)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 进入此if有两个条件：</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 1.item!&#x3D;null，说明找到了，p就是第一个节点</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 2.设置p.item为null完成。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 此时第一个元素已从队列中移除。核心操作已完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#x2F;&#x2F; 下面的这个if是专门用来处理head奇数个节点时不动偶数个节点时连动两次的逻辑的</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (p !&#x3D; h)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#x2F;&#x2F; 该方法返回值为空，内部稍显复杂，并不像offer()方法时的casTail()那么简单，就不深入分析了</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        updateHead(h, ((q &#x3D; p.next) !&#x3D; null) ? q : p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 返回被移除元素的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return item;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else if ((q &#x3D; p.next) &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 准备进入本if的判定说明上一个if没过，也就是说p此时是指在第一个节点前面的某个废弃节点上的</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 再说本if的判定内容，p的下一个节点为null说明就没第一个节点了(因为p此时必是指在废弃节点上的)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    updateHead(h, p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else if (p &#x3D;&#x3D; q)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 进入本if的判定说明上一个if没过，此时q&#x3D;p.next</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 若有p&#x3D;q则说明p是哨兵，触发了乐观锁思路下的悲观情况，goto到最重头再来</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    continue restartFromHead;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 前面的if都过了，说明</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 1.p是指在第一个节点前的某个废弃节点上的</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 2.p的下一个节点不为空(也就是说起码当前是看不出来队列是否为空的)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 3.p不是哨兵</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 那么很自然的，就继续向后遍历了</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    p &#x3D; q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然本文只是简单的介绍了ConcurrentLinkedQueue的offer()及poll()方法，但我们已经能体会到只用CAS实现无锁的线程安全容器的困难程度了：大神写好的代码读着都费劲，更别说自己去设计了。因此虽然无锁的性能确实很高，但在一般的程序开发中的应用却极少。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java AWT-动画</title>
    <url>/2018/02/03/JavaAWT-%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>我们先创建基本的窗体：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">	super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>所谓动画，就是快速的绘制不同的静态画面，让人看起来”画动了”。AWT中绘制组件的流程为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repaint() —&gt; update() —&gt; paint()</span></pre></td></tr></table></figure>

<p>要实现动画，最简单的方式就是写一个线程，然后高频率的repaint()即可。</p>
<p>则上述程序可改造为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Font;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.setFont(new Font(null, Font.BOLD, 30));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawString(&quot;&quot; + (System.currentTimeMillis() &#x2F; 100), 100, 100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    GameFrame.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(40);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>每隔40ms刷新一次，为体现刷新效果，我们绘制了秒数随时间的变化。运行后，可以观测到秒数确实在按要求变动，但闪烁情况极其严重。</p>
<p>这是为什么呢？前文我们已经提到，AWT中绘制组件的流程为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repaint() —&gt; update() —&gt; paint()</span></pre></td></tr></table></figure>

<p>我们可以看一下update()的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (isShowing()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (! (peer instanceof LightweightPeer)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            g.clearRect(0, 0, width, height);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        paint(g);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很明显，所谓的更新，其实是首先进行了清屏，也就是g.clearRect()，随后再重新画一遍。不断的清了画清了画，自然会导致闪烁。</p>
<p>既然找到了原因，那么解决思路就很明确了，自然是要重写update()方法才行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Font;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.setFont(new Font(null, Font.BOLD, 30));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawString(&quot;&quot; + (System.currentTimeMillis() &#x2F; 100), 100, 100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    GameFrame.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(40);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image bImage &#x3D; super.createImage(this.getWidth(), this.getHeight());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics bg &#x3D; bImage.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.paint(bg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bg.dispose();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(bImage, 0, 0, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时闪烁情况得到了极大的缓解，已无法被人眼所见。</p>
<p>下面我们再来看一个小例子，实现一个匀速直线运动，遇到边框会反弹的小球：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int x &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int y &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean ifXPositive &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean ifYPositive &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int titleWidth &#x3D; 40;    &#x2F;&#x2F; 标题栏宽度</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int padding &#x3D; 10;    &#x2F;&#x2F; 左右下留白宽度</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int diameter &#x3D; 20;    &#x2F;&#x2F; 小球直径</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int xLength &#x3D; 3;    &#x2F;&#x2F; 距上次刷新x轴移动距离的绝对值</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int yLength &#x3D; 3;    &#x2F;&#x2F; 距上次刷新y轴移动距离的绝对值</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillOval(this.x, this.y, diameter, diameter);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.x &#x3D; this.ifXPositive ? this.x + xLength : this.x - xLength;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.y &#x3D; this.ifYPositive ? this.y + yLength : this.y - yLength;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.x &lt;&#x3D; padding) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.x &#x3D; padding;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifXPositive &#x3D; !this.ifXPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.x &gt;&#x3D; this.getWidth() - padding - diameter) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.x &#x3D; this.getWidth() - padding - diameter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifXPositive &#x3D; !this.ifXPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.y &lt;&#x3D; titleWidth) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.y &#x3D; titleWidth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifYPositive &#x3D; !this.ifYPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.y &gt;&#x3D; this.getHeight() - padding - diameter) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.y &#x3D; this.getHeight() - padding - diameter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifYPositive &#x3D; !this.ifYPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    GameFrame.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(40);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image bImage &#x3D; super.createImage(this.getWidth(), this.getHeight());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics bg &#x3D; bImage.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.paint(bg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bg.dispose();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(bImage, 0, 0, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上例中小球将永久运动下去，我们也可以在小球的运动过程中让其逐渐损失速度，最终停止：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Image;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int x &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int y &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean ifXPositive &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean ifYPositive &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * int, 距上次刷新x轴移动距离的绝对值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int xLength &#x3D; 300;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * int, 距上次刷新y轴移动距离的绝对值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int yLength &#x3D; 300;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(this.new RepaintRunnable()).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int titleWidth &#x3D; 40;    &#x2F;&#x2F; 标题栏宽度</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int padding &#x3D; 10;    &#x2F;&#x2F; 左右下留白宽度</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int diameter &#x3D; 20;    &#x2F;&#x2F; 小球直径</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final double decay &#x3D; 0.99999;    &#x2F;&#x2F; 两次时间间隔间的速度衰减</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.fillOval(this.x, this.y, diameter, diameter);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.xLength &#x3D; (int)(this.xLength * decay);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.yLength &#x3D; (int)(this.yLength * decay);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.x &#x3D; this.ifXPositive ? this.x + this.xLength : this.x - this.xLength;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.y &#x3D; this.ifYPositive ? this.y + this.yLength : this.y - this.yLength;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.x &lt;&#x3D; padding) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.x &#x3D; padding;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifXPositive &#x3D; !this.ifXPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.x &gt;&#x3D; this.getWidth() - padding - diameter) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.x &#x3D; this.getWidth() - padding - diameter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifXPositive &#x3D; !this.ifXPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.y &lt;&#x3D; titleWidth) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.y &#x3D; titleWidth;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifYPositive &#x3D; !this.ifYPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.y &gt;&#x3D; this.getHeight() - padding - diameter) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.y &#x3D; this.getHeight() - padding - diameter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.ifYPositive &#x3D; !this.ifYPositive;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class RepaintRunnable implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    GameFrame.this.repaint();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(40);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void update(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image bImage &#x3D; super.createImage(this.getWidth(), this.getHeight());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Graphics bg &#x3D; bImage.getGraphics();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.paint(bg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        bg.dispose();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(bImage, 0, 0, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java AWT</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GUI</tag>
        <tag>AWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java AWT-基本操作</title>
    <url>/2018/02/03/JavaAWT-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="创建基本的窗体"><a href="#创建基本的窗体" class="headerlink" title="创建基本的窗体"></a>创建基本的窗体</h1><p>AWT中封装窗体逻辑的类为java.awt.Frame，通常我们通过继承它来使用它的功能，它的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.awt;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Frame extends Window implements MenuContainer</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>下面我们给出Frame常用方法的定义。首先给出Frame继承自它的父类java.awt.Window的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 设定窗体相对于屏幕左上角的位置为(x,y)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void setLocation(int x, int y)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 设定窗体的宽为width，高为height</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void setSize(int width, int height)</span></pre></td></tr></table></figure>

<p>然后我们就可以开始写第一个小例子了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后无输出，程序也无法终止。之所以无输出，是因为窗体默认是不可见的。而之所以无法终止，是因为窗体虽然是不可见的，但它的确存在。</p>
<p>为了让窗体可见，我们还要使用Frame继承自它的父类java.awt.Window中的另一个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * true--窗体可见,false--窗体不可见</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 默认为false</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void setVisible(boolean b)</span></pre></td></tr></table></figure>

<p>相应的代码改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时运行程序，会按设定生成所需的窗体：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/0.jpg" alt="0.jpg"></p>
<p>之所以不默认设定窗体可见，是为了使得窗体可见的时机可控。很多时候，窗体的加载是一个耗时的操作，我们并不希望给用户展示一个”半成品”，此时我们就可以待窗体加载到”可以见人了”的程度后再设定为可见。</p>
<p>至此我们已绘制出了窗体，不过当我们点击窗体右上角的叉时却无法关闭窗体，其原因为默认情况下并没有给”点击叉”这一行为关联任何动作。因此我们需要自行添加窗口监听设定被触发的行为。添加窗口监听的方法依然在java.awt.Window中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized void addWindowListener(WindowListener l)</span></pre></td></tr></table></figure>

<p>不妨稍微插一句，至此为止我们介绍的所有Frame中的方法都不是存在于Frame中的，而是Frame继承自其父类Window的。事实上，我们后文介绍的方法也基本都是这个套路。核心的骨架已在Window中确定好，Frame只负责封装一些小的细节。</p>
<p>引入监听器后，代码改进为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">	super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这里我们让”点击叉”这个行为触发程序的结束。现在我们再运行程序，就可以通过点击右上角的叉结束程序，关闭窗体了。之所以不将结束程序设定为默认操作，是为了给程序员留出编码空间，例如，我们可以在真正关闭前设定再弹出一个框:”是否确定退出？”做二次确认。事实上，绝大多数的桌面应用软件也都是这么做的。</p>
<h1 id="绘制窗体中的组件"><a href="#绘制窗体中的组件" class="headerlink" title="绘制窗体中的组件"></a>绘制窗体中的组件</h1><p>绘制方法依然在java.awt.Window中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void paint(Graphics g)</span></pre></td></tr></table></figure>

<p>其中Graphics可以理解为画笔。通常我们通过重写该方法来封装自身的业务逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">	super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后并未绘制任何组件：这是理所当然的，因为paint()方法为空。下面我们就来举一个绘制的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.awt.Frame;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.Graphics;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowAdapter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.awt.event.WindowEvent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class GameFrame extends Frame &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void launchFrame() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setLocation(700, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.setSize(400, 300);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.addWindowListener(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new WindowAdapter() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void windowClosing(WindowEvent e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.exit(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        );</span></pre></td></tr><tr><td class="code"><pre><span class="line">	super.setVisible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawLine(100, 100, 200, 200);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new GameFrame().launchFrame();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/1.jpg" alt="1.jpg"></p>
<p>这样就绘制了一条线段。由此可见，绘制组件最终是要着落在Graphics这个类上的。</p>
<h1 id="Graphics绘制基本图形"><a href="#Graphics绘制基本图形" class="headerlink" title="Graphics绘制基本图形"></a>Graphics绘制基本图形</h1><p>下面我们会介绍Graphics类常用的绘制基本图形的方法，基本沿用前文代码，若有需要可能会改变窗体大小。</p>
<p>首先是上一小节已经展示的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 绘制一条线段</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x1 int, 端点1横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param y1 int, 端点1纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x2 int, 端点2横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param y2 int, 端点2纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void drawLine(int x1, int y1, int x2, int y2)</span></pre></td></tr></table></figure>

<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 绘制一个矩形</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x int, 左上角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param y int, 左上角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param width int, 矩形宽</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param height int, 矩形高</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void drawRect(int x, int y, int width, int height)</span></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.drawRect(0, 0, 100, 100);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/2.jpg" alt="2.jpg"></p>
<p>上一个绘制线段的例子可能看得不够真切，不过本例中就暴露了一个需要注意的点：绘制图形时会以窗体的外轮廓为起点，并不会让出标题栏的宽度。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 绘制一个椭圆</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 给定的入参实质上是在确定椭圆所属的外切矩形</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x int, 左上角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param y int, 左上角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param width int, 矩形宽</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param height int, 矩形高</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void drawOval(int x, int y, int width, int height)</span></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.drawOval(100, 100, 100, 200);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/3.jpg" alt="3.jpg"></p>
<p>特别的，若外切矩形是一个正方形，绘制出的自然是一个圆了，示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.drawOval(100, 100, 200, 200);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/4.jpg" alt="4.jpg"></p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 绘制文字</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x String, 文字内容</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x int, 第一个字符的横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param y int, 字符串的纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void drawString(String str, int x, int y)</span></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.drawString(&quot;博丽灵梦&quot;, 0, 100);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/5.jpg" alt="5.jpg"></p>
<p>字符串并没有打全，其原因就在于其实不仅仅是标题栏，整个窗体其实围了一圈的外边框，而这一圈外边框都是无法绘制图形的，但是计算坐标又是以窗体外边框为起点。不得不说，这可着实让人蛋疼。</p>
<p>如果想改变字体，可自定义字体类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.setFont(new Font(&quot;楷体&quot;, Font.BOLD, 20));</span></pre></td></tr><tr><td class="code"><pre><span class="line">g.drawString(&quot;博丽灵梦&quot;, 100, 100);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/6.jpg" alt="6.jpg"></p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 绘制一个填充矩形</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x int, 左上角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param y int, 左上角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param width int, 矩形宽</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param height int, 矩形高</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract void fillRect(int x, int y, int width, int height)</span></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.fillRect(100, 100, 100, 200);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/7.jpg" alt="7.jpg"></p>
<p>同理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract void fillOval(int x, int y, int width, int height)</span></pre></td></tr></table></figure>

<p>则可绘制一个填充椭圆。</p>
<h1 id="Graphics改变画笔颜色"><a href="#Graphics改变画笔颜色" class="headerlink" title="Graphics改变画笔颜色"></a>Graphics改变画笔颜色</h1><p>在绘制前修改画笔颜色即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.setColor(Color.BLUE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">g.fillRect(100, 100, 100, 200);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/8.jpg" alt="8.jpg"></p>
<p>为避免画笔颜色被修改乱套，建议每次修改前保存下，用完后再改回去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Color base &#x3D; g.getColor();</span></pre></td></tr><tr><td class="code"><pre><span class="line">g.setColor(Color.BLUE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">g.fillRect(100, 100, 100, 200);</span></pre></td></tr><tr><td class="code"><pre><span class="line">g.setColor(base);</span></pre></td></tr></table></figure>

<h1 id="Graphics绘制图片"><a href="#Graphics绘制图片" class="headerlink" title="Graphics绘制图片"></a>Graphics绘制图片</h1><p>事实上，绘制基本图形的方法上文只介绍了其中很小的一本分，之所以不都介绍完，是因为实际写代码时基本用不到，而用不到的原因则在于：</p>
<p><strong>实在是太TM丑了！</strong></p>
<p>实际编程中，我们基本只会绘制一种组件：那就是图片。</p>
<p>既然要绘制图片，第一步自然就是将图片加载至内存：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 加载默认图片目录下的图片</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 图片默认目录为：src&#x2F;main&#x2F;resources&#x2F;images</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param path String, 图片相对于图片默认目录的路径。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *             例如图片为src&#x2F;main&#x2F;resources&#x2F;images&#x2F;a.jpg</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *             则path&#x3D;a.jpg</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @return Image, 存入内存中的图片信息</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @throws IOException </span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public static Image loadImage(String path) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    URL url &#x3D; Utils.class.getClassLoader()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                         .getResource(&quot;images&#x2F;&quot; + path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    BufferedImage bImage &#x3D; ImageIO.read(url);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return bImage;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>测试用图命名为test.jpg，丢到images目录下。test.jpg为：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/9.jpg" alt="9.jpg"></p>
<p>然后我们就可以开始绘制了，此时的paint方法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void paint(Graphics g) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Image image &#x3D; Utils.loadImage(&quot;test.jpg&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g.drawImage(image, 100, 100, null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中用于绘制的方法的定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 绘制图片</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param img Image, 加载至内存中的图片</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param x int, 目标位置左上角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param y int, 目标位置左上角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param observer ImageObserver, 通常传入null即可</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract boolean drawImage(Image img, int x, int y, ImageObserver observer)</span></pre></td></tr></table></figure>

<p>输出为：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/10.jpg" alt="10.jpg"></p>
<p>很显然，该方法取了源图片全图，并且不加任何修改。如果只想取部分图片，或是调整图片大小比例，可使用如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 绘制图片</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param img Image, 加载至内存中的图片</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param dx1 int, 目标图片左上角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param dy1 int, 目标图片左上角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param dx2 int, 目标图片右下角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param dy2 int, 目标图片右下角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param sx1 int, 源图片左上角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param sy1 int, 源图片左上角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param sx2 int, 源图片右下角横坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param sy2 int, 源图片右下角纵坐标</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param observer ImageObserver, 通常传入null即可</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract boolean drawImage(Image img,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  int dx1, int dy1, int dx2, int dy2,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  int sx1, int sy1, int sx2, int sy2,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  ImageObserver observer);</span></pre></td></tr></table></figure>

<p>乍一看入参可真他娘的多啊，好麻烦的样子。仔细看来其实很有条理：(sx1,sy1)-(sx2,sy2)确定了源图片的取图区域，(dx1,dy1)-(dx2,dy2)确定了目标位置的放置区域。这两份区域大小，比例可不相同，进而使得绘制出的图片的大小，比例不同于源图。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g.drawImage(image</span></pre></td></tr><tr><td class="code"><pre><span class="line">           , 17, 50, 517, 550</span></pre></td></tr><tr><td class="code"><pre><span class="line">           , 400, 150, 900, 650</span></pre></td></tr><tr><td class="code"><pre><span class="line">           , null);</span></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/images/blog_pic/JavaAWT/%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/11.jpg" alt="11.jpg"></p>
<h1 id="绘制通用控件"><a href="#绘制通用控件" class="headerlink" title="绘制通用控件"></a>绘制通用控件</h1><p>如果要绘制按钮，文本输入框，选择框之类的控件，可参见<a href="">Java 设计模式-16.Mediator模式</a>中的示例程序。</p>
]]></content>
      <categories>
        <category>Java AWT</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GUI</tag>
        <tag>AWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Java GUI-碎片</title>
    <url>/2018/02/03/JavaGUI-%E7%A2%8E%E7%89%87/</url>
    <content><![CDATA[<h1 id="AWT与Swing"><a href="#AWT与Swing" class="headerlink" title="AWT与Swing"></a>AWT与Swing</h1><p>Java的GUI(Graphical User Interface)主要有两大版本：</p>
<ul>
<li>AWT(Abstract Window Toolkit):已过时，例如Frame</li>
<li>Swing:AWT的功能升级版，推荐使用，例如JFrame(命名上通常都是AWT对应功能的类前加J)</li>
</ul>
<p>不过实话来说，Java在桌面应用软件领域发展得并不好，最大的用途大概也就是给学习Java的学生布置课后作业了(汗)，因此较真AWT或Swing该用哪一个其实是然并卵的，因为工作中基本用不到这方面的知识。</p>
<a id="more"></a>

<h1 id="物体位置标记规则"><a href="#物体位置标记规则" class="headerlink" title="物体位置标记规则"></a>物体位置标记规则</h1><p>GUI二维编程中，坐标系的起点位于左上角，x轴向右正向延伸，y轴向下正向延伸(即可用区域永远在第一象限)，单位为像素(px)。</p>
<p>我们不妨以最外层的，屏幕与游戏窗体间的关系为例：</p>
<p><img src="/images/blog_pic/JavaGUI/%E7%A2%8E%E7%89%87/0.jpg" alt="0.jpg"></p>
<p>则窗体的位置可确定为(x1,y1)。</p>
<p>同理，在窗体内部我们也可以确定任意组件的坐标：</p>
<p><img src="/images/blog_pic/JavaGUI/%E7%A2%8E%E7%89%87/1.jpg" alt="1.jpg"></p>
<p>则组件的位置可确定为(x2,y2)。需要注意的是，此时已进入了窗体，因此使用的都是相对于窗体的位置。</p>
<p>窗体必然是一个矩形，因此只要确定了左上角顶点的坐标以及窗体的长与宽，即可完全确定一个窗体。对于窗体中的组件，只要其形状为矩形，那么同理也可完全确定。</p>
<p>那么组件不是矩形的时候该怎么办呢？</p>
<p>GUI的解决策略为：不办！也就是说它会将一切组件视为矩形，实际形状不是矩形的要放到一个矩形的组件中(顺带说一句，三维编程的思路同理，组件是被放到长方体中的)。</p>
<p>这样的好处是简单粗暴，坏处就是精度较低。举个例子，在这样的规则下，检测两个组件是否碰撞实际上是在判断它们所属的矩形是否相交。比如两个圆，实际上本身并未碰撞，却可能因它们所属的矩形碰撞了而被判定为碰撞。</p>
]]></content>
      <categories>
        <category>Java GUI</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-容器线程安全化方法</title>
    <url>/2018/02/01/Java%E5%B9%B6%E5%8F%91-%E5%AE%B9%E5%99%A8%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E5%8C%96%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>Java API中提供了常见的线程安全的容器，可参见<a href="/2018/01/24/Java并发-线程安全的容器/">Java 并发-线程安全的容器</a>。这些容器专为并发环境设计，性能极高。但是在串-并行混合，对性能要求又不高时，比起专门声明新的线程安全的容器，我们更希望能有一个简单的方式将线程不安全的容器改造为线程安全的。这部分功能被封装在java.util.Collections工具类的容器线程安全化方法中：这些方法接收一个特定的容器，然后将它改造为线程安全的容器后返回:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; Collection&lt;T&gt; synchronizedCollection(Collection&lt;T&gt; c)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static &lt;T&gt; List&lt;T&gt; synchronizedList(List&lt;T&gt; list)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static &lt;T&gt; Set&lt;T&gt; synchronizedSet(Set&lt;T&gt; s)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static &lt;K,V&gt; Map&lt;K,V&gt; synchronizedMap(Map&lt;K,V&gt; m)</span></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="synchronizedCollection"><a href="#synchronizedCollection" class="headerlink" title="synchronizedCollection"></a>synchronizedCollection</h1><p>全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; Collection&lt;T&gt; synchronizedCollection(Collection&lt;T&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new SynchronizedCollection&lt;&gt;(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>它的返回值是Collections的静态成员内部类，全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class SynchronizedCollection&lt;E&gt; implements Collection&lt;E&gt;, Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 3053995032091335093L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Collection&lt;E&gt; c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Object mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedCollection(Collection&lt;E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (c&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.c &#x3D; c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mutex &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedCollection(Collection&lt;E&gt; c, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.c &#x3D; c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mutex &#x3D; mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.size();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.isEmpty();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean contains(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.contains(o);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object[] toArray() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.toArray();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.toArray(a);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return c.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.add(e);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean remove(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.remove(o);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsAll(Collection&lt;?&gt; coll) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.containsAll(coll);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; coll) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.addAll(coll);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean removeAll(Collection&lt;?&gt; coll) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.removeAll(coll);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean retainAll(Collection&lt;?&gt; coll) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.retainAll(coll);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;c.clear();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.toString();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void writeObject(ObjectOutputStream s) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;s.defaultWriteObject();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>原来如此，SynchronizedCollection以mutex为监视器，在c的方法外部都包装上了一层synchronized。具体的业务逻辑依然是调用c的方法，确实相当于将原容器线程安全化了。不过本质上来说，这和在容器的外部代码中使用synchronized是一回事，性能不高也是理所当然的了。</p>
<p>SynchronizedCollection共有两个构造函数，其区别就在于是否指定mutex。Collections.SynchronizedCollection()并未传入监视器对象，此时监视器对象将为SynchronizedCollection实例本身。</p>
<p>那么指定mutex的那个构造函数又有什么用处呢？Collections有如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static &lt;T&gt; Collection&lt;T&gt; synchronizedCollection(Collection&lt;T&gt; c, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new SynchronizedCollection&lt;&gt;(c, mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该方法供java.util包内部调用，并非暴露出去的公共方法，故在此就不深究了。</p>
<h1 id="synchronizedList"><a href="#synchronizedList" class="headerlink" title="synchronizedList"></a>synchronizedList</h1><p>套路与Collections.SynchronizedCollection()相同，因此只贴出相关代码，就不再赘述细节了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; List&lt;T&gt; synchronizedList(List&lt;T&gt; list) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return (list instanceof RandomAccess ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new SynchronizedRandomAccessList&lt;&gt;(list) :</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new SynchronizedList&lt;&gt;(list));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">static &lt;T&gt; List&lt;T&gt; synchronizedList(List&lt;T&gt; list, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return (list instanceof RandomAccess ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new SynchronizedRandomAccessList&lt;&gt;(list, mutex) :</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new SynchronizedList&lt;&gt;(list, mutex));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">static class SynchronizedList&lt;E&gt; extends SynchronizedCollection&lt;E&gt; implements List&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; -7754090372962971524L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    final List&lt;E&gt; list;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedList(List&lt;E&gt; list) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(list);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.list &#x3D; list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedList(List&lt;E&gt; list, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(list, mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.list &#x3D; list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this &#x3D;&#x3D; o)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.equals(o);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.hashCode();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.get(index);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E set(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.set(index, element);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;list.add(index, element);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.remove(index);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int indexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.indexOf(o);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int lastIndexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.lastIndexOf(o);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return list.addAll(index, c);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListIterator&lt;E&gt; listIterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return list.listIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListIterator&lt;E&gt; listIterator(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return list.listIterator(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return new SynchronizedList&lt;&gt;(list.subList(fromIndex, toIndex),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                        mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Object readResolve() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (list instanceof RandomAccess</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ? new SynchronizedRandomAccessList&lt;&gt;(list)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                : this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">static class SynchronizedRandomAccessList&lt;E&gt; extends SynchronizedList&lt;E&gt; implements RandomAccess &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedRandomAccessList(List&lt;E&gt; list) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(list);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedRandomAccessList(List&lt;E&gt; list, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(list, mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return new SynchronizedRandomAccessList&lt;&gt;(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                list.subList(fromIndex, toIndex), mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1530674583602358482L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Object writeReplace() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new SynchronizedList&lt;&gt;(list);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="synchronizedSet"><a href="#synchronizedSet" class="headerlink" title="synchronizedSet"></a>synchronizedSet</h1><p>同synchronizedList，只贴出代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; Set&lt;T&gt; synchronizedSet(Set&lt;T&gt; s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new SynchronizedSet&lt;&gt;(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">static &lt;T&gt; Set&lt;T&gt; synchronizedSet(Set&lt;T&gt; s, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new SynchronizedSet&lt;&gt;(s, mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">static class SynchronizedSet&lt;E&gt; extends SynchronizedCollection&lt;E&gt; implements Set&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 487447009682186044L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedSet(Set&lt;E&gt; s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedSet(Set&lt;E&gt; s, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(s, mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this &#x3D;&#x3D; o)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.equals(o);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return c.hashCode();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="synchronizedMap"><a href="#synchronizedMap" class="headerlink" title="synchronizedMap"></a>synchronizedMap</h1><p>这个就稍稍有些特殊了，不过我们还是先贴出代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static &lt;K,V&gt; Map&lt;K,V&gt; synchronizedMap(Map&lt;K,V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new SynchronizedMap&lt;&gt;(m);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private static class SynchronizedMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1978198479659022715L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final Map&lt;K,V&gt; m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Object      mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedMap(Map&lt;K,V&gt; m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (m&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.m &#x3D; m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mutex &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SynchronizedMap(Map&lt;K,V&gt; m, Object mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.m &#x3D; m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.mutex &#x3D; mutex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.size();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.isEmpty();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsKey(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.containsKey(key);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsValue(Object value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.containsValue(value);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V get(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.get(key);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V put(K key, V value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.put(key, value);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public V remove(Object key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.remove(key);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void putAll(Map&lt;? extends K, ? extends V&gt; map) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;m.putAll(map);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;m.clear();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private transient Set&lt;K&gt; keySet &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private transient Collection&lt;V&gt; values &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Set&lt;K&gt; keySet() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (keySet&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                keySet &#x3D; new SynchronizedSet&lt;&gt;(m.keySet(), mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return keySet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (entrySet&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                entrySet &#x3D; new SynchronizedSet&lt;&gt;(m.entrySet(), mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return entrySet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Collection&lt;V&gt; values() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (values&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                values &#x3D; new SynchronizedCollection&lt;&gt;(m.values(), mutex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return values;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this &#x3D;&#x3D; o)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.equals(o);&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.hashCode();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;return m.toString();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void writeObject(ObjectOutputStream s) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (mutex) &#123;s.defaultWriteObject();&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>之所以说它有些特殊，是因为Map的线程安全化方法被放在Collections类中是略有不妥的，估计是Java API的设计人员想将所有的容器线程安全化方法集中到一个类中吧。正因为如此，SynchronizedMap的访问权限是私有，且没有传入监视器对象的Collections.synchronizedMap()。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程安全的容器</title>
    <url>/2018/01/24/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p>为了降低开发人员进行并发编程的工作成本，Java API提供了常见的线程安全的容器(链表，Map，队列等)。这些容器大多位于java.util.concurrent包中(其他位置也零星的分布着线程安全的容器，例如java.util.Vector，这些容器的性能往往较差)，常用的列举如下：</p>
<ul>
<li><p>java.util.concurrent.ConcurrentHashMap: 可以看作线程安全的高效并发的java.util.HashMap。</p>
</li>
<li><p>java.util.concurrent.CopyOnWriteArrayList: 顾名思义，该容器属于java.util.ArrayList一系。在读多写少的场合，它的性能远高于java.util.Vector。详见<a href="/2018/02/07/Java并发-CopyOnWriteArrayList/">Java 并发-CopyOnWriteArrayList</a>。</p>
</li>
<li><p>java.util.concurrent.ConcurrentLinkedQueue: 使用链表实现，可以看作线程安全的高效并发的LinkedList。详见<a href="/2018/02/05/Java并发-ConcurrentLinkedQueue/">Java 并发-ConcurrentLinkedQueue</a>。</p>
</li>
<li><p>java.util.concurrent.BlockingQueue: java.util.Queue接口的子接口，是线程安全的阻塞队列，常用作并发编程中的缓冲区。Java API提供了它的数组，链表等具体的实现。详见<a href="/2018/02/07/Java并发-BlockingQueue/">Java 并发-BlockingQueue</a>。</p>
</li>
<li><p>java.util.concurrent.ConcurrentSkipListMap: 这是一个底层以Map实现的线程安全的跳表，可进行高效的查找。详见<a href="/2018/02/07/Java并发-ConcurrentSkipListMap/">Java 并发-ConcurrentSkipListMap</a>。</p>
</li>
</ul>
<a id="more"></a>

<p>纵观上述例子，我们几乎都可以找到一个统一的关键词，”高效”。这份高效源于专业：上述容器是专门为并发编程设计的，自然更能适应并发环境。</p>
<p>在此，我们不妨顺着”专业”继续往下说：专业同样意味着不全面。举个例子，我们在串行环境中创建了一个HashMap的实例，如果我们想将它转换为ConcurrentHashMap是比较麻烦的：只能新建ConcurrentHashMap的实例，然后将已有的hashMap中的数据一点点的导入。对此，Java API中已提供了解决方法：如果我们对并发容器的性能要求不高，那么其实是可以通过一个方法简单的将它们线程安全化的，这些方法位于java.util.Collections工具类中，可参见<a href="/2018/02/01/Java并发-容器线程安全化方法/">Java 并发-容器线程安全化方法</a>。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-Fork Join框架</title>
    <url>/2018/01/23/Java%E5%B9%B6%E5%8F%91-ForkJoin%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p>“分治法”是一种非常有效的解决问题的思路，大名鼎鼎的MapReduce就是它的实际应用。</p>
<p>我们可以以一个小例子来简单介绍下分治法的基本思想：假如我们需要处理1000个数据，而这1000个数据的处理是彼此独立的，不需要建立特定的处理顺序。比较极端的方式有两种：其一是同时处理这1000个数据，这样做效率最高，但对系统的负担也最大。其二是每次只处理1个，处理1000次，这样做对系统的负担最小，但效率最低。</p>
<a id="more"></a>

<p>其实这两种处理方式可以看作同一个模式下的两个极端情况：每次处理x个，处理y轮，保证x*y为数据总数即可。其实这已经运用了分治法的思想，将一个大的问题，分解成了y轮。</p>
<p>因此分治法的本质就是分解：将无法直接解决的大的问题分解为一个个小的，可以通过现有资源解决的问题。在解决这些小的问题后再进行汇总，最终间接解决大的问题。其实不仅仅是编程，为人处事也是这个道理。</p>
<p>具体到Java API中，分治法的应用便是Fork Join框架。Fork的原义是叉子，引申义就是问题的分解：像叉子的前端一样被分解为多个更小的问题。事实上，Java的这种起名方式源自Linux。在Linux中，fork()函数用来创建子进程。</p>
<p>而Join则与Java API中的join方法相同，代表等待。</p>
<p>因此Fork Join确实是很形象的描述了分治法的精髓：当问题需要分解时，它便像叉子的前端一样被分解为多个分叉，而先完成的分叉会等待尚未完成的分叉，待全部分叉均完成后再汇聚起来，向下进行。</p>
<p>依然以开篇的那个小例子为例，fork出1000个叉确实是太多了，而只fork出一个叉相当于就没分治。因此合乎逻辑的做法应当是根据系统的承载能力及对性能的要求fork出一个(1,1000)之间的整数。很显然，这里需要用到线程池。</p>
<p>这个线程池名为java.util.concurrent.ForkJoinPool，它的类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ForkJoinPool extends AbstractExecutorService</span></pre></td></tr></table></figure>

<p>果不其然，它继承了AbstractExecutorService，承接自线程池一脉。在<a href="/2017/10/03/Java并发-线程池/">Java 并发-线程池</a>中，我们曾给出过线程池核心类/接口的层次关系图：</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/ForkJoin%E6%A1%86%E6%9E%B6/0.jpg" alt="0.jpg"></p>
<p>现在，我们可以进一步丰富这张图：</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/ForkJoin%E6%A1%86%E6%9E%B6/1.jpg" alt="1.jpg"></p>
<p>它的常用构造函数有两个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ForkJoinPool(int parallelism) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(parallelism, defaultForkJoinWorkerThreadFactory, null, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public ForkJoinPool() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(Runtime.getRuntime().availableProcessors(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">         defaultForkJoinWorkerThreadFactory, null, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>前者会按照使用者的要求创建一个大小为parallelism的线程池，而后者则会直接取可用CPU数作为线程池的大小。二者内部实际上调用的是同一个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ForkJoinPool(int parallelism,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ForkJoinWorkerThreadFactory factory,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.UncaughtExceptionHandler handler,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    boolean asyncMode) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    checkPermission();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (factory &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (parallelism &lt;&#x3D; 0 || parallelism &gt; MAX_ID)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new IllegalArgumentException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.parallelism &#x3D; parallelism;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.factory &#x3D; factory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.ueh &#x3D; handler;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.locallyFifo &#x3D; asyncMode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    long np &#x3D; (long)(-parallelism);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.ctl &#x3D; ((np &lt;&lt; AC_SHIFT) &amp; AC_MASK) | ((np &lt;&lt; TC_SHIFT) &amp; TC_MASK);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.submissionQueue &#x3D; new ForkJoinTask&lt;?&gt;[INITIAL_QUEUE_CAPACITY];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int n &#x3D; parallelism &lt;&lt; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (n &gt;&#x3D; MAX_ID)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        n &#x3D; MAX_ID;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        n |&#x3D; n &gt;&gt;&gt; 1; n |&#x3D; n &gt;&gt;&gt; 2; n |&#x3D; n &gt;&gt;&gt; 4; n |&#x3D; n &gt;&gt;&gt; 8;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    workers &#x3D; new ForkJoinWorkerThread[n + 1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.submissionLock &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.termination &#x3D; submissionLock.newCondition();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    StringBuilder sb &#x3D; new StringBuilder(&quot;ForkJoinPool-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(poolNumberGenerator.incrementAndGet());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    sb.append(&quot;-worker-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.workerNamePrefix &#x3D; sb.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很长，而且看起来做了很多事，挺复杂的样子。不过我们很简单就可以确定的是，这确实是在构建一个和我们最常用的ThreadPoolExecutor完全不同的线程池，并且这个线程池应该是比ThreadPoolExecutor要复杂得多。</p>
<p>事实上也的确如此，不过这种复杂对于使用者基本是透明的，因为它们绝大多数都被用以实现ForkJoinPool更复杂的逻辑需求以及优化它的性能。例如，对于普通的线程池，也就是ThreadPoolExecutor而言，提交给它的任务可以是不同的，因此两个线程之间是无法互相帮助的。而ForkJoinPool中的任务都是相同的(叉子的每个尖端当然都是相同的)，因此两个线程间可以互相帮助：例如线程1已将线程池分配给它的任务全部执行完，而线程2的阻塞队列中尚有任务积压，那么线程1就可以帮着线程2完成一部分积压的任务。当然，这里只是简单说下思路，实际实现起来还是比较麻烦的。例如，为了避免在帮助时发生冲突，从自身队列中取数据时应取队首的，而帮助他人时则从队尾开始拿数据。</p>
<p>再比如，ForkJoinPool会使用一个无锁的栈来管理空闲线程。如果一个工作线程没有被分配任务，那么它除了帮助他人外，还有可能(注意仅仅只是可能)被挂起，被挂起的线程将会被压入ForkJoinPool所管理的那个栈中，待需要时再唤醒线程。</p>
<p>在任务的提交上，ForkJoinPool最常用的提交方法为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public &lt;T&gt; ForkJoinTask&lt;T&gt; submit(ForkJoinTask&lt;T&gt; task) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (task &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    forkOrSubmit(task);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return task;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>从入参所属类的名字上我们便可看出，这个方法是为ForkJoinPool量身打造的，而java.util.concurrent.ForkJoinTask的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class ForkJoinTask&lt;V&gt; implements Future&lt;V&gt;, Serializable</span></pre></td></tr></table></figure>

<p>它是ForkJoinPool专用的任务，其设计思路与我们最熟悉的构成Thread的核心Runnable完全不同，不过二者的性质是相同的，都代表要线程池执行的任务本身，其内部封装着具体的任务逻辑。</p>
<p>我们在使用时通常会使用ForkJoinTask的如下两个方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final ForkJoinTask&lt;V&gt; fork()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public final V join()</span></pre></td></tr></table></figure>

<p>fork及join不必多说，它们所实现的就是Fork Join的核心功能，join返回任务的执行结果，其类型就是ForkJoinTask类定义中的V。</p>
<p>ForkJoinTask是一个抽象类，我们常用的它的子类有两个，它们的类定义分别为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class RecursiveTask&lt;V&gt; extends ForkJoinTask&lt;V&gt;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class RecursiveAction extends ForkJoinTask&lt;Void&gt;</span></pre></td></tr></table></figure>

<p>这又是两个抽象类，也就是说摆明了是要我们继承了才能用。</p>
<p>理所当然的，它们都位于java.util.concurrent包中。需要注意的是，单看ForkJoinTask，仿佛它的子类都应有返回值，但事实上，Java API不仅提供了有返回值的子类(RecursiveTask，类比于Callable)，同时也提供了无返回值的子类(RecursiveAction，类比于Runnable)。</p>
<p>无论是RecursiveTask，亦或是RecursiveAction，执行任务的逻辑都被封装在了方法compute()中：</p>
<p>有意思的是，这个方法并未出现在ForkJoinTask中，也就是RecursiveTask及RecursiveAction特有的执行方法，相当于Runnable的run()，或是Callable的call()。事实上，ForkJoinTask确实不仅仅这两个子类，我并未关注其他子类是怎么实现的，不过估计应该是有子类不依靠compute()来执行吧。</p>
<p>这个compute()在RecursiveTask的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected abstract V compute();</span></pre></td></tr></table></figure>

<p>在RecursiveAction中的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected abstract void compute();</span></pre></td></tr></table></figure>

<p>自然，这便是需要我们自行实现，封装任务逻辑的关键代码(也是RecursiveTask及RecursiveAction中唯一的抽象方法)。</p>
<p>无论分治法在内部将问题分解为了多少个小问题，从外部调用者来看，只需提交一个任务，然后等待ForkJoinPool得到该问题的解，这个解包含在submit的返回值ForkJoinTask中，它对应未经分解的那个大问题，其值可以通过它的get方法得到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final V get() throws InterruptedException, ExecutionException</span></pre></td></tr></table></figure>

<p>最后再提一点，既然ForkJoinTask从概念上对应于Runnable或Callable，那么它也该有个类似于Thread一样的容器来封装才对。没错，这个容器名为java.util.concurrent.ForkJoinWorkerThread，它的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ForkJoinWorkerThread extends Thread</span></pre></td></tr></table></figure>

<p>看来较之于任务，容器倒是没那么另类，是直接继承了最常见的Thread。</p>
<p>下面我们来看一个小例子：要求做1-200000的数列求和，假设当前系统一个线程单次最多只能计算10000个数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutionException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ForkJoinPool;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ForkJoinTask;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.RecursiveTask;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ForkJoinPool forkJoinPool &#x3D; new ForkJoinPool();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        MyTask myTask &#x3D; new MyTask(1L, 200000L);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ForkJoinTask&lt;Long&gt; forkJoinTask &#x3D; forkJoinPool.submit(myTask);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(forkJoinTask.get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask extends RecursiveTask&lt;Long&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int LIMIT &#x3D; 10000;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private long begin;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private long end;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyTask(long begin, long end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.begin &#x3D; begin;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.end &#x3D; end;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Long compute() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long sum &#x3D; 0L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long count &#x3D; this.end - this.begin + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (count &lt;&#x3D; MyTask.LIMIT) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (long i &#x3D; this.begin; i &lt;&#x3D; this.end; i++) sum +&#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long mid &#x3D; this.begin + (this.end - this.begin) &#x2F; 2;    &#x2F;&#x2F; 将规模缩减至一半</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        MyTask myTask1 &#x3D; new MyTask(this.begin, mid);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        myTask1.fork();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sum +&#x3D; myTask1.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        MyTask myTask2 &#x3D; new MyTask(mid + 1, this.end);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        myTask2.fork();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sum +&#x3D; myTask2.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">        return sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20000100000</span></pre></td></tr></table></figure>

<p>看完这个小例子，想必很自然的就会联想到递归：因为这与递归实在是太像了。没错，事实上，大家不妨认真思考下，递归也是分治思想的体现啊！</p>
<p>不过，递归默认是不支持并发的，如果想将原生的递归改造为并发也是非常麻烦的。所以我们其实也可以这样想：Fork Join框架可以看作是并发环境下的递归。</p>
<p>既然Fork Join框架本质上和递归类似，那么如果调用的层次过深，它也同样可能出现栈溢出。同时，由于Fork Join底层使用的是线程池，那么它也可能出现普通线程池容易引发的错误：例如程序占用的线程数量过多，导致系统性能下降甚至崩溃。这都是使用Fork Join框架时需要注意的地方。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-Future</title>
    <url>/2018/01/09/Java%E5%B9%B6%E5%8F%91-Future/</url>
    <content><![CDATA[<a id="more"></a>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>Future</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-循环栅栏CyclicBarrier</title>
    <url>/2018/01/08/Java%E5%B9%B6%E5%8F%91-%E5%BE%AA%E7%8E%AF%E6%A0%85%E6%A0%8FCyclicBarrier/</url>
    <content><![CDATA[<p>CyclicBarrier可以看作是<a href="/2018/01/08/Java并发-倒计数器CountDownLatch/">Java 并发-倒计数器CountDownLatch</a>的功能增强版。其中Barrier(栅栏)是Latch(门栓)的同义词，本质上都表示一种障碍。CyclicBarrier可理解为”循环的倒计数门栓”。即CyclicBarrier在CountDownLatch的基础上加入了循环的功能：每当一次计数结束，系统都会执行一个固定的程序员设定好的操作。随后将计数值归为初始值，再开始下一次循环。</p>
<a id="more"></a>

<p>java.util.concurrent.CyclicBarrier的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CyclicBarrier</span></pre></td></tr></table></figure>

<p>其常用构造函数为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public CyclicBarrier(int parties, Runnable barrierAction)</span></pre></td></tr></table></figure>

<p>其中parties是倒计数值，barrierAction是每次计数结束后要进行的操作。</p>
<p>我们不妨模拟这样1个场景：有一个化学实验室，同时可供3名学生作为一个小组进行实验。要求必须凑够3人才能开始实验。上一组实验完成后下一组才可进入。组队的学生没有特殊的要求，只要凑齐了3人，不管是谁都可以组队进行实验。现有9名学生会逐渐去实验室做实验。</p>
<p>该场景的代码实现为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.BrokenBarrierException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.CyclicBarrier;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static int TEAM_SIZE &#x3D; 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static long BASE_BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static CyclicBarrier CB;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable barrierAction &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CB &#x3D; new CyclicBarrier(Test.TEAM_SIZE, barrierAction);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable student &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(new Random().nextInt(10000));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;于第&quot; + (System.currentTimeMillis() - Test.BASE_BEGIN) + &quot;毫秒到达实验室&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.CB.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException | BrokenBarrierException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 9; i++) new Thread(student, &quot;学生&quot; + i).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学生5于第1640毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生7于第1819毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生4于第6542毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生0于第8260毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生8于第8365毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生3于第8816毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生1于第9146毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生2于第9709毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生6于第9963毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr></table></figure>

<p>如果我们将学生个数改为10：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.BrokenBarrierException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.CyclicBarrier;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static int TEAM_SIZE &#x3D; 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static long BASE_BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static CyclicBarrier CB;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable barrierAction &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CB &#x3D; new CyclicBarrier(Test.TEAM_SIZE, barrierAction);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable student &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(new Random().nextInt(10000));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;于第&quot; + (System.currentTimeMillis() - Test.BASE_BEGIN) + &quot;毫秒到达实验室&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.CB.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException | BrokenBarrierException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) new Thread(student, &quot;学生&quot; + i).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>则输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">学生0于第834毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生4于第1119毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生7于第2412毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生3于第2671毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生8于第6435毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生6于第6929毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生5于第7242毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生9于第8087毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生2于第8644毫秒到达实验室</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">学生1于第9065毫秒到达实验室</span></pre></td></tr></table></figure>

<p>因未达到组队条件学生1将无法进行实验，且程序也无法终止。</p>
<p>通过上面的小例子，我们还可以注意到CyclicBarrier需检查两个异常：InterruptedException，BrokenBarrierException。其中InterruptedException是所有等待操作基本都会检查的，而BrokenBarrierException是CyclicBarrier特有的。因为在同一个计数周期内的线程之间是有连带关系的，若其中一个被中断了，剩下的即便没有被中断本次倒数也无效了，不能无限的等待下去，此时这些线程就会抛出BrokenBarrierException。</p>
<p>让我们来简化上面的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.BrokenBarrierException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.CyclicBarrier;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static int TEAM_SIZE &#x3D; 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static CyclicBarrier CB;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable barrierAction &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;一组学生在实验室中完成实验&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CB &#x3D; new CyclicBarrier(Test.TEAM_SIZE, barrierAction);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable student &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.CB.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException | BrokenBarrierException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 3; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread t &#x3D; new Thread(student, &quot;学生&quot; + i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            t.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &#x3D;&#x3D; 1) t.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们将线程总数控制为3，并中断线程1，则输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.InterruptedException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:204)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:355)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$2.run(Test.java:27)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.util.concurrent.BrokenBarrierException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:243)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:355)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$2.run(Test.java:27)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.util.concurrent.BrokenBarrierException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.CyclicBarrier.dowait(CyclicBarrier.java:243)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.CyclicBarrier.await(CyclicBarrier.java:355)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$2.run(Test.java:27)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr></table></figure>

<p>和预期的一样，我们得到了一个InterruptedException及两个BrokenBarrierException。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>CyclicBarrier</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-倒计数器CountDownLatch</title>
    <url>/2018/01/08/Java%E5%B9%B6%E5%8F%91-%E5%80%92%E8%AE%A1%E6%95%B0%E5%99%A8CountDownLatch/</url>
    <content><![CDATA[<p>CountDownLatch直译为倒计数门栓。其中门栓的含义很直观，仅取其字面意思即可：在计数结束前，将线程用门栓关在门里，待计数结束，再将门栓取下，放线程出来。</p>
<p>有人会将CountDownLatch译为倒计时器。我并不推荐这种翻译，因为这会让使用者产生一种误解：CountDownLatch会等待一段时间。而事实上，CountDownLatch进行的是数字上的倒数，故翻译为倒计数器更为合理。</p>
<a id="more"></a>

<p>java.util.concurrent.CountDownLatch的类定义为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class CountDownLatch</span></pre></td></tr></table></figure>

<p>其常用的构造函数为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * @param count int, 倒计数的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public CountDownLatch(int count)</span></pre></td></tr></table></figure>

<p>我们不妨构造一个小场景：一个工作在开始前需要先完成准备工作，而准备工作由5位不同的工人完成。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.CountDownLatch;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int WORKER_COUNT &#x3D; 5;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static CountDownLatch CDL &#x3D; new CountDownLatch(Test.WORKER_COUNT);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                long begin &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(new Random().nextInt(10) * 1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(Thread.currentThread().getName() + &quot;准备完成，耗时&quot; + ((System.currentTimeMillis()- begin) &#x2F; 1000) + &quot;秒&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.CDL.countDown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; Test.WORKER_COUNT; i++) new Thread(r, &quot;工人&quot; + i).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CDL.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;准备完成，工作开始...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">工人2准备完成，耗时2秒</span></pre></td></tr><tr><td class="code"><pre><span class="line">工人1准备完成，耗时6秒</span></pre></td></tr><tr><td class="code"><pre><span class="line">工人0准备完成，耗时8秒</span></pre></td></tr><tr><td class="code"><pre><span class="line">工人4准备完成，耗时9秒</span></pre></td></tr><tr><td class="code"><pre><span class="line">工人3准备完成，耗时9秒</span></pre></td></tr><tr><td class="code"><pre><span class="line">准备完成，工作开始...</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>CountDownLatch</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-读写锁ReadWriteLock</title>
    <url>/2018/01/08/Java%E5%B9%B6%E5%8F%91-%E8%AF%BB%E5%86%99%E9%94%81ReadWriteLock/</url>
    <content><![CDATA[<p>java.util.concurrent.locks.ReadWriteLock是JDK1.5起提供的读写分离锁。其目的是为了解决操作系统中的读者写者问题:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ReentrantReadWriteLock implements ReadWriteLock, java.io.Serializable</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface ReadWriteLock</span></pre></td></tr></table></figure>

<p>需要注意的是，它并没有实现Lock接口。</p>
<a id="more"></a>

<p>在读者写者的应用场景中，对于普通的ReentrantLock而言，访问临界区的线程只有一种身份，并不会区分读者与写者：这就导致任意两个访问临界区的线程都是冲突对立的。然而实际上，读者并不会修改临界区，因此读者与读者之间不应该阻塞。ReadWriteLock就是为了优化这种场景而设计的。</p>
<p>这种优化在读远多于写时对性能的提升非常明显，我们不妨来看下面的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.Lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Lock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int read() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result &#x3D; Test.VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void write(int v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.VALUE &#x3D; v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long begin &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable read &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.read();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable write &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.write(new Random().nextInt());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int readCount &#x3D; 18;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int writeCount &#x3D; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService esRead &#x3D; Executors.newFixedThreadPool(readCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService esWrite &#x3D; Executors.newFixedThreadPool(writeCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; readCount; i++) esRead.submit(read);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; writeCount; i++) esWrite.submit(write);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        esRead.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        esWrite.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            boolean loop &#x3D; true;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            do &#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">                loop &#x3D; (!esRead.awaitTermination(10, TimeUnit.MILLISECONDS)) ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       (!esWrite.awaitTermination(10, TimeUnit.MILLISECONDS)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; while(loop);  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println((System.currentTimeMillis() - begin) &#x2F; 1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span></pre></td></tr></table></figure>

<p>此时使用的是普通的ReentrantLock，耗时不多不少正好20秒，符合预期。现在我们使用ReadWriteLock：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.Lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReadWriteLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantReadWriteLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReadWriteLock LOCK &#x3D; new ReentrantReadWriteLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Lock READ_LOCK &#x3D; Test.LOCK.readLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Lock WRITE_LOCK &#x3D; Test.LOCK.writeLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int read() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.READ_LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        result &#x3D; Test.VALUE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.READ_LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void write(int v) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.WRITE_LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.VALUE &#x3D; v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.WRITE_LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long begin &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable read &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.read();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable write &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.write(new Random().nextInt());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int readCount &#x3D; 18;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int writeCount &#x3D; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService esRead &#x3D; Executors.newFixedThreadPool(readCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService esWrite &#x3D; Executors.newFixedThreadPool(writeCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; readCount; i++) esRead.submit(read);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; writeCount; i++) esWrite.submit(write);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        esRead.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        esWrite.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            boolean loop &#x3D; true;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            do &#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">                loop &#x3D; (!esRead.awaitTermination(10, TimeUnit.MILLISECONDS)) ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       (!esWrite.awaitTermination(10, TimeUnit.MILLISECONDS)) </span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; while(loop);  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println((System.currentTimeMillis() - begin) &#x2F; 1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>经过大量测试，输出为3或4。较之此前的20，性能显然得到了极大的提升。</p>
<p>由该小例子我们也能具体得知，ReadWriteLock作为一个接口，与Lock是一级的，其实现类为ReentrantReadWriteLock。然后再由ReentrantReadWriteLock生成具体的读锁及写锁。因为到读锁及写锁这一层时，锁已没有什么特殊性，因此其实现的是Lock接口。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>ReadWriteLock</tag>
        <tag>读写锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-信号量Semaphore</title>
    <url>/2018/01/08/Java%E5%B9%B6%E5%8F%91-%E4%BF%A1%E5%8F%B7%E9%87%8FSemaphore/</url>
    <content><![CDATA[<p>无论是synchronized抑或是Lock，同一时刻只允许有1个线程访问临界区，如果我们要实现操作系统中的多信号量的功能，即同一时刻允许复数个线程访问临界区，则需要使用Java API提供的java.util.concurrent.Semaphore类。该类常用的构造函数有以下两个：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * permits, int 信号量数</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public Semaphore(int permits)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * permits, int 信号量数</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * fair, boolean true--公平 false--不公平</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public Semaphore(int permits, boolean fair)</span></pre></td></tr></table></figure>

<p>通常情况下，每个线程只会申请一个信号量，此时信号量数就相当于同时能访问临界区的线程数。Semaphore类的常用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 申请获得一个信号量</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void acquire() throws InterruptedException</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 申请获得一个信号量，但不响应中断</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void acquireUninterruptibly()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 申请获得一个信号量。成功返回true，失败不会等待，直接返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public boolean tryAcquire()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 申请获得一个信号量。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 成功返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 失败后会等待一段时间(timeout)，若在此期间获得信号量则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public boolean tryAcquire(long timeout, TimeUnit unit) throws InterruptedException</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 释放已获得的信号量</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public void release()</span></pre></td></tr></table></figure>

<p>显然这与Lock中的加锁解锁极为类似。下面我们来看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Calendar;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Semaphore;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Semaphore SEMP &#x3D; new Semaphore(5);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.SEMP.acquire();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(Calendar.getInstance().get(Calendar.SECOND) + &quot;-----&quot; + Thread.currentThread().getId() + &quot; done.&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.SEMP.release();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int threadCount &#x3D; 20;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(threadCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; threadCount; i++) es.submit(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50-----12 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">50-----10 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">50-----9 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">50-----13 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">50-----11 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">51-----14 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">51-----17 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">51-----21 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">51-----18 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">51-----16 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">52-----19 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">52-----20 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">52-----15 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">52-----22 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">52-----23 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">53-----25 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">53-----26 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">53-----24 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">53-----27 done.</span></pre></td></tr><tr><td class="code"><pre><span class="line">53-----28 done.</span></pre></td></tr></table></figure>

<p>分析输出可得：每秒输出1组，每组5个。与预期相符。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>Semaphore</tag>
        <tag>信号量</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-Condition条件</title>
    <url>/2017/12/29/Java%E5%B9%B6%E5%8F%91-Condition%E6%9D%A1%E4%BB%B6/</url>
    <content><![CDATA[<p>synchronized通过wait()及notify()实现线程间的通信。java.util.concurrent.locks.Lock接口号称synchronized的功能升级版，自然也应实现相应的通信机制。该机制被封装在java.util.concurrent.locks.Condition接口的实现类中。</p>
<p>Lock接口中有如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Condition newCondition();</span></pre></td></tr></table></figure>

<p>该方法会返回一个Condition接口某实现类的实例，该实例将与调用它的锁实例绑定，用于该锁实例的通信。</p>
<a id="more"></a>

<p>Condition接口的全部方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 使当前线程等待，并放弃已获得的锁</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 会因signal()或signalAll()停止等待并重新尝试获取锁</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 会因线程中断而结束等待</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">void await() throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 不响应中断，其余与await()相同</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">void awaitUninterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">long awaitNanos(long nanosTimeout) throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">boolean await(long time, TimeUnit unit) throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">boolean awaitUntil(Date deadline) throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 随机唤醒一个处于await状态的线程</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">void signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 唤醒所有处于await状态的线程</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">void signalAll();</span></pre></td></tr></table></figure>

<p>较之synchronized机制，很显然，await对应于wait，signal对应于notify。</p>
<p>下面来看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.Condition;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReentrantLock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Condition CONDITION &#x3D; Test.LOCK.newCondition();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.CONDITION.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;after wait&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CONDITION.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">after wait</span></pre></td></tr></table></figure>

<p>显然，套路与synchronized极其相似，只不过synchronized用作同步标志的是任意对象，通讯机制是任意对象都有的wait和notify方法，而锁机制则做了特化：同步对象是Lock，通讯机制被封装在与该Lock对象绑定的Condition中。</p>
<p>在synchronized中，若要使用通讯机制，则必须先获得监视器对象的认可，在synchronized代码块的范围内也只能调用监视器对象的wait和notify方法。同理，若要使用锁的通讯机制，必须先获得锁的钥匙(lock)，而后在持有钥匙期间(unlock之前)调用与锁绑定的Condition对象的await及signal方法。</p>
<p>不过，需要注意的是，synchronized是用一对{}区分同步区域的，离开该区域自动退出同步。而锁机制则需要显式加锁及解锁，在提高灵活性的同时也增大了程序员犯错的可能：很有可能只顾着加锁而忘记了解锁。例如我们按如下方式修改上例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.Condition;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReentrantLock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Condition CONDITION &#x3D; Test.LOCK.newCondition();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.CONDITION.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;after wait&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.CONDITION.signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#x2F;&#x2F; 没有释放锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时程序无输出且无法结束。</p>
<p>对于synchronized而言，每个监视器对象只能对应一个通讯队列。而在锁机制中，每个Lock对象可绑定多个Condition，功能自然更为强大。</p>
<p>Java API中大量使用锁及其通讯机制，以java.util.concurrent.ArrayBlockingQueue为例。其首先按如下方式声明了锁：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final ReentrantLock lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private final Condition notEmpty;    &#x2F;&#x2F; 信号量：非空</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private final Condition notFull;    &#x2F;&#x2F; 信号量：非满</span></pre></td></tr></table></figure>

<p>构造函数中完成了锁及信号量的初始化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ArrayBlockingQueue(int capacity, boolean fair) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (capacity &lt;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new IllegalArgumentException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.items &#x3D; new Object[capacity];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock &#x3D; new ReentrantLock(fair);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    notEmpty &#x3D; lock.newCondition();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    notFull &#x3D;  lock.newCondition();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>关于锁的运用我们来看两个典型的方法，向队尾追加put()及从队头取出take()。</p>
<p>首先来看put()：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void put(E e) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    checkNotNull(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock lock &#x3D; this.lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.lockInterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (count &#x3D;&#x3D; items.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 当前队列已满，等待收到非满的信号时才能继续</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notFull.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        insert(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private void insert(E x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    items[putIndex] &#x3D; x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    putIndex &#x3D; inc(putIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ++count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    notEmpty.signal();    &#x2F;&#x2F; 因为放入了一个元素，发出非空的信号</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          &#x2F;&#x2F; 如果当前有线程正在等待该信号则可继续执行下去</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>相应的take()为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public E take() throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock lock &#x3D; this.lock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    lock.lockInterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (count &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 当前队列为空，等待收到非空的信号时才能继续</span></pre></td></tr><tr><td class="code"><pre><span class="line">            notEmpty.await();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return extract();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private E extract() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final Object[] items &#x3D; this.items;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E x &#x3D; this.&lt;E&gt;cast(items[takeIndex]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    items[takeIndex] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    takeIndex &#x3D; inc(takeIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    --count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    notFull.signal();    &#x2F;&#x2F; 因为取出了一个元素，发出非满的信号</span></pre></td></tr><tr><td class="code"><pre><span class="line">                         &#x2F;&#x2F; 如果当前有线程正在等待该信号则可继续执行下去</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很显然，这就是操作系统中典型的多生产者(通过put放入缓冲区)-单缓冲区(队列对象)-多消费者(通过take从缓冲区中取出)模型。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>锁</tag>
        <tag>Lock</tag>
        <tag>ReentrantLock</tag>
        <tag>重入锁</tag>
        <tag>Condition</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 反射-逆向移植</title>
    <url>/2017/12/19/Java%E5%8F%8D%E5%B0%84-%E9%80%86%E5%90%91%E7%A7%BB%E6%A4%8D/</url>
    <content><![CDATA[<p>一般来说，在公司或组织规模较小的发展期，都是以做项目为主，即会不断的做新项目。此时应用新技术几乎是零成本的，只要确定新技术可用，直接在新项目中使用即可。</p>
<a id="more"></a>

<p>随着组织的发展，工作的重心虽然依然是做新项目，但维护已有项目的压力也已初现端倪。对于已有项目而言，替换新技术或新架构不再是零成本了，不过因为项目本身不大，终归是可做的。</p>
<p>当组织达到一定规模后，就会从做项目转为做产品。此时工作的重心将转移到维护已有项目上。同时这些已有项目已经有了足够的技术积淀，规模也足够庞大，此时再试图替换新技术就是一件极为困难的事了。</p>
<p>然而互联网行业日新月异，应用新技术，保持自身产品的竞争力又是必须的。时至今日，这组矛盾依然是程序员们所必须面对的一大挑战。</p>
<p>具体到Java，每次大的JDK版本的升级既是一场狂欢，又是一场灾难。喜的是可以在Java中使用很多梦寐以求的新技术，悲的是新版本的学习成本倒尚在其次，如何平滑的将新版本应用于已有项目才是难点所在。例如JDK1.5中发布了自动装箱，泛型，动态注解，枚举，变长参数，增强for循环等影响深远的新功能，不用吧，看着实在是眼红。用吧，旧版本的代码又不能兼容，总之是陷入两难的境地中。</p>
<p>很多公司干脆采取了简单粗暴的做法：如果这次JDK的大版本更新所带来的新内容足够震撼，那么干脆就舍弃旧代码，用新版本做一次重构。这样的好处自然是简单粗暴，坏处却也很明显：如果项目规模已足够大，那么重构本身是很花成本的事情。此外，JDK最近的大版本有日渐提速的趋势，照顾着JDK版本进行重构显然不利于项目的架构规划。</p>
<p>为此，Java逆向移植工具(Java Backporting Tools)应运而生。本文将介绍其中的佼佼者：Retrotranslator。</p>
<p>Retrotranslator的作用是将JDK1.5编译出的class文件转换为可在JDK1.4或JDK1.3上部署的版本。转换后依然可以很好的支持自动装箱，泛型，动态注解，枚举，变长参数，增强for循环，静态导入等语法特性。甚至还可以支持JDK1.5中新增的集合改进，并发包以及对泛型，注解等的反射操作。</p>
<p>那么Retrotranslator是如何做到的呢？在讨论这个问题之前，我们需要先明确一下，一次JDK的大版本更新通常会提供哪些新内容。简单来说，可分为以下4类：</p>
<ol>
<li>javac编译器层面的改进。如JDK1.5新增的自动装箱拆箱，其本质实际上就是编译器在程序中使用到包装类对象的地方自动插入了很多诸如Integer.valueOf()之类的代码。JDK1.5提供的变长参数则是在javac编译后会被自动转化为数组。而对于JDK1.5新增的泛型，则会在编译阶段直接被javac编译器擦除(不过在元数据中依然还保留着泛型相关的信息)，同时在相应的地方由javac编译器自动插入类型转换代码。</li>
<li>增加Java API。例如JDK1.2时新增的java.util.Collections等一系列集合框架类。JDK1.5时新增的java.util.concurrent并发包等。</li>
<li>更新底层的字节码指令集。这种改动相对少见。例如JDK1.7新增的动态类型支持，就需要在字节码指令集中新增一条指令invokedynamic。</li>
<li>改进JVM。这类改动往往会从本质上影响程序的性能，但对程序员开发代码而言却基本是透明的。例如JDK1.5时重新定义了Java内存模型(Java Memory Model,JMM)等。</li>
</ol>
<p>在这4种改动中，Retrotranslator等逆向移植工具只能模拟前两种。这其实很好理解：逆向移植工具所做的工作仅仅只是转换class文件，相当于二次编译。因为依然是跑在旧版本的JVM内，那么JVM内部的优化自然是无法模拟，或者更精确的说，是无法做到完全的模拟，而且能模拟的部分，也一定是用一个取巧的手段，以牺牲性能为代价，最终达到一种似是而非的效果。</p>
<p>我们再具体到能模拟的那前两种改动中。其中第二种改动的模拟是要相对容易些的。因为所谓的Java API层面的改进无非就是加入或者更新了一部分代码。而这一部分代码所使用的底层指令集其实还是老版本那一套，因此只要在转换时将缺少的代码补上即可。例如JDK1.5中新增的java.util.concurrent并发包，实际上是由多线程大师Doug Lea在JDK1.5之前就已经开发好的一套并发包(那时被称为dl.util.concurrent)。因其性能卓越，在JDK1.5时被作为标准API引入Java核心API类库，引入后定名为java.util.concurrent，其内容基本与原始的dl.util.concurrent一致，只是由作者及JDK的开发人员一起做了小幅的改动。Retrotranslator中替代java.util.concurrent并发包的类库为另一个基于dl.util.concurrent改进而得的并发包类库backport-util-concurrent.jar。</p>
<p>而对于第一种改进的模拟则要复杂得多了。Retrotranslator的实现方式为通过ASM框架直接操作字节码。最容易想到也最为简单的需改动的内容就是改动class文件中的minor_version。当然实际需要改动得要比这个复杂得多，不过这一切都是可做的。而这个可做的基础就在于这些改动都是可以收束到javac编译器这一层的，更直白的说，这种改动根本不涉及JVM，因此我们才可以采用这种类似于二次编译的方式实现它。</p>
<p>我们不妨以JDK1.5时新增的枚举为例。虽然从程序员的角度来看，引入了全新的关键字enum，同时Enum也仿佛是与Class及Interface并列的第三种类型，但这一切其实都是javac编译器做出来的假象。实际上，在编译为class文件之后，从JVM的角度来看，枚举类仅仅是一个继承于java.lang.Enum，自动生成values()及valueOf()方法的普通Java类而已。既然不需要JVM新功能的支持那么逆向移植工具就可以通过二次编译在旧版本JDK环境中实现枚举了，因为class文件常量池集合中描述枚举时用的依然是CONSTANT_Class_info，也就是javac也是依然将枚举当成一个类来看的，并未为了枚举添加CONSTANT_Enum_info之类的枚举符号引用常量。</p>
<p>Retrotranslator对于枚举的整体思路为首先将枚举类的父类从java.lang.Enum替换为它自身所包含的net.sf.retrotranslator.runtime.java.lang.Enum_，然后再在类和字段的访问标志中抹去ACC_ENUM标志位。当然这其中有很多复杂的细节，例如既然父类被替换了，那么values()及valueOf()方法自然需要重写，常量池中也要引入大量来自新父类的符号引用。</p>
]]></content>
      <categories>
        <category>Java 反射</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 反射-动态代理</title>
    <url>/2017/12/19/Java%E5%8F%8D%E5%B0%84-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>提到字节码生成技术，大家往往都会想到Javassist,CGLib,ASM等操作字节码的类库，给人一种很酷炫的感觉。实际上字节码生成技术距离我们并没那么遥远。在我们接触Java伊始遇到的javac编译器就是一个用Java写成的字节码生成器。此外Web服务器中的JSP编译器，编译时植入的AOP框架，甚至JVM在实现反射时都有可能会在运行时生成字节码以提高执行速度。</p>
<a id="more"></a>

<p>本文所讨论的反射中的动态代理技术就是字节码生成技术中一个相对简单的应用。</p>
<p>对于很多程序员而言，动态代理并不熟悉，也没接触过java.lang.reflect.Proxy或java.lang.reflect.InvocationHandler。不过我想大部分人都用Spring框架做过Bean的组织管理，而Spring的Bean管理本质上应用的就是动态代理技术。</p>
<p>如果我们将程序员手写代理类的方式称为静态代理的话，那么动态代理指得就是代理类无需程序员编写，将由JVM自动生成。动态代理的优势并不在于节省程序员编写代理类的那一点点的开发成本，而是从本质上提高程序的灵活性：动态代理可以在原始类和接口还未知的时候，就确定代理类的代理行为。这样就实现了代理类与原始类的解耦，从而能让代理类灵活的重用于不同的应用场景中。</p>
<p>静态代理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void consumer(ProxyInterface pi) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pi.say();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.consumer(new ProxyObject());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface ProxyInterface &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void say();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class RealObject implements ProxyInterface &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void say() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;say&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ProxyObject implements ProxyInterface &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void say() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new RealObject().say();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">say</span></pre></td></tr></table></figure>

<hr>
<p>改造为动态代理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.InvocationHandler;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.lang.reflect.Proxy;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void customer(ProxyInterface pi) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pi.say();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        RealObject real &#x3D; new RealObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassLoader loader &#x3D; ProxyInterface.class.getClassLoader();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Class&lt;?&gt;[] interfaces &#x3D; new Class[]&#123;ProxyInterface.class&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        InvocationHandler h &#x3D; new ProxyObject(real);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ProxyInterface proxy &#x3D; (ProxyInterface)Proxy.newProxyInstance(loader, interfaces, h);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.customer(proxy);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface ProxyInterface &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void say();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class RealObject implements ProxyInterface &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void say()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;say&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ProxyObject implements InvocationHandler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Object real &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ProxyObject(Object real) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.real  &#x3D; real;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return method.invoke(this.real, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">say</span></pre></td></tr></table></figure>

<p>上述动态代理的代码中最核心的方法就是Proxy.newProxyInstance()了。该方法返回了一个实现ProxyInterface接口，实际业务逻辑类型是RealObject的动态代理类。该代理类程序员并未编写，是在运行期动态生成的。</p>
<p>如果我们跟踪方法Proxy.newProxyInstance()的源码，会发现它进行了验证，优化，缓存，同步，生成字节码，显式类加载等操作。其中最重要的是生成字节码的操作，也是本方法的核心功能点，是通过sun.misc.ProxyGenerator.generateProxyClass()方法完成的。该方法生成的就是动态代理类的字节码，其基本思路并不复杂，基本就是在模仿javac编译器，为接口中定义的每一个方法，以及从java.lang.Object中继承来的equals(),hashCode(),toString()都生成对应的实现，实现的具体的逻辑由程序员写在实现InvocationHandler接口的对象的invoke()方法中。</p>
<p>需要注意的是，使用上述方法实现的动态代理技术是比较原始和粗糙的，实现的动态代理类也是高度模板化的，虽说是动态的，但灵活度并没有那么高。因此实际开发中，还是推荐大家使用大神们已经封装好的各种操作字节码的类库。这二者的关系就好比Javascript与Jquery。</p>
]]></content>
      <categories>
        <category>Java 反射</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat-CATALINA_HOME与CATALINA_BASE</title>
    <url>/2017/12/12/Tomcat-CATALINA_HOME%E4%B8%8ECATALINA_BASE/</url>
    <content><![CDATA[<p>如果同一台机器上只需要起一个Tomcat实例，那么是不涉及本文要探讨的问题的。不过如果要起多个实例呢？这在日常开发中确实是很常见的需求：例如多个程序员共用一台测试机，他们都需要在上面部署自己的Tomcat(显然将他们的应用都丢到一个Tomcat下是不合理的，因为没人希望启动自身应用时会带着把其他人的应用也启动起来)。</p>
<a id="more"></a>

<p>一个简单可行的解决方案就是将Tomcat复制为几个独立的副本，然后各自修改Tomcat的启动参数，例如端口，JVM参数等。</p>
<p>这个方法简单粗暴，然而却不那么优雅：因为通常修改的其实仅仅就只有启动参数，而绝大多数的资源，例如jar包，Tomcat的核心配置参数等都是重复的。当然也会有不通常的情况：某个实例要用Tomcat5而另一个要用Tomcat7。不过这个只是小概率事件，绝大多数时候都只需要改配置。</p>
<p>CATALINA_BASE就是为了解决这个问题而诞生的。简单来说，CATALINA_HOME是Tomcat的安装目录，CATALINA_BASE是Tomcat的工作目录。安装目录中存放的是Tomcat中可共享的资源，只有一个。而工作目录则是每个Tomcat实例对应一个，其中只存放自身特殊的配置信息，核心信息还是要去安装目录读取。</p>
<p>举个小例子。我的环境为Windows7，用于测试的Tomcat版本为apache-tomcat-7.0.82。其目录结构如下：</p>
<p><img src="/images/blog_pic/Tomcat/CATALINA_HOME%E4%B8%8ECATALINA_BASE/0.jpg" alt="0.jpg"></p>
<p>它的存放路径为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\test\apache-tomcat-7.0.82</span></pre></td></tr></table></figure>

<p>我们不妨将其设为CATALINA_HOME，即安装目录。然后我们再在其所在的目录中新建两个目录用于存放Tomcat实例：</p>
<p><img src="/images/blog_pic/Tomcat/CATALINA_HOME%E4%B8%8ECATALINA_BASE/1.jpg" alt="1.jpg"></p>
<p>即tomcat1及tomcat2的路径就是对应Tomcat实例的CATALINA_BASE，即工作目录。</p>
<p>现以实例tomcat1为例，将安装目录中每个实例私有的数据：</p>
<p><img src="/images/blog_pic/Tomcat/CATALINA_HOME%E4%B8%8ECATALINA_BASE/2.jpg" alt="2.jpg"></p>
<p>复制到目录tomcat1下。</p>
<p>当然为了能够同时启动各个实例，我们还必须为每个实例设置不同的监听端口。其位置在tomcat1目录下的conf/server.xml中。这里我们均保持默认值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Server port&#x3D;&quot;8005&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Service name&#x3D;&quot;Catalina&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Connector port&#x3D;&quot;8009&quot; protocol&#x3D;&quot;AJP&#x2F;1.3&quot; redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Service&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;Server&gt;</span></pre></td></tr></table></figure>

<p>为了启动方便，我们还可以在tomcat1目录下添加一个小脚本startup.bat：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set &quot;CATALINA_BASE&#x3D;%cd%&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set &quot;CATALINA_HOME&#x3D;D:\test\apache-tomcat-7.0.82&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">set &quot;EXECUTABLE&#x3D;%CATALINA_HOME%\bin\catalina.bat&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">call &quot;%EXECUTABLE%&quot; start</span></pre></td></tr></table></figure>

<p>同理，我们可以继续配置实例tomcat2，当然要给它一个不同的端口，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Server port&#x3D;&quot;8006&quot; shutdown&#x3D;&quot;SHUTDOWN&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;Service name&#x3D;&quot;Catalina&quot;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Connector port&#x3D;&quot;8088&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               connectionTimeout&#x3D;&quot;20000&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;Connector port&#x3D;&quot;8010&quot; protocol&#x3D;&quot;AJP&#x2F;1.3&quot; redirectPort&#x3D;&quot;8443&quot; &#x2F;&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;Service&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;Server&gt;</span></pre></td></tr></table></figure>

<p>依次双击tomcat1及tomcat2目录下的startup.bat。这样这两个实例便同时启动起来了：</p>
<p><img src="/images/blog_pic/Tomcat/CATALINA_HOME%E4%B8%8ECATALINA_BASE/3.jpg" alt="3.jpg"></p>
<p>至此，CATALINA_BASE便已介绍完毕了。我本人是很少用这个功能的，即便需要在同一个机器上起多个Tomcat实例，我往往也会采取本文最开始介绍的那种不那么”优雅”的做法。原因主要在于那样简单粗暴，不需要像后者这样配置来配置去。同时损失的不过是一点点磁盘空间而已，通常完全可以接受。</p>
]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-字节码解释执行引擎</title>
    <url>/2017/12/11/JVM-%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/</url>
    <content><![CDATA[<p>JVM对于字节码指令的执行方法有两种：</p>
<ul>
<li>解释执行：通过解释器执行</li>
<li>编译执行：通过即时编译器(JIT)产生本地代码执行</li>
</ul>
<p>本文重点探讨解释执行的具体过程。</p>
<a id="more"></a>

<h1 id="解释执行与编译执行"><a href="#解释执行与编译执行" class="headerlink" title="解释执行与编译执行"></a>解释执行与编译执行</h1><p>在真正开始讲解解释执行的具体过程之前，我想先提纲挈领的描述下解释执行与编译执行的区别。</p>
<p>Java经常会被人(尤其是主语言是其他开发语言的程序员)定位为解释执行的语言。其原因就在于1996年JDK1.0诞生时，其所使用的默认JVM为Sun Classic VM，这是一个纯解释执行的JVM，因此此时这样定位尚属准确。而到了1998年JDK1.2时，虽然默认JVM依然是Sun Classic VM，然而此时Sun Classic VM已不是唯一的JVM了，HotSpot VM这个解释与编译混合执行的JVM已被作为可选JVM加入JDK。而到了2000年的JDK1.3，HotSpot VM成为了默认JVM，Sun Classic VM降为可选JVM(JDK1.2到JDK1.3默认JVM的变化正所谓扶上马送一程)。自此以后用解释执行来描述Java就不再准确了，因为Class文件中的内容到底会被解释执行还是编译执行，就成了只有JVM自己才能准确判断的事情了。因此准确来说，Java是一门解释与编译混合执行的语言。</p>
<p>不过说真的，空洞的从理论上争论一个语言到底是解释执行还是编译执行其实意义并没有那么大。关键还是要结合实现，具体问题具体分析。高级编程语言也发展了这么多年了，其实际套路已无法完全遵循最初制定的框架(也就是计划赶不上变化)，C与C++现在也已经有了通过解释器执行的版本(如CINT)。而Java也不总是编译期与运行期断为两截了，也出现了直接将.java编译为本地机器代码的编译器(如GNU Compiler for the Java，即GCJ)。因此我们平常所说的”C/C++是编译执行的语言”，”Java是解释与编译混合执行的语言”等等所指的都是主流情况，而无法涵盖全部(因为实在也没必要较那个真)。</p>
<p>其实无论是基于物理机，JVM，亦或是其他的高级语言虚拟机(High Level Language Virtual Machine,HLLVM)，现代高级编程语言的执行流程都大同小异。在逻辑上基本不出下图的藩篱：</p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/0.png" alt="0.png"></p>
<p>显然，最下面那行对应编译执行，中间那行对应解释执行。而中间那行中的”指令流”一步指的自然是javac编译器生成.class文件的过程了。</p>
<p>上图中的思路即为现代经典编译原理的思路。在执行前先对程序源码进行词法分析和语法分析处理，把源码转化为抽象语法树(Abstract Syntax Tree,AST)。具体到每一门语言，这一步大体上会有3种实现思路：</p>
<ul>
<li>词法分析，语法分析，乃至后续的优化器及目标代码生成器等一切编译相关的组件均独立于执行器实现，形成一个完成的编译器。例如C/C++</li>
<li>将一部分组件(例如生成抽象语法树之前的步骤)实现为一个独立的编译器，而后续的步骤则与执行器混合在一起。例如Java</li>
<li>将所有的编译组件及执行组件均封装在一个黑盒中，例如大多数的JavaScript(JavaScript真不愧是以简单暴躁著称)</li>
</ul>
<p>或者我们可以更具体一些，对于JDK而言，javac编译器完成了上图中程序源码到第二行中指令流之间的过程。因为这一部分动作是在JVM之外进行的，而解释器在JVM内部，所以我们也说Java的编译器是半独立实现的(JVM之外javac实现的那部分是独立的，而JVM内部的那部分则不是)。</p>
<h1 id="基于栈的指令集与基于寄存器的指令集"><a href="#基于栈的指令集与基于寄存器的指令集" class="headerlink" title="基于栈的指令集与基于寄存器的指令集"></a>基于栈的指令集与基于寄存器的指令集</h1><p>JVM基本上是一种基于栈的指令集架构(Instruction Set Architecture,ISA)，指令依赖方法区-局部变量表-操作数栈进行工作。之所以说基本上，是因为纯粹的基于栈的指令集架构中的指令应该全部都是零地址指令，或者说是不带参数的指令。而JVM的指令集中有小部分指令是需要参数的。之所以做这个变通，是为了提高代码的可校验性。</p>
<p>与基于栈的指令集架构相对的另一套同样很常用的指令集架构是基于寄存器的指令集架构。最典型的就是x86的二地址指令集架构，或者更通俗的说，就是现在主流的PC微型机中直接支持的指令集架构，其中的指令依赖寄存器进行工作。那么，二者之间有何不同呢？</p>
<p>举个小例子，如果要计算1+1的结果，那么对于JVM中的基于栈的指令集而言是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iconst_1    &#x2F;&#x2F; 将1压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">iconst_1    &#x2F;&#x2F; 将1压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">iadd    &#x2F;&#x2F; 弹出操作数栈栈顶的两个int型元素求和后再将int型结果压回操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">istore_0    &#x2F;&#x2F; 将操作数栈栈顶的int型元素弹出并存入局部变量表索引为0的Slot中</span></pre></td></tr></table></figure>

<p>如果是针对基于寄存器的指令集架构的pc机而言，那么1+1是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mov eax, 1    &#x2F;&#x2F; 将eax寄存器的值设为1</span></pre></td></tr><tr><td class="code"><pre><span class="line">add eax, 1    &#x2F;&#x2F; 将eax寄存器中的值加1并存回eax寄存器</span></pre></td></tr></table></figure>

<p>那么这两套指令集哪一个更好一些呢？</p>
<p>其实这两套指令集能齐头并进的共同发展这么多年，本身便已给出答案了：自然是各有其优劣之处：某些场景下基于寄存器的指令集更好，另一些场景下则是基于栈的指令集更优秀一些。</p>
<p>基于栈的指令集较之基于寄存器的指令集最大的优势就在于栈更为抽象，从而易于移植。基于寄存器的指令集中所使用的寄存器往往由物理机在硬件上直接提供(之所以说往往，是因为也有基于虚拟机寄存器的例子。例如Google Android平台的Dalvik VM。不过，即便是基于虚拟机寄存器，也希望把虚拟机寄存器尽量映射到物理寄存器上以获得更高的性能)，这就不可避免的会受到硬件的约束。例如，32位80x86体系(主流PC机)的CPU提供了8个32位的寄存器，而ARM(主流手机)的CPU则提供了16个32位的通用寄存器。若使用基于寄存器架构的指令集，用户在编写指令时必须针对不同的物理寄存器设计不同的代码。而使用基于栈的指令集则屏蔽了这些底层的细节，用户使用的是抽象过的栈，至于具体的底层实现则交由虚拟机完成。</p>
<p>总结来说，基于栈的指令集会让程序员更为舒服，那么此消彼长，实际工作的虚拟机就不那么舒服了。上文中”具体的底层实现则交由虚拟机完成”意味着此时虚拟机需要做更多的操作，从而降低执行速度。因此，几乎所有主流的物理机的指令集都是基于寄存器的(因为也没什么可迁移的)。</p>
<p>通过上文1+1的小例子也可以看出：实现同一个功能，栈架构所用的指令往往要比寄存器架构所用的指令多(正如高级语言的源码通常会比汇编长那样)，因为对于实际功能而言，出栈入栈其实是多余的操作(更本质的来说，栈本身其实就是个多余的东西，因为虚拟机总归是要跑在物理机上的，而物理机又大多是基于寄存器的，因此最终干活的依然是寄存器。换句话说，栈架构相当于在寄存器架构的基础上为了便于迁移和理解加入了新的操作，自然就更长了)。</p>
<p>说栈架构比寄存器架构慢，上文给出的原因其实只是次要原因，更重要的是，栈并不是物理机实际提供的一个硬件，它只是存在于内存中的一个抽象概念。寄存器是距离CPU最近的存储单元，其次是缓存，然后才是内存。使用栈意味着指令中的那些出栈入栈其实都是CPU在与内存交互，尽管部分热点数据会进入缓存甚至寄存器，然而这无法从本质上解决问题，毕竟栈的主体依然还在内存中，而且频繁的内存-缓存-寄存器间数据的流动本身就是一项开销，因此栈架构比寄存器架构要慢很多。</p>
<h1 id="JVM的解释器的执行过程"><a href="#JVM的解释器的执行过程" class="headerlink" title="JVM的解释器的执行过程"></a>JVM的解释器的执行过程</h1><p>既然说JVM是基于栈的指令集架构的，那么下面就具体说说其解释器的执行过程。</p>
<p>首先我们看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int calc() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int a &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int b &#x3D; 200;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int c &#x3D; 300;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (a + b) * c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后我们用javap将这段代码反编译，我们只看其中的calc()方法的Code属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int calc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    stack&#x3D;2, locals&#x3D;4, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">       0: bipush        100</span></pre></td></tr><tr><td class="code"><pre><span class="line">       2: istore_1      </span></pre></td></tr><tr><td class="code"><pre><span class="line">       3: sipush        200</span></pre></td></tr><tr><td class="code"><pre><span class="line">       6: istore_2      </span></pre></td></tr><tr><td class="code"><pre><span class="line">       7: sipush        300</span></pre></td></tr><tr><td class="code"><pre><span class="line">      10: istore_3      </span></pre></td></tr><tr><td class="code"><pre><span class="line">      11: iload_1       </span></pre></td></tr><tr><td class="code"><pre><span class="line">      12: iload_2       </span></pre></td></tr><tr><td class="code"><pre><span class="line">      13: iadd          </span></pre></td></tr><tr><td class="code"><pre><span class="line">      14: iload_3       </span></pre></td></tr><tr><td class="code"><pre><span class="line">      15: imul          </span></pre></td></tr><tr><td class="code"><pre><span class="line">      16: ireturn</span></pre></td></tr></table></figure>

<p>这段信息首先告诉我们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stack&#x3D;2, locals&#x3D;4, args_size&#x3D;1</span></pre></td></tr></table></figure>

<p>即操作数栈的最大深度为2，局部变量表的长度为4个Slot，传入参数个数为1(this)。</p>
<p>现在我们以如下7张图描述解释器的执行过程：</p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/1.png" alt="1.png"></p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/2.png" alt="2.png"></p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/3.png" alt="3.png"></p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/4.png" alt="4.png"></p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/5.png" alt="5.png"></p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/6.png" alt="6.png"></p>
<p><img src="/images/blog_pic/JVM/%E5%AD%97%E8%8A%82%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%BC%95%E6%93%8E/7.png" alt="7.png"></p>
<p>需要说明的是，上面的过程仅仅是理论上的概念模型，而大多数的JVM实现都会做一些优化来提高性能，因此实际运行起来通常不会与这个概念模型完全相同。其实更准确的说，主流JVM的实际情况会与这个概念模型的差别非常大。例如HotSpot的指令集中有很多以”fast_”开头的非标准字节码指令用于合并，替换输入的字节码以提升解释执行的性能。而对于即时编译器(JIT)而言，优化的手段就更加花样繁多了。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO-File类</title>
    <url>/2017/12/09/JavaIO-File%E7%B1%BB/</url>
    <content><![CDATA[<p>java.io.File类以文件的全路径名为核心要素，操作文件的各项属性。换句话说，一个File类的实例就代表一个文件。这里需要注意的是在File类眼中我们通常意义上的文件和目录并没有本质上的区别，在大的类别上都会被其视为文件。</p>
<a id="more"></a>

<h1 id="统一的分隔符"><a href="#统一的分隔符" class="headerlink" title="统一的分隔符"></a>统一的分隔符</h1><p>以Windows系统为例，E盘下的a目录下的b.txt文件的全路径名可表示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\a\b.txt</span></pre></td></tr></table></figure>

<p>但是我们却无法直接在Java中定义这样的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String filePath &#x3D; &quot;E:\a\b.txt&quot;;</span></pre></td></tr></table></figure>

<p>会无法通过编译，Eclipse中的提示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Invalid escape sequence (valid ones are \b \t \n \f \r \&quot; \&#39; \\ )</span></pre></td></tr></table></figure>

<p>很显然，’&#39;这个字符是转义字符的前置标记，像上例那么写会引起编译器的迷惑，它不知道我们是真的想输出’&#39;还是想将’&#39;后的字符转义。因此，如果我们真的想输出’&#39;，只能这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String filePath &#x3D; &quot;E:\\a\\b.txt&quot;;</span></pre></td></tr></table></figure>

<p>从书写的角度上来讲，这是不符合人类的认知习惯的。</p>
<p>不仅如此，以上仅仅只是Windows系统的路径规范，到了其他操作系统中一般都会有所不同。例如Linux系统中类似文件的全路径为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">e&#x2F;a&#x2F;b.txt</span></pre></td></tr></table></figure>

<p>此时就不涉及转义问题而可直接在Java中声明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String filePath &#x3D; &quot;e&#x2F;a&#x2F;b.txt&quot;;</span></pre></td></tr></table></figure>

<p>这其实是相悖于Java的平台无关性口号的，因为我们此时已经需要根据底层操作系统的不同编写不同的代码了。同时还牵扯到让人难以理解的转义问题。</p>
<p>为了最大限度的解决这个问题，File类中提供了读取系统目录连接字符的类变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static final char separatorChar &#x3D; fs.getSeparator();</span></pre></td></tr></table></figure>

<p>这个字段读出来的就是当前系统的连接符了。例如Windows下是’&#39;，而Linux下是’/‘。并且也不会涉及到转义的问题。</p>
<p>考虑到比起char，大家应该更习惯使用String，因此File类中还贴心的提供了String版本的连接符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static final String separator &#x3D; &quot;&quot; + separatorChar;</span></pre></td></tr></table></figure>

<p>这样在我的Windows系统中的下述代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder(&quot;E:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                  .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                  .append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                  .append(&quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(sb.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\a\b.txt</span></pre></td></tr></table></figure>

<p>最后需要说明的是，虽然Windows系统下默认的连接符是’&#39;，然而Java却也没那么死板。写成’/‘在Windows系统中其实也能识别：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(&quot;E:&#x2F;a&#x2F;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getPath());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\a\b.txt</span></pre></td></tr></table></figure>

<p>很显然，输出结果又变回了Windows系统默认的’&#39;，显然是其内部有所转换。当然这个灵活性也要有个限度，例如Windows系统下如果写成这个样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File file &#x3D; new File(&quot;E&#x2F;a&#x2F;b.txt&quot;);</span></pre></td></tr></table></figure>

<p>再或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File file &#x3D; new File(&quot;&#x2F;E&#x2F;a&#x2F;b.txt&quot;);</span></pre></td></tr></table></figure>

<p>再或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File file &#x3D; new File(&quot;E\\a\\b.txt&quot;);</span></pre></td></tr></table></figure>

<p>再或者：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File file &#x3D; new File(&quot;\\E\\a\\b.txt&quot;);</span></pre></td></tr></table></figure>

<p>总之，要是连盘符划分都去掉，即不写”:”，那只靠Java API核心类库是肯定读不出文件的。</p>
<p>因此个人建议干脆放弃这个其实不那么灵活的灵活性，既然File类中已经给出了类变量，那么就尽量不要写硬编码。退一步讲，即便写了硬编码，也最好用系统默认的连接符。例如如果要使用Windows系统的文件系统，那么连接符就用’&#39;，而不是’/‘。</p>
<h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getPath());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.exists());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\a</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr></table></figure>

<p>直接以全路径名构建File对象。这是最直接也是最常用的构造方式。注意构建File对象并不需要被构建的文件一定真实存在，例如本例中就是这样。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path0 &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file0 &#x3D; new File(path0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1 &#x3D; new File(file0, &quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.getParent());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.getPath());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\a</span></pre></td></tr><tr><td class="code"><pre><span class="line">D:\a\b.txt</span></pre></td></tr></table></figure>

<p>因为目录结构总是有所属关系的，因此在已有File对象内部(此时该File对象必定是个目录)创建新File对象也是常见的需求。这比直接使用全路径名创建File对象更符合层级关系，某些情况下更易于被开发人员所理解。例如上例中，我们就以file0为父目录，创建了新文件file1。</p>
<p>当然，上文所说的”该File对象必定是个目录”在构造File对象时依然没有检查(连是否存在都不检查又怎么会检查到底是文件还是目录呢？)。由此可见，File类的检查限制是相对宽松的：磁盘中实际存在的文件是一回事，内存中声明的File对象又是另一回事。为什么这么做的原因也是很好理解的：Java怎么会知道你新建一个File对象的目的是什么呢？也许你就是想在磁盘上新创建一个本不存在的文件呢？此时没有才是正常的。因此除非具体操作产生矛盾(例如明明磁盘上没有这个文件却当是有那样读里面的内容，再或者明明实际是个文件却当是目录那样在内部创建新文件等等)，否则不会在创建File对象时就进行严格的检查。</p>
<p>如果父目录还没来得及生成File对象，也可按如下方式来做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path0 &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1 &#x3D; new File(path0, &quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.getParent());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.getPath());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\a</span></pre></td></tr><tr><td class="code"><pre><span class="line">D:\a\b.txt</span></pre></td></tr></table></figure>

<p>显然，效果是一样的。</p>
<hr>
<p>我们还可以以URI对象为核心构造File类对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.net.URI;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.net.URISyntaxException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws URISyntaxException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        URI uri &#x3D; new URI(&quot;file:&#x2F;D:&#x2F;a&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(uri);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getPath());</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(file.exists());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\a</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr></table></figure>

<p>URI(Uniform Resource Identifier)，即统一资源标识符，一如其名，即试图用一个统一的格式描述来源不同的资源文件。正如上例中提到的，存储于文件系统中的URI字符串为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;D:&#x2F;a</span></pre></td></tr></table></figure>

<p>依据URI，我们同样可以构建出对应的File类对象。显然构建URI类对象时仍然不会检查资源是否存在。</p>
<p>关于URI，还需注意的一点是，它已经是超脱于实际操作系统之上的抽象概念了。因此其资源路径的表示方法是固定的，和具体的操作系统无关。上例中，不管使用什么文件系统，都是(当然，Linux下D:中的盘符:要去掉)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URI uri &#x3D; new URI(&quot;file:&#x2F;D:&#x2F;a&quot;);</span></pre></td></tr></table></figure>

<p>即便在Windows系统中，使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URI uri &#x3D; new URI(&quot;file:\\D:\\a&quot;);</span></pre></td></tr></table></figure>

<p>也是错误的。</p>
<h1 id="File对象是否真的存在"><a href="#File对象是否真的存在" class="headerlink" title="File对象是否真的存在"></a>File对象是否真的存在</h1><p>假设：D盘下有目录a，a中有文件b.txt。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path0 &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file0 &#x3D; new File(path0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1 &#x3D; new File(file0, &quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.exists());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.exists());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<h1 id="实际是目录还是文件"><a href="#实际是目录还是文件" class="headerlink" title="实际是目录还是文件"></a>实际是目录还是文件</h1><p>假设：D盘下有目录a，a中有文件b.txt。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path0 &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file0 &#x3D; new File(path0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1 &#x3D; new File(file0, &quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.isDirectory());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.isFile());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.isDirectory());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.isFile());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<h1 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h1><p>假设：D盘下有目录a，a中有文件b.txt。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path0 &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file0 &#x3D; new File(path0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1 &#x3D; new File(file0, &quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.isHidden());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.canRead());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.canWrite());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.canExecute());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.isHidden());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.canRead());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.canWrite());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.canExecute());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<p>需要注意的是，a作为一个目录也被判为可执行了。显然这些权限判断方法仅仅关心是否有权限，至于被操作的对象能不能做到则不在乎。这又是和整个File类一脉相承的设计思路一致。</p>
<h1 id="最后修改时间"><a href="#最后修改时间" class="headerlink" title="最后修改时间"></a>最后修改时间</h1><p>假设：D盘下有目录a</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long time &#x3D; file.lastModified();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(new Date(time));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sun Dec 10 21:30:33 CST 2017</span></pre></td></tr></table></figure>

<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><p>假设：D盘下有目录a，a中有文件b.txt。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path0 &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file0 &#x3D; new File(path0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1 &#x3D; new File(file0, &quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.getName());    &#x2F;&#x2F; 简单文件名</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.getPath());    &#x2F;&#x2F; 全路径名</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.length());    &#x2F;&#x2F; 长度，单位为byte(目录的长度默认为0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.getName());    &#x2F;&#x2F; 简单文件名</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.getPath());    &#x2F;&#x2F; 全路径名</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.length());    &#x2F;&#x2F; 长度，单位为byte</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a</span></pre></td></tr><tr><td class="code"><pre><span class="line">D:\a</span></pre></td></tr><tr><td class="code"><pre><span class="line">0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">b.txt</span></pre></td></tr><tr><td class="code"><pre><span class="line">D:\a\b.txt</span></pre></td></tr><tr><td class="code"><pre><span class="line">11405</span></pre></td></tr></table></figure>

<h1 id="父文件"><a href="#父文件" class="headerlink" title="父文件"></a>父文件</h1><p>所谓父文件，若某文件在某目录下，那么该目录就相当于该文件的父文件。假设：D盘下有目录a，a中有文件b.txt。此时a是b.txt的父文件。D:是a的父文件。显然只有目录才有资格做父文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path0 &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .append(&quot;a&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file0 &#x3D; new File(path0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1 &#x3D; new File(file0, &quot;b.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0.getParent());    &#x2F;&#x2F; 获得父文件全路径名</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file0p &#x3D; file0.getParentFile();    &#x2F;&#x2F; 获得父文件实例</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file0p.getPath());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1.getParent());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file1p &#x3D; file1.getParentFile();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file1p.getPath());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\</span></pre></td></tr><tr><td class="code"><pre><span class="line">D:\</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">D:\a</span></pre></td></tr><tr><td class="code"><pre><span class="line">D:\a</span></pre></td></tr></table></figure>

<p>那么我们不禁好奇，作为顶层目录的D盘的父文件会是什么呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                              .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getParent());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.getParentFile());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr></table></figure>

<p>输出都是null，合情合理。</p>
<h1 id="获得目录下所有内容"><a href="#获得目录下所有内容" class="headerlink" title="获得目录下所有内容"></a>获得目录下所有内容</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File root &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(File file : root.listFiles()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String type &#x3D; file.isFile() ? &quot;文件&quot; : &quot;文件夹&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            String hiden &#x3D; file.isHidden() ? &quot;(隐藏)&quot; : &quot;(可见)&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(type + hiden + &quot;\t&quot; + file.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文件夹(隐藏)	$RECYCLE.BIN</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	15055</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	360Downloads</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	360Rec</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	Driver</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(可见)	game</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	MSOCache</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(可见)	program</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	SoftwareDistribution</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	System Volume Information</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(可见)	temp</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件(可见)	test.txt</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	WindowsApps</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(可见)	work</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	WpSystem</span></pre></td></tr><tr><td class="code"><pre><span class="line">文件夹(隐藏)	WUDownloadCache</span></pre></td></tr></table></figure>

<h1 id="实际创建文件"><a href="#实际创建文件" class="headerlink" title="实际创建文件"></a>实际创建文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;Reimu.txt&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.createNewFile());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在没有D:\Reimu.txt的前提下，上述代码执行后，D:\Reimu.txt会被创建。程序输出true。</p>
<p>记录下此时的文件属性：</p>
<p><img src="/images/blog_pic/JavaIO/File%E7%B1%BB/0.jpg" alt="0.jpg"></p>
<p>那么我们不禁会想：如果创建前文件已存在会怎么样呢？于是再次执行代码。程序输出false。再看D:\Reimu.txt，发现没有任何变化。</p>
<p>难道说，如果待创建文件已存在，便输出一个false，然后什么都不做吗？</p>
<p>为了验证上述猜想，我们不妨手动修改D:\Reimu.txt的内容，比如在其中添加文本：魔理沙么么哒。然后此时我们再看文件属性：</p>
<p><img src="/images/blog_pic/JavaIO/File%E7%B1%BB/1.jpg" alt="1.jpg"></p>
<p>理所当然的，文件大小及修改时间发生了相应的变化。此时我们再执行上述代码，依然输出false。随后我们再观察D:\Reimu.txt的属性，发现没有任何变化，内容也依然是魔理沙么么哒(若代码生效了内容应被替换为空文件)。说明猜想成立。</p>
<h1 id="实际创建目录"><a href="#实际创建目录" class="headerlink" title="实际创建目录"></a>实际创建目录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;Reimu.txt&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.mkdir());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在没有D:\Reimu.txt存在的情况下，上述代码输出true。并成功创建了目录D:\Reimu.txt。注意这里创建的Reimu.txt看似是txt文件，然而实则是目录。我之所以起这么诡异的名字，就是为了说明Java之所以统一使用File类描述文件和目录，在底层没有对二者做本质上的区分是有道理的：因为确实也没那么大的差别，起码无法从名字上就能确认到底是文件还是目录。</p>
<p>同理，我们再执行一次上述代码，输出false。说明创建失败，什么都不做。</p>
<p>需要注意的是，若D盘下存在文件Reimu.txt(注意，这次真的是文件了，不是目录)，此时执行上述代码依然输出false。说明即便一个是目录，一个是文件，依然不允许重名。事实上，如果在Windows系统下通过图形化界面直接这么做，依然不会通过：</p>
<p><img src="/images/blog_pic/JavaIO/File%E7%B1%BB/2.jpg" alt="2.jpg"></p>
<p>看来不仅是Java，Windows系统也没有对文件和目录做本质上的区分。</p>
<p>然后我们再看以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;dir1&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;dir2&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.mkdir());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>目录dir1及目录dir2均不存在，此时执行上述代码输出false。D盘下也未创建任何目录。这也很合理：dir1都不存在，自然无法创建其里层的dir2。但同时这又是一个很常见的需求，就是要直接连续创建目录，难道此时只能将创建过程断成很多截，一层目录一层目录的创建吗？</p>
<p>为了解决这个问题，File类提供了如下解决方案：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;dir1&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;dir2&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.mkdirs());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>目录dir1及目录dir2均不存在，此时执行上述代码输出true。同时按目录层级D:\dir1\dir2创建了目录dir1及目录dir2。</p>
<h1 id="实际删除文件-目录"><a href="#实际删除文件-目录" class="headerlink" title="实际删除文件/目录"></a>实际删除文件/目录</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;1.txt&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.delete());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>已有文件D:\1.txt的前提下，上述代码执行后输出true。同时磁盘中的文件被删除。需要注意的是，这种删除方式非常霸道：被删除的文件是彻底被删除了，并非被放到回收站等缓冲地带中。</p>
<p>当然，若待删除文件实际不存在，则输出false，并什么都不做。</p>
<p>关于目录的删除方式大同小异：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;dir1&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(file.delete());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>D盘下存在目录dir1，dir1中为空。上述代码执行后返回true。同时D盘下的dir1被删除，且依然是彻底删除。</p>
<p>不过若dir1下不为空，比如说有目录dir2或文件1.txt，那么上述代码执行后返回false，并且什么都不会做，即只要目录下有内容就不会删除目录。这样设计是很有必要的，因为正如我们前文所述，Java的这种删除方法实在是过于霸道且毫无容错机制，那么如果我们一个手抖不小心将删除的目录写成了D:\，如果自动递归删除目录下的所有内容的话，那相当于直接把D盘给格式化了。当然说格式化其实有些过了，因为毕竟有些文件Java是没有操作权限的，不过即便如此，也依然是够糟糕的了。</p>
<h1 id="小例子：递归打印目录层级"><a href="#小例子：递归打印目录层级" class="headerlink" title="小例子：递归打印目录层级"></a>小例子：递归打印目录层级</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.File;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void printFileSystemRecursion(File file, int depth) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean isDirectory &#x3D; file.isDirectory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder(&quot;[&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb &#x3D; isDirectory ? sb.append(&quot;d&quot;) : sb.append(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb &#x3D; file.canRead() ? sb.append(&quot;r&quot;) : sb.append(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb &#x3D; file.canWrite() ? sb.append(&quot;w&quot;) : sb.append(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb &#x3D; file.canExecute() ? sb.append(&quot;x&quot;) : sb.append(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb &#x3D; file.isHidden() ? sb.append(&quot;.&quot;) : sb.append(&quot;-&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(&quot;]&quot;).append(file.getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; depth; i++) System.out.print(&quot;       &quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(sb.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!isDirectory) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(File temp : file.listFiles()) Test.printFileSystemRecursion(temp, depth + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void printFileSystem(File file) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!file.exists()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(file.getPath() + &quot;不存在&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.printFileSystemRecursion(file, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String path &#x3D; new StringBuilder(&quot;D:&quot;).append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;work&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;java&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;javaSoft&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;jdk&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(File.separator)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .append(&quot;include&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                             .toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        File file &#x3D; new File(path);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.printFileSystem(file);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[drwx-]include</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [-rwx-]classfile_constants.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [-rwx-]jawt.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [-rwx-]jdwpTransport.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [-rwx-]jni.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [-rwx-]jvmti.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [-rwx-]jvmticmlr.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">       [drwx-]win32</span></pre></td></tr><tr><td class="code"><pre><span class="line">              [drwx-]bridge</span></pre></td></tr><tr><td class="code"><pre><span class="line">                     [-rwx-]AccessBridgeCallbacks.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">                     [-rwx-]AccessBridgeCalls.c</span></pre></td></tr><tr><td class="code"><pre><span class="line">                     [-rwx-]AccessBridgeCalls.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">                     [-rwx-]AccessBridgePackages.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">              [-rwx-]jawt_md.h</span></pre></td></tr><tr><td class="code"><pre><span class="line">              [-rwx-]jni_md.h</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java IO</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO</tag>
        <tag>流</tag>
        <tag>File</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-动态类型语言支持</title>
    <url>/2017/12/08/JVM-%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<h1 id="一些废话"><a href="#一些废话" class="headerlink" title="一些废话"></a>一些废话</h1><p>对于是否要写这篇文章，我其实犹豫了很久。因为我个人对Java的这套动态类型语言当前的实现方案可以说是深恶痛绝，根本是连看都不想看到。此前我就曾在另一篇博文<a href="/2017/11/23/JVM-类加载机制/">JVM-类加载机制</a>中狠狠的抱怨过：</p>
<p><em>在此我想稍稍抱怨一下(当然，我不行，我也不上，我实在就是想bb两句)，自从我开始研究JVM起，invokedynamic指令连同它所希望实现的动态语言支持简直就像是个毒瘤，JVM规范在面对这个问题时总会变得扭曲不自然。逻辑变得复杂难懂倒还在其次，最重要的还是失去了缜密的美感，让人看着难受。细思其缘由，我想还是因为该功能实在是与Java设计的初衷背离太远所致：需求分析的时候完全没在这地方留灵活度，上线后发现需求迫切没办法强行加功能。Java语言自最初起就被设计为了静态类型语言，但是随着时代的发展，人们对动态类型的需求逐渐迫切，Java也总是会因此被人指为不灵活，逐渐要被时代所抛弃。Java也在竭力进行改良，其结果就是现在我们看到的动态语言支持方案。个人认为这个方案比较糟(我没有更好的方案，但就是感觉比较糟)，其与Java基本的结构完全不同，仅仅只是一个为了实现功能的异类。好了=-=，抱怨结束。</em></p>
<a id="more"></a>

<p>不过抱怨归抱怨，该学的还是要学。难道JVM设计团队不清楚强行添加不合乎设计初衷的功能的后果吗？因为这实在是不得已而为之。当年高司令在为Java搭建基础架构时也不可能想到未来动态类型的需求会这么大。所以犹豫再三，我还是决定写下这篇博文，毕竟人生不如意事十之八九，很多事即便不想去做，也不得不做。</p>
<h1 id="静态类型语言与动态类型语言"><a href="#静态类型语言与动态类型语言" class="headerlink" title="静态类型语言与动态类型语言"></a>静态类型语言与动态类型语言</h1><p>在介绍Java对动态类型语言的支持之前，自然要先介绍什么是动态类型语言。而为了能使得介绍更为全面，自然也要将相关的概念一并介绍才行。</p>
<p>首先是第一组概念：</p>
<p>动态类型语言(Dynamically Typed Language)：也叫动态语言。动态类型语言是指在运行期才去做数据类型检查的语言。声明变量时无需指明变量的数据类型，该语言会在第一次为变量赋值时，自动在内部将数据类型记录下来。Python和Ruby就是典型的动态类型语言。</p>
<ul>
<li>静态类型语言(Statically Typed Language)：也叫静态语言。静态类型语言与动态类型语言刚好相反，编译期就会进行数据类型检查。换句话说，变量在声明时就需要指明数据类型。C/C++和Java均是典型的静态类型语言。</li>
</ul>
<p>然后是第二组概念：</p>
<ul>
<li><p>强类型语言(Strongly Typed)：一旦给一个变量赋上初值后，那么这个变量的数据类型就确定为这个初值的数据类型。除非发生强制类型转换，该变量的数据类型都不会发生变化，因此往往也会被称为类型安全的语言。Java就是典型的强类型语言。</p>
</li>
<li><p>弱类型语言(Weakly Typed)：数据类型可以被忽略的语言。它与强类型的语言相反，一个变量在其生命周期中可以被赋不同数据类型的值。因此往往也会被称为类型不安全的语言。</p>
</li>
</ul>
<p>动态-静态与强类型-弱类型是两组容易被混淆的概念。事实上，二者的划分依据是不同的。动态-静态看的是变量初始时是否就需要确定数据类型，而强类型-弱类型看的是一旦变量被赋了初值后是否能发生变化。因为二者依据的是不同划分标准，所以共可能有4种排列组合结果：</p>
<p><img src="/images/blog_pic/JVM/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E8%AF%AD%E8%A8%80%E6%94%AF%E6%8C%81/0.jpg" alt="0.jpg"></p>
<p>上图中关于C++/C需要特别说明一下，这两个语言从语法层面看起来是强类型语言，然而其底层遵循的却是弱类型。因此业界对于这个问题其实比较模糊，没有什么明确的结论(注意不要拿这种无聊的问题和他人撕逼，C/C++更关心的是数据在内存中的长度，也就是更关心更底层，更本质的东西，其实并不特别在意数据类型，上图仅用于举例)。</p>
<p>以上是这些概念的抽象化描述。我们不妨再举一些实际的例子来说明各语言间因此可能产生的差异。</p>
<p>先来看下面这段Java代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int[] a &#x3D; new int[-1];</span></pre></td></tr></table></figure>

<p>这行代码是可以通过编译的，但是会在运行时抛出NegativeArraySizeException。JVM规范中明确规定NegativeArraySizeException是一个运行时异常，也就是说，所谓运行时异常，指得就是会抛出这种异常的代码不仅能通过编译，而且只要没被真正运行到，就不会抛出异常。与之相对的异常是连接时异常(例如NoClassDefFoundError)，连接时异常依然可以逃过编译，但是却无论如何也逃不过类加载的连接-解析阶段。通俗的说，就是指即便会抛出这种异常的代码存在于一条无法被执行到的分支路径上，照样也会抛出异常。其实这也很好理解：所谓连接时异常，指的自然就是在方法进行连接，也就是从符号引用到实际引用的过程中产生了异常，发生于类加载阶段，而对于每个需被加载到内存中的类而言，它根本不在乎代码是否在当前可能的执行路径上(事实上即便在乎也拿不到，除非程序实际运行到那行代码，否则类加载阶段是无法模拟预测程序会如何运行的)。因此这种异常一定会在类加载阶段被发现并抛出。</p>
<p>不过C语言中，含义相同的代码却无法通过编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i[-1];</span></pre></td></tr></table></figure>

<p>此时GCC会拒绝编译，报”size of array is negative”。</p>
<p>之所以会产生这种差异，主要是因为Java的编译期编译出的那个class文件并不是通常意义上的编译文件。C中编译期输出的结果直接就是最终结果了，能被实际执行指令的本地机器读取，自然要对结果负责。而Java编译出的这个class文件却只是供JVM使用的Java体系内部生成的字节码文件，要想让本地机器认识，还得在运行期翻译为本地机器的机器码。因此自然可以将部分所谓的这个编译期的工作挪到后续的运行期。</p>
<p>由上面的小例子我们可以得出以下推论：不同语言对数据的检查操作会发生在什么时期是没有固定的标准的，完全看语言本身的特性。所谓的”类型检查”也是同理。我们再看下面这段Java代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        obj.println(&quot;hello&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如果全部代码只有这一行，那么显然是不行的，因为你没头没脑的冒出一个obj，JVM都不知道这个obj到底是什么，自然无法通过编译，会报obj cannot be resolved。为此，我们稍加修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PrintStream obj &#x3D; System.out;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        obj.println(&quot;hello&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该代码会顺利运行并输出字符串hello。然后我们再修改一下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PrintStream obj &#x3D; new T();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        obj.println(&quot;hello&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class T &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void println() &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时将无法通过编译，并报Type mismatch: cannot convert from T to PrintStream。原因很简单：Java是静态类型语言，既然声明obj时规定了其静态类型为PrintStream，那么在赋初值时其实际类型就必须是PrintStream或PrintStream的孩子。其他类，即便其内部同样包含调用所需的println()也不行。</p>
<p>但是相同含义的代码在ECMAScript(即JavaScript)中却能正确运行。因为JavaScript是弱类型语言(同时也是动态类型语言)，其根本就没有变量声明时的静态类型这一说，在其生命周期中所指向的实际类型自然也可以随意的变化。当执行到调用println()这一行的代码时，只要obj此时所指向的实际类型中有符合条件的println()即可。换句话说，对于动态类型语言而言，变量本身是没有类型的，变量指向的值才有类型。</p>
<p>静态类型语言在编译期确定类型，最显著的好处是编译器可以提供严谨的类型检查，这样与类型相关的问题能在编译期就及时发现，利于稳定性及代码达到更大的规模。而动态类型语言在运行期确定类型，则可以为开发人员提供更大的灵活性。同时也能为代码”瘦身”。例如用Java写出的上百行代码用Python实现可能只需几十行，提升简洁性的同时可读性往往也更高，提高开发人员的开发效率。</p>
<h1 id="JDK1-7引入动态类型语言支持前的技术背景"><a href="#JDK1-7引入动态类型语言支持前的技术背景" class="headerlink" title="JDK1.7引入动态类型语言支持前的技术背景"></a>JDK1.7引入动态类型语言支持前的技术背景</h1><p>自1996年JDK1.1诞生起，十余年间，其JVM的字节码指令集始终未发生任何变化。直至2011年JDK1.7发布，字节码指令集终于又迎来了一位新成员：invokedynamic指令。其目的就是为了使得JDK1.7支持本文所介绍的动态类型语言。也为JDK1.8可以顺利实现Lambda表达式打下基础。</p>
<p>本小节的标题是有讲究的。JDK1.7并未引入动态类型语言，而只是引入动态类型语言支持。换句话说，从本质上讲，Java依然是静态类型语言，无论动态类型的需求多么强烈，都不可能动摇Java的根本。Java只是在保证基本面不变的前提下，适当加入了支持动态类型的指令和逻辑。</p>
<p>本文开头说动态类型语言与Java的设计初衷相悖其实是有些绝对了。因为自打一开始Java体系就在构建两个无关性：平台无关性及语言无关性。Java体系的规范也被一分为二：Java语言规范与JVM规范始终都是独立实现的。其目的就是为了让JVM与Java解耦，JVM是运行Java的平台，却不仅仅是运行Java的平台，理论上只要符合它的class文件格式规范，它能容纳所有的编程语言，而这个”所有”当然是包括动态类型语言的。</p>
<p>所以说，并不能说最开始规划的时候完全没想到，而是规划的蓝图太过虚无缥缈(在JVM上支持一切语言，Java这是想千秋万载一统江湖吗)，导致执行的时候完全没遵循(其实还是然并卵)。在JDK1.7之前，无论是Java语言还是JVM走得都是坚定的静态类型道路。其对动态类型支持的缺失主要是体现在方法调用上。JDK1.7之前共有4条方法调用指令：</p>
<ul>
<li>0xb6(invokevirtual):调用实例方法。会根据对象的实际类型进行动态单分派(虚方法分派)</li>
<li>0xb7(invokespecial):以操作数栈栈顶reference类型的数据所指向的对象为方法的接收者，调用此对象的实例构造器<init>方法，私有方法或超类构造方法。该指令的操作码之后会紧跟一个u2的操作数说明具体调用的是哪个方法，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该方法的方法符号引用</li>
<li>0xb8(invokestatic):调用类方法(static修饰的方法)</li>
<li>0xb9(invokeinterface):调用接口方法。运行期解释器会搜索一个实现了该接口方法的对象，并调用对应实现的接口方法</li>
</ul>
<p>这4条指令接收的第一个参数都是被调用方法的符号引用(也就是类文件常量池中的CONSTANT_Methodref_info或CONSTANT_InterfaceMethodref_info类型的常量)。既然这个信息是在编译期生成的，那么其中记述的自然只能是调用该方法的对象的静态类型。而动态类型语言需要的却是对象第一次被赋值时的实际类型，并没有所谓的静态类型的概念。这样编译期就无能为力了，只能交由JVM在运行期来做。</p>
<p>虽然决定了JVM来做，但还有JVM怎么做的问题。一种思路就是让底层的改动尽量小一些。换句话说，最终调用方法的还是上文的那4条指令，JVM底层其实依然无法支持动态类型，只是在上层玩些骚操作，让使用者从结果上”看起来”是实现动态类型了。比如编译期编译时在class文件中留个占位符类型，运行期动态生成字节码得到实际类型并存入该占位符，然后在调用这些方法时，就不使用通用位置的符号引用了，而是使用这个占位符。</p>
<p>关于这种用伪物替换真物的行为，JDK1.5引入泛型时曾做过一次。其效果很不理想，因为假的就是假的，为了让底层架构的改动较小而使用了伪物，其结果就是为了让它能实现真物的功能而付出了巨大的代价。更糟糕的是，即便付出了代价，这个伪物所实现的功能依然是似是而非，直到现在Java的泛型还存在很多莫名其妙的规范，这些与其说是规范，更接近于bug，只是Java设计团队实在没法解了，便当作规范告诉开发人员不要这么做。</p>
<p>而在动态类型支持这件事上，JVM设计团队还是很明智的：使用真物。因为本来此前的设计思路就与动态类型不合，开发难度已然较大，要是再加上真物伪物的复杂性，这功能基本也就没法看了。</p>
<p>JDK1.7中，这个真物体现在JVM层面就是新增的invokedynamic指令，该指令为动态类型而生，直接支持动态类型。而在Java语言层面的体现则是新增的java.lang.invoke包。</p>
<h1 id="java-lang-invoke包"><a href="#java-lang-invoke包" class="headerlink" title="java.lang.invoke包"></a>java.lang.invoke包</h1><p>我们先来讲java.lang.invoke包，因为毕竟较之JVM，程序员还是对Java语言更有亲切感。</p>
<p>java.lang.invoke包(该包曾经历过几次改名，最开始很长一段时间内都叫做java.dyn，后来也曾短暂的改名为java.lang.mh，最后确定名称为java.lang.invoke)的主要目的是在之前单纯依靠符号引用来确定需调用的方法的方式之外，提供一种新的动态确定目标方法的机制，称为MethodHandle。</p>
<p>这与C/C++中的Function Pointer(函数指针)或C#中的Delegate类似。以C/C++中的函数指针为例，如果我们要实现一个带谓词的排序函数，常用做法是把谓词定义为函数，用函数指针把该谓词传递到排序方法，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void sort(int list[], const int size, int (*compare)(int, int))</span></pre></td></tr></table></figure>

<p>换句话说，这是把方法当成一个变量丢到另一个方法的入参里了。Java就做不到这一点。如要在Java中实现类似的功能，则需要绕一些远路：通常是设计一个带有compare()方法的Comparator接口，然后将实现了这个接口的对象传入排序函数，排序函数内部再回调该对象的compare()方法。我们平时最常用的java.util.Collections类的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static &lt;T&gt; void sort(List&lt;T&gt; list, Comparator&lt;? super T&gt; c)</span></pre></td></tr></table></figure>

<p>其内部就是按照这个思路实现的。</p>
<p>不过，在JDK1.7引入MethodHandle后，Java也拥有类似于C++的函数指针的功能了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.invoke.MethodHandle;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.lang.invoke.MethodHandles;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.lang.invoke.MethodType;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final MethodHandle getPrintlnMH(Object receiver) throws NoSuchMethodException, IllegalAccessException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;*</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * MethodType代表方法类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 其类方法methodType()：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 第一个参数：方法的返回值</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 后续参数：方法接收的参数列表</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        MethodType mt &#x3D; MethodType.methodType(void.class, String.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * MethodHandles.lookup().findxxx()方法的作用为在指定类中找到符合方法签名，返回值及访问权限要求的方法句柄</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 具体到本例中，因需要调用的是虚方法。故调用findVirtual()方法。其参数含义为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 参数1：方法接收者所属类。遵正常渠道调用的虚方法编译器会隐式添加指向接收者的this指针，此处则需要我们自己指定。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 参数2：需调用虚方法的简单名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 参数3：需调用虚方法的返回值及参数列表</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 最终，还需将该方法再由bindTo()方法显式绑定回接受者上</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return MethodHandles.lookup().findVirtual(receiver.getClass(), &quot;println&quot;, mt).bindTo(receiver);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Throwable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String str &#x3D; &quot;我来自幻想乡&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.getPrintlnMH(System.out).invokeExact(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.getPrintlnMH(new Marisa()).invokeExact(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Marisa &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    final void println(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(str + &quot;DAZE&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我来自幻想乡</span></pre></td></tr><tr><td class="code"><pre><span class="line">我来自幻想乡DAZE</span></pre></td></tr></table></figure>

<p>本质上来讲，本例中的getPrintlnMH()模拟了invokevirtual指令的执行过程，只不过它的分派逻辑并非固化在Class文件的字节码上，而是通过getPrintlnMH()这个具体的方法由程序员指定实现。getPrintlnMH()的返回值(MethodHandle)即可视为对最终调用方法的一个引用。</p>
<p>再回到上文中比较的那个例子，有了MethodHandle后，我们就可以使用类似于如下方法在Java中实现比较：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void sort(List list, MethodHandle compare)</span></pre></td></tr></table></figure>

<p>本质上来说，Java依然无法接收方法为参数，它所采用的方式为将方法的必要信息包装成了一个对象，然后像使用方法那样使用这个对象。</p>
<p>以上就是MethodHandle的基本用途：封装一个代表这个方法的对象，然后在实际调用时以该对象所代表的方法信息为依据调用具体方法。这样我们不禁会产生一个新的疑问：所实现的功能不就是反射吗？为什么不直接用反射机制完成呢？为什么要再搞出个MethodHandle呢？</p>
<p>确实，仅从Java语言规范的角度上讲，MethodHandle所实现的功能与反射有很大重叠的部分，然而它们还是有以下区别：</p>
<p>首先，反射和MethodHandle虽然都是在模拟方法调用，然而二者所模拟的层次不同：反射是在模拟Java代码层次的方法调用，不会去关心底层字节码的实现机制。而MethodHandle是在模拟字节码层次的方法调用。MethodHandles.lookup()中共有3个方法：</p>
<ul>
<li>findStatic():对应invokestatic指令</li>
<li>findSpecial():对应invokespecial指令</li>
<li>findVirtual():对应invokevirtual及invokeinterface指令</li>
</ul>
<p>其次，反射中负责方法调用的是java.lang.reflect.Method，MethodHandle中负责方法调用的是java.lang.invoke.MethodHandle。前者包含了这个方法所有的信息，而后者仅包含与方法调用相关的信息。可以这么认为：Method是重量级，MethodHandle是轻量级。</p>
<p>最后，由于MethodHandle是对字节码指令的直接模拟，因此JVM对字节码指令做的种种优化(例如方法内联)理论上都适用于MethodHandle。虽然现在尚不完善，但仍留下了可供优化的空间。而仅限于语言层面的反射则做不到这一点。</p>
<p>通过上文的这3点，我们可以总结出：MethodHandle与反射最本质的区别就是二者作用的层级不同。反射作用于Java语法层面，因此只能为Java语言服务。而MethodHandle则作用于JVM的字节码指令层面，可以为包含Java在内的一切运行于JVM之上的语言服务。</p>
<h1 id="invokedynamic"><a href="#invokedynamic" class="headerlink" title="invokedynamic"></a>invokedynamic</h1><p>在介绍完Java语言层面对动态类型的支持之后，终于来到了JVM层面。</p>
<p>从本质上来讲，invokedynamic指令与MethodHandle机制的目的是一样的：都是为了解决原有的4条invokexxx指令方法分派规则固化在JVM之中的问题。从而将如何定位目标方法的决定权从JVM转移到具体的用户代码中，让开发人员(也包括运行于JVM上的语言的设计人员)有更高的灵活度。</p>
<p>因此，我们可以将invokedynamic指令与MethodHandle机制视为为实现同一个目标的两种具体的做法。MethodHandle机制是采用上层Java代码及API实现的，而invokedynamic指令则是直接通过字节码指令及class文件实现的。二者在设计思路上有很多共通之处。</p>
<p>每一处含有invokedynamic指令的位置都被称作动态调用点(Dynamic Call Site)。invokedynamic指令的第一个参数不再是代表方法符号引用的CONSTANT_Methodref_info常量，而是变为JDK1.7新加入的CONSTANT_InvokeDynamic_info常量。从这个常量中可以得到如下3项信息：</p>
<ul>
<li>引导方法(Bootstrap Method):实际存储于同样新增的class文件-属性表集合-BootstrapMethods中。其有固定的入参，返回值为java.lang.invoke.CallSite对象，该对象代表真正要执行的目标方法(类似于MethodHandle机制的MethodHandle对象)。</li>
<li>方法类型(MethodType)</li>
<li>名称</li>
</ul>
<p>根据CONSTANT_InvokeDynamic_info常量中提供的信息，JVM就可以找到并执行引导方法(这样看来，引导方法的作用类似于上文中我们实现MethodHandle机制时设计的类方法getPrintlnMH())，最终利用引导方法返回的CallSite对象调用目标方法。</p>
<p>因为Java语言依然是静态类型的语言，因此与MethodHandle机制所不同的是，invokedynamic指令所面向的使用者并非Java语言，而是那些运行于JVM之上的动态类型语言。或者更具体的说，javac编译器是无法生成带有invokedynamic指令的class文件的。在Java语法层面曾经有一个java.dyn.InvokeDynamic的语法糖可以实现，但是后来取消了。</p>
<p>或者我们可以把话说的更明白一些，如果仅仅是对于学习Java这一门语言而言，invokedynamic指令是没有用处的，可以当它不存在。这也是JVM关于语言无关性的设计初衷：Java语言是运行于JVM平台上的，然而JVM并非完全就是为了支持Java语言而存在的。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-运行期方法调用</title>
    <url>/2017/12/06/JVM-%E8%BF%90%E8%A1%8C%E6%9C%9F%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<p>运行期方法调用的唯一目的就是确定被调用方法的版本(即确定调用哪个类的哪个方法)，执行方法体不是方法调用需考虑的问题。</p>
<a id="more"></a>

<p>对于C++这种编译执行的语言，方法的连接操作在编译结束后即完成。换句话说，编译结束后即可明确知道实际运行时该方法在内存布局中的地址。此时方法调用根本就不是一个问题：编译结果中写什么调用什么就好。</p>
<p>而Java这种以解释执行为主的语言将编译过程分为了两段：首先是.java源文件编译为.class的字节码文件，随后再是.class文件被解释执行或编译执行为本地机器码。这里.java到.class的转换虽然也被称为编译，却只是Java体系内部的转换，对于最终执行程序的本地机器而言，只要没有编译为它所认识的本地机器码，.java和.class对它而言都是一样的。因此.java到.class的过程其实并非真正意义上的编译，而只是一个中间过程。</p>
<p>不过.java到.class也确实是一种编译操作，因此我们仍然会称.java到.class的时期为Java编译期。只是务必在心里与类似C++那种真正的编译为机器码的行为做好区分。</p>
<p>.class文件的常量池集合中存储的方法地址均为符号引用。例如就是如下所示的字符串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr></table></figure>

<p>这种字符串易于人类理解阅读，也可用作标记，但却无法代表方法在内存中的入口。这是很容易理解的：Java体系中的编译期及运行期是被切割的，即可以编译好class文件后等很久再换一台机器执行。那么编译期自然不可能知道实际的内存布局是什么样子的，class文件中只能存储这样的符号引用。</p>
<p>这就会使得方法的连接操作(所谓连接，其实就是把class中记述的方法的符号引用替换为方法在内存中的实际入口地址，也就是Java中常说的直接引用)变得复杂，因为不管你Java有什么困难导致编译期无法确定方法的版本，只要你想完成最终的调用，那么在被最终转换为本地机器码之前必须完成方法的连接。既然编译期做不了，那么就只能在随后的运行期(只有两个时期，也没法推给其他人了)做了。运行期连接为Java带来了一定的动态扩展能力，却也相对的给方法的版本确认带来了麻烦，例如有如下调用逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G0 o &#x3D; new G1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 一些代码...</span></pre></td></tr><tr><td class="code"><pre><span class="line">o.m(P p);</span></pre></td></tr></table></figure>

<p>其中G1为G0的孩子(儿子，孙子，重孙…)。而m又是一个可被子类继承的方法。那么在程序实际运行到o.m(P p);这一行之前，JVM是无法知道到底要调用哪个类的m方法的。虽然单看上例应该调用类G1，但是上例中被省略的”一些代码”可能是这样子的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G0 o &#x3D; new G1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">o &#x3D; new G0();</span></pre></td></tr><tr><td class="code"><pre><span class="line">o.m(P p);</span></pre></td></tr></table></figure>

<p>此时该调用的类就是G0。那么在编译期javac编译到G0 o = new G1();时是无法知道后面会发生什么的。有人可能会说，o = new G0();就在它的下面，也在同一个类里，javac为什么识别不了呢？这个说的没毛病，理论上javac确实识别得了。但问题在于我么当然也可以不放在同一个类里：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G0 o &#x3D; new G1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">X.m2(o);</span></pre></td></tr><tr><td class="code"><pre><span class="line">o.m(P p);</span></pre></td></tr></table></figure>

<p>X是与G(假设上述代码存在于类G中)完全无关的一个类，我们调用了它的m2方法并将o丢了进去。此时javac就真的无能为力了。因为类文件的编译都是以类为单位单独编译的，javac在编译G这个类时是无法知道X这个类的内容的，自然也不会知道X的m2方法中是否会有类似o = new G0();这样的操作。</p>
<p>这个问题对于运行期而言就有点严重了。因为在这个问题被摆到桌面上谈之前方法调用其实也不复杂：编译期其实可以确认方法该调用哪个版本，它所不知道的仅仅只是这个版本的方法在运行期被放到了内存的哪个位置而已。此时运行期需要做的操作仅仅只是把符号引用翻译为直接引用而已。但是当这个问题被抛出后，编译期无法确认方法该调用哪个版本，运行期在具体执行到o.m(P p);所代表的那个字节码指令之前自然也不可能知道。</p>
<p>这里所说的”不可能知道”其实有些绝对了，更确切的说法应该是”成本太高了，不想知道”。因为运行期的类加载过程其实基本上也是以类为单位加载的：需要一个加载一个。如果想在类加载阶段就确认这件事，那么相当于要将从G0 o = new G1();被声明，到o.m(P p);触发方法调用这期间的所有的”一些代码…”确认一遍，如果涉及到条件分支判断还要将所有分支可能导致的结果都记录下来。这个实现成本基本上就是在逼JVM开发人员自杀。</p>
<p>无奈之下JVM开发人员只好采取了折中的策略，说来说去可能会导致有问题的情况不也就上文说的那一种吗？那么我们将运行期的方法调用再分为两个阶段：静态多分派及动态单分派。</p>
<p>在具体介绍这两个阶段之前，需要先介绍一下这两个名字中那些被组合的单词。很显然，这和<a href="/2017/10/03/Java并发-同步异步阻塞非阻塞/">Java 并发-同步异步阻塞非阻塞</a>类似：同步异步是一组概念，阻塞非阻塞是一组概念，两组概念组合共能得到4个结果。同理，静态多分派及动态单分派中的静态动态是一组概念，多分派单分派是一组概念，两组概念组合依然能得到4个结果。不过这里，只有其中的两组是有意义的，也就是静态多分派及动态单分派。</p>
<p>所谓静态动态，指的就是能确定方法版本的时期，编译期能确定的就叫做静态，编译期确定不了的就叫做动态。</p>
<p>所谓单分派与多分派指的就是确定方法版本需要参考的参数(也叫做宗量)个数，如果只参考一个宗量就叫做单分派，需要参考多个宗量就叫做多分派。宗量这个概念并非出自JVM规范，而是源自《Java与模式》一书，不过这本书也足够经典，因此业界也就默认宗量这个概念的权威性了。单看分派，宗量这些概念仿佛很专业很复杂的样子。但其实在方法分配这件事上，宗量其实就只有两个：即”哪个类”的”哪个方法”。</p>
<p>对于静态多分派及动态单分派的具体含义后文将详述，不过在此我们可以先提纲挈领的总结一下。这两个概念看似让人很懵逼，但说穿了套路其实很简单，在分析之前我们需要再给出两个简单的小概念，即静态类型(Static Type)[也可称为外观类型(Apparent Type)]与实际类型(Actual Type):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G0 o &#x3D; new G1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">o.m(P p);</span></pre></td></tr></table></figure>

<p>以上代码中并没有烦人的”// 一些代码…”，因此我们可以确定当o.m(P p);执行时”哪个类”指的就是类G1。此时对于o而言，其静态类型为G0，实际类型为G1。</p>
<p>很显然，编译期能确定的是静态类型(Java是强类型语言，只要声明了,除非进行显式的强制类型转换，否则变量的类型就不能改变)，无法确定的是实际类型。</p>
<p>小概念介绍完毕，我们继续分析运行期确定方法版本的那两步：</p>
<p>第一步，所有方法都需要做，而且是就当编译期能确定所有方法的版本那样来做。”哪个类”统一认为是静态类型。发生于类加载的连接-解析阶段，因此也被称为解析(Resolution)。</p>
<p>第二步，执行了第一步后仍有问题的方法才需要做，发生于字节码执行引擎实际运行到方法调用的那行指令时。</p>
<p>那么什么方法才是”有问题的方法”呢？仔细分析上文中描述的问题就能发现，实际上这个问题本质上就是无法确认”哪个类”，而无法确认”哪个类”的原因则是该方法可能会被子类重写(Override)。至此我们已经找到了问题的答案：”有问题的方法”指得就是那些能被子类所继承并重写的方法。换句话说，若一个方法无法被子类继承并重写，那么就只需要进行第一步。</p>
<p>思路其实很明确。编译期能确定的方法还按照当是没问题的方案来做，而对于那些可能会产生问题的方法则添加补救措施。注意这里说的仅仅是可能，因为允许被继承的方法并不代表它真的就会被继承，被继承了也不代表执行到方法调用那一行字节码指令时实际类型就一定是静态类型的子类型。不过，因为我们也无法保证这不可能，因此这些方法还是需要执行第二步。</p>
<h1 id="静态多分派"><a href="#静态多分派" class="headerlink" title="静态多分派"></a>静态多分派</h1><p>如前文所述，只需执行第一步的方法是那些编译期可知，运行期不可变的方法，换句话说，也就是指那些不可被继承重写的方法(因为要变其实也就是通过继承的重写来变)。在Java中不可被继承的方法主要分为两大类：类方法(直接与本类静态类型所关联)及私有方法(子类不可访问)。</p>
<p>这里可以稍微讲一下方法的调用指令。<a href="/2017/11/16/JVM-JVM字节码指令集/">JVM-JVM字节码指令集</a>中共提供了5条方法调用相关的指令：</p>
<ul>
<li>0xb6(invokevirtual):调用实例方法。会根据对象的实际类型进行动态单分派(虚方法分派)</li>
<li>0xb7(invokespecial):以操作数栈栈顶reference类型的数据所指向的对象为方法的接收者，调用此对象的实例构造器&lt;init&gt;方法，私有方法或超类构造方法。该指令的操作码之后会紧跟一个u2的操作数说明具体调用的是哪个方法，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该方法的方法符号引用</li>
<li>0xb8(invokestatic):调用类方法(static修饰的方法)</li>
<li>0xb9(invokeinterface):调用接口方法。运行期解释器会搜索一个实现了该接口方法的对象，并调用对应的实现方法。</li>
</ul>
<p>此外，还有那条操蛋的现在尚未出现于JVM字节码指令集中的invokedynamic，其会先在本指令运行期间动态解析出调用点限定符所引用的方法，然后再执行该方法。上文给出的那4条方法调用指令的方法分派逻辑是固化在JVM内部的，而invokedynamic的分派逻辑是由用户所设定的引导方法决定的。</p>
<p>根据前文分析，显然被invokestatic及invokespecial所调用的方法：静态方法，实例构造器&lt;init&gt;方法，私有方法，超类构造方法，都只需要执行第一阶段，因为它们都不可被继承。这些方法也被称为非虚方法。</p>
<p>但并不是说不是被invokestatic及invokespecial所调用的方法就是虚方法。因为被final修饰的方法是被invokevirtual指令所调用的，然而它虽然可以被继承，却无法被重写，不被重写就不会触发问题，因此它也是非虚方法，只需要执行第一步。除此之外，其他被invokevirtual指令调用的方法均是虚方法，可以被子类继承。需执行第二步。</p>
<p>这里需要再次明确的一点就是，静态多分派的方法版本是编译期就可确定的。注意这仅仅是可以确定，而不是真正的进行连接操作。无论如何(即便描述成静态的)，连接操作都是在运行期完成的。</p>
<p>因静态多分派阶段确认方法版本依据的是编译期的静态结果，因此在静态动态这组概念中属于”静态”，而其判定方法版本依据的是静态类型及方法签名(方法名+方法参数)，也就是既参考了”哪个类”，也参考了”哪个方法”，因此是单分派多分派这组概念中的多分派。</p>
<p>严格来说，分派(Dispatch)这个词在欧美一般是不用于静态环境中的。欧美那边对于第一步操作的称呼为Method Overload Resolution，即重载解决方案。这也道出了静态多分派阶段的难点：确定方法版本所用的两个宗量中静态类型是唯一不可变的。而方法签名中方法名则可能会相同，此时就会发生重载(这里依然是可能，重载并非是必然会发生的)。</p>
<p>关于方法签名有一个需要注意的点，静态多分派依据的信息全部来自于编译期，”哪个类”也完全认定为静态类型，这点对于方法签名中的参数类型也是一样的，即只会以方法参数的静态类型为准(还是那个问题，编译期是无法拿到实际类型的)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void m(Parent parent) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;parent&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void m(Son son) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;son&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Parent parent&#x3D; new Son();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.m(parent);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Parent &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Son extends Parent &#123;&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">parent</span></pre></td></tr></table></figure>

<p>因此我们也可以这么说，完全依据静态类型来确定方法版本的分派方式为静态分派。</p>
<p>之所以上文说重载是静态多分派阶段的难点。是因为重载虽然在编译期就能完全确认方法版本，其确定依据却不是准确的。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G.m(P p);</span></pre></td></tr></table></figure>

<p>若G中的m存在重载方法，首先参数的个数及顺序是强制规范，这个是明确的。然而参数类型的判断却是模糊的。编译器会找方法形参中与实参静态类型血缘最接近的那个。例如，仍然是针对上面那条调用，若G中仅有一个类方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void m(P0 p0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中P0是P的前辈(父亲，爷爷…)，那么按照血缘关系则定位到这个最亲近的方法。但若G中有如下两个类方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void m(P0 p0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static void m(P p) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时依血缘最亲密的类需调用的方法就变成m(P p)。</p>
<p>对此，我们可以举一个比较极端的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Object arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Object&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(int arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello int&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(long arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello long&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Character arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Character&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char ...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char ...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Serializable arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Serializable&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello char</span></pre></td></tr></table></figure>

<p>没什么可说的，传入的为基本数据类char的值，自然精准重载到了对应方法上。此时我们删掉这个入参为char的方法，即变成：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Object arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Object&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(int arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello int&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(long arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello long&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Character arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Character&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char ...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char ...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Serializable arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Serializable&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello int</span></pre></td></tr></table></figure>

<p>哦，看来是发生了一次自动的基本类型间的向上类型转换。因为’a’除了可代表字符a外，也可代表数字97(字符’a’在Unicode字符集中的编码就是97)。现在我们再把这个入参是int的方法去掉，变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Object arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Object&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(long arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello long&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Character arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Character&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char ...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char ...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Serializable arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Serializable&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello long</span></pre></td></tr></table></figure>

<p>因为没找到int，因此再次向上转型为long。我没有写其他的基本数据类型，但显然转换可以沿着char-&gt;int-&gt;long-&gt;float-&gt;double这条转换链一直自动向上转换上去。当然，char是不会自动转型为未在它转换链上层的boolean，byte，short的。</p>
<p>现在我们再删掉这个入参是long的方法，变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Object arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Object&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Character arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Character&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char ...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char ...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Serializable arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Serializable&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello Character</span></pre></td></tr></table></figure>

<p>此时已没有基本数据类型可供自动向上转型了，因此发生了一次自动装箱，’a’被自动装箱为其包装类Character。那么老套路，我们再删掉这个入参是Character的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Object arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Object&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char ...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char ...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Serializable arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Serializable&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello Serializable</span></pre></td></tr></table></figure>

<p>这个输出看起来就有些诡异了。不过我们可以看一下Character类的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class Character implements java.io.Serializable, Comparable&lt;Character&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 省略类内部代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>果然，Character实现了Serializable接口，看来编译器是认为此时血缘最亲近的就是它所实现的接口了。并且因为我们明明也写了入参是Character父类Object的方法而编译器却最终选择了Serializable。看来在编译器眼里，接口比父类要更亲密一些。不过我们不禁会产生另一个疑问：如果静态类型实现了多个接口(例如本例中的Character)，而又同时存在以这些接口为入参的重载方法，那么编译器会如何抉择呢？会按照接口在源码中的书写顺序来确定亲疏关系吗？有问题就要立刻验证，我们把代码修改如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Serializable arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Serializable&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Comparable&lt;Character&gt; arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Comparable&lt;Character&gt;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时将无法通过编译，SayHello.sayHello(‘a’);这一行会提示The method sayHello(Serializable) is ambiguous for the type SayHello。至此我不禁松了一口气，看来编译器还是有底线的。毕竟Java语言规范中可从来没有说过实现接口时接口的书写顺序会有什么优先级上的影响。</p>
<p>顺便再说一句，只有基本数据类型之间才可能发生自动类型转化。换句话说，是不能指望Character自动转换成Integer的。</p>
<p>然后我们再回到原来的代码上，现在我们再删掉入参是Serializable的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(Object arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello Object&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char ...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char ...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello Object</span></pre></td></tr></table></figure>

<p>终于轮到父类了。事实上，编译器会在静态类型的继承链上依序向上搜索，最终追溯到Object类。这里需要注意的是，追溯时只看静态类型而不管实际存的是什么，极端的说，即便该静态类型指向的是null也无所谓。</p>
<p>然后我们再删掉这个入参是Object的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SayHello &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void sayHello(char ...arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;hello char ...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SayHello.sayHello(&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hello char ...</span></pre></td></tr></table></figure>

<p>此时就只剩下1个方法了，编译器也算是饥不择食了，最后连变长参数的方法也不放过。其实这也很好理解：咱们传入的参数被以组的概念理解了(只是这个组里只有1个元素)。不仅如此，变长参数方法还支持上文所有提到的那些关于亲密关系的判断。</p>
<p>至此这个例子便结束了。不得不说确实极端得可以，在这个例子中编译器简直是杨花水性，毫无节操。不过这种例子属于”茴香豆的茴有几种写法”一类的问题，虽然确实也是个知识点，这么写也确实不会报错，然而实际开发中完全是然并卵的，因为基本不会有什么业务需求会抽风到逼程序员写出这样的代码，而且要是真有程序员写出这种代码他也基本会被他的同事砍死。它和Java中的i++,++i一类问题一样，往往都只会以考校程序员功底的目的出现在面试或期末考试中。</p>
<h1 id="动态单分派"><a href="#动态单分派" class="headerlink" title="动态单分派"></a>动态单分派</h1><p>关于动态单分派，我们先解释一下名称。因为第二步发生在字节码执行引擎执行到方法调用那条字节码指令时，依据的是程序在运行期实际的动态运行结果而非编译期得出的静态结果，因此在静态动态这组概念中是动态。又因为第二步诞生的目的就是为了解决实际类型可能与静态类型不一样的问题，也就是说到了第二步，决定方法调用版本中的”哪个方法”问题在第一步中已能完全确定了，可能有问题的仅仅是”哪个类”，因此判断方法版本所需依据的宗量仅仅只有实际类型一个。因此在单分派及多分派这组概念中为单分派。</p>
<p>这一步实际上就是在解决上文中提到的那个因重写造成的问题的。当字节码执行引擎执行到具体的调用指令时，自然可以知道”哪个类”的实际类型是什么。</p>
<p>关于动态单分派，如果完全遵循上文所描述的概念模型。那么每次在确认某父类中的可继承方法是否真的被子类重写时，都需要重新搜索一遍父类和子类。而动态单分派的执行频率又很高，这就有些浪费资源了：因为编译期虽然无法确定实际类型是什么，但是确定方法的继承关系则毫无难度。因此虽然JVM实现间千差万别，但大多都会进行如下”稳定优化”手段：为类在方法区中建立一张虚方法表(Virtual Method Table，简称vtable)。当需要进行动态单分派时，就可以查找这张虚方法表而非重复搜索父类和子类了。</p>
<p>例如有如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class QQ &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class _360 &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Father &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void hardChoice(QQ arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;father choose qq&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void hardChoice(_360 arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;father choose 360&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Son extends Father &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void hardChoice(QQ arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;son choose qq&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void hardChoice(_360 arg) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;son choose 360&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这段代码中Father与Son的虚方法表如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E8%BF%90%E8%A1%8C%E6%9C%9F%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/0.png" alt="0.png"></p>
<p>虚方法表创建于运行期类加载的连接-解析阶段，它诞生于运行时数据区域之一的方法区中，而非编译期产出的class文件中。因此虚方法表中存储的已经可以是各实际类型的方法指向方法区的直接引用，是拿来直接就能用的，而非class文件中那种符号引用。如果父类的某个方法子类没有重写，那么子类虚方法表中该方法的实际引用地址与其父类虚方法表中该方法的实际引用地址相同，都指向父类的方法。若子类重写了父类的某方法，则子类虚方法表中该方法的实际引用将指向子类重写后的方法。上图中，Son重写了Father中所有的方法，因此Son的虚方法表中没有指向Father虚方法表的箭头。但是Father没有重写其父类Object中的方法，因此对这些方法而言，Father的箭头均指向Object。同理，Son依然没有重写这些方法，因此它会将这些方法的箭头指向Father，进而又被指向Object。</p>
<p>为了程序实现上的方便，具有相同签名的方法，在父类，子类的虚方法表中的索引号应该保持一致。这样当实际类型变化时(也就是”哪个类”变化时)，只需要变更虚方法表，而无需变更索引号(即”哪个方法”不变)，这也与动态单分派中单宗量的逻辑吻合。</p>
<p>与虚方法表类似的，往往也会为类在方法区中建立一张invokeinterface指令会用到的接口方法表(Inteface Method Table，简称itable)。</p>
<p>虚方法表是大多JVM实现都会采用的”稳定优化手段”。在条件允许的情况下，JVM实现也可能会采用另外一些激进的，同样是发生于晚期(运行期)的”非稳定优化手段”：</p>
<ul>
<li>内联缓存(Inline Cache)</li>
<li>基于类型继承关系分析(Class Hierarchy Analysis,CHA)技术的守护内联(Guarded Inlining)</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>重载</tag>
        <tag>重写</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-运行时栈帧结构</title>
    <url>/2017/12/05/JVM-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>JVM是一种虚拟机，而虚拟机又是一个相对于物理机的概念。这两种机器都有代码执行能力，其区别在于物理机的执行引擎是直接建立在CPU，内存等硬件，指令集和操作系统层面上的。而虚拟机则是更上层的东西，其必须位于某个物理机中，受该物理机各方面因素的掣肘，但是它的执行引擎却是自行实现的，具体来说，就是指指令集及执行引擎的结构体系等各种架构都是自行设计的。因此，它虽然位于物理机中，却仿佛是一台独立的机器：能够执行那些不被该物理机的硬件所直接支持的指令。</p>
<a id="more"></a>

<p>显然，无论是物理机还是虚拟机，执行引擎都是最核心的组件之一。JVM规范中制定了JVM字节码执行引擎的概念模型(多说一句感想，关于Java，SUN建立了几乎全部的规范和标准，正所谓一流的公司卖标准，二流的公司卖产品，三流的公司帮二流的公司卖产品)，该概念模型成为了所有遵守JVM规范的JVM实现的执行引擎的统一外观(Facade)。不同的JVM实现可能会采取不同的具体执行方式：</p>
<ul>
<li>通过解释器解释执行，即通常意义上的解释执行</li>
<li>通过即时编译器(JIT)直接产生本地机器码，也就是通常意义上的编译执行</li>
</ul>
<p>虽然各实现采取的策略往往不同，即可能只采取解释执行(例如SUN早期的JVM实现Sun Classic VM)，可能只采取编译执行(例如BEA JRockit)。或者混合使用解释执行及编译执行(例如最常用的Hotspot VM)。但是无论如何，它们都是基于同一套规范的不同实现，因此从外观上来看，所有的JVM执行引擎的行为都是一致的：输入JVM的是字节码流，处理过程是字节码解析的等效过程，输出的是执行结果。</p>
<p>在JVM的运行时内存中，类的模版信息位于方法区中，实例对象位于Java堆中。这些内存区域都可以看作是存储数据的仓库，映射到计算机组成原理中，可以看作是内存。而虚拟机栈和本地方法栈(可看作缓存和寄存器)则是直接与JVM字节码执行引擎(可看作CPU)交互的内存区域。</p>
<p>CPU将所需的数据从内存中取到自身的缓存中，在执行每条指令时，都会将该指令所需的参数加载到自身的寄存器中，计算完成后将结果放回寄存器。再通过寄存器放回缓存。随后在合适的时机写回内存。因此，从更本质的角度上说，与CPU直接交互的只有寄存器。</p>
<p>类似的，JVM执行引擎在执行一组字节码指令时也会先将所需数据取到线程的虚拟机栈或本地方法栈中并建立栈帧(以使用实例对象为例，实际上并不是真的把该实例从Java堆中复制到了栈帧中，拿过来的仅仅是引用)，或者更具体的说，这些数据被存到了栈帧的局部变量表中，而后在执行每条字节码指令时，都会将这条指令所需的数据加载入栈帧的操作数栈中(强调一下，JVM不是基于寄存器的，是基于操作数栈的)，计算完成后再将结果放回操作数栈，而后再在合适的时机放回局部变量表(因为拿过来的就是引用，所以除了基本数据类型这种数值以外，不需要再同步了)。因此，从更本质的角度上说，与JVM字节码执行引擎直接交互的只有栈帧中的操作数栈。</p>
<p>本文所要描述的就是这个供JVM字节码执行引擎使用的，运行时栈帧结构的概念模型。</p>
<p>虚拟机栈及本地方法栈就只是一个栈式结构，本身并没有什么可说的。其所有逻辑基本都在其元素：栈帧中。因此所谓的介绍运行时栈帧结构，实际上就是介绍栈帧。</p>
<p>栈帧(Stack Frame)是用于支持JVM进行方法调用和方法执行的数据结构。Java中每一个方法在运行期从调用开始到执行完成的过程，实际上就是一个栈帧从入栈到出栈的过程。</p>
<p><img src="/images/blog_pic/JVM/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84/0.jpg" alt="0.jpg"></p>
<p>在上图中，最大的圆角矩形是当前线程私有的虚拟机栈。若一个方法在其内部又调用了另一个方法(调用自己则被称为递归)，则每调用一个新的方法都会压入一个新的代表该方法的栈帧。因此一个线程中的方法调用链可能会很长，也就是该线程的虚拟机栈中的元素可能会很多。不过对于JVM执行引擎而言，对于任意特定时刻，只有位于栈顶的栈帧才是有意义的，该栈帧被称为当前栈帧(Current Stack Frame)，相应的，该栈帧所关联的那个方法被称为当前方法(Current Method)。操作数栈的信息永远来自于当前栈帧，或者更本质的说，JVM执行引擎操作的所有数据都来自于当前栈帧。</p>
<p>每个栈帧主要包含如下信息：</p>
<ul>
<li>局部变量表</li>
<li>操作数栈</li>
<li>动态连接</li>
<li>方法返回地址</li>
<li>一些额外的附加信息</li>
</ul>
<p>栈帧中需要多大的局部变量表，多深的操作数栈在编译期已完全确定，并存入：</p>
<p>class文件-方法表集合-方法表-属性表集合-Code属性-其中有代表操作数栈最大深度的max_stack及代表局部变量表所需存储空间(单位为Slot，并可认为一个Slot 32位)的max_locals。详见<a href="/2017/11/07/JVM-类文件结构/">JVM-类文件结构</a>。</p>
<p>局部变量表及操作数栈这两个变长的数据结构占据了栈帧绝大部分的空间(其他组成结构的长度固定)，因为它们的大小在编译期已确定，因此栈帧的大小在运行期是固定的。</p>
<p>下文将逐个介绍栈帧的各组成部分。</p>
<h1 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h1><p>局部变量表(Local Variable Table)是一组变量值的存储空间，用于存储方法的传入参数和在方法内部定义的局部变量。局部变量表的大小在编译期即完全确定，并存入：</p>
<p>class文件-方法表集合-方法表-属性表集合-Code属性-代表局部变量表所需存储空间的max_locals。</p>
<p>max_locals是一个整型数值，其基本单位被称为变量槽(Variable Slot，常简称为Slot)。JVM规范并没有明确规定一个Slot占多少位，然而纯从字面上考虑，变量槽，也就是放变量的槽，一个槽里总要放得下一个变量才是。JVM规范虽然没有明说一个Slot多大，却正如刚才我们顾名思义所推测的，说了这么一句话：一个Slot必须能容纳一个boolean,char,byte,short,int,float,reference或returnAddress类型。这8种数据类型最大的占用32位，因此一个Slot最小也得有32位。这个与直接规定一个Slot是32位是有区别的。相当于留下了向上扩展的余地。不过我们一般说到Slot时都会把它看作32位。</p>
<p>关于reference类型的长度，可以多说几句。事实上，JVM规范既没有给出reference类型的数据结构，也没有明确规定reference类型的长度，32位系统下reference类型的长度为32位，64位系统若开启了对象指针压缩的优化则长度为32位，否则为64位。不那么较真的情况下，通常我们都认为reference类型是32位的。虽然JVM规范对reference类型的要求很是模糊，但一般来说，JVM实现至少应该可以使用reference类型做到如下两点：一是从此引用中直接或间接地查找到对象在Java堆中的数据存放的起始地址索引(找到实例信息)。二是从此引用中直接或间接地查找到对象所属的类在方法区中存储的类型信息(找到模版信息)。二者结合才是一个完整的对象信息。否则就无法实现Java语言规范中规定的语法约束(并非所有语言都能实现这两个要求，例如C++就仅实现了第一点，未实现第二点)。</p>
<p>returnAddress类型配合jsr,jsr_w,ret等跳转相关的指令使用，用于在跳转后指向需返回的字节码偏移量。历史上曾使用该机制处理异常，自JDK1.7起returnAddress连同这些字节码指令均被废弃，异常机制使用class文件-方法表集合-方法表-属性表集合-Code属性-异常表集合实现。</p>
<p>上文中讨论的数据类型都是小于等于32位的(姑且认为引用类型就是32位的)，而Java语言规范中明确规定大于32位的数据类型只有两种，且均为64位，即long,double。对于这两种类型，JVM会采取高位对齐的方式(也就是前32位是高位，后32位是低位)为其分配两个连续的Slot。即取用时是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(前32位 &lt;&lt; 32) | 后32位</span></pre></td></tr></table></figure>

<p>这种把long和double分割存储的思路和Java内存模型中关于long和double的非原子协定(将1次对64位数据的读写操作拆解为两次对32位数据的读写操作。因此这次对64位数据的读写操作就不是原子的了)很类似。不过局部变量表位于栈帧中，栈帧位于虚拟机栈或本地方法栈中，而栈又是线程私有的，因此不会涉及到线程安全问题。</p>
<p>JVM通过索引来定位局部变量表中的变量。因此局部变量表看起来就像是一个数组。若某局部变量表占用空间为solt_count个solt，则其索引范围为[0,solt_count-1]。对于那些能被1个Slot所容纳的数据类型而言，一个Slot中放置一个变量。对于long及double这两个64位的数据类型而言，两个Slot才能容纳一个变量，该变量的索引为其所占据的第一个Slot的索引。在字节码指令调用这件事上，每个变量都是不可再分割的整体，因此调用这些变量的第二个Slot的索引是不合法的，其应该在类加载的连接-验证-字节码验证阶段被检查出来并抛出相应的异常。</p>
<p>关于局部变量表中变量的顺序，默认先按照传入顺序存入方法的传入参数，而后再结合局部变量在方法体内部的声明顺序和作用域分配剩余Slot。特别的，若方法为实例方法，那么传入参数列表中将默认隐含该实例方法所属实例的引用(也就是我们在代码中常用的this)，并且该引用将固定占据局部变量表的0号索引。</p>
<p>因为局部变量都是有作用域的，因此若当前程序计数器中指明的指令偏移量已超出了某局部变量的作用范围，该局部变量实际上就已经没用了。因此局部变量表中的Slot是可以复用的，从而节省了栈帧的使用空间。不过，这种复用的设计在某些情况下可能会产生负面影响，例如影响JVM的GC系统。我们来看下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 启动参数：-verbose:gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] byteArray &#x3D; new byte[100 * 1024 * 1024];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr></table></figure>

<p>一个byte占据1字节(1B)，除去数组本身所需的少量内存空间，byteArray共使用100MB的空间，我们来运行以下这段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC 103731K-&gt;102952K(227328K), 0.0140411 secs]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC 102952K-&gt;102868K(227328K), 0.0121913 secs]</span></pre></td></tr></table></figure>

<p>byteArray所使用的这100MB空间并没有被GC回收掉，这个很好理解，毕竟System.gc()执行时并未超出byteArray的作用域，那么我们再做如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 启动参数：-verbose:gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            byte[] byteArray &#x3D; new byte[100 * 1024 * 1024];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC 103731K-&gt;102968K(227328K), 0.0020960 secs]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC 102968K-&gt;102868K(227328K), 0.0121942 secs]</span></pre></td></tr></table></figure>

<p>byteArray依然没有被GC回收。这就让人有些疑惑了，因为此次System.gc()执行时已经超出byteArray的作用域了，byteArray已经没用了，GC为什么不回收它呢？在回答这个问题之前，我们不妨再修改一下这段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 启动参数：-verbose:gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            byte[] byteArray &#x3D; new byte[100 * 1024 * 1024];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte b &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这个局部变量b加的看起来有些莫名其妙，然而此时我们再次运行这段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC 103065K-&gt;103016K(227328K), 0.0013827 secs]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC 103016K-&gt;468K(227328K), 0.0145637 secs]</span></pre></td></tr></table></figure>

<p>这次byteArray终于被GC回收了。</p>
<p>在以上3个小例子中，byteArray能否被回收的核心依据为：局部变量表的Slot中是否还存着byteArray数组对象的引用。只要还存着，这个引用就将作为GC Root被GC所参考，从而让byteArray在可达性分析中逃过被打上GC标记的命运。第一次修改后，虽然System.gc()执行时已经超出byteArray的作用域了，但是在其执行前没有任何对局部变量表的读写操作，byteArray原本所占用的Slot还没有被其他变量所复用，因此自然无法回收。至此第二次修改的目的就很明确了，新定义的变量b重用了byteArray所占据的空间，从而byteArray得以被GC所回收。</p>
<p>绝大多数时候，这个例子所体现的问题并没有什么大不了的，因为并不是内存泄漏了，只是回收的没那么及时而已。不过某些情况下，若局部变量占据的内存很大，后文又会进行耗时很长的操作，导致这部分内存迟迟得不到回收，可能会出现不可接受的后果。</p>
<p>因此为了保险起见，显然手动处理一下才更为合理。不过第二次修改中那种莫名其妙的加一个不使用的局部变量的做法实在是有点2，通常我们会采取更易于理解，更优雅的做法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 启动参数：-verbose:gc</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] byteArray &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            byteArray &#x3D; new byte[100 * 1024 * 1024];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byteArray &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样的话，即便System.gc()执行时byteArray尚未被覆盖，但由于我们已经明确将其置为null，GC自然敢大胆的回收byteArray了。输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC 103065K-&gt;102968K(227328K), 0.0015879 secs]</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC 102968K-&gt;468K(227328K), 0.0158991 secs]</span></pre></td></tr></table></figure>

<p>因此，”不使用的对象应手动赋值为null”，是一个很有用的小技巧。不过也有人认为无需将其上升到”编程规范”的高度。原因主要有以下两点：</p>
<p>首先，从编写代码时的逻辑思路来看，通过合理的作用域来隐式的控制局部变量的GC才是最优雅的。赋null值其实是为了照顾JVM的缺陷而强行添加的补救措施。会破坏代码的完整性，使得开发过程不那么流畅。开发出的代码看起来也总有些别扭，不那么”美”。</p>
<p>其次，以上的小例子都是基于字节码执行引擎的概念模型，换句话说，如果有一个JVM的实现，老老实实的严格按照JVM规范来做，可灵活实现的地方也采取尽量简单笨拙的方式，对于这种采用纯解释执行又没有太多优化的JVM实现而言(例如JDK1.0时代的默认JVM实现Sun Classic VM)，上述3个小例子中的问题是会存在的。然而当今JVM早已采用了编译与解释混合执行的方式。以Hotspot而言，若某方法被编译为本地代码(Java编译的默认单位是方法)，在开启JIT编译优化后，赋null值这种操作就会被编译优化去掉，也就是说此时写了也白写。同时字节码被编译为本地代码后，对GC Roots的枚举方式也与解释执行(或者也可以说我们通常在分析GC时使用的那个模型)时有巨大差别，仍分析上文的小例子，若其被JIT编译为了本地代码，即便没有添加赋null值的代码，也能正确及时回收局部变量(<strong><em>只是理论，我通过增加回边数成功触发编译了，然而并未成功回收byteArray，可能是哪里编写得尚有问题</em></strong>)。</p>
<hr>
<p>对于类变量而言，存在两次赋值(详见<a href="/2017/11/23/JVM-类加载机制/">JVM-类加载机制</a>)。第一次是类加载的连接-准备阶段，JVM会为其赋上对应数据类型的零值。第二次是类加载的初始化阶段，会赋上开发人员在代码里定义的具体值。因此，即便初始化阶段没有赋值也不会产生异常，因为类变量已被填入零值。换句话说，我们可以在代码中定义类似这样的类变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static int V_1;</span></pre></td></tr></table></figure>

<p>此时虽然看似V_1并没有被赋值，但实际上其会在类加载的连接-准备阶段赋上int型的零值0。</p>
<p>类似的，对于实例变量而言，虽然赋值时机不同，然而依然会经历类似的两次赋值。因此我们可以下述代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private int v2;</span></pre></td></tr></table></figure>

<p>v2也会被默认填入int型的零值0。</p>
<p>然而对于局部变量而言，其并没有JVM为其默认赋零值的阶段。因此单单只是声明一个局部变量是无法使用的。例如以下代码是无法通过编译的，会提示The local variable v may not have been initialized。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(v);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h1><p>JVM的解释执行引擎被称为基于栈的执行引擎。这里的栈指的就是操作数栈。</p>
<p>操作数栈(Operand Stack)也称作操作栈，它既然被称为栈，自然具备栈结构的基本特性：后人先出(LIFO,Last In First Out)。同局部变量表一样，操作数栈的最大深度也会在编译期确定，并写入：</p>
<p>class文件-方法表集合-方法表-属性表集合-Code属性-代表操作数栈最大深度的max_stack。</p>
<p>max_stack的基本单位为32位。即max_stack=3表示该操作数栈能容纳3个基本元素，每个基本元素的大小为32位。对于long和double这两个64位的数据类型而言，它们将占据两个基本栈元素的空间。这与局部变量表的Slot体系是对应的。</p>
<p>max_stack的计算法则为，在保证任何时刻操作数栈压入基本栈元素的个数小于等于max_stack的前提下，让max_stack尽量的小。换句话说，max_stack就是方法整个运行周期中可能装入的最大的栈元素的个数。</p>
<p>方法刚开始执行时操作数栈是空的，随着方法体中代码的执行(其实就是依逻辑调用class文件-方法表集合-方法表-属性表集合-Code属性-字节码指令集合中的字节码指令组合)，字节码指令会将执行所需的数据压入操作数栈，计算完成后再将结果压入操作数栈。例如在执行int型加法指令iadd时，会将栈顶的两个int型整数弹出，相加后再将得到的int型结果压回操作数栈。由这个小例子我们也可以看出，字节码指令在执行时操作数栈栈顶的元素必须与该字节码指令严格配合。例如在iadd时，若栈顶的两个元素是一个float一个int，iadd会执行失败。Java设计者在编译期保证了这一点，同时也会在运行期的类加载的连接-验证-字节码验证阶段确认这一点。</p>
<p>在JVM规范所给出的概念模型中，虚拟机栈或本地方法栈中的栈帧间是完全独立的。然而大多数JVM实现都会做一些优化处理，令相邻的两个栈帧间出现一部分重叠。如下图所示。</p>
<p><img src="/images/blog_pic/JVM/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84/1.png" alt="1.png"></p>
<p>方法链的调用往往遵循以下规则：执行到某条方法调用命令，该命令读取操作数栈中的参数(例如新方法的全路径名，描述符，所需参数等)调用新方法并压入代表这个新方法的栈帧。如果栈帧间是完全独立的，那么这个新的栈帧所需的传入参数必须要由调用它的方法复制一份，而这种复制行为其实是可以很容易避免的。解决策略就是上图的做法。每个栈帧的最下部是局部变量表，最上部是操作数栈，这样对于紧邻的两个栈帧而言，就可以让下面的栈帧中的操作数栈与上面的栈帧的局部变量表共享一部分信息，避免了入参的复制。节省空间，提高效率。</p>
<h1 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h1><p>Class文件的常量池集合在记录方法时使用的是符号引用。而想要使用是必须进行连接的(也就是将符号引用替换为直接引用)。其连接原则就是只要能确定具体调用的方法了，就尽早进行连接。因此，编译期就能确定调用版本(注意，编译期仅仅是能确定，而并未真的替换。所有连接的替换操作都是发生在运行期的)的方法会在类加载的连接-解析阶段或者第一次使用时转化为直接引用。</p>
<p>能被子类继承的方法是无法在编译期确定版本的。因为编译期只能得到该引用的静态类型，若方法能被继承，说明当具体运行到这一句字节码指令时，其实际类型可能与静态类型不同(实际类型可能是该静态类型，也可能是该静态类型的子类)。而编译期显然不能预测到该实际类型到底是什么。</p>
<p>不过反过来说，如果一个方法不允许被子类继承，那么它必然可以在编译期就确定调用版本。这些方法包括：静态方法，私有方法，构造方法，被final修饰的方法等。这些方法的连接过程被称为解析。其连接手段是静态多分派。</p>
<p>而对于剩下那些能被子类继承的方法而言，除了依然要进行静态多分派之外，当程序执行到该字节码指令时，还要进行动态单分派。这些方法至此才能真正的完成连接操作。它们在执行阶段进行的连接操作被称为动态连接(Dynamic Linking)。</p>
<p>每个栈帧都会包含一个指向运行时常量池中该栈帧所属方法实际版本的引用，其值是动态连接之后的结果(当然，无法被继承的方法在方法调用版本判断时是没有动态连接这一步的，不过统一都这样称呼)，因此也称为栈帧中的动态连接信息(Dynamic Linking)。</p>
<h1 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h1><p>首先需要明确的是，这里所说的栈帧中的方法返回地址(Return Address)与上文局部变量表中说到的那个被废弃的数据类型returnAddress从名字上来看很相似，但实际上二者完全没有关系。</p>
<p>当一个方法开始执行后(即产生了栈帧并压入操作数栈)，只有两种方式可以退出这个方法(即该方法对应的栈帧从操作数栈中弹出)。</p>
<p>第一种退出方式被称为正常完成出口(Normal Method Invocation Completion)。一如其名，也就是方法顺顺利利的执行完成。此种方式的触发条件为字节码执行引擎遇到任意一个表示方法返回的字节码指令。这时可能会有返回值传递给上层的方法调用者(即调用该方法的方法)。是否有返回值及返回值的类型将由遇到的那条方法返回指令决定。</p>
<p>另一种退出方式被称为异常完成出口(Abrupt Method Invocation Completion)。自然指得就是方法在执行过程中遇到异常(包括JVM内部产生的异常及代码使用athrow字节码指令手动抛出的异常)，并且该异常本方法无法处理(即本方法的异常表中没有搜索到匹配的异常处理器，该异常表存储于class文件-方法表集合-方法表-属性表集合-Code属性-异常表集合)。就会导致方法退出。使用这种方式退出的方法是不会给它上层的方法调用者传递任何返回值的。</p>
<p>无论采用哪种退出方式，在方法结束后，都需要返回到它的上层方法调用者调用它的位置，这样程序才能继续执行。方法结束实际上就意味着当前栈帧的出栈。此时需执行的操作可能有：</p>
<ul>
<li>恢复上层方法调用者的局部变量表和操作数栈</li>
<li>把返回值(如果有的话)压入上层方法调用者的操作数栈中</li>
<li>调整所属线程的PC计数器的值以指向上层方法调用者调用本方法那条指令的下一条指令</li>
<li>等等</li>
</ul>
<p>因此方法返回时可能需要在栈帧中保存一些信息，用于支持上述操作。这部分信息就被称为操作数栈的方法返回地址。一般来说，方法正常退出时，调整后的所属线程的PC计数器的值会存在栈帧的方法返回地址中。而当方法异常退出时，该值将由异常表来决定，因此通常不会存在栈帧中。</p>
<h1 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h1><p>JVM规范允许具体的JVM实现增加一些自定义的信息到栈帧中。例如与调试相关的信息。附加信息完全取决于具体的JVM实现，算是JVM规范在实现灵活性上留的尺度比较大的一个口子。</p>
<p>在实际开发中，一般会将动态连接，方法返回地址与附加信息这3个比较零碎的信息归为一类，统称为栈帧信息。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-类加载器</title>
    <url>/2017/12/04/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<p><a href="/2017/11/23/JVM-类加载机制/">JVM-类加载机制</a>中已讨论过了，JVM规范对于类加载-加载阶段中的限制很少，或者更具体的来说，是对这一阶段中”通过类的全限定名获取该类的二进制字节流”这一动作的限制很少，这为JVM的实现者提供了很高的灵活性。其原理为该动作的绝大多数的实现逻辑被放到了JVM之外(最核心的那一组类的加载逻辑依然控制在JVM内部)，从而其才有可能会被用户代码所影响。实现这一动作的代码模块被称为”类加载器”。</p>
<p>该机制诞生的初衷是为了实现Java Applet。Java最初的崛起依托的也是这种小程序。只是，随着SUN与微软那场著名的世纪撕逼大战的升级，Java Applet技术逐渐式微，至今基本上已完全死掉了(最初的主力业务，浏览器上的Java Applet算是彻底完蛋了。在其他领域，例如智能卡，Java Applet还有一定的生存空间)。然而失之东隅，收之桑榆，类加载器技术本身却探索出了新的发展道路，现在其已是Java技术体系中重要的基石，在类层次划分，OSGi，热部署，代码加密等领域大放异彩。</p>
<a id="more"></a>

<p>除了完成”通过类的全限定名获取该类的二进制字节流”这一具体的动作之外，类加载器还起到了重要的类身份识别作用。如果我们将类比作Mybatis配置文件中的statement，那么类加载器就是statement所属的namespace(每一个类加载器都有一个独立的类名称空间)。正如namespace+statement id唯一标识一个statement那样，类加载器+类则唯一标识一个类。更通俗的来说，比较内存中的两个类是否是同一个，必要的前提条件是二者的类加载器相同。否则，即便这两个类来源于同一个class文件，被加载入同一个JVM实现，只要加载它们的类加载器不同，它们就必定不相等。</p>
<p>具体到Java代码层面，这里的”不相等”会体现在类的Class对象的equals()方法，isAssignableFrom()方法，isInstance()方法等方法的返回结果上。同时既然影响了类对象的isInstance()方法，那么自然也会影响实例的instanceof比较。</p>
<p>为了证明这一点，我们自行设计一个类构造器：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassLoader myClassLoader &#x3D; new ClassLoader() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String fileName &#x3D; name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    InputStream is &#x3D; this.getClass().getResourceAsStream(fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    byte[] b &#x3D; new byte[is.available()];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    is.read(b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return defineClass(name, b, 0, b.length );</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch(IOException e)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new ClassNotFoundException(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object obj &#x3D; myClassLoader.loadClass(&quot;com.test.Test&quot;).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj.getClass());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj instanceof com.test.Test);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class com.test.Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<p>这是Java API中推荐的类加载器的自定义方式，即继承ClassLoader类并重写其内部的findClass方法。不过结果却很遗憾的并不符合我们的预期：比较结果是true。难道是前文介绍的类加载器机制有误？还是obj并非是由我们自定义的myClassLoader加载的？</p>
<p>答案是后者。Java默认并且推荐开发人员遵守其所构造的双亲委派模型(将在后文详述)，简单来说，就是当我们试图用一个类加载器加载某一个类前，会先尝试用该类加载器的父类加载器(这里说的父类是逻辑上的继承关系，并非一定就是写在代码里的那种继承)加载，若父类加载器加载不了，再交给本来打算使用的类加载器。显然，这是一个递归动作，任何一个类加载器的加载操作都会追溯到最顶层的那个类加载器，而后逐级向下查找。直到找到能够加载目标类的类加载器。在上例中，我们所定义的myClassLoader的父类加载器：应用程序类加载器已有能力加载目标类，自然轮不到myClassLoader出手了。</p>
<p>不过有时因为某些特定需求，即便Java不推荐，我们依然不得不破坏双亲委派模型。比如我们现在面临的就是这样的一个”特定的需求”：我们想看看不同类加载器加载到内存里的类到底会不会被判为不相等。为此，我们只能采用Java不推荐的方法，即一步到位，直接重写ClassLoader类中最终用于加载的loadClass方法，并在其内部指定我们自己破坏双亲委派模型的逻辑：无视父类加载器，只用当前我们自定义的类加载器加载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassLoader myClassLoader &#x3D; new ClassLoader() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String fileName &#x3D; name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    InputStream is &#x3D; this.getClass().getResourceAsStream(fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    byte[] b &#x3D; new byte[is.available()];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    is.read(b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return defineClass(name, b, 0, b.length);    &#x2F;&#x2F; 17行</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new ClassNotFoundException(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object obj &#x3D; myClassLoader.loadClass(&quot;com.test.Test&quot;).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj.getClass());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj instanceof com.test.Test);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$1.loadClass(Test.java:15)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ClassLoader.defineClass1(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ClassLoader.defineClass(ClassLoader.java:800)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ClassLoader.defineClass(ClassLoader.java:643)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$1.loadClass(Test.java:17)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:23)</span></pre></td></tr></table></figure>

<p>结果依然很糟心(人生不如意事十之八九=-=)，报错的地方是17行。我进到了这个defineClass方法内部，一路跟踪。发现它会以目标类的父类为参数再次调用我们自定义的类加载器。由于这是个递归的过程，看来是会一直追溯到Object类了。于是我尝试输出了一下fileName：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassLoader myClassLoader &#x3D; new ClassLoader() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String fileName &#x3D; name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    InputStream is &#x3D; this.getClass().getResourceAsStream(fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    byte[] b &#x3D; new byte[is.available()];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    is.read(b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return defineClass(name, b, 0, b.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new ClassNotFoundException(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object obj &#x3D; myClassLoader.loadClass(&quot;com.test.Test&quot;).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj.getClass());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj instanceof com.test.Test);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">Object.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$1.loadClass(Test.java:16)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ClassLoader.defineClass1(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ClassLoader.defineClass(ClassLoader.java:800)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ClassLoader.defineClass(ClassLoader.java:643)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$1.loadClass(Test.java:18)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:24)</span></pre></td></tr></table></figure>

<p>果然，我们的loadClass被调用了两次，而第二次传入的java.lang.Object类我们自定义的类加载器当然没有加载的权限，is自然是null。知道了症结所在，解决起来就简单了。加载不了继续委派给父类加载器就可以了。看来父类加载器并非完全没用，我们的破坏实际上相当于将双亲委派模型的查询顺序倒了过来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ClassLoader myClassLoader &#x3D; new ClassLoader() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    String fileName &#x3D; name.substring(name.lastIndexOf(&quot;.&quot;) + 1) + &quot;.class&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    InputStream is &#x3D; this.getClass().getResourceAsStream(fileName);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (null &#x3D;&#x3D; is) return super.loadClass(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    byte[] b &#x3D; new byte[is.available()];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    is.read(b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return defineClass(name, b, 0, b.length);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new ClassNotFoundException(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object obj &#x3D; myClassLoader.loadClass(&quot;com.test.Test&quot;).newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj.getClass());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(obj instanceof com.test.Test);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class com.test.Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr></table></figure>

<p>终于我们成功了，也顺利验证了前文理论知识的正确性。</p>
<h1 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h1><p>从JVM的角度来看只有两种类加载器，也就是被留在自身内部的”核心”及被丢到自身之外的”弃儿”：</p>
<ul>
<li>启动类加载器(Bootstrap ClassLoader)：即被留在JVM内部的”核心”。其使用C++实现(强调一下，特指HotSpot VM)。</li>
<li>其他类加载器。即独立于JVM外部的”弃儿”。均采用Java语言实现，并均继承自抽象类java.lang.ClassLoader。</li>
</ul>
<p>启动类加载器负责加载如下核心类：</p>
<ul>
<li>&lt;JAVA_HOME&gt;/lib目录(这里的&lt;JAVA_HOME&gt;指的是jre)下的类。</li>
<li>被-Xbootclasspath参数所指定的路径中的类。</li>
</ul>
<p>除此之外，还需要类所属的文件名能被JVM所识别。换句话说，启动类加载器的类加载检查其实很严格，只能加载有数的那么几个系统核心类(例如rt.jar)，并不是随便将个jar包丢到&lt;JAVA_HOME&gt;/lib目录下启动类加载器就会去加载。</p>
<p>既然启动类加载器被保留在了JVM内部，那么很显然，开发人员无法直接引用它。对于HotSpot而言，被启动类加载器加载的类的类加载器是null，仿佛它不存在一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Object.class.getClassLoader());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Test.class.getClassLoader());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@e1641c0</span></pre></td></tr></table></figure>

<p>显然，除了启动类加载器之外，JVM对于它的弃儿们过于的冷漠了，一句”其他”就全打发了。这些”其他”其实又可分为两类：</p>
<ul>
<li>扩展类加载器(Extension ClassLoader)</li>
<li>应用程序类加载器(Application ClassLoader)</li>
</ul>
<p>扩展类加载器由sun.misc.Launcher$ExtClassLoader实现，它负责加载如下类：</p>
<ul>
<li>&lt;JAVA_HOME&gt;/lib/ext目录(这里的&lt;JAVA_HOME&gt;指的是jre)下的类。</li>
<li>被系统变量java.ext.dirs所指定的路径中的类。</li>
</ul>
<p>从名称上就可以看出来，扩展类加载器加载的是核心类库的扩展，自然也就没那么重要了。因此才会被移出JVM，用户代码也可以直接使用该类加载器。</p>
<hr>
<p>应用程序类加载器由sun.misc.Launcher$AppClassLoader实现。很显然，较之扩展类加载器，应用程序类加载器更加的远离核心，它负责加载用户路径(也就是我们在安装Java时通常都会配置的那个环境变量ClassPath)中指定的类库，用户代码自然也可以直接使用该类加载器。因此，我们日常写的代码如果没有做特别的关于类加载器方面的操作(例如上文我们强行破坏双亲委派模型的例子)，默认的类加载器就是这个应用程序类加载器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(ClassLoader.getSystemClassLoader());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@7d05e560</span></pre></td></tr></table></figure>

<p>如上代码所示，ClassLoader的类方法getSystemClassLoader默认返回的类加载器就是这个应用程序类加载器。因此它也被称作系统类加载器。从这里我们也能看出，对于Java设计者而言，他们是希望用户能尽量不去干扰更上一层的扩展类加载器(然后完全忘掉启动类加载器)，而以应用程序类加载器为代码中类加载器的根。</p>
<hr>
<p>至此，Java预定义的类加载器已全部介绍完毕。如果有必要，用户可以再写自定义的用户类加载器(User ClassLoader)。其结构关系通常如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/0.png" alt="0.png"></p>
<p>这种层次继承关系被称为类加载器的双亲委派模型(Parents Delegation Model)。需要注意的是，这里的继承并不是指Java语法上的继承，而是一种更抽象的，表达执行次序的关系。例如，前文我们所做的破坏双亲委派模型，我们的匿名内部类直接继承的是抽象类ClassLoader，然而在双亲委派模型的层次继承关系中，我们自定义的这个用户类加载器依然是应用程序类加载器的孩子。或者我们可以用更准确的词语来表达：双亲委派模型中类加载器间的父子关系并非继承(Inheritance)，而是以组合(Compositon)的方式复用。父亲更像是儿子执行的前置条件。</p>
<p>所谓双亲委派模型，就是当我们试图用一个类加载器加载某一个类前，会先尝试用该类加载器的父类加载器加载，若父类加载器加载不了(它的搜索范围中并没有目标类)，再交给本来打算使用的类加载器。显然，这是一个递归动作，任何一个类加载器的加载操作都会追溯到最顶层的启动类加载器，而后逐级向下查找。直到找到能够加载目标类的类加载器。</p>
<p>双亲委派模型诞生自JDK1.2，所有类默认遵守该模型。然而，双亲委派模型并非是强制规范(例如，上文我们就写出了破坏双亲委派模型的代码)，而只是Java设计者的一种推荐。之所以如此推荐，就是为了保证类的唯一性，否则在内存中可能就会产生大量仅仅是因为类加载器不同而导致的不同的类。例如&lt;JAVA_HOME&gt;/lib目录下rt.jar中的java.lang.Object类，由于双亲委派模型的存在，内存中只会存在一个java.lang.Object类，且该类必然由启动类加载器加载。</p>
<p>即便某些开发人员写出了自己的java.lang.Object类，并放在ClassPath下，这个自定义的类依然无法被加载。因为按照双亲委派模型，该类的加载请求会先被送到顶层的启动类加载器中。启动类加载器一检查，java.lang.Object类已经在此前被自己加载过了(就是rt.jar中那个真正的Object)，因此直接就把这个加载结果返回了。自定义的java.lang.Object类则永无加载机会。</p>
<p>上文中我们既写出了破坏双亲委派模型的用户类加载器。也写出了顺应双亲委派模型，官方推荐的通过重写findClass方法实现的用户类加载器。 那么为什么重写了findClass方法双亲委派模型就能生效呢？我们不妨看下所继承的抽象类ClassLoader的源码。如果我们只是重写findClass方法，那么其loadClass(Sring str)依然保持原样，为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Class&lt;?&gt; loadClass(String name) throws ClassNotFoundException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return loadClass(name, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们再来看这个loadClass(name, false)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected Class&lt;?&gt; loadClass(String name, boolean resolve)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throws ClassNotFoundException</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    synchronized (getClassLoadingLock(name)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 先检查目标类是否已被加载过了，避免重复加载</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Class c &#x3D; findLoadedClass(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (c &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            long t0 &#x3D; System.nanoTime();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	        &#x2F;&#x2F; 触发双亲委派模型，从父类加载器查起</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (parent !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    c &#x3D; parent.loadClass(name, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    c &#x3D; findBootstrapClassOrNull(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (ClassNotFoundException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 父类加载器没找到</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (c &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                long t1 &#x3D; System.nanoTime();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                c &#x3D; findClass(name);    &#x2F;&#x2F; 调用我们重写的findClass方法</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (resolve) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            resolveClass(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h1><p>除了前文提到的为了验证理论正确性这种可有可无的原因之外，碍于需求特殊，在官方历史中双亲委派模型主要出现过3次较大规模的被破坏的情况。</p>
<p><strong>第一次破坏：向前兼容</strong></p>
<p>双亲委派模型诞生于JDK1.2，而所有JVM之外的类加载器共同继承的抽象类ClassLoader则诞生于JDK1.1。在JDK1.2之前，开发人员都是直接重写loadClass方法以实现用户类加载器，因此时双亲委派模型尚未诞生，自然也不存在什么破坏不破坏之说。然而，在双亲委派模型诞生后，那些诞生于JDK1.1时代的，不遵循双亲委派模型的代码又必须兼容。本来，按照最简明干净的设计，因为双亲委派模型委派双亲的逻辑都在loadClass方法中，为防被破坏不应允许开发人员再轻易重写这个方法了，大家都重写官方推荐的findClass方法就好。然而为了兼容此前已经重写了这个方法的版本，又不得不允许重写：这就为破坏双亲委派模型留下了一个口子，其无法成为一个强制规范，而只能是希望开发人员自觉遵守的推荐。正如上文中我们所做的，很轻易的就将其破坏了。</p>
<p><strong>第二次破坏：上层类调用下层类</strong></p>
<p>首先我们先建立上层类与下层类的概念。因类加载器是有层级关系的，而类加载器+类信息又完全确定内存的一个类，因此这些内存中的类会因加载它们的类加载器而同样具有层级关系。被越是顶层的类加载器所加载的类的层级越高。Java的设计者将越是基础，越是核心的类用越是等层的类加载器加载，这很好理解：这些基础类是大哥，是要被用户类仰望，调用的存在。加载时按照双亲委派模型，优先用上层类加载器加载它们合情合理。</p>
<p>但是问题在于，有时大哥也需要调用小弟。或者更具体的说，上层类在加载时需要调用下层类，此时双亲委派模型就无法实现了。</p>
<p>一个比较典型的例子就是JNDI服务(类似的还有JDBC,JCE,JAXB,JBI等)。JNDI(Java Naming and Directory Interface,Java命名和目录接口)是SUN公司提供的一种标准的Java命名系统接口，JNDI提供统一的客户端API，并在运行时映射为不同的命名服务和目录系统。因这些实现都遵循相同的接口规范，Java应用程序便可以在这些命名服务和目录服务之间进行交互。JNDI服务是Java所提供的标准服务，其代码位于&lt;JAVA_HOME&gt;/lib目录下的rt.jar，由启动类加载器负责加载。但是由于JNDI服务的目的就是统合管理不同的命名和目录系统，因此其必然需要调用不同厂商提供的接口实现，即JNDI接口提供者(SPI,Service Provider Interface)。显然这些外部服务的代码所能使用的类加载器的最高层级也就到应用程序类加载器，其位置往往也都是位于ClassPath下。而启动类加载器则无法加载这些下层类。</p>
<p>为解决这个问题，Java设计者只好引入了一个不那么优雅的设计：线程上下文类加载器(Thread Context ClassLoader)。当创建线程A时，A会从父线程中继承到这个类加载器。若没有父类线程，则会默认填入应用程序类加载器。在线程创建后，开发人员也可以通过Thread类提供的setContextClassLoader方法设置自定义的用户类加载器。直白点说，启动类加载器不是读不到ClassPath下的第三方类嘛，那么就开个后门，再提供一个能读到这些类的类加载器，即该上下文类加载器。这样虽然能完成需求，但却相当于父类加载器请求子类加载器去完成类加载动作，打通了双亲委派模型的逆向调用顺序，是对双亲委派模型的一种破坏。</p>
<p><strong>第三次破坏：追求程序动态性</strong></p>
<p>所谓的动态性，就是指代码热替换(HotSwap)，模块热部署(Hot Deployment)等一系列花活。说白了，就是希望Java程序的代码能像电脑的键盘，鼠标，U盘这类支持热插拔的外设一样。插上就能用，想换直接换，而不用对电脑进行重启。这是有很重要的实际意义的。大型软件重启是一件代价很高的事：这意味着在此期间服务停止，或者为了维持服务可用不得不建立分布式备份。如果上下线能实现代码的热替换，将是一个重大的进步。</p>
<p>当前主流的Java动态性的支持来自于OSGi标准。在此我想多八卦几句，Sun在很早之前就认识到了模块化和动态性的重要性，相继提出了JSR-294，JSR-277规范(即Java模块系统，Java Module System)，然而遗憾的是市场却并不承认：在Java模块化规范这个问题上，Sun在与JCP组织的战争中败下阵来，市场公认的标准也是JCP组织的JSR-291(也就是大名鼎鼎的OSGi R4.2)。然而头铁是Sun一惯的作风，在Java这个语言上，SUN要的是绝对的统治力，所有关于Java的规范都得是自己制定的才行。无奈自己的标准实在是得不到认可，SUN便另起炉灶，你们不是不认可我的标准嘛？没事，我也不认可你们。这么想着SUN便独立搞起了Jigsaw项目继续做自己的标准。由此来看SUN这个公司的性格确实是有些问题，最终落得惨淡收场应该也是有很大的自身性格原因(和微软的那场世纪撕逼大战其实也类似)。</p>
<p>虽然名义上有两套标准了，但是我们要重点说的当然还是OSGi标准。OSGi(Open Service Gateway Initiative)是OSGi联盟(OSGi Alliance)制定的一个基于Java语言的动态模块化规范。这个规范最初由Sun(注意，最初是有Sun的。所以说Sun可真是…)，IBM，爱立信等公司联合发起，目的是使服务提供商通过住宅网关为各种家用智能设备提供各种服务(也就是OSGi这个名字的具体含义)，后来OSGi得到了不错的发展，其含义也得到扩展，现在已经成为了Java世界中”事实上”的动态模块化规范(之所以要打双引号，是因为虽然市场承认这个规范，然而大哥Sun不承认)。</p>
<p>OSGi已有诸如Equinox,Felix等成熟的实现，另外许多大型软件平台和中间件服务器都基于或已声明将会基于OSGi规范来实现，例如IBM Jazz平台，GlassFish服务器，jBoss OSGi等。同时后文欲讨论的热插拔技术基于的也是OSGi规范。不过对于普通的程序员而言，OSGi最著名的应用当属Eclipse IDE。</p>
<p>OSGi的每个模块(Bundle)与普通的Java类库的区别并不大，二者一般都以JAR格式封装，内部存储的也都是Java Package和Class。然而OSGi的模块有着更高的灵活性：它可以通过Import-Package声明自身所依赖的Java Package，也可以通过Export-Package声明它允许导出发布的Java Package。这样可以使得类的访问权限更为精确，未被Export的Package及Class均会被隐藏起来。</p>
<p>对于标准的Java应用而言，类库间的依赖是有明显的层级关系的：程序员所编写的代码都依赖于Java的核心类库。而OSGi则打破了这种层级关系，至少从外观上来看，因为OSGi的模块本身基本是平级的，其模块间的依赖自然也是平级关系的依赖。</p>
<p>OSGi之所以能有上述区别于Java标准应用的特点，主要源于它那灵活的类加载器架构。</p>
<p>OSGi完全颠覆了Sun推荐的双亲委派模型。在OSGi中，每个模块都有一个属于自身的类加载器，而各类加载器之间只有规则，没有固定的委派关系。正因为模块与类加载器是这种一对一的关系，那么上面那句话我们也可以反过来说：每个类加载器都负责管理加载一个模块，所有对这个模块中的Package或Class的加载都由该类加载器完成。这样根据每次具体代码的不同，都会形成不同的临时的类加载器层次结构。或者更明确的说，在OSGi环境下，类加载器的层级结构不再是双亲委派模型中的树状结构，而是发展为了更复杂的网状结构。简单来说，除了最核心的那些类有点层级关系之外，绝大多数的类都是在平级的类加载器中完成的。</p>
<p>OSGi标准实现模块化热部署的基石也正是它的类加载机制：每个程序模块都有一个属于自己的类加载器，当需要做热替换更换一个Bundle时，会把该Bundle连同其类加载器一起换掉。</p>
<h1 id="Tomcat中的类加载器"><a href="#Tomcat中的类加载器" class="headerlink" title="Tomcat中的类加载器"></a>Tomcat中的类加载器</h1><p>主流的Java Web服务器，如Tomcat，Jetty，WebLogic，WebSphere等都会实现自定义类加载器，而且通常都不止一个。这主要是由Web服务器的功能需求决定的：</p>
<ul>
<li>在JVM眼中，所谓的Web服务器也不过是一个普通的Java程序(这里指那些由Java写成的Web服务器)，并没有什么特殊的。然而在程序员眼中Web服务器却是部署应用的平台：它不该是程序，它应该是程序的容器。这几乎是后面我们要论述的一切矛盾的根源。</li>
<li>既然我们认为Web服务器是部署应用的平台，那么一个最基本的需求就是部署在同一个Web服务器上的两个应用程序应该实现代码隔离，或者起码来说，要让程序员看起来是这么回事。例如两个不同的应用可能会同时依赖于同一个第三方类库(也就是我们一般意义上的jar包)的不同版本，而因为是同一个类库，因此该类库绝大多数的代码，包括包路径，类路径等等都是相同。此时服务器不仅仅要同时加载这两个版本，并且还能明确知道哪个版本是给哪个应用用的。</li>
<li>我们再来说说上一条需求的反面。实际开发中，若服务器上的两个应用用到了同一个类库，那么使用不同版本的可能性其实不大。绝大多数情况下都会使用相同的版本。此时就涉及到共享的问题了。当然，我们也可以继续沿用上个需求的做法，即便版本相同，也为各个应用独立加载类库。从磁盘存储的角度上讲，这样做的影响一般不大(毕竟硬盘通常都是很大的，多放几个jar包基本没什么问题)。但是内存的消耗就有些大了，独立加载意味着多加载了好多重复的类到内存，而内存就没硬盘那么廉价了。因此代码的共享问题也是Web服务器必须考虑的。</li>
<li>很多运行Java应用的Web服务器本身也是用Java编写的，服务器程序本身也存在类库依赖问题。那么对于这类Web服务器而言，还需要考虑安全问题。因为显然不能让应用的代码影响到服务器程序本身，要挂也是只挂你这个应用本身，而不是将整个平台拖垮。因此服务器所使用的类库应该与应用的类库隔离。</li>
<li>既然要运行Java应用，那么就要支持JSP。不过JSP文件最终还是要编译为Class文件才能在JVM中执行，而与其它正经的由.java生成的Class文件相比，JSP在运行时修改的概率要大得多。而在网页应用的圈子里(比如ASP,PHP,JSP等)，这些页面基本是被人当做Html去看待的(这也是它们诞生的目的和原因)，那么修改这些页面而无需重启应用就是一件理所当然的事，如果某个页面做不到这一点，那么它基本也就别想在这个圈子里混了。因此既然要支持JSP，那么通常就要支持JSP生成类的热替换(HotSwap)功能。这里既然说到了通常，那么当然有不通常的情况：例如运行在生产模式(Production Mode)下的WebLogic服务器默认就不会处理JSP文件的变化。</li>
</ul>
<p>正是因为这些原因，单靠JVM所提供的那个应用程序类加载器显然就不够了。因此各种Java Web服务器都会不约而同的设计多个自定义类加载器。反映到表象上，就是Java Web服务器通常都会提供好几个ClassPath路径供用户应用存放自身用到的第三方类库，这些路径通常都会以lib或classes命名。被放置到不同路径下的类库，自然会有不同的访问范围和服务范围。通常，每个路径都会有一个相应的自定义类加载器负责加载放置于其中的类库。</p>
<p>至此，程序员对Java Web服务器在类加载器方面的需求算是大概介绍完了。而为了实现这个相同的需求，各服务器会采取不同的做法，这里我们要聊的是Tomcat。</p>
<p>作为Apache基金会中的一款开源的Java Web服务器，Tomcat基本上遵循了双亲委派模型。本文中用于举例的Tomcat的版本为apache-tomcat-7.0.82。其目录结构如下：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/1.jpg" alt="1.jpg"></p>
<p>其类加载架构为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/2.jpg" alt="2.jpg"></p>
<p>其中蓝底部分为JVM预设的类加载器，而白底部分则是Tomcat的自定义类加载器。</p>
<p>首先先来看Common这个自定义类加载器，其所加载的类路径存在conf/catalina.properties中，其默认值为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">common.loader&#x3D;$&#123;catalina.base&#125;&#x2F;lib,$&#123;catalina.base&#125;&#x2F;lib&#x2F;*.jar,$&#123;catalina.home&#125;&#x2F;lib,$&#123;catalina.home&#125;&#x2F;lib&#x2F;*.jar</span></pre></td></tr></table></figure>

<p>关于Tomcat中catalina.base及catalina.home的区别，详见<a href="/2017/12/12/Tomcat-CATALINA_HOME与CATALINA_BASE/">Tomcat-CATALINA_HOME与CATALINA_BASE</a></p>
<p>然后我们再来看看这个lib目录下到底有什么：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/3.jpg" alt="3.jpg"></p>
<p>很显然，这是Tomcat容器级别所依赖的类库。这里我想多说一句的是，很多程序员在用Eclipse之类的IDE编写Servlet程序时会提示缺少servlet-api.jar的依赖，然而即便不管它，将程序打包放到Tomcat后依然可以正确运行。其原因就在于Tomcat已将整个类库加到了其Common类加载器的ClassPath中。</p>
<p>显然，Common类加载器的ClassPath中应该放置Tomcat平台级别的类库，因为它是所有Webapp类加载器的父类加载器。</p>
<p>接着我们继续来看再下一层的Webapp类加载器。显然，它们是应用私有的。每个应用都有一个独立的，与之对应的自定义类加载器。其加载的类库范围为：</p>
<ul>
<li>webapps/用户目录/WEB-INF/classes目录下的用户代码</li>
<li>webapps/用户目录/WEB-INF/lib目录下应用程序所依赖的类库</li>
</ul>
<p>因为要保证前文提到的需求，这些类加载器就需要破坏双亲委派模型。因此我们才说Tomcat”基本上”遵循了双亲委派模型。对于具体一个类，其类加载器的优先顺序为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动类加载器</span></pre></td></tr><tr><td class="code"><pre><span class="line">扩展类加载器</span></pre></td></tr><tr><td class="code"><pre><span class="line">应用程序类加载器</span></pre></td></tr><tr><td class="code"><pre><span class="line">Webapp</span></pre></td></tr><tr><td class="code"><pre><span class="line">Common</span></pre></td></tr></table></figure>

<p>显然，对于JVM预设的那一层次的类加载器而言，Tomcat依然是严格遵循双亲委派模型的。然而到了Tomcat自定义的类加载器这一层，双亲委派模型遭到了破坏：会优先使用应用本身的Webapp类加载器，随后才是Tomcat平台的Common类加载器。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>Java虚拟机</tag>
        <tag>虚拟机</tag>
        <tag>类加载器</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-回调</title>
    <url>/2017/12/02/Java%E5%9F%BA%E7%A1%80-%E5%9B%9E%E8%B0%83/</url>
    <content><![CDATA[<p>本文将以两个小例子来说明钩子(Hook)及回调(CallBack)。示例中的人物均出自<a href="https://baike.baidu.com/item/%E4%B8%9C%E6%96%B9Project/6217040?fr=aladdin" target="_blank" rel="noopener">东方Project</a>。</p>
<a id="more"></a>

<h1 id="例子1：钩子"><a href="#例子1：钩子" class="headerlink" title="例子1：钩子"></a>例子1：钩子</h1><p>魔理沙(Marisa)是一个乐于钻研魔法，研发魔法道具的好孩子，最初，她研发魔法道具的套路为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Marisa &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void research() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;收集蘑菇等制作道具的素材&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;调戏灵梦&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;查找素材相关的魔法理论知识&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;动手开始研发&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;造出道具&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>让魔理沙比较苦手的是第三步”查找素材相关的魔法理论知识”，为此她不得不时常去找自己的后宫帕秋莉(Patchouli)咨询魔法基础姿势，于是逐渐的，研发流程变成了如下的样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Marisa &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void research(Patchouli patchouli) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;收集蘑菇等制作道具的素材&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;调戏灵梦&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        patchouli.teach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;动手开始研发&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;造出道具&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Patchouli &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void teach() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;边咳嗽边传授素材相关的魔法理论知识&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样魔理沙不仅仅能学习到更多的膜法姿势，还加深了与姬友的感情。然而我们的姆Q实在是太病弱了，久而久之身体逐渐就吃不消了。于是心疼的魔理沙有问题时便不仅仅去找帕秋莉，也会去找她的另一个姬友爱丽丝·玛格特罗依德(Alice)，当她去找小爱时，流程是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Marisa &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void research(Alice alice) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;收集蘑菇等制作道具的素材&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;调戏灵梦&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        alice.teach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;动手开始研发&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;造出道具&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Patchouli &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void teach() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;边咳嗽边传授素材相关的魔法理论知识&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Alice &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void teach() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;边傲娇边传授素材相关的魔法理论知识&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>至此钩子(Hook)的基本样式已形成，多数代码如同模版一样不变，而只有少数代码需调用外部，从而实现了功能的特化和分离。这种思想源自23种Java设计模式中的模版方法模式。不过此时依然不够灵活，尚有改进空间。</strong></p>
<p>这样又度过了一段神仙般的日子，不过，魔理沙也愈发觉得自己在后宫关系的处理上无法做到一碗水端平了。她总是不经意的思考：”最近是不是找帕秋莉的次数有点多，小爱会不会吃醋砍我啊”，”上次和小爱玩蘑菇的时候被射命丸文那个狗仔拍到了，她万一告诉帕秋莉怎么办啊”凡此等等。并为此烦恼不止。突然有一天魔理沙灵光乍现，醒悟了一件事：我这是在找我的好姬友探讨魔法姿势啊，又不是什么见不得光的事，在这件事上她们二人都是我的良师益友，为什么要分得这么清楚呢？解开心结后的魔理沙舒畅无比，她心目中的流程变成了这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Marisa &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void research(Teacher teacher) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;收集蘑菇等制作道具的素材&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;调戏灵梦&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        teacher.teach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;动手开始研发&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;造出道具&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface Teacher &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void teach();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Patchouli implements Teacher &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void teach() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;边咳嗽边传授素材相关的魔法理论知识&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Alice implements Teacher &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void teach() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;边傲娇边传授素材相关的魔法理论知识&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>至此，便完成了一个可灵活扩展配置的钩子。</strong></p>
<h1 id="例子2：回调"><a href="#例子2：回调" class="headerlink" title="例子2：回调"></a>例子2：回调</h1><p>某一天，上白泽慧音(Keine)老师给橙(Chen)留了一个家庭作业，要她计算1+1等于几。于是橙当晚回家便自己算了起来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Chen &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int add(int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return i + j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWork(int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;完成作业，结果为:&quot; + this.add(i, j));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>首先调用homeWork方法，其内部又触发add方法，整个操作都在Chen这个类的内部完成，不涉及回调</strong></p>
<p>慧音老师看后很是满意，于是第二天留的家庭作业便稍难了一些，变为计算12+23等于几。</p>
<p>这就超出橙的知识范围了，因为她只会计算十以内的加法。没办法，她只好找到了家长八云蓝(Ran)。作为全幻想乡最强大的式神，蓝拥有着超凡的数学天赋和计算能力，比如她可以快速的口算出两个庞大整数的加法结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Ran &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int add(int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return i + j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>溺爱孩子的蓝挨不住橙的软磨硬泡，只好算出结果后告诉橙，然后橙再将结果写到作业本上完成了作业：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Ran &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int add(int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return i + j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Chen &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWork(Ran ran, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;完成作业，结果为:&quot; + ran.add(i, j));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>此时任务已不完全由Chen完成了，但依然不是回调</strong></p>
<p>没想到第三天，慧音老师出了一道更难的题，竟然已经达到了恐怖的3位数加法：123+456。</p>
<p>至此橙连作业本都不想碰了，她求蓝直接帮她写作业得了。在橙强大的卖萌攻势下，最终蓝还是屈服了，于是当晚的情况是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Ran &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int add(int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return i + j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void addAgent(int i, int j, Chen chen) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        chen.homeWork(this.add(i, j));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Chen &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWorkAgent(Ran ran, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ran.addAgent(i, j, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWork(int result) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;完成作业，结果为:&quot; + result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>至此回调基本成型：首先调用Chen.homeWorkAgent方法，其内部向Ran.addAgent求助。此时对于Chen而言，整个作业的事算是交代完了，她无需再操心到底是加是减，到底要写什么答案。而对于Ran而言，其在算出答案后，还需要回过头来再调回Chen中的方法homeWork(这也是回调名称的由来)，最终由Ran完成作业。</strong></p>
<p>这样又过了很多天之后，橙的同班同学琪露诺(Cirno)听说了这件事并羡慕不以。毕竟她只能计算5以内的加法。于是她也委托橙让蓝帮帮自己。当晚橙回家又是一通疯狂卖萌，蓝没有办法，只能边擦着鼻血边答应了下来。只是在帮琪露诺时，要做一个小小的角色转换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Ran &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int add(int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return i + j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void addAgent(int i, int j, Cirno cirno) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cirno.homeWork(this.add(i, j));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Cirno &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWorkAgent(Ran ran, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ran.addAgent(i, j, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWork(int result) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;完成作业，结果为:&quot; + result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>如是反复数日后，蓝也不禁觉得有些麻烦。然后她突然想到：虽然琪露诺这个傻9完全没法和自家的小宝贝相比，然而在做题这件事上二人的身份其实是一样的，为什么要分得这么清楚呢？想通之后顿觉豁然开朗，于是此后的流程就变成了这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Ran &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int add(int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return i + j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void addAgent(int i, int j, HomeWorkForHelp homeWorkForHelp) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        homeWorkForHelp.homeWork(this.add(i, j));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface HomeWorkForHelp &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWork(int result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Chen implements HomeWorkForHelp &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWorkAgent(Ran ran, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ran.addAgent(i, j, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWork(int result) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;完成作业，结果为:&quot; + result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Cirno implements HomeWorkForHelp &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWorkAgent(Ran ran, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ran.addAgent(i, j, this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void homeWork(int result) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;完成作业，结果为:&quot; + result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>至此便完成了一个灵活的回调</strong></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>结合以上两个小例子，让我们来总结下钩子与回调的异同。</p>
<p>首先，两个例子的基本套路是一样的。都有两大阵营：寻求帮助的人和提供帮助的人。我们不妨分别命名为A与B。</p>
<p>不过，在钩子的例子中，故事的主人公(或者说主视角)为A，即雾雨魔理沙，只有一个。而B的角色却有复数个：帕秋莉及爱丽丝。而在回调的例子中，故事的主人公(或者说主视角)则是B，即为八云蓝，只有一个。而A的角色却有复数个：橙和琪露诺。</p>
<p>另一个不同之处在于，在回调中，B必须再次调回A。换句话说，这其实是方法调用过程中同步及异步的差异(可参见<a href="/2017/10/03/Java并发-同步异步阻塞非阻塞/">Java 并发-同步异步阻塞非阻塞</a>):</p>
<ul>
<li><p>钩子：A调用B后等待，待B那边的结果返回后继续执行。即采取的是同步策略。</p>
</li>
<li><p>回调：A调用B后就不管了，待B计算出结果后需要再通知A，此时A根据结果再采取行动。即采取的是异步策略。</p>
</li>
</ul>
<p>需要注意的是，本文中关于回调的代码其实并不是真正异步的，因为A的homeWorkAgent方法实际上只有当B的addAgent方法完成时才能完成，从代码执行逻辑上依然是同步的。要想实现真的异步，还是要采用真正并发编程的策略，让B的addAgent方法完全是在另一个新的线程中执行才可以。同时，如果单看示例中的代码逻辑，橙其实也并非是将作业完全委派给了蓝，因为毕竟homeWork方法还是橙自己的，只是触发人变为了蓝，细追究的话最终干活的人还是橙自己。不过作为一个例子，我想这样已经足以说明回调的原理了。</p>
<p>最后我想说的是，在两个小例子中，我故意用了类似的话：</p>
<p><strong>突然有一天魔理沙灵光乍现，醒悟了一件事：我这是在找我的好姬友探讨魔法姿势啊，又不是什么见不得光的事，在这件事上她们二人都是我的良师益友，为什么要分得这么清楚呢？解开心结后的魔理沙舒畅无比</strong></p>
<p><strong>虽然琪露诺这个傻9完全没法和自家的小宝贝相比，然而在做题这件事上二人的身份其实是一样的，为什么要分得这么清楚呢？想通之后顿觉豁然开朗</strong></p>
<p>这也是我们在解决多角色问题时通用的思路：为什么要分得那么清楚呢？不要过多的被对象复杂的身份所干扰，我们所须关注的仅仅是针对当前功能它们所扮演的是什么角色，只要一样，我们就可以将其抽象为一类，进而提高代码的灵活性。实际上，这就是面向接口编程的精髓所在。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>回调</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-类加载机制</title>
    <url>/2017/11/23/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>JVM将描述类的数据从class文件加载到内存，并对数据进行一系列处理，最终形成可被JVM直接使用的Java类型，这就是JVM的类加载机制。</p>
<p>与那些在编译期就进行连接操作的语言不同，Java中的类型的加载，连接和初始化都是在运行期完成的(实际上这些语言的编译和Java的编译指的也不是同一回事，这些语言编译后直接就生成硬件机器所需的机器码了，自然要完成连接。而Java编译后得到的仅仅是JVM才看得懂的字节码，只是一个半成品)。这样做会增大运行期的性能开销，相应的也为Java提供了高度的灵活性：Java天生就具有的可以动态扩展的语言特性依靠的就是运行期动态加载及动态连接。例如，假设我们编写了一个面向接口的Java应用，那么我们可等到运行期再指定其具体的实现类。再比如，我们可以通过Java预定义的或自定义的类加载器，让一个本地Java应用可以在运行期从网络或其他地方动态加载一段二进制字节码流作为其程序的一部分。</p>
<p>为行文方便，在此为后文的叙述做如下规定：</p>
<ul>
<li>每个具体的class文件既可能代表一个类，也可能代表一个接口。后文将统一以类来代指类和接口这两种情况。而对于类和接口需区分对待的场合会特别声明。</li>
<li>所谓的class文件只是一种约定俗成的称呼，实际上，class文件并不一定非要是存储于磁盘中的文件，只要是一段符合class规范的二进制字节流即可，无论以何种形式存在均可。</li>
</ul>
<a id="more"></a>

<h1 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h1><p>在介绍类加载过程之前，首先需要明确类加载的时机，即什么情况才会触发JVM去加载一个类？JVM规范对此并没有做出强制约束，即实际的加载时机全凭具体的JVM实现自行发挥。</p>
<h1 id="类加载过程概览"><a href="#类加载过程概览" class="headerlink" title="类加载过程概览"></a>类加载过程概览</h1><p>类从被加载到JVM内存开始，到卸载出内存为止，整个生命周期会经历如下5个大的阶段：</p>
<ol>
<li>加载(Loading)</li>
<li>连接(Linking)</li>
<li>初始化(Initialization)</li>
<li>使用(Using)</li>
<li>卸载(Unloading)</li>
</ol>
<p>而步骤2连接又可细分为如下3步：</p>
<ol>
<li>验证(Verification)</li>
<li>准备(Preparation)</li>
<li>解析(Resolution)</li>
</ol>
<p>拆分后具体可如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/0.png" alt="0.png"></p>
<p>在分解而得的这7个小步骤中，加载，验证，准备，初始化，使用，卸载这6个步骤的开始顺序是严格有序的，而解析则不一定：某些情况下其可能会在初始化开始之后再开始，这是为了支持Java语言的运行时绑定(也称为动态绑定或晚期绑定)。注意，本段文字在描述顺序时使用的均是”开始”，而非”进行”或”完成”。即这些步骤即便严格有序也是开始的严格有序，往往是各步骤交叉混合运行的，即不会等待一个步骤彻底执行完成再执行下一个步骤，而是通常会在一个步骤的执行过程中调用，激活下一个步骤。</p>
<p>上文提到过，JVM规范并未对类加载时机做强制约束，但是对类加载步骤中的初始化却做了约束，这其实也算是变相约束了类加载时机，因为想要开始初始化，则必须先开始其前置的加载，验证，准备(如前文所述，解析不一定)。这实际上就是在要求类必须要被加载了。具体的，必须开始初始化的时机有以下5种：</p>
<p><strong>时机1</strong></p>
<p>执行以下4条字节码指令时，若对应的类没有初始化，则需要触发其初始化：</p>
<ol>
<li><strong>new</strong>：例如使用new关键字实例化对象</li>
<li><strong>getstatic,putstatic</strong>：例如读取或设置一个类的类变量(被final修饰且数据类型为基本类型或java.lang.String的类变量除外。因为其值已在编译期存入class文件–&gt;字段表集合–&gt;字段表–&gt;属性集合–&gt;ConstantValue属性中，会通过常量传播优化存入调用代码中)</li>
<li><strong>invokestatic</strong>：例如调用一个类的类方法</li>
</ol>
<p>这里需要说明一下的是第2点。我们不妨来看一段代码。</p>
<p>首先给出O：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class O &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static String V &#x3D; &quot;Reimu&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;O init&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>随后是测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(O.V);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O init</span></pre></td></tr><tr><td class="code"><pre><span class="line">Reimu</span></pre></td></tr></table></figure>

<p>O被初始化了。我们不妨将Test用javap反编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;E:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2017-11-23; size 439 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum 2fcd45f3efed2349f7934e5b3857ce92</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #6.#15         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Fieldref           #16.#17        &#x2F;&#x2F;  java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; Fieldref           #18.#19        &#x2F;&#x2F;  O.V:Ljava&#x2F;lang&#x2F;String;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Methodref          #20.#21        &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Class              #22            &#x2F;&#x2F;  Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Class              #23            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               main</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Utf8               ([Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; Class              #24            &#x2F;&#x2F;  java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; NameAndType        #25:#26        &#x2F;&#x2F;  out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; Class              #27            &#x2F;&#x2F;  O</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #19 &#x3D; NameAndType        #28:#29        &#x2F;&#x2F;  V:Ljava&#x2F;lang&#x2F;String;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #20 &#x3D; Class              #30            &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #21 &#x3D; NameAndType        #31:#32        &#x2F;&#x2F;  println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #22 &#x3D; Utf8               Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #23 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #24 &#x3D; Utf8               java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #25 &#x3D; Utf8               out</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #26 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #27 &#x3D; Utf8               O</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #28 &#x3D; Utf8               V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #29 &#x3D; Utf8               Ljava&#x2F;lang&#x2F;String;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #30 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #31 &#x3D; Utf8               println</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #32 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 1: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public static void main(java.lang.String[]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;2, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: getstatic     #2                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         3: getstatic     #3                  &#x2F;&#x2F; Field O.V:Ljava&#x2F;lang&#x2F;String;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         6: invokevirtual #4                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         9: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 4: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 5: 9</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很显然，main()方法调用的仍是类O的类变量V，因此此时类必须初始化。</p>
<p>然后我们对O做如下修改，即给V加上final修饰符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class O &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static final String V &#x3D; &quot;Reimu&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;O init&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>测试类不变，输出变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reimu</span></pre></td></tr></table></figure>

<p>此时O就没有初始化。这其实是Javac编译阶段的常量传播优化：O中被final修饰的类变量V已在编译期被存储到Test类的常量池中。此后Test中对O.V的访问实际都是在对自身常量池的访问，自然也就不需要再初始化O了。我们不妨再用javap对此时的Test.class进行反编译：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;E:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2017-11-23; size 407 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum fa5eb1af23ee221917b59def8993a5b5</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #6.#15         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Fieldref           #16.#17        &#x2F;&#x2F;  java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; String             #18            &#x2F;&#x2F;  Reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Methodref          #19.#20        &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Class              #21            &#x2F;&#x2F;  Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Class              #22            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               main</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Utf8               ([Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; Class              #23            &#x2F;&#x2F;  java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; NameAndType        #24:#25        &#x2F;&#x2F;  out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; Utf8               Reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #19 &#x3D; Class              #26            &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #20 &#x3D; NameAndType        #27:#28        &#x2F;&#x2F;  println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #21 &#x3D; Utf8               Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #22 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #23 &#x3D; Utf8               java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #24 &#x3D; Utf8               out</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #25 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #26 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #27 &#x3D; Utf8               println</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #28 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 1: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public static void main(java.lang.String[]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;2, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: getstatic     #2                  &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         3: ldc           #3                  &#x2F;&#x2F; String Reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">         5: invokevirtual #4                  &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         8: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 4: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 5: 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>注意常量池中的18，此时Reimu已被加入了Test的常量池中，main()方法中对O.V的调用实际上也是指向Test自身常量池中的常量，已与类O没有关系了。</p>
<p><strong>时机2</strong></p>
<p>使用java.lang.reflect包的方法对类进行反射调用时，若类没有进行过初始化，则需要先触发其初始化。</p>
<p><strong>时机3</strong></p>
<p>初始化一个类时，若发现其父类尚未进行过初始化，则需要先触发其父类的初始化。</p>
<p><strong>时机4</strong></p>
<p>当程序启动时，用户需要指定一个作为入口的主类(即包含main方法的那个类)，JVM会先初始化这个主类。</p>
<p><strong>时机5</strong></p>
<p>当使用JDK1.7的动态语言支持时(即invokedynamic指令和BootstrapMethods，截至JDK1.7为止，javac编译器尚无法生成invokedynamic指令及BootstrapMethods属性，必须通过一些非常规的手段才能使用到它们)，如果一个java.lang.invoke.MethodHandle实例最后的解析结果是REF_getStatic,REF_putStatic,REF_invokeStatic的方法句柄，并且这个方法句柄所对应的类没有进行过初始化，则需要先触发其初始化。</p>
<p><strong>主动引用及被动引用</strong></p>
<p>对于以上5种初始化时机，JVM规范给出了一个很强烈的限定语：有且只有。这5种场景中的行为称为对一个类进行主动引用。除此之外，所有引用类的方式都不会触发类的初始化，称为被动引用。</p>
<p>关于主动引用及被动引用很容易被误判，以如下代码为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Son.V);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Super &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int V &#x3D; 123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;Super init&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Son extends Super &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;Son init&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Super init</span></pre></td></tr><tr><td class="code"><pre><span class="line">123</span></pre></td></tr></table></figure>

<p>结果只输出了Super init而没有Son init。说明只有父类得到了初始化，子类却没有。这印证了前文的规范：子类调用父类中的静态变量并不在上文”有且只有”的那5种情况中。至于子类有没有经历加载和验证，准备等初始化的前置阶段，JVM规范则未明确规定，可供具体实现自行发挥。</p>
<p>再看如下代码，我们先定义类O：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class O &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;O init&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>随后再来一个测试类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        O[] a &#x3D; new O[5];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后，程序没有任何输出。说明com.test.O并没有初始化。然而，在我们看不到的地方，实际上触发了另一个名为[Lcom.test.O的类的初始化。很显然，这并不是一个合法的类的全限定名，而是类似于数组变量的描述符。它是一个由JVM自动生成，直接继承于java.lang.Object的子类，创建动作由字节码指令newarray触发。[Lcom.test.O代表了一个元素类型为com.test.O的一维数组。数组对象应有的属性及方法均实现在该类中，对于用户而言，这个类可直接使用的只有被修饰为public的length字段及clone()方法。Java对数组的这种严密的封装方式也是Java在访问数组时较之C或C++相对安全的原因：使用C或C++时，程序员对数组的操作直接被翻译为了对数组指针的移动，万一越界了那就真的是在底层越界了。而Java对数组的操作却隔着一个JVM自造出来的数组对象，接触不到底层实际用于存储数据的数组。即便越界也是Java语言层面的越界，顶多也就是抛出越界异常java.lang.ArrayIndexOutOfBoundsException，一切问题都会限制在JVM内部，而不会真的影响到更底层的内存(更准确的说，数组越界检查并非封装在数组类中，而是封装在该数组类进行数组操作时访问的xaload,xastore指令中)。</p>
<p>接口的加载过程则与类稍有不同。同类一样，接口的加载也分为上文介绍的那些步骤。不过前文我们在判断一个类是否初始化时，使用了static{}代码块，若该代码块被调用则类被初始化，反之则没有。接口中是不能声明static{}代码块的，但是在底层，JVM其实依然会为接口生成类构造器方法&lt;clinit&gt;用于初始化接口所定义的静态变量。初始化的时机依然是前文介绍的那”有且只有”的5种。与类有细微差别的是第3点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 初始化一个类时，若发现其父类尚未进行过初始化，则需要先触发其父类的初始化。</span></pre></td></tr></table></figure>

<p>对于接口而言，这条约束就没有那么严格了。即一个接口在初始化时，除非真的用到了父接口(例如引用父接口中定义的静态变量)，否则不需要初始化父接口。</p>
<p>接下来将逐个依序详解类加载的前5个步骤，也就是加载，验证，准备，解析和初始化。至于最后两项使用和卸载则没什么可说的。</p>
<h1 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h1><p>首先必须明确的是，加载(Loading)是类加载(Class Loading)的第一个阶段，二者之间是从属关系。不要有所混淆。</p>
<p>根据JVM规范，加载阶段JVM需要依序完成如下3件事：</p>
<ol>
<li>通过类的全限定名获取该类的二进制字节流。</li>
<li>将这个字节流所代表的静态存储结构加载入JVM所管理的内存，转化为方法区中的运行时数据结构(这里与验证阶段有重叠，实际上完成转化是在验证的第一阶段文件格式验证完成后)。</li>
<li>在Java堆上创建一个代表该类的java.lang.Class类的实例，作为方法区这个类的各种数据的访问入口。换句话说，类信息本身存储在方法区中，然后在Java堆上为该类专门建立了一个类对象，像句柄那样作为中间人管理及操作该类。</li>
</ol>
<p>很显然，JVM规范对于加载的实现的要求并不具体，简直连产品经理都算不上，仅仅只是用户在描述需求。通篇都是”你要做到xxx”，至于怎么实现则几乎完全没有提及。因此对于JVM实现者而言，这种规范的灵活性就很高，例如，第一点”通过类的全限定名获取该类的二进制字节流”，一没有指明要从哪里获取，二没有指明具体该怎么获取。</p>
<p>JVM规范对于加载阶段的低限制给JVM实现者提供了广阔的自行发挥的余地。许多重要的Java技术都建立在这一基础之上，例如依然针对第一点”通过类的全限定名获取该类的二进制字节流”：</p>
<ul>
<li>从zip包中直接读取二进制字节流。这也是日后Java特有的JAR,EAR,WAR压缩包的基础。</li>
<li>从网络中读取二进制字节流，最典型的应用场景就是Applet。</li>
<li>运行期通过计算动态生成，最典型的应用场景就是反射中的动态代理技术，即java.lang.reflect.Proxy.newProxyInstance()方法所动态生成的那个代理类的二进制字节流。</li>
<li>由其他类型的文件生成。最典型的应用场景是.jsp文件。运行期.jsp文件会生成对应Java类的二进制字节流。</li>
<li>从数据库中读取，这种读取方式的应用场景相对较少，主要用于某些大型分布式中间件服务器(例如SAP Netweaver)，其基本思路为将程序二进制字节码存储到数据库中并在集群中的各机器间进行分发。</li>
</ul>
<p>相对于类加载机制中的其他阶段，非数组类的加载阶段(或者更具体的说，是加载阶段的第一步，通过类的全限定名获取该类的二进制字节流)是JVM规范限制最少的，也是开发人员可以玩出最多花样的。Java中大部分在运行期动态完成的骚操作依托的都是这一阶段。因为加载阶段既可以使用系统预设的引导类加载器完成，也可以使用用户自定义的类加载器(即重写类加载器的loadClass()方法)来控制字节流的获取方式。</p>
<p>而数组类则有所不同，如前文所述，数组类本身并不是由类加载器创建的，而是由JVM直接自动生成的。但数组类依然与类加载器有着千丝万缕的联系。因为即使数组类本身不是由类加载器创建，然而其中的元素却依然还是类加载器创建的(不考虑元素依然是数组的情况。其实即便元素是数组，即便元素的元素依然是数组，最终的那一层元素总得是非数组类，数组去掉所有维度信息后剩下的最终那一层元素被称为该数组的元素类型(Element Type))。</p>
<p>数组去掉一个维度后的元素类型被称为组件类型(Component Type)，数组的可见性与其组件类型相同。若组件类型为基本数据类型，则数组的可见性默认为public。</p>
<p>若数组的组件类型是基本数据类型，则该组件类型将使用Java预设的引导类加载器加载。该数组也会被标记为与引导类加载器关联。</p>
<p>若数组的组件类型是引用数据类型，则该组件类型将使用该引用类型的类加载器加载。该数组也会被标记为与该类加载器关联。</p>
<p>加载与验证的部分内容(如一部分字节码文件格式的验证动作)是交叉进行的，这些验证动作本质上依然属于验证阶段。可以理解为验证阶段认为时机已然成熟了，无需等待加载完成就可以开始了。</p>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>如果说加载是把所需的类信息读入内存，那么紧随其后的连接就是实际开始干活了。而连接的第一步验证则类似于程序入口处的边界判断。这一阶段的目的是为了确保class文件的字节流中包含的信息符合当前JVM实现的读取规范，并且不会危害到JVM自身的安全。</p>
<p>Java语言其实是一门语法上相对安全的语言(依然是较之C与C++)，语法上对编写者的限制较多，使用纯粹的Java代码是无法做到诸如访问数组边界以外的数据，将一个对象强制转型为它无法实现的类型，跳转到不存在的代码行等。如果强行这么做了，javac编译器也会拒绝编译。因此如果所有class字节码都是由javac编译器编译源码而得的，那么其实验证阶段就不那么必要了。</p>
<p>然而JVM的无关性却被设计为既有平台无关性，也有语言无关性。因此和JVM相关的只有class文件字节流，至于该字节流是怎么来的，是由javac编译器生成的，还是由其他编译器生成的，甚至是直接编写二进制文件硬写出来的，它并不关心。因此在字节流层面，上述通过Java语法无法实现，过不了javac编译器这一关的错误操作在字节码层面都是可以实现的，至少在语义上可以表达出来。因此，JVM在实际干活前必须检查读入的字节流是否安全。</p>
<p>验证阶段是非常重要的，该阶段几乎直接决定了具体的JVM实现承受恶意代码攻击的健壮性。从执行性能的角度来看，验证阶段的工作量占了整个类加载全过程中很大的一部分。</p>
<p>规范通常是不干预安全性这种和实际功能无关的模块的，因此JVM规范对于验证阶段的指导及限制很是笼统。最为基本的就是对class文件格式的约束。这也是最基本的约束。如果验证到字节流不符合格式上的规范，JVM就会抛出一个java.lang.VerifyError异常或其子类异常。在此之上的，应检查哪些方面，如何检查，何时检查，检查出的问题什么程度的能忍，什么程度不能忍都没有具体指示。其只是从验证思路上，将本阶段大致分为以下4种检验动作：</p>
<ol>
<li>文件格式验证</li>
<li>元数据验证</li>
<li>字节码验证</li>
<li>符号引用验证</li>
</ol>
<p><strong>文件格式验证</strong></p>
<p>这也是最基本的验证内容，且不论内容是否正确安全，如果连格式都不符合规范，该JVM从结构上都无法处理该字节流，那么后续的也都不用验了。摘录部分这一阶段的验证点如下：</p>
<ul>
<li>开头的魔数是否是0xCAFEBABE</li>
<li>主次版本号是否在当前JVM可处理的范围之内</li>
<li>检查常量tag标志，判断常量池集合中是否有不被支持的常量类型</li>
<li>指向常量池集合中的常量的索引是否指向了不存在的常量或错误类型的常量</li>
<li>被定义为CONSTANT_Utf8_info类型的常量中的值是否符合Utf8压缩编码的规范</li>
<li>class是否缺少了必要的信息或被添加了莫名其妙不认识的信息</li>
</ul>
<p>之后还有很长的验证点。不过至此我们已可以看出，该步确实就是在顺着class文件规范逐项严格检验是否符合要求。</p>
<p>本步完成前，字节流依然是以原始流的信息被临时读入内存，本步完成后，该字节流才真正的被映射为方法区中的结构。自本步后的后续步骤操作的都是方法区中对应的该类的信息了，和原始的字节流就没有关系了。这点并不难理解：只有格式符合规范，才能正确的映射。因此欲完成字节流向方法区中数据的转换，必须先完成文件格式验证。</p>
<p><strong>元数据验证</strong></p>
<p>第一阶段文件格式验证验证的是格式是否符合规范。而第二阶段元数据验证则更进一步，验证的是语义是否符合规范。即验证此时方法区中该类的信息是否符合Java的语言规范。截取部分验证点举例如下：</p>
<ul>
<li>这个类是否有父类(除了java.lang.Object外，所有类都应有父类)。</li>
<li>这个类所在的继承链中是否有不允许被继承的类(即被final修饰的类)？</li>
<li>如果这个类不是抽象类，那么它是否实现了其父类或其所实现的接口中要求它实现的所有方法？</li>
<li>类中的字段，方法是否与其父类有冲突(例如覆盖了父类的被final修饰的实例变量或实例方法)。</li>
</ul>
<p><strong>字节码验证</strong></p>
<p>元数据验证所做的语义验证针对的是一个个独立的个体，而本步字节码验证针对的则是方法体中的执行逻辑。这也是整个验证阶段最难于验证，最复杂的一个环节。其主要通过模拟代码执行过程中的数据流及控制流，确定整个过程是符合逻辑且安全的。截取部分验证点举例如下：</p>
<ul>
<li>确保任何时刻操作数栈栈顶1个或多个元素的类型与当前正欲执行的字节码指令所需的操作数匹配。</li>
<li>确保跳转指令不会跳转出方法体或者跳转到一个奇怪的不能跳转的位置。</li>
<li>确保方法体中的类型转换是有效的。例如我们可以将一个子类对象赋值给其父类数据类型。但是将一个父类对象赋值给其子类类型甚至是完全不相关的类型则不行。</li>
</ul>
<p>很显然，通过程序去验证程序的逻辑是否正确且安全是永远无法做到绝对准确的。同时繁杂的检查也将极大的占用运行时间。我们无法保证绝对准确，但是却可以尽可能的通过将验证操作前移至编译阶段来缩短运行期的验证时间(毕竟编译只需要一次，再慢也等得起)。JVM团队将方法按控制流段落划分为一个个基本块(Basic Block)，同时在class文件–&gt;方法表集合–&gt;方法表–&gt;属性集合–&gt;Code属性–&gt;属性集合–&gt;StackMapTable属性中存储每个基本块开始时局部变量表及操作数栈应有的状态。这样，在运行期类加载–&gt;验证–&gt;字节码验证阶段，就不需要根据数据流和控制流再次推算这些应有的状态了。转而直接比对实际模拟结果是否与StackMapTable属性中存储的状态一致即可。当然，使用StackMapTable属性在减少验证时间的同时，也增大了出错的几率：要是StackMapTable属性的计算出错了呢？纯粹因为计算失误导致出错的可能性不大(因为我们可以认为即便将这个验证前移到了编译阶段，验证的算法都是一样的。编译期要是算错了，放到运行期一样会算错)，问题在于恶意伪造StackMapTable属性从而骗过JVM。这个风险现在无解，是为了降低验证时间必须要承担的。</p>
<p><strong>符号引用验证</strong></p>
<p>符号引用验证发生在连接的第三个阶段：解析(很显然，又交叉执行了)。具体来说，是发生在JVM将符号引用转化为直接引用时。简单来说，进行到这一步，类的模版准备工作也快完事了。和C及C++相比，Java仅仅只是把连接操作后移到了运行期的解析阶段，并非就不进行连接了：因为不连接就无法指向实际的对象位置，光靠一个符号标记是无法运行下去的。而符号引用验证就是在验证该类常量池集合中自身以外的那些符号引用到底是不是真的存在，存在了到底允不允许本类用…截取部分验证点举例如下：</p>
<ul>
<li>通过符号引用所描述的全限定名是否能找到对应的类，找到后是否有权限访问。  </li>
<li>类中是否有所需的字段或方法，这些字段或方法是否有访问权限。</li>
</ul>
<p>显然，本步验证是在为类加载-连接-解析做准备，若无法通过符号引用验证，则会抛出一个java.lang.IncompatibleClassChangeError的子类异常，如java.lang.IllegalAccessError,java.lang.NoSuchFieldError,java.lang.NoSuchMethodError等。</p>
<p><strong>总结</strong></p>
<p>从安全的角度来看，验证阶段至关重要；但是仅从程序实现角度来看，验证阶段则完全没必要：因为其中没有任何用户逻辑，无法为用户创造具体价值。因此，若对class文件充分信任，则可以在运行时通过-Xverify:none配置关闭大部分的验证操作，加速程序运行。</p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>连接的第二个阶段名为准备。该阶段正式在方法区中为类变量分配内存并设置其初始值。有两点需要注意：</p>
<p>首先，分配内存的是类变量，实例变量会在对象实例诞生时随对象在Java堆上初始化。这个很好理解：类变量是类模板的一部分，自然应随模版初始化于方法区，而实例变量属于每个实例，自然会随实例初始化于Java堆上。</p>
<p>其次，这里设置的初始值通常指的是对应类型的零值，而非用户指定的具体值。如有以下类变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int VALUE &#x3D; 123;</span></pre></td></tr></table></figure>

<p>则在准备阶段该类变量会在方法区中初始化，其值为0而非123。可以理解为该阶段仅仅只是JVM为类开辟空间的准备阶段(一如其名)，既然开辟了空间那么当然要给个默认的初值才好。至于用户指定的值123则存放于类构造器方法&lt;clinit&gt;中，会在类加载-初始化阶段由putstatic指令赋值。Java中各类型的零值如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/1.png" alt="1.png"></p>
<p>上文在描述初始值时使用了”通常”，那么自然就会有”不通常”，即类变量(基本数据类型或字符串)被final修饰：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static final int VALUE &#x3D; 123;</span></pre></td></tr></table></figure>

<p>其值已在编译期存入class文件–&gt;字段表集合–&gt;字段表–&gt;属性集合–&gt;ConstantValue属性中，则准备阶段直接就会把该类变量初始化为ConstantValue中的值。这也很好理解：毕竟，被final修饰的变量无法再被修改了，那么即使是到了初始化阶段，或是之后的任何阶段也都玩不出什么别的花样了，始终就会保持一个值。因此也就没必要费两遍事，直接在准备阶段赋了最终值即可(这也是final关键字的精髓所在，一如其名，最初即为最终)。</p>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>解析是连接的最后一个阶段，也是类加载过程中至关重要的一个阶段。解析会将常量池内的符号引用替换为直接引用。在<a href="/2017/11/07/JVM-类文件结构/">JVM-类文件结构</a>中，符号引用可以是CONSTANT_Class_info,CONSTANT_Fieldref_info,CONSTANT_Methodref_info等类型的常量。现在再从符号引用和直接引用对比的角度回顾下符号引用，并引入直接引用：</p>
<ul>
<li>符号引用(Symbolic References):符号引用就是用一组符号描述所引用的目标，理论上并没有什么特别硬性的规定。它可以是任何形式的字面量，只要指定好描述规范(该规范已在JVM规范中指定，因此对于具体JVM实现而言，其实还是有规范的)，能在解析时无歧义的定位到目标即可。符号引用是一个逻辑上的，抽象的概念，被引用的目标不一定已加载到内存中(实际上是否加载它根本不在乎)。其与JVM实现具体的内存布局无关，由于JVM规范已规定了符号引用的描述规范(不规定不行，因为不规定的话就无法让一个统一的class文件中的符号引用在各JVM实现上无障碍的运行)，因此各JVM解析符号引用的规范必须是一致的，遵守JVM规范的。</li>
<li>直接引用(Direct References):直接引用可以是直接指向目标的指针，相对偏移量，也可以是一个能间接定位到目标的句柄。直接引用所指向的必然是一个实际已然存在的目标，其和具体JVM实现的的内存布局有关，即同一个符号引用在不同的JVM实例上翻译出的直接引用一般不会相同(其实即便同一个实例两次运行一般也不会相同)。</li>
</ul>
<p>JVM规范并未指明解析具体的触发时机，只是粗略的规定在执行以下这16个用于操作符号引用的字节码指令之前，必须要对它们使用的符号引用进行解析(即保证符号引用确实是可用的，并指到实际工作的目标上)：</p>
<ul>
<li>0xbd(anewarray):创建一个指定引用类型(如类，接口，数组)的数组，并将其引用值压入操作数栈</li>
<li>0xc0(checkcast):检验类实例的类型转换，检验未通过将抛出ClassCastException</li>
<li>0xb4(getfield):获取指定类的指定实例的实例变量，并将其值压入操作数栈</li>
<li>0xb2(getstatic):获取指定类的指定类变量，并将其值压入操作数栈。该指令的操作码之后会紧跟一个u2的操作数说明具体需要的是哪个类变量，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该字段的字段符号引用</li>
<li>0xc1(instanceof):检验类实例是否是指定类的实例，如果是将1压入操作数栈，反之压入0</li>
<li>invokedynamic:尚未出现在字节码指令集中</li>
<li>0xb9(invokeinterface):调用接口方法。运行期解释器会搜索一个实现了该接口方法的对象，并调用对应实现的接口方法</li>
<li>0xb7(invokespecial):以操作数栈栈顶reference类型的数据所指向的对象为方法的接收者，调用此对象的实例构造器&lt;init&gt;方法，私有方法或超类构造方法。该指令的操作码之后会紧跟一个u2的操作数说明具体调用的是哪个方法，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该方法的方法符号引用</li>
<li>0xb8(invokestatic):调用类方法(static修饰的方法)</li>
<li>0xb6(invokevirtual):调用实例方法。会根据对象的实际类型进行动态单分派(虚方法分派)</li>
<li>0x12(ldc):将int,float或String型常量值从常量池中推送至操作数栈栈顶。该指令的操作码之后会紧跟一个u2的操作数作为具体的值，该参数指向常量池集合中的一个对应类型的索引项</li>
<li>0x13(ldc_w):将int,float或String型常量值从常量池中推送至操作数栈栈顶(宽索引)</li>
<li>0xc5(multianewarray):创建指定类型和指定维度的多维数组(执行该指令时，操作栈中必须包含各维度的长度值)，并将其引用值压入操作数栈</li>
<li>0xbb(new):创建一个对象，并将其引用值压入操作数栈</li>
<li>0xb5(putfield):为指定类的指定实例变量赋值</li>
<li>0xb3(putstatic):为指定类的指定类变量赋值</li>
</ul>
<p>JVM规范的这一限制只是限制了解析符号引用的最晚时机：即当这些指令执行时符号引用必须已经转为直接引用。换句话说，具体的JVM实现自然也可以根据需求在更早的时候完成这一操作。</p>
<p>对一个符号引用进行多次解析请求是很常见的事。除invokedynamic指令之外，JVM实现可选择将第一次解析的结果进行缓存(比如，在方法区的运行时常量池中记录直接引用，并把该常量标志为已解析状态)，这样除非发生特定的直接引用位置变动的情况，大部分情况都可以避免重复进行解析操作。无论如何，JVM规范都要求保证的是在同一个实体中，如果一个符号引用之前已被成功解析过，那么后续的引用解析请求就应当一直成功。同样的，若第一次解析失败了，那么其他指令对这个符号引用后续的解析请求也应收到相同的异常。</p>
<p>invokedynamic指令则不遵循上述规范。</p>
<p>在此我想稍稍抱怨一下(当然，我不行，我也不上，我实在就是想bb两句)，自从我开始研究JVM起，invokedynamic指令连同它所希望实现的动态语言支持简直就像是个毒瘤，JVM规范在面对这个问题时总会变得扭曲不自然。逻辑变得复杂难懂倒还在其次，最重要的还是失去了缜密的美感，让人看着难受。细思其缘由，我想还是因为该功能实在是与Java设计的初衷背离太远所致：需求分析的时候完全没在这地方留灵活度，上线后发现需求迫切没办法强行加功能。Java语言自最初起就被设计为了静态类型语言，但是随着时代的发展，人们对动态类型的需求逐渐迫切，Java也总是会因此被人指为不灵活，逐渐要被时代所抛弃。Java也在竭力进行改良，其结果就是现在我们看到的动态语言支持方案。个人认为这个方案比较糟(我没有更好的方案，但就是感觉比较糟)，其与Java基本的结构完全不同，仅仅只是一个为了实现功能的异类。好了=-=，抱怨结束。</p>
<p>invokedynamic指令所对应的引用被称为动态调用点限定符(Dynamic Call Site Specifier)，对于这条指令而言，其解析出的直接引用仅仅是本指令的本次调用生效，也就是说，必须要程序运行到这条指令，在当前的系统环境下，调用了才会知道真正的解析结果。</p>
<p>解析动作主要针对的是如下8种常量符号引用：</p>
<ol>
<li>字符串类型字面量(CONSTANT_String_info)</li>
<li>类或接口的符号引用(CONSTANT_Class_info)</li>
<li>字段的符号引用(CONSTANT_Fieldref_info)</li>
<li>类中方法的符号引用(CONSTANT_Methodref_info)</li>
<li>接口中方法的符号引用(CONSTANT_InterfaceMethodref_info)</li>
<li>方法句柄(CONSTANT_MethodHandle_info)</li>
<li>方法类型(CONSTANT_MethodType_info)</li>
<li>动态方法调用点(CONSTANT_InvokeDynamic_info)</li>
</ol>
<p>其中，1的解析过程非常简单，没什么可说的。6,7,8又是那个操蛋的动态语言支持系统，暂不研究。下面详细讲一下2~5。</p>
<p><strong>解析类或接口的符号引用</strong></p>
<p>假设字节码所处的类为D，若要把其常量池中的一个未解析过的符号引用N解析为一个类或接口C的直接引用，整个解析过程需以下3步：</p>
<ol>
<li>若C不是一个数组类型，那么JVM会将N所代表的全限定名传递给D的类加载器去加载C。该加载过程可能会触发新的类加载(例如需加载C的父类或C所实现的接口)，会进行必要的验证(元数据验证，字节码验证等)，一旦这整个流程的某一环节出现任何异常，解析即宣告失败。</li>
<li>若C是一个数组类型，那么首先需找到该数组去掉所有维度信息后剩下的元素类型，然后按照第一点的规则去加载该元素类型。例如N为[Ljava/lang/Integer，则其元素类型即为java.lang.Integer。接着由JVM生成一个代表该数组的数组对象。</li>
<li>若上述两步未产生异常，那么C在JVM中实际上已经是一个有效的，可被直接引用的类或接口了。即至此已确保了类或接口的存在性。随后只需要再进行符号引用验证，确认D是否具备对C的访问权限，若不具备权限，则抛出java.lang.IllegalAccessError。</li>
</ol>
<p><strong>解析字段的符号引用</strong></p>
<p>字段的符号引用的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2.jpg" alt="2.jpg"></p>
<p>从中先取出字段所属的类或接口的描述符，而后按照上文解析类或接口的符号引用的方法解析，若在该过程中发生任何异常，则本次字段的符号引用解析失败。若类或接口的解析成功，我们不妨仍将其命名为C，JVM会继续做如下操作：</p>
<ol>
<li>若C内部本身就包含本字段描述符对应的字段，则返回这个字段的直接引用，查找结束。</li>
<li>否则，若C实现了接口，则按照实现顺序由前向后，在每个接口内部按照继承关系由下而上搜索是否包含本字段描述符，若找到则返回该直接引用，查找结束。</li>
<li>否则，只要C不是java.lang.Object，均按继承关系从下而上递归搜索其父类是否包含本字段描述符，若找到则返回该直接引用，查找结束。</li>
<li>否则，查找失败，抛出java.lang.NoSuchFieldError。</li>
</ol>
<p>成功找到字段后，还需进行符号引用验证，确认是否具备对该字段的访问权限，若不具备权限，则抛出java.lang.IllegalAccessError。</p>
<p>按照上述搜索顺序，若某字段多次出现在C所实现的多个接口中，或是同时出现于C的父类或C所实现的接口中，是不会产生歧义的：按照规范总可有一个明确的搜索结果。然而javac编译器却要更为严格一些，上述情况其均会拒绝编译。这也很好理解，搞得这么乱，即便机器理得清，程序员也难免混乱。而且通常这种混乱都是编码问题造成的(名字而已，为啥非得重名不可)，算是Java语法在强行矫正程序员的不良编码习惯。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(C.A);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface I0 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int A &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface I1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int A &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class C implements I0, I1 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该代码无法通过编译，在调用处(即C.A)会提示The field C.A is ambiguous。</p>
<p><strong>解析类中方法的符号引用</strong></p>
<p>类中方法的符号引用的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/3.jpg" alt="3.jpg"></p>
<p>其整体的解析思路与上文提到的字段的符号引用的解析基本一致。首先，从中先取出方法所属的类的描述符，而后按照上文解析类或接口的符号引用的方法解析，若在该过程中发生任何异常，则本次方法的符号引用解析失败。若类或接口的解析成功，我们不妨仍将其命名为C，JVM会继续做如下操作：</p>
<ol>
<li>若C是个接口，则解析失败并抛出java.lang.IncompatibleClassChangeError。</li>
<li>在C内部查找符合方法描述符的方法，若找到则返回该方法的直接引用，查找结束。</li>
<li>只要C不是java.lang.Object，均按继承关系从下而上递归搜索其父类是否包含待查找方法，若找到则返回该直接引用，查找结束。</li>
<li>若C实现了接口，则按照实现顺序由前向后，在每个接口内部按照继承关系由下而上搜索是否包含待查找方法，若找到则说明C是抽象类，查找结束，抛出java.lang.AbstractMethodError。</li>
<li>否则，查找失败。抛出java.lang.NoSuchMethodError。</li>
</ol>
<p>成功找到方法后，还需进行符号引用验证，确认是否具备对该方法的访问权限，若不具备权限，则抛出java.lang.IllegalAccessError。</p>
<p>上述搜索过程会产生一些可能看起来不那么合理的结果，如下例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Son().m();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">interface I &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void m();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;m&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Son extends Parent implements I &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>程序不仅可以编译通过，运行时也可正常输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">m</span></pre></td></tr></table></figure>

<p>Parent并未实现接口I，实现I的是Son。方法m实现于Parent，并未实现于Son。程序依然可以正常运行。</p>
<p><strong>解析接口中方法的符号引用</strong></p>
<p>接口中方法的符号引用的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/4.jpg" alt="4.jpg"></p>
<p>其整体的解析思路与上文提到的类中方法的符号引用的解析基本一致。首先，从中先取出方法所属的接口的描述符，而后按照上文解析类或接口的符号引用的方法解析，若在该过程中发生任何异常，则本次方法的符号引用解析失败。若类或接口的解析成功，我们不妨仍将其命名为C，JVM会继续做如下操作：</p>
<ol>
<li>若C是个类，则解析失败并抛出java.lang.IncompatibleClassChangeError。</li>
<li>在C内部查找符合方法描述符的方法，若找到则返回该方法的直接引用，查找结束。</li>
<li>按继承关系从下而上递归搜索C的父接口是否包含待查找方法，若找到则返回该直接引用，查找结束。</li>
<li>否则，查找失败。抛出java.lang.NoSuchMethodError。</li>
</ol>
<p>因为接口中的方法默认的访问权限均为public，因此无需进行符号引用验证。自然也不会抛出java.lang.IllegalAccessError。</p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>初始化是类加载的最后一步。前面的几步是由JVM主导的，进行的也都是通用的分配空间，检查解析操作，几乎没有用户的参与(只有在加载阶段可能会调用用户自定义的类加载器)。而初始化阶段，一如其名，才是真正的按照用户定义的代码去初始化这个类。</p>
<p>在准备阶段，类变量已被赋过一次系统默认的零值(被final修饰的String或基本类型已赋上了最终值)，初始化阶段则是通过执行类构造器方法&lt;clinit&gt;来为其赋上用户自定义的值。</p>
<p>我们在编写Java源码时并未编写这个&lt;clinit&gt;方法，其实该方法是javac编译器在编译时收集所有类变量的赋值动作及static{}后按书写顺序自动生成的。但是其实也并非就是简单的将这些代码按顺序塞进&lt;clinit&gt;方法中。我们来看下面这个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        V &#x3D; 1;    &#x2F;&#x2F; 可以通过编译。即可以为在后面定义的类变量赋值</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(V);    &#x2F;&#x2F; 无法通过编译</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  &#x2F;&#x2F; 提示Cannot reference a field before it is defined</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static int V;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>另一个类似于类构造器方法&lt;clinit&gt;的是实例构造器方法&lt;init&gt;。二者都是由javac编译器自动生成的。二者有主要如下不同：</p>
<ul>
<li>与前文已介绍过的&lt;clinit&gt;方法的收集内容及顺序不同的是，&lt;init&gt;方法先按源码编写顺序收集实例变量的赋值动作，而后收集构造函数中的信息。</li>
<li>构造函数的第一句话默认是调用父类构造函数(没显式指明的话则会默认调用父类的无参构造函数)，因此&lt;init&gt;方法总是会显式调用父类的构造函数，又因为构造函数可以重载，因此具体调用哪一个也未知。而&lt;clinit&gt;方法则不会显式调用其父类的类构造方法(只有一个，不会出现误解，没必要显式指明)，JVM总会确保某类的&lt;clinit&gt;方法在执行之前，其父类的&lt;clinit&gt;方法已执行完成。因此无论如何，JVM中第一个被执行的&lt;clinit&gt;方法必然属于java.lang.Object。</li>
</ul>
<p>&lt;clinit&gt;方法对于类或接口而言并不是必须的，若该类或接口中既没有类变量的赋值动作，也没有static{}，那么javac则无需为其生成&lt;clinit&gt;方法。</p>
<p>与类不同的是，接口中不允许有static{}，但依然允许有类变量。因此接口依然可能会有&lt;clinit&gt;方法。只是除非用到了父接口的内容，接口在初始化时无需先运行其父接口的&lt;clinit&gt;方法。同样的，接口的实现类在初始化时除非用到了该接口中的内容，也无需初始化该接口。</p>
<p>JVM会自行解决并发环境下&lt;clinit&gt;方法的线程安全问题。即若有多个线程同时去初始化一个类，那么只有一个线程会真正的去执行&lt;clinit&gt;方法，其他线程都会被阻塞。执行&lt;clinit&gt;方法的线程执行完成退出后，因此时该类已加载完成(有一个细节需明确一下，JVM在判断内存中的类是否相同时既看类本身，也看加载该类的类加载器。即同样是对于类A，用类加载器1加载出的A同用类加载器2加载出的类A是两个不同的类。因此此处会保证所有线程都在用同一个类加载器加载这个类)，其他线程自然无需再次初始化，直接用即可。</p>
<p>因此在并发环境下，&lt;clinit&gt;方法可能会导致比较隐蔽的线程阻塞问题，有如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Thread.currentThread().getName() + &quot; init Test&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>很显然，这是想构造一个永不会完成的&lt;clinit&gt;方法。但显然javac编译器没那么笨，这样是无法通过编译的，会报Initializer does not complete normally。</p>
<p>不过javac也没那么聪明，略施小计即可令其懵逼：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; init Test&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后我们再稍加调整，并写出用于测试的main方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(Thread.currentThread().getName() + &quot; start&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Loop loop &#x3D; new Loop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r, &quot;Thread 1&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r, &quot;Thread 2&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Loop &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName() + &quot; init Test&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (true) &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>程序输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Thread 1 start</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread 2 start</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thread 1 init Test</span></pre></td></tr></table></figure>

<p>该程序永不完结。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-JVM字节码指令</title>
    <url>/2017/11/21/JVM-JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>JVM的字节码指令由一个字节长度的，代表某种特定含义的数字(Opcode,即操作码)以及跟随其后的零至多个此操作所需的参数(Operands,即操作数)构成。由于JVM采用的是面向操作数栈而非寄存器的架构，因此大多数指令都仅有操作码，不包含操作数。</p>
<p>若不考虑异常处理，JVM的解释器执行字节码指令流的模型可用如下伪代码表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">do &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    PC寄存器的字节码偏移量+1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    根据PC寄存器指示的位置，从字节码指令流中取出操作码;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (该操作码需要操作数) 继续向后取出对应长度的操作数。PC寄存器随之后移;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    执行该字节码指令;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; while (剩余字节码指令流长度 &gt; 0);</span></pre></td></tr></table></figure>

<p>这里的+1是指加1个字节，即解释器读取字节码指令流的基本单位为1字节。若要读取一个16位的数据则需要连读两字节然后重新构建出原数据结构。例如可用byte1,byte2拼接存储short类型变量s。则解释器先读取byte1，后读取byte2。随后还原出s：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(byte1 &lt;&lt; 8) | byte2</span></pre></td></tr></table></figure>

<p>全部字节码指令集详见<a href="/2017/11/16/JVM-JVM字节码指令集/">JVM-JVM字节码指令集</a>。</p>
<a id="more"></a>

<h1 id="字节码与数据类型"><a href="#字节码与数据类型" class="headerlink" title="字节码与数据类型"></a>字节码与数据类型</h1><p>JVM中绝大多数的字节码指令都限制了其操作的数据的数据类型(少数与数据类型无关的指令形如无条件跳转指令goto)。例如iload_0就是将局部变量表0号索引位置的int型数值压入操作数栈，而fload_0则是将局部变量表0号索引位置的float型数值压入操作数栈。这是严格的强类型检验，与解释器具体如何执行无关：即便最终解释器实际上是以同样的代码实现这两个指令，也不允许传入参数违法。</p>
<p>大部分与数据类型相关的字节码指令都会在其助记符中加入其所操作的类型的标记。例如i代表int，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference。也有少数字节码指令不会在其助记符中明示其所操作的数据类型，例如得到数组长度的arraylength指令，其后续必须跟随一个数组类型的对象。</p>
<p>与数据类型相关的字节码指令归纳如下：</p>
<p><img src="/images/blog_pic/JVM/JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/0.jpg" alt="0.jpg"></p>
<p><img src="/images/blog_pic/JVM/JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/1.jpg" alt="1.jpg"></p>
<p><img src="/images/blog_pic/JVM/JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4/2.jpg" alt="2.jpg"></p>
<p>很显然，并非所有数据类型都有对应的字节码指令。例如有iload却没有bload。事实上大多数字节码指令都不支持byte，char，short。而对于boolean则没有任何一种字节码指令支持。原因很简单，字节码指令的操作码只有1字节，最多也只能表示256种指令，为了使数据存储更为简洁就不得不在使用时下些功夫。事实上，编译器会在编译期或由JVM在运行期将byte及short类型的数据带符号扩展(Sign-Extend)为对应的int类型数据，而将boolean及char类型的数据零位扩展(Zero-Extend)为对应的int类型的数据。从而在处理byte,short,boolean,char类型的数据时可使用处理int类型数据的字节码指令。</p>
<p>事实上，如果我们看一下<a href="/2017/11/07/JVM-类文件结构/">JVM-类文件结构</a>就可以发现，byte,short,boolean,char类型并未出现在类文件常量池的14种cp_info中，它们都被int类型所代替了。</p>
<p>不过，这样会导致Java在语法上不那么友好，以如下代码为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">short s &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">s &#x3D; s + 1;    &#x2F;&#x2F; 无法通过编译</span></pre></td></tr></table></figure>

<p>究其根本，还是进行加法时，s被自动扩展为了int型，其运算类型(Computational Type)变为了int，得到的结果自然也是int类型，当然就不能再赋值回short的变量了。</p>
<p>所有的字节码指令可大致分为后文中的9类。</p>
<h1 id="加载和存储指令"><a href="#加载和存储指令" class="headerlink" title="加载和存储指令"></a>加载和存储指令</h1><p>加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间传输。包括：</p>
<ul>
<li>将局部变量表中的一个局部变量压入操作数栈：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iload,iload_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">lload,lload_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fload,fload_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dload,dload_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">aload,aload_&lt;n&gt;</span></pre></td></tr></table></figure>

<ul>
<li>将操作数栈的栈顶弹出并存入局部变量表：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">istore,istore_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">lstore,lstore_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fstore,fstore_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">dstore,dstore_&lt;n&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">astore,astore_&lt;n&gt;</span></pre></td></tr></table></figure>

<ul>
<li>将一个常量压入操作数栈：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bipush,sipush</span></pre></td></tr><tr><td class="code"><pre><span class="line">ldc,ldc_w,ldc2_w</span></pre></td></tr><tr><td class="code"><pre><span class="line">aconst_null</span></pre></td></tr><tr><td class="code"><pre><span class="line">iconst_m1</span></pre></td></tr><tr><td class="code"><pre><span class="line">iconst_&lt;i&gt;,lconst_&lt;l&gt;,fconst_&lt;f&gt;,dconst_&lt;d&gt;</span></pre></td></tr></table></figure>

<ul>
<li>扩充局部变量表的访问索引：wide</li>
</ul>
<p>处理操作数栈及局部变量表中的数据主要就是通过上述指令。上述指令中有些带有&lt;n&gt;。例如iload_&lt;0&gt;等同于iload操作码后跟随int型的操作数0。之所以这么设计，是为了能让常用的数值的操作可以无需操作数而只以操作码完成，节省存储空间。当然指令是有限的(一共也就256个)，也不能无限的放宽常用值的范围。必须要取一个平衡。例如iload_&lt;n&gt;中n的取值范围为[0,3]。</p>
<h1 id="运算指令"><a href="#运算指令" class="headerlink" title="运算指令"></a>运算指令</h1><p>运算(算术)指令用于对操作数栈栈顶的一个或两个操作数进行某种特定的算术运算。其会将这一个或两个操作数弹出，运算后再将结果压入操作数栈。</p>
<p>大体上算术指令可分为如下两类：</p>
<ul>
<li>对整型数据进行运算的指令</li>
<li>对浮点型数据进行运算的指令</li>
</ul>
<p>处理整数和浮点数的指令在面对溢出和除零时会有不同的解决策略。但无论是哪种算术运算，都必须使用JVM指令集支持的数据类型。正如前文提到的，由于没有直接支持byte,short,boolean,char类型的算术运算指令，因此对于这些类型的算术运算，应该使用操作int类型的指令代替。</p>
<p>所有算术指令如下：</p>
<ul>
<li>加法指令：iadd,ladd,fadd,dadd</li>
<li>减法指令：isub,lsub,fsub,dsub</li>
<li>乘法指令：imul,lmul,fmul,dmul</li>
<li>除法指令：idiv,ldiv,fdiv,ddiv</li>
<li>取余(模)指令：irem,lrem,frem,drem</li>
<li>取反指令：ineg,lneg,fneg,dneg</li>
<li>位移指令：ishl,lshl,ishr,lshr,iushr,lushr</li>
<li>按位或指令：ior,lor</li>
<li>按位与指令：iand,land</li>
<li>按位异或指令：ixor,lxor</li>
<li>局部变量自增指令：iinc</li>
<li>比较指令：lcmp,fcmpl,fcmpg,dcmpl,dcmpg</li>
</ul>
<p>JVM字节码指令集直接支持了《Java语言规范》中描述的各种对整数及浮点数操作的语义。</p>
<p>关于整型数据，Java语法中在进行数据运算时可能会导致溢出，例如两个很大的正整数相加，结果可能是一个负数。但其实JVM规范中并没有明确规定整型数据溢出的运算规则，仅规定了在处理整型数据时，除了除法指令(idiv,ldiv)及取余(模)指令(irem,lrem)会因除数为零抛出ArithmeticException异常外，其余任何整型运算场景都不会抛出运行时异常。JVM规范的限制就这么多，只要满足了这个限制，具体的溢出规则就由具体实现自行把控。</p>
<p>关于浮点型数据的运算，JVM规范的限制明显大了很多：运算必须严格遵循IEEE754规范所规定的行为及限制。具体来说，必须严格遵守IEEE754规范所规定的非正规浮点数值(Denormalized Floating-Point Numbers)及逐级下溢(Gradual Underflow)的运算规则。</p>
<p>在进行浮点数运算时，所有运算结果必须舍入到适当的精度。舍入模式为IEEE754规范中默认的舍入模式。即向最接近数舍入模式：非精确的结果必须舍入为可被表示的最接近的精确值，若上下两方精确值同样接近，则优先选择最低有效位为零的。</p>
<p>在将浮点数转换为整数时，采用IEEE754规范中的向零舍入模式：数字会被截断，所有小数部分均会被舍弃。例如55.2舍入结果为55。-55.2舍入结果为-55(注意，不是-56。舍入为粗暴的舍弃小数部分，而非找到不大于原值的最大整数)。</p>
<p>和整型运算不同的是，JVM规范要求浮点数运算时不会抛出任何运行时异常(这里的异常是指Java层面的异常，不是IEEE754规范中的作为运算信号的浮点异常)。当浮点运算溢出时，将使用有符号的无穷大表示。若某运算结果没有明确的数学定义，将使用NaN表示。而所有NaN参与的运算结果均返回NaN。</p>
<p>比较long型数据时(lcmp)，采用的是带符号的比较方式。而比较浮点型数据时(fcmpl,fcmpg,dcmpl,dcmpg)，采用的是IEEE754规范所定义的无信号比较(Nonsignaling Comparisons)方式。</p>
<h1 id="类型转换指令"><a href="#类型转换指令" class="headerlink" title="类型转换指令"></a>类型转换指令</h1><p>类型转换指令可以将两种不同的数值类型进行相互转换，其用途主要有2：</p>
<ul>
<li>源码中显式指定的强制类型转换</li>
<li>前文提到的针对char,boolean,byte,short这4种类型的自动扩展</li>
</ul>
<p>类型转换主要分为两类，一类是JVM直接支持的，转换时无需显式转换指令的，被称为宽化的类型转换(Widening Numeric Conversions)，一如其名，即小范围类型向大范围类型的安全转换：</p>
<ul>
<li>int –&gt; long或float或double</li>
<li>long –&gt; float或double</li>
<li>float –&gt; double</li>
</ul>
<p>相对的，另一类类型转换被称为窄化类型转换(Narrowing Numeric Conversions)，一如其名，即大范围类型向小范围类型的不安全转换。必须显式的使用转换指令完成。这些转换指令包括：</p>
<ul>
<li>i2c,i2b,i2s</li>
<li>l2i</li>
<li>f2l,f2i</li>
<li>d2f,d2l,d2i</li>
</ul>
<p>窄化类型转换可能会导致转换结果正负号较之原值发生变化。不同数量级的情况还可能导致精度丢失。</p>
<p>在对long或int做窄化类型转换时，转换的过程仅仅是保留接收类型长度的最低几位。因符号位位于最高位，必然导致符号位被截取掉，从而可能使符号发生变化(之所以说是可能，是因为截断后的最高位可能仍与原值相同)。</p>
<p>在将一个浮点数窄化为一个整数(特指long,int)时，将遵循以下规则：</p>
<ul>
<li>若浮点值是NaN，那转换结果就是int或long类型的0</li>
<li>若浮点值不是无穷大的话，将采用IEEE754规范中的向零舍入模式：数字会被截断，所有小数部分均会被舍弃，获得整数值v。若v在接收类型能表示的范围之内，那转换结果就是v</li>
<li>反之，将根据v的符号，表示为接收类型能表示的最大正数或最小负数。</li>
</ul>
<p>而浮点数内部的窄化，即double向float的转换，遵循IEEE754规范中的向最接近数舍入模式，得到一个float精度能表示的值。若舍入结果的绝对值过小超出了float的精度表示范围，将返回float类型的正负零。如果返回的绝对值过大超出了float的表示范围，将返回float类型的正负无穷大。double类型的NaN将转换为float类型的NaN。</p>
<p>尽管如上文所述，数据类型窄化可能会导致下限溢出，上限溢出或精度丢失。但是JVM规范明确规定不能因数据类型窄化而抛出运行时异常。</p>
<h1 id="对象创建与访问指令"><a href="#对象创建与访问指令" class="headerlink" title="对象创建与访问指令"></a>对象创建与访问指令</h1><p>虽然从理论层面来讲，Java中的类实例与数组实例都是对象。但是在实现上，JVM对类实例及数组实例的创建与访问使用了不同的字节码指令。</p>
<p>具体指令如下：</p>
<ul>
<li>创建类实例的指令：new</li>
<li>创建数组实例的指令：newarray,anewarray,multianewarray</li>
<li>访问类字段(即类变量，被static修饰的字段)和实例字段(即实例变量，未被static修饰的字段)的指令：getstatic,putstatic,getfield,putfield</li>
<li>把一个数组元素压入操作数栈的指令：caload,baload,saload,iaload,laload,faload,daload,aaload</li>
<li>把操作数栈栈顶的值弹出作为数组元素存储入数组的指令：castore,bastore,sastore,iastore,lastore,fastore,dastore,aastore</li>
<li>取数组长度的指令：arraylength</li>
<li>检查类实例类型的指令：instanceof,checkcast</li>
</ul>
<h1 id="操作数栈管理指令"><a href="#操作数栈管理指令" class="headerlink" title="操作数栈管理指令"></a>操作数栈管理指令</h1><p>如同操作一个普通的栈型数据结构那样，JVM提供了一些指令直接操作操作数栈：</p>
<ul>
<li>将操作数栈栈顶的一个或两个元素出栈的指令：pop,pop2</li>
<li>复制操作数栈栈顶一个或两个元素并将这一个或两个元素的复制值重新压入操作数栈的指令：dup,dup2,dup_x1,dup2_x1,dup_x2,dup2_x2</li>
<li>将操作数栈最顶端的两个数值交换的指令：swap</li>
</ul>
<h1 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h1><p>控制转移指令可以让解释器有条件或无条件的从指定位置的指令而非该控制转移指令的下一条指令继续执行。从概念模型上理解，可以认为控制转移指令就是在有条件或无条件的修改PC寄存器中的值。控制转移指令包括：</p>
<ul>
<li>条件分支指令：ifeq,iflt,ifle,ifne,ifgt,ifge,ifnull,ifnonnull,if_icmpeq,if_icmpne,if_icmplt,if_icmpgt,if_icmple,if_icmpge,if_acmpeq,if_acmpne</li>
<li>复合条件分支指令：tableswitch,lookupswitch</li>
<li>无条件跳转指令：goto,goto_w,jsr,jsr_w,ret</li>
</ul>
<p>如上文所示，JVM中有专门的处理int及引用类型的条件分支比较指令。为了便于处理null这一特殊值，也会为其设置专门的检测指令。</p>
<p>同前文规则一致，对于boolean,char,byte,short型数据的条件分支比较，均采用int型的比较指令完成。</p>
<p>对于long,float,double而言，会先用运算指令中的比较指令：lcmp,fcmpl,fcmpg,dcmpl,dcmpg得到[1,0,-1]这样int型的比较结果并存入操作数栈，随后再用int型条件分支指令处理这些结果值，从而完成整个条件分支跳转。</p>
<p>由上文描述可知，所有基本数据类型的条件分支跳转实际上最终都依托于int型的条件分支跳转，更进一步的说，是依托于int型的比较操作。因此int型的比较操作是否简便完善高效就显得尤为重要。这也是JVM字节码指令集中int型的比较指令最为丰富强大的原因。</p>
<h1 id="方法调用和返回指令"><a href="#方法调用和返回指令" class="headerlink" title="方法调用和返回指令"></a>方法调用和返回指令</h1><p>与方法调用(即分派+执行)相关的指令列举如下：</p>
<ul>
<li>invokevirtual：调用实例方法。会根据对象的实际类型进行动态单分派(虚方法分派)</li>
<li>invokeinterface：调用接口方法。运行期解释器会搜索一个实现了该接口方法的对象，并调用对应实现的接口方法</li>
<li>invokespecial:以操作数栈栈顶reference类型的数据所指向的对象为方法的接收者，调用此对象的实例构造器&lt;init&gt;方法，私有方法或超类构造方法。该指令的操作码之后会紧跟一个u2的操作数说明具体调用的是哪个方法，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该方法的方法符号引用。</li>
<li>invokestatic：调用类方法(static修饰的方法)。</li>
<li>invokedynamic：至JDK1.7为止仍未存在于JVM字节码指令集中。用于在运行时动态解析出调用点限定符所引用的方法，并执行该方法。前面介绍的4条方法调用指令的分派逻辑都固化在JVM内部，而本指令的分派逻辑则由用户设定的引导方法决定。</li>
</ul>
<p>方法返回指令是根据返回值的类型区分的，包括:</p>
<ul>
<li>ireturn(自然，延续前文的规定，除了int之外，boolean,char,byte,short也使用该指令)</li>
<li>lreturn</li>
<li>freturn</li>
<li>dreturn</li>
<li>areturn</li>
<li>return：供返回值为void的方法或实例初始化方法或类及接口的类初始化方法使用。</li>
</ul>
<h1 id="异常处理指令"><a href="#异常处理指令" class="headerlink" title="异常处理指令"></a>异常处理指令</h1><p>显式异常指令(源代码中明确用throw语句标记的异常)均由athrow指令实现。此外，其他字节码指令在检测到异常状况时也会自动抛出异常，例如前文介绍过的除法指令(idiv,ldiv)及取余(模)指令(irem,lrem)会因除数为零抛出ArithmeticException异常。</p>
<p>而源码中显式被catch语句捕获的异常则不是由字节码指令实现的(此前是用jsr及ret指令实现的，但在JDK1.7中这两条指令已废弃了)，而是采用了class文件-&gt;方法表集合-&gt;方法表-&gt;属性集合-&gt;Code属性-&gt;异常表集合实现的。</p>
<h1 id="同步指令"><a href="#同步指令" class="headerlink" title="同步指令"></a>同步指令</h1><p>主要为synchronized关键字服务，详见<a href="/2017/07/13/Java并发-synchronized/">Java 并发-synchronized</a>。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-JVM字节码指令集</title>
    <url>/2017/11/16/JVM-JVM%E5%AD%97%E8%8A%82%E7%A0%81%E6%8C%87%E4%BB%A4%E9%9B%86/</url>
    <content><![CDATA[<p>下文局部变量表的索引的基本单位是Slot。例如局部变量表依序存储着long及int两个变量。则索引0及索引1处存放long，索引2处存放int。</p>
<a id="more"></a>

<p><strong>0x00(nop)</strong>:什么都不做</p>
<p><strong>0x01(aconst_null)</strong>:将null压入操作数栈</p>
<p><strong>0x02(iconst_m1)</strong>:将int型-1压入操作数栈</p>
<p><strong>0x03(iconst_0)</strong>:将int型0压入操作数栈</p>
<p><strong>0x04(iconst_1)</strong>:将int型1压入操作数栈</p>
<p><strong>0x05(iconst_2)</strong>:将int型2压入操作数栈</p>
<p><strong>0x06(iconst_3)</strong>:将int型3压入操作数栈</p>
<p><strong>0x07(iconst_4)</strong>:将int型4压入操作数栈</p>
<p><strong>0x08(iconst_5)</strong>:将int型5压入操作数栈</p>
<p><strong>0x09(lconst_0)</strong>:将long型0压入操作数栈</p>
<p><strong>0x0a(lconst_1)</strong>:将long型1压入操作数栈</p>
<p><strong>0x0b(fconst_0)</strong>:将float型0压入操作数栈</p>
<p><strong>0x0c(fconst_1)</strong>:将float型1压入操作数栈</p>
<p><strong>0x0d(fconst_2)</strong>:将float型2压入操作数栈</p>
<p><strong>0x0e(dconst_0)</strong>:将double型0压入操作数栈</p>
<p><strong>0x0f(dconst_1)</strong>:将double型1压入操作数栈</p>
<p><strong>0x10(bipush)</strong>:将一个byte型的常量值(范围[-128,127])压入操作数栈，需一个操作数指明压入的值</p>
<p><strong>0x11(sipush)</strong>:将一个short型的常量值(范围[-32768,32767])压入操作数栈，需一个操作数指明压入的值</p>
<p><strong>0x12(ldc)</strong>:将int,float或String型常量值从常量池中推送至操作数栈栈顶。该指令的操作码之后会紧跟一个u2的操作数作为具体的值，该参数指向常量池集合中的一个对应类型的索引项</p>
<p><strong>0x13(ldc_w)</strong>:将int,float或String型常量值从常量池中推送至操作数栈栈顶(宽索引)</p>
<p><strong>0x14(ldc2_w)</strong>:将long或doble型常量值从常量池中推送至操作数栈栈顶(宽索引)</p>
<p><strong>0x15(iload)</strong>:将局部变量表x号索引位置的int型数值压入操作数栈。需1个操作数指明x</p>
<p><strong>0x16(lload)</strong>:将局部变量表x号索引位置的long型数值压入操作数栈。需1个操作数指明x</p>
<p><strong>0x17(fload)</strong>:将局部变量表x号索引位置的float型数值压入操作数栈。需1个操作数指明x</p>
<p><strong>0x18(dload)</strong>:将局部变量表x号索引位置的double型数值压入操作数栈。需1个操作数指明x</p>
<p><strong>0x19(aload)</strong>:将局部变量表x号索引位置的引用类型压入操作数栈。需1个操作数指明x</p>
<p><strong>0x1a(iload_0)</strong>:将局部变量表0号索引位置的int型数值压入操作数栈</p>
<p><strong>0x1b(iload_1)</strong>:将局部变量表1号索引位置的int型数值压入操作数栈</p>
<p><strong>0x1c(iload_2)</strong>:将局部变量表2号索引位置的int型数值压入操作数栈</p>
<p><strong>0x1d(iload_3)</strong>:将局部变量表3号索引位置的int型数值压入操作数栈</p>
<p><strong>0x1e(lload_0)</strong>:将局部变量表0号索引位置的long型数值压入操作数栈</p>
<p><strong>0x1f(lload_1)</strong>:将局部变量表1号索引位置的long型数值压入操作数栈</p>
<p><strong>0x20(lload_2)</strong>:将局部变量表2号索引位置的long型数值压入操作数栈</p>
<p><strong>0x21(lload_3)</strong>:将局部变量表3号索引位置的long型数值压入操作数栈</p>
<p><strong>0x22(fload_0)</strong>:将局部变量表0号索引位置的float型数值压入操作数栈</p>
<p><strong>0x23(fload_1)</strong>:将局部变量表1号索引位置的float型数值压入操作数栈</p>
<p><strong>0x24(fload_2)</strong>:将局部变量表2号索引位置的float型数值压入操作数栈</p>
<p><strong>0x25(fload_3)</strong>:将局部变量表3号索引位置的float型数值压入操作数栈</p>
<p><strong>0x26(dload_0)</strong>:将局部变量表0号索引位置的double型数值压入操作数栈</p>
<p><strong>0x27(dload_1)</strong>:将局部变量表1号索引位置的double型数值压入操作数栈</p>
<p><strong>0x28(dload_2)</strong>:将局部变量表2号索引位置的double型数值压入操作数栈</p>
<p><strong>0x29(dload_3)</strong>:将局部变量表3号索引位置的double型数值压入操作数栈</p>
<p><strong>0x2a(aload_0)</strong>:将局部变量表0号Slot中的引用类型压入操作数栈</p>
<p><strong>0x2b(aload_1)</strong>:将局部变量表1号Slot中的引用类型压入操作数栈</p>
<p><strong>0x2c(aload_2)</strong>:将局部变量表2号Slot中的引用类型压入操作数栈</p>
<p><strong>0x2d(aload_3)</strong>:将局部变量表3号Slot中的引用类型压入操作数栈</p>
<p><strong>0x2e(iaload)</strong>:将int型数组指定索引的值压入操作数栈</p>
<p><strong>0x2f(laload)</strong>:将long型数组指定索引的值压入操作数栈</p>
<p><strong>0x30(faload)</strong>:将float型数组指定索引的值压入操作数栈</p>
<p><strong>0x31(daload)</strong>:将double型数组指定索引的值压入操作数栈</p>
<p><strong>0x32(aaload)</strong>:将引用类型数组指定索引的值压入操作数栈</p>
<p><strong>0x33(baload)</strong>:将byte型数组指定索引的值压入操作数栈</p>
<p><strong>0x34(caload)</strong>:将char型数组指定索引的值压入操作数栈</p>
<p><strong>0x35(saload)</strong>:将short型数组指定索引的值压入操作数栈</p>
<p><strong>0x36(istore)</strong>:将栈顶int型数值弹出并存入局部变量表x号索引处。需1个操作数指明x</p>
<p><strong>0x37(lstore)</strong>:将栈顶long型数值弹出并存入局部变量表x号索引处。需1个操作数指明x</p>
<p><strong>0x38(fstore)</strong>:将栈顶float型数值弹出并存入局部变量表x号索引处。需1个操作数指明x</p>
<p><strong>0x39(dstore)</strong>:将栈顶double型数值弹出并存入局部变量表x号索引处。需1个操作数指明x</p>
<p><strong>0x3a(astore)</strong>:将栈顶引用类型弹出并存入局部变量表x号索引处。需1个操作数指明x</p>
<p><strong>0x3b(istore_0)</strong>:将栈顶int型数值弹出并存入局部变量表0号索引处</p>
<p><strong>0x3c(istore_1)</strong>:将栈顶int型数值弹出并存入局部变量表1号索引处</p>
<p><strong>0x3d(istore_2)</strong>:将栈顶int型数值弹出并存入局部变量表2号索引处</p>
<p><strong>0x3e(istore_3)</strong>:将栈顶int型数值弹出并存入局部变量表3号索引处</p>
<p><strong>0x3f(lstore_0)</strong>:将栈顶long型数值弹出并存入局部变量表0号索引处</p>
<p><strong>0x40(lstore_1)</strong>:将栈顶long型数值弹出并存入局部变量表1号索引处</p>
<p><strong>0x41(lstore_2)</strong>:将栈顶long型数值弹出并存入局部变量表2号索引处</p>
<p><strong>0x42(lstore_3)</strong>:将栈顶long型数值弹出并存入局部变量表3号索引处</p>
<p><strong>0x43(fstore_0)</strong>:将栈顶float型数值弹出并存入局部变量表0号索引处</p>
<p><strong>0x44(fstore_1)</strong>:将栈顶float型数值弹出并存入局部变量表1号索引处</p>
<p><strong>0x45(fstore_2)</strong>:将栈顶float型数值弹出并存入局部变量表2号索引处</p>
<p><strong>0x46(fstore_3)</strong>:将栈顶float型数值弹出并存入局部变量表3号索引处</p>
<p><strong>0x47(dstore_0)</strong>:将栈顶double型数值弹出并存入局部变量表0号索引处</p>
<p><strong>0x48(dstore_1)</strong>:将栈顶double型数值弹出并存入局部变量表1号索引处</p>
<p><strong>0x49(dstore_2)</strong>:将栈顶double型数值弹出并存入局部变量表2号索引处</p>
<p><strong>0x4a(dstore_3)</strong>:将栈顶double型数值弹出并存入局部变量表3号索引处</p>
<p><strong>0x4b(astore_0)</strong>:将栈顶引用类型弹出并存入局部变量表0号索引处</p>
<p><strong>0x4c(astore_1)</strong>:将栈顶引用类型弹出并存入局部变量表1号索引处</p>
<p><strong>0x4d(astore_2)</strong>:将栈顶引用类型弹出并存入局部变量表2号索引处</p>
<p><strong>0x4e(astore_3)</strong>:将栈顶引用类型弹出并存入局部变量表3号索引处</p>
<p><strong>0x4f(iastore)</strong>:将操作数栈栈顶int型数值弹出并存入指定int型数组的指定索引位置</p>
<p><strong>0x50(lastore)</strong>:将操作数栈栈顶long型数值弹出并存入指定long型数组的指定索引位置</p>
<p><strong>0x51(fastore)</strong>:将操作数栈栈顶float型数值弹出并存入指定float型数组的指定索引位置</p>
<p><strong>0x52(dastore)</strong>:将操作数栈栈顶double型数值弹出并存入指定double型数组的指定索引位置</p>
<p><strong>0x53(aastore)</strong>:将操作数栈栈顶引用类型数值弹出并存入指定引用类型数组的指定索引位置</p>
<p><strong>0x54(bastore)</strong>:将栈顶byte型数值存入指定数组的指定索引位置</p>
<p><strong>0x55(castore)</strong>:将栈顶char型数值存入指定数组的指定索引位置</p>
<p><strong>0x56(sastore)</strong>:将栈顶short型数值存入指定数组的指定索引位置</p>
<p><strong>0x57(pop)</strong>:将操作数栈栈顶数值弹出(数值不能是long或double)</p>
<p><strong>0x58(pop2)</strong>:将操作数栈栈顶数值弹出(long或double)或顶部两个数值弹出(非long或double)</p>
<p><strong>0x59(dup)</strong>:弹出操作数栈栈顶数值，复制该值并将原值及复制值压入操作数栈</p>
<p><strong>0x5a(dup_x1)</strong>:复制操作数栈栈顶数值并将两个复制值压入操作数栈</p>
<p><strong>0x5b(dup_x2)</strong>:复制操作数栈栈顶数值并将三个(或两个)复制值压入操作数栈</p>
<p><strong>0x5c(dup2)</strong>:复制栈顶一个(long或double)或两个(非long或double)数值并将复制值压入操作数栈</p>
<p><strong>0x5d(dup2_x1)</strong>:dup_x1指令的双倍版本</p>
<p><strong>0x5e(dup2_x2)</strong>:dup_x2指令的双倍版本</p>
<p><strong>0x5f(swap)</strong>:将操作数栈最顶端的两个数值交换(不能是long或double)</p>
<p><strong>0x60(iadd)</strong>:弹出操作数栈栈顶两int型数值相加并将结果压入操作数栈</p>
<p><strong>0x61(ladd)</strong>:弹出操作数栈栈顶两long型数值相加并将结果压入操作数栈</p>
<p><strong>0x62(fadd)</strong>:弹出操作数栈栈顶两float型数值相加并将结果压入操作数栈</p>
<p><strong>0x63(dadd)</strong>:弹出操作数栈栈顶两double型数值相加并将结果压入操作数栈</p>
<p><strong>0x64(isub)</strong>:弹出操作数栈栈顶两int型数值相减并将结果压入操作数栈</p>
<p><strong>0x65(lsub)</strong>:弹出操作数栈栈顶两long型数值相减并将结果压入操作数栈</p>
<p><strong>0x66(fsub)</strong>:弹出操作数栈栈顶两float型数值相减并将结果压入操作数栈</p>
<p><strong>0x67(dsub)</strong>:弹出操作数栈栈顶两double型数值相减并将结果压入操作数栈</p>
<p><strong>0x68(imul)</strong>:弹出操作数栈栈顶两int型数值相乘并将结果压入操作数栈</p>
<p><strong>0x69(lmul)</strong>:弹出操作数栈栈顶两long型数值相乘并将结果压入操作数栈</p>
<p><strong>0x6a(fmul)</strong>:弹出操作数栈栈顶两float型数值相乘并将结果压入操作数栈</p>
<p><strong>0x6b(dmul)</strong>:弹出操作数栈栈顶两double型数值相乘并将结果压入操作数栈</p>
<p><strong>0x6c(idiv)</strong>:弹出操作数栈栈顶两int型数值相除并将结果压入操作数栈</p>
<p><strong>0x6d(ldiv)</strong>:弹出操作数栈栈顶两long型数值相除并将结果压入操作数栈</p>
<p><strong>0x6e(fdiv)</strong>:弹出操作数栈栈顶两float型数值相除并将结果压入操作数栈</p>
<p><strong>0x6f(ddiv)</strong>:弹出操作数栈栈顶两double型数值相除并将结果压入操作数栈</p>
<p><strong>0x70(irem)</strong>:弹出操作数栈栈顶两int型数值取余并将结果压入操作数栈</p>
<p><strong>0x71(lrem)</strong>:弹出操作数栈栈顶两long型数值取余并将结果压入操作数栈</p>
<p><strong>0x72(frem)</strong>:弹出操作数栈栈顶两float型数值取余并将结果压入操作数栈</p>
<p><strong>0x73(drem)</strong>:弹出操作数栈栈顶两double型数值取余并将结果压入操作数栈</p>
<p><strong>0x74(ineg)</strong>:弹出操作数栈栈顶int型数值取反并将结果压入操作数栈</p>
<p><strong>0x75(lneg)</strong>:弹出操作数栈栈顶long型数值取反并将结果压入操作数栈</p>
<p><strong>0x76(fneg)</strong>:弹出操作数栈栈顶float型数值取反并将结果压入操作数栈</p>
<p><strong>0x77(dneg)</strong>:弹出操作数栈栈顶double型数值取反并将结果压入操作数栈</p>
<p><strong>0x78(ishl)</strong>:弹出操作数栈栈顶int型数值左移x位并将结果压入操作数栈。需1个操作数指明x</p>
<p><strong>0x79(lshl)</strong>:弹出操作数栈栈顶long型数值左移x位并将结果压入操作数栈。需1个操作数指明x</p>
<p><strong>0x7a(ishr)</strong>:弹出操作数栈栈顶int型数值右移x位(有符号位移，符号位不变)并将结果压入操作数栈。需1个操作数指明x</p>
<p><strong>0x7b(lshr)</strong>:弹出操作数栈栈顶long型数值右移x位(有符号位移，符号位不变)并将结果压入操作数栈。需1个操作数指明x</p>
<p><strong>0x7c(iushr)</strong>:弹出操作数栈栈顶int型数值右移x位(无符号位移，符号位也移动)并将结果压入操作数栈。需1个操作数指明x</p>
<p><strong>0x7d(lushr)</strong>:弹出操作数栈栈顶long型数值右移x位(无符号位移，符号位也移动)并将结果压入操作数栈。需1个操作数指明x</p>
<p><strong>0x7e(iand)</strong>:弹出操作数栈栈顶两int型数值按位与并将结果压入操作数栈</p>
<p><strong>0x7f(land)</strong>:弹出操作数栈栈顶两long型数值按位与并将结果压入操作数栈</p>
<p><strong>0x80(ior)</strong>:弹出操作数栈栈顶两int型数值按位或并将结果压入操作数栈</p>
<p><strong>0x81(lor)</strong>:弹出操作数栈栈顶两long型数值按位或并将结果压入操作数栈</p>
<p><strong>0x82(ixor)</strong>:弹出操作数栈栈顶两int型数值按位异或并将结果压入操作数栈</p>
<p><strong>0x83(lxor)</strong>:弹出操作数栈栈顶两long型数值按位异或并将结果压入操作数栈</p>
<p><strong>0x84(iinc)</strong>:将指定int型变量增加指定值(如i++,i–-,i+=2等)</p>
<p><strong>0x85(i2l)</strong>:弹出操作数栈栈顶int型数值强制转换成long型数值并将结果压入操作数栈</p>
<p><strong>0x86(i2f)</strong>:弹出操作数栈栈顶int型数值强制转换成float型数值并将结果压入操作数栈</p>
<p><strong>0x87(i2d)</strong>:弹出操作数栈栈顶int型数值强制转换成double型数值并将结果压入操作数栈</p>
<p><strong>0x88(l2i)</strong>:弹出操作数栈栈顶long型数值强制转换成int型数值并将结果压入操作数栈</p>
<p><strong>0x89(l2f)</strong>:弹出操作数栈栈顶long型数值强制转换成float型数值并将结果压入操作数栈</p>
<p><strong>0x8a(l2d)</strong>:弹出操作数栈栈顶long型数值强制转换成double型数值并将结果压入操作数栈</p>
<p><strong>0x8b(f2i)</strong>:弹出操作数栈栈顶float型数值强制转换成int型数值并将结果压入操作数栈</p>
<p><strong>0x8c(f2l)</strong>:弹出操作数栈栈顶float型数值强制转换成long型数值并将结果压入操作数栈</p>
<p><strong>0x8d(f2d)</strong>:弹出操作数栈栈顶float型数值强制转换成double型数值并将结果压入操作数栈</p>
<p><strong>0x8e(d2i)</strong>:弹出操作数栈栈顶double型数值强制转换成int型数值并将结果压入操作数栈</p>
<p><strong>0x8f(d2l)</strong>:弹出操作数栈栈顶double型数值强制转换成long型数值并将结果压入操作数栈</p>
<p><strong>0x90(d2f)</strong>:弹出操作数栈栈顶double型数值强制转换成float型数值并将结果压入操作数栈</p>
<p><strong>0x91(i2b)</strong>:弹出操作数栈栈顶int型数值强制转换成byte型数值并将结果压入操作数栈</p>
<p><strong>0x92(i2c)</strong>:弹出操作数栈栈顶int型数值强制转换成char型数值并将结果压入操作数栈</p>
<p><strong>0x93(i2s)</strong>:弹出操作数栈栈顶int型数值强制转换成short型数值并将结果压入操作数栈</p>
<p><strong>0x94(lcmp)</strong>:弹出并比较操作数栈栈顶两long型数值的大小，并将int型结果[1,0,-1]压入操作数栈</p>
<p><strong>0x95(fcmpl)</strong>:弹出并比较操作数栈栈顶两float型数值的大小，并将int型结果[1,0,-1]压入操作数栈。当其中一个数值为NaN时，压入-1</p>
<p><strong>0x96(fcmpg)</strong>:弹出并比较操作数栈栈顶两float型数值的大小，并将int型结果[1,0,-1]压入操作数栈。当其中一个数值为NaN时，压入1</p>
<p><strong>0x97(dcmpl)</strong>:弹出并比较操作数栈栈顶两double型数值的大小，并将int型结果[1,0,-1]压入操作数栈。当其中一个数值为NaN时，压入-1</p>
<p><strong>0x98(dcmpg)</strong>:弹出并比较操作数栈栈顶两double型数值的大小，并将int型结果[1,0,-1]压入操作数栈。当其中一个数值为NaN时，压入1</p>
<p><strong>0x99(ifeq)</strong>:当操作数栈栈顶int型数值等于0时跳转</p>
<p><strong>0x9a(ifne)</strong>:当操作数栈栈顶int型数值不等于0时跳转</p>
<p><strong>0x9b(iflt)</strong>:当操作数栈栈顶int型数值小于0时跳转</p>
<p><strong>0x9c(ifge)</strong>:当操作数栈栈顶int型数值大于等于0时跳转</p>
<p><strong>0x9d(ifgt)</strong>:当操作数栈栈顶int型数值大于0时跳转</p>
<p><strong>0x9e(ifle)</strong>:当操作数栈栈顶int型数值小于等于0时跳转</p>
<p><strong>0x9f(if_icmpeq)</strong>:比较操作数栈栈顶两int型数值大小，当结果等于0时跳转</p>
<p><strong>0xa0(if_icmpne)</strong>:比较操作数栈栈顶两int型数值大小，当结果不等于0时跳转</p>
<p><strong>0xa1(if_icmplt)</strong>:比较操作数栈栈顶两int型数值大小，当结果小于0时跳转</p>
<p><strong>0xa2(if_icmpge)</strong>:比较操作数栈栈顶两int型数值大小，当结果大于等于0时跳转</p>
<p><strong>0xa3(if_icmpgt)</strong>:比较操作数栈栈顶两int型数值大小，当结果大于0时跳转</p>
<p><strong>0xa4(if_icmple)</strong>:比较操作数栈栈顶两int型数值大小，当结果小于等于0时跳转</p>
<p><strong>0xa5(if_acmpeq)</strong>:比较操作数栈栈顶两引用类型数值，当结果相等时跳转</p>
<p><strong>0xa6(if_acmpne)</strong>:比较操作数栈栈顶两引用类型数值，当结果不相等时跳转</p>
<p><strong>0xa7(goto)</strong>:无条件跳转，后续需跟随行号作为跳转位置</p>
<p><strong>0xa8(jsr)</strong>:跳转至指定16位offset位置，并将jsr下一条指令地址压入操作数栈(JDK1.7已废弃该指令)</p>
<p><strong>0xa9(ret)</strong>:返回至本地变量(JDK1.7已废弃该指令)</p>
<p><strong>0xaa(tableswitch)</strong>:用于switch条件跳转，case值连续(可变长度指令)</p>
<p><strong>0xab(lookupswitch)</strong>:用于switch条件跳转，case值不连续(可变长度指令)</p>
<p><strong>0xac(ireturn)</strong>:弹出并返回操作数栈栈顶的int类型数值</p>
<p><strong>0xad(lreturn)</strong>:弹出并返回操作数栈栈顶的long类型数值</p>
<p><strong>0xae(freturn)</strong>:弹出并返回操作数栈栈顶的float类型数值</p>
<p><strong>0xaf(dreturn)</strong>:弹出并返回操作数栈栈顶的double类型数值</p>
<p><strong>0xb0(areturn)</strong>:弹出并返回操作数栈栈顶的引用类型数值</p>
<p><strong>0xb1(return)</strong>:从当前方法返回void，本方法结束</p>
<p><strong>0xb2(getstatic)</strong>:获取指定类的指定类变量，并将其值压入操作数栈。该指令的操作码之后会紧跟一个u2的操作数说明具体需要的是哪个类变量，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该字段的字段符号引用</p>
<p><strong>0xb3(putstatic)</strong>:为指定类的指定类变量赋值</p>
<p><strong>0xb4(getfield)</strong>:获取指定类的指定实例的实例变量，并将其值压入操作数栈</p>
<p><strong>0xb5(putfield)</strong>:为指定类的指定实例变量赋值</p>
<p><strong>0xb6(invokevirtual)</strong>:调用实例方法。会根据对象的实际类型进行动态单分派(虚方法分派)</p>
<p><strong>0xb7(invokespecial)</strong>:以操作数栈栈顶reference类型的数据所指向的对象为方法的接收者，调用此对象的实例构造器&lt;init&gt;方法，私有方法或超类构造方法。该指令的操作码之后会紧跟一个u2的操作数说明具体调用的是哪个方法，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该方法的方法符号引用</p>
<p><strong>0xb8(invokestatic)</strong>:调用类方法(static修饰的方法)</p>
<p><strong>0xb9(invokeinterface)</strong>:调用接口方法。运行期解释器会搜索一个实现了该接口方法的对象，并调用对应实现的接口方法</p>
<p><strong>0xba(–)</strong>:无此指令</p>
<p><strong>0xbb(new)</strong>:创建一个对象，并将其引用值压入操作数栈</p>
<p><strong>0xbc(newarray)</strong>:创建一个指定原始类型(如int,float,char等)的数组，并将其引用值压入操作数栈</p>
<p><strong>0xbd(anewarray)</strong>:创建一个指定引用类型(如类，接口，数组)的数组，并将其引用值压入操作数栈</p>
<p><strong>0xbe(arraylength)</strong>:获得数组的长度并压入操作数栈栈顶。后面需跟随一个数组类型的对象</p>
<p><strong>0xbf(athrow)</strong>:弹出操作数栈栈顶的异常并将其抛出</p>
<p><strong>0xc0(checkcast)</strong>:检验类实例的类型转换，检验未通过将抛出ClassCastException</p>
<p><strong>0xc1(instanceof)</strong>:检验类实例是否是指定类的实例，如果是将int型1压入操作数栈，反之压入0</p>
<p><strong>0xc2(monitorenter)</strong>:弹出并获得操作数栈栈顶对象的管程，用于被synchronized关键字修饰的同步块</p>
<p><strong>0xc3(monitorexit)</strong>:弹出并释放操作数栈栈顶对象的管程，用于被synchronized关键字修饰的同步块</p>
<p><strong>0xc4(wide)</strong>:扩展本地变量的宽度</p>
<p><strong>0xc5(multianewarray)</strong>:创建指定类型和指定维度的多维数组(执行该指令时，操作栈中必须包含各维度的长度值)，并将其引用值压入操作数栈</p>
<p><strong>0xc6(ifnull)</strong>:操作数栈栈顶为null时跳转</p>
<p><strong>0xc7(ifnonnull)</strong>:操作数栈栈顶不为null时跳转</p>
<p><strong>0xc8(goto_w)</strong>:无条件跳转(宽索引)</p>
<p><strong>0xc9(jsr_w)</strong>:跳转至指定32位offset位置，并将jsr_w下一条指令地址压入操作数栈(JDK1.7已废弃该指令)</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-类文件结构</title>
    <url>/2017/11/07/JVM-%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>任意一个class文件都对应一个唯一的类或接口。但类或接口并非必须定义在class文件中(也可通过类加载器在运行期直接生成)。本文所指的类文件结构是指满足规范的任意类或接口的class结构。</p>
<p>class文件是一个以1字节(即8位)为基础的二进制流。各数据项依规范紧密有序的排列着，没有分隔符的存在。当数据项需占用1字节以上的空间时，将采用高位在前的方式切割为若干个1字节的基本单位。</p>
<p>以十进制为例：</p>
<ul>
<li>高位在前(Big-Endian)：123代表一百二十三。这也是人类的习惯。</li>
<li>低位在前(Little-Endian)：123代表三百二十一。</li>
</ul>
<a id="more"></a>

<p>class文件的数据结构是一种类似于C语言结构体的伪结构，这种伪结构中只有两种数据类型：无符号数及表。</p>
<p>无符号数是基本的数据类型。以u1,u2,u4,u8分别代表1个字节，2个字节，4个字节，8个字节。无符号数可用来描述数字，索引引用，数量值或按照UTF-8缩略编码的字符串。</p>
<p>表是由无符号数或其它表作为数据项构成的复合数据类型。通常表习惯性的以_info结尾。</p>
<p>整个class文件本质上就是一张表。其数据项为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/0.jpg" alt="0.jpg"></p>
<p>若某数据类型的个数不定，通常会在最前面加上计数。后文将计数及对应个数个相同的数据类型作为一个整体(集合)描述。</p>
<h1 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h1><p>class文件的头4个字节被称为魔数(Magic Number)。其唯一的作用为确认该文件是否是一个身份合法的，能被JVM读取的class文件。</p>
<p>其实不仅仅是class，很多文件格式(例如gif,jpeg等)都采用魔数进行身份验证，其较之文件扩展名安全性更高(相对来说，扩展名更易于被改变)。魔数值只要保证在文件使用的范围内唯一即可。</p>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>以16进制编辑器打开其class文件：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/1.jpg" alt="1.jpg"></p>
<p>class文件的魔数用16进制表示为：CAFEBABE(即咖啡宝贝。能只用A~F6个字母拼出一个萌萌哒且和Java语义相关的魔数也是碉堡了)</p>
<h1 id="minor-version-major-version"><a href="#minor-version-major-version" class="headerlink" title="minor_version+major_version"></a>minor_version+major_version</h1><p>紧接着魔数之后的4个字节为class文件的版本号。其中前2个字节为次版本号(minor_version)，后两个字节为主版本号(major_version)。</p>
<p>主版本号始于45。即：</p>
<ul>
<li>JDK1.1=45</li>
<li>JDK1.2=46</li>
<li>JDK1.3=47</li>
<li>JDK1.4=48</li>
<li>JDK1.5=49</li>
<li>JDK1.6=50</li>
<li>JDK1.7=51</li>
<li>JDK1.8=52</li>
</ul>
<p>依此类推。</p>
<p>高版本的JDK可兼容运行低版本的class文件，反之则不行：即使两个JDK版本间的class文件格式并未发生变化也不行。</p>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>以JDK1.7编译：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/2.jpg" alt="2.jpg"></p>
<p>其中0x33=51，即为JDK1.7。</p>
<h1 id="常量池集合"><a href="#常量池集合" class="headerlink" title="常量池集合"></a>常量池集合</h1><p>主版本号之后为常量池集合。常量池可以看作是class文件的资源仓库，是class文件结构中与class的其他项目关联最多的数据类型，也是占用class空间最大的数据项之一。</p>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int m;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int inc() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return m + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>以JDK1.7编译：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/3.jpg" alt="3.jpg"></p>
<p>常量池集合分为两部分：第一部分为两个字节，表示常量池大小(constant_pool_count)。第二部分为constant_pool_count-1个常量类型(cp_info)。</p>
<p>常量池集合的第0项被空了出来：表示”不引用任何一个常量池项目”。只有常量池集合有这个特殊的设定，其它的集合(接口索引集合，字段表集合，方法表集合等)均按常规从0开始存放数据项。因此，实际有效的常量数据项是索引1开始的，constant_pool_count也比cp_info类型的个数多一个。</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/4.jpg" alt="4.jpg"></p>
<p>如上图所示，示例程序constant_pool_count=0x13，即为十进制的19。即共有18个常量类型。</p>
<p>常量类型主要分为两大类：字面量(Literal)和符号引用(Symbolic References)。</p>
<p>字面量类似于Java语法层面的常量值概念。如文本字符串等。</p>
<p>符号引用则是编译原理方面的概念，包含以下3类：</p>
<ul>
<li>类和接口的全限定名(Fully Qualified Name)</li>
<li>字段的名称和描述符(Descriptor)</li>
<li>方法的名称和描述符</li>
</ul>
<p>C与C++的编译是一步到位的，编译的结果直接就是物理机器运行的二进制机器码。因此编译时会有“连接”这一步骤：即将代码中的方法，字段等与实际的物理地址相关联。而Java的编译仅仅只是编译为供JVM使用的中间字节码，并没有连接这一操作，真正的关联方法字段与其实际物理地址的操作是在运行期完成的，称为动态连接。因此，编译出的class文件中方法及字段是以符号引用的方式存储的：相当于一个指引，在运行期告诉JVM这是个什么东西，该翻译到什么内存地址中。</p>
<p>cp_info只是一个总称，实际上又可分为很多种。每种cp_info都是一张表。在JDK1.7之前，共有11种cp_info。JDK1.7时为了更好的支持动态语言调用，又添加了以下3种：</p>
<ul>
<li>CONSTANT_MethodHandle_info</li>
<li>CONSTANT_MethodType_info</li>
<li>CONSTANT_InvokeDynamic_info</li>
</ul>
<p>14种cp_info如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/5.jpg" alt="5.jpg"></p>
<p>这14种cp_info的共同特点为开头均为1个字节的类型标志位(tag，即上图中的标志)，而后才是该种cp_info的具体值。这样根据每种cp_info的规范就可严格限定出该种cp_info所占用的空间。进而严格限定出常量池占用的空间。</p>
<p>14种常量类型的具体结构依如下3图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/6.jpg" alt="6.jpg"></p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/7.jpg" alt="7.jpg"></p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/8.jpg" alt="8.jpg"></p>
<p>下面具体分析下示例代码中的常量池集合：</p>
<p><strong>1</strong></p>
<p>首先，跟在constant_pool_count=0x13=19之后的第一个常量为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/9.jpg" alt="9.jpg"></p>
<p>0x0A=10，查表为CONSTANT_Methodref_info，即为类中方法的符号引用。其数据结构共占据4个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/10.jpg" alt="10.jpg"></p>
<ul>
<li>前2个字节，0x0004=4，指向类的CONSTANT_Class_info的索引项</li>
<li>后2个字节，0x000F=15，指向类的CONSTANT_NameAndType_info的索引项</li>
</ul>
<hr>
<p><strong>2</strong></p>
<p>第2个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/11.jpg" alt="11.jpg"></p>
<p>0x09=9，查表为CONSTANT_Fieldref_info，即字段的符号引用。其数据结构共占据4个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/12.jpg" alt="12.jpg"></p>
<ul>
<li>前2个字节，0x0003=3，指向字段所属的CONSTANT_Class_info的索引项</li>
<li>后2个字节，0x0010=16，指向字段的CONSTANT_NameAndType_info的索引项</li>
</ul>
<hr>
<p><strong>3</strong></p>
<p>第3个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/13.jpg" alt="13.jpg"></p>
<p>0x07=7，查表为CONSTANT_Class_info，即类或接口的符号引用。其数据结构共占据2个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/14.jpg" alt="14.jpg"></p>
<p>0x0011=17。指向一个CONSTANT_UTF8_info类型的常量，代表类或接口的全限定名。</p>
<hr>
<p><strong>4</strong></p>
<p>第4个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/15.jpg" alt="15.jpg"></p>
<p>0x07=7，查表为CONSTANT_Class_info，即类或接口的符号引用。其数据结构共占据2个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/16.jpg" alt="16.jpg"></p>
<p>0x0012=18。指向一个CONSTANT_UTF8_info类型的常量，代表类或接口的全限定名。</p>
<hr>
<p><strong>5</strong></p>
<p>第5个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/17.jpg" alt="17.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。</p>
<p>与普通UTF-8编码所不同，UTF-8压缩编码的编码方式为：</p>
<ul>
<li>[‘\u0001’,’\u007f’]之间的字符(即[1,127]之间的ASCII码)用1个字节表示</li>
<li>[‘\u0080’,’\u07ff’]之间的字符用2个字节表示</li>
<li>[‘\u0800’,’\uffff’]之间的字符和普通的UTF-8编码规则相同，用3个字节表示</li>
</ul>
<p>class文件中类及接口的全路径名，方法名，变量名均由CONSTANT_UTF8_info描述。而描述该长度的值占两个字节。因此可表示的范围为[0,65535]。即能表示的字节长度最多为65535个(若字符均在ASCII码的范围之内，也可说最多表示65535个字符)。</p>
<p>CONSTANT_UTF8_info的数据结构占据的长度不定，tag后是表示长度的2个字节，代表字符串占用的字节数：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/18.jpg" alt="18.jpg"></p>
<p>0x0001=1，即字符串占用1个字节，则向后取一个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/19.jpg" alt="19.jpg"></p>
<p>0x6D=109。即为ASCII编码的”m”。</p>
<hr>
<p><strong>6</strong></p>
<p>第6个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/20.jpg" alt="20.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/21.jpg" alt="21.jpg"></p>
<p>0x0001=1，即字符串占用1个字节，则向后取一个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/22.jpg" alt="22.jpg"></p>
<p>0x49=73。即为ASCII编码的”I”。</p>
<hr>
<p><strong>7</strong></p>
<p>第7个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/23.jpg" alt="23.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/24.jpg" alt="24.jpg"></p>
<p>0x0006=6，即字符串占用6个字节，则向后取6个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/25.jpg" alt="25.jpg"></p>
<hr>
<p><strong>8</strong></p>
<p>第8个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/26.jpg" alt="26.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/27.jpg" alt="27.jpg"></p>
<p>0x0003=3，即字符串占用3个字节，则向后取3个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/28.jpg" alt="28.jpg"></p>
<hr>
<p><strong>9</strong></p>
<p>第9个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/29.jpg" alt="29.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/30.jpg" alt="30.jpg"></p>
<p>0x0004=4，即字符串占用4个字节，则向后取4个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/31.jpg" alt="31.jpg"></p>
<hr>
<p><strong>10</strong></p>
<p>第10个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/32.jpg" alt="32.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/33.jpg" alt="33.jpg"></p>
<p>0x000F=15，即字符串占用15个字节，则向后取15个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/34.jpg" alt="34.jpg"></p>
<hr>
<p><strong>11</strong></p>
<p>第11个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/35.jpg" alt="35.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/36.jpg" alt="36.jpg"></p>
<p>0x0003=3，即字符串占用3个字节，则向后取3个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/37.jpg" alt="37.jpg"></p>
<hr>
<p><strong>12</strong></p>
<p>第12个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/38.jpg" alt="38.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/39.jpg" alt="39.jpg"></p>
<p>0x0003=3，即字符串占用3个字节，则向后取3个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/40.jpg" alt="40.jpg"></p>
<hr>
<p><strong>13</strong></p>
<p>第13个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/41.jpg" alt="41.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/42.jpg" alt="42.jpg"></p>
<p>0x000A=10，即字符串占用10个字节，则向后取10个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/43.jpg" alt="43.jpg"></p>
<hr>
<p><strong>14</strong></p>
<p>第14个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/44.jpg" alt="44.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/45.jpg" alt="45.jpg"></p>
<p>0x0009=9，即字符串占用9个字节，则向后取9个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/46.jpg" alt="46.jpg"></p>
<hr>
<p><strong>15</strong></p>
<p>第15个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/47.jpg" alt="47.jpg"></p>
<p>0x0C=12，查表为CONSTANT_NameAndType_info，即字段或方法的描述信息。其数据结构共占据4个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/48.jpg" alt="48.jpg"></p>
<ul>
<li>前2个字节，0x0007=7，指向该字段或方法名称的CONSTANT_UTF8_info的索引项(name)</li>
<li>后2个字节，0x0008=8，指向该字段或方法描述符的CONSTANT_UTF8_info的索引项(type)</li>
</ul>
<hr>
<p><strong>16</strong></p>
<p>第16个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/49.jpg" alt="49.jpg"></p>
<p>0x0C=12，查表为CONSTANT_NameAndType_info，即字段或方法的描述信息。其数据结构共占据4个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/50.jpg" alt="50.jpg"></p>
<ul>
<li>前2个字节，0x0005=5，指向该字段或方法名称的CONSTANT_UTF8_info的索引项(name)</li>
<li>后2个字节，0x0006=6，指向该字段或方法描述符的CONSTANT_UTF8_info的索引项(type)</li>
</ul>
<hr>
<p><strong>17</strong></p>
<p>第17个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/51.jpg" alt="51.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/52.jpg" alt="52.jpg"></p>
<p>0x000D=13，即字符串占用13个字节，则向后取13个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/53.jpg" alt="53.jpg"></p>
<hr>
<p><strong>18</strong></p>
<p>第18个常量：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/54.jpg" alt="54.jpg"></p>
<p>0x01=1，查表为CONSTANT_UTF8_info，即用UTF-8压缩编码的字符串。其长度为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/55.jpg" alt="55.jpg"></p>
<p>0x0010=16，即字符串占用16个字节，则向后取16个字节：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/56.jpg" alt="56.jpg"></p>
<hr>
<p><strong>javap</strong></p>
<p>至此，18个常量全部分析完成。实际上，在jdk/bin中提供了工具javap用来分析class文件：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/57.jpg" alt="57.jpg"></p>
<p>分析文件1内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;E:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2017-11-8; size 274 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum ba2585a36b64eb15c6657dc8440c38e0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class com.test.Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #4.#15         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Fieldref           #3.#16         &#x2F;&#x2F;  com&#x2F;test&#x2F;Test.m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; Class              #17            &#x2F;&#x2F;  com&#x2F;test&#x2F;Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Class              #18            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Utf8               m</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Utf8               I</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               inc</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Utf8               ()I</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; NameAndType        #5:#6          &#x2F;&#x2F;  m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; Utf8               com&#x2F;test&#x2F;Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public com.test.Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 3: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public int inc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;2, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: getfield      #2                  &#x2F;&#x2F; Field m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: iconst_1      </span></pre></td></tr><tr><td class="code"><pre><span class="line">         5: iadd          </span></pre></td></tr><tr><td class="code"><pre><span class="line">         6: ireturn       </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 8: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>观察常量池Constant pool部分，其内容与上文的分析完全一致。</p>
<p>在作为示例的Test类中，除了我们显式定义的字段m，方法inc()之外，常量池中还有诸如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">SourceFile</span></pre></td></tr></table></figure>

<p>等我们没有显式声明的有些莫名其妙的东西。这些常量会在内部中间逻辑中被常量池集合本身，字段表(field_info)，方法表(method_info)，属性表(attribute_info)等用到，对用户而言是透明的。它们被用以形容那些不方便用固定字节表示的信息(其实就是更接近于人类自然语言表述的信息)。</p>
<h1 id="access-flags"><a href="#access-flags" class="headerlink" title="access_flags"></a>access_flags</h1><p>紧接着常量池集合之后的两个字节为访问标志(access_flags)。用于标志一些类或接口层次的访问信息：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/58.jpg" alt="58.jpg"></p>
<p>2个字节共计16位。因此共可设置16种标志。目前只使用了其中的8种(JDK1.5以前只有上图中的前5种，JDK1.5中又引入了后3种)。没有使用的标志默认为0。</p>
<p>仍然使用常量池集合的代码为例。Test类符合ACC_PUBLIC,ACC_SUPER。即：</p>
<p>ACC_PUBLIC=0x0001=0000_0000_0000_0001<br>ACC_SUPER=0x0020=0000_0000_0010_0000<br>则最终为0000_0000_0010_0001=0x0021。即：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/59.jpg" alt="59.jpg"></p>
<h1 id="this-class"><a href="#this-class" class="headerlink" title="this_class"></a>this_class</h1><p>紧接着访问标志之后的2个字节是类索引(this_class)，用以描述该类的全限定名。其指向常量池集合中的一个CONSTANT_Class_info类型的索引项。</p>
<p>仍然使用常量池集合的代码为例：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/60.jpg" alt="60.jpg"></p>
<p>0x0003=3。即为com/test/Test。</p>
<h1 id="super-class"><a href="#super-class" class="headerlink" title="super_class"></a>super_class</h1><p>紧接着类索引之后的2个字节是父类索引(super_class)。用以描述该类父类的全限定名。其指向常量池集合中的一个CONSTANT_Class_info类型的索引项。</p>
<p>因为Java为单继承，因此父类索引仅需1个。又由于所有类都继承自Object，因此除Object之外，其他类的父类索引均不为0。而Object类的父类索引为0，表示没有父类。</p>
<p>仍然使用常量池集合的代码为例：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/61.jpg" alt="61.jpg"></p>
<p>0x0004=4。即为java/lang/Object。</p>
<h1 id="接口集合"><a href="#接口集合" class="headerlink" title="接口集合"></a>接口集合</h1><p>紧接着父类索引之后的是接口集合。用来描述该类实现了哪些接口。其内部首先会用2个字节记录implements(若class表示的是接口则是extends)的接口数量interfaces_count。而后是interfaces_count个长度为2字节的interface。每个interface都指向常量池集合中的一个CONSTANT_Class_info类型的索引项。interface的排列顺序与代码中的声明顺序相同。</p>
<p>仍然使用常量池集合的代码为例，Test没有实现接口，即interfaces_count=0，后续没有interface数据项：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/62.jpg" alt="62.jpg"></p>
<h1 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h1><p>紧接着接口集合之后的是字段表集合(field_info)，用以描述类或接口中声明的变量。</p>
<p>其内部分为两部分：第一部分为2个字节，表示字段个数(fields_count)。第二部分为fields_count个字段类型(field_info)。</p>
<p>仍然使用常量池集合的代码为例，其fields_count=1：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/63.jpg" alt="63.jpg"></p>
<p>field_info格式如下(排列顺序为先左后右)：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/64.jpg" alt="64.jpg"></p>
<p>示例代码的字段表集合中只有一个field_info，其结构列举如下：</p>
<p><strong>access_flags</strong></p>
<p>field_info的第一部分占用2字节，其作用及设置方式与类或接口的access_flags非常类似，都是通过设置标志位：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/65.jpg" alt="65.jpg"></p>
<p>2字节可设置16种标志，只使用了其中的9种。未使用的默认为0。</p>
<p>很显然，ACC_PUBLIC,ACC_PRIVATE,ACC_PROTECTED最多只能3选1，ACC_FINAL,ACC_VOLATILE最多只能2选1。而若class文件表示的是接口，则必须有ACC_PUBLIC,ACC_STATIC,ACC_FINAL。</p>
<p>仍然使用常量池集合的代码为例：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/66.jpg" alt="66.jpg"></p>
<p>0x0002=0000-0000-0000-0010。即只设置了ACC_PRIVATE。</p>
<hr>
<p><strong>name_index</strong></p>
<p>紧跟着access_flags之后的2字节是name_index，代表字段的简单名称。指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项。</p>
<p>仍然使用常量池集合的代码为例：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/67.jpg" alt="67.jpg"></p>
<p>0x0005=5，即为m。</p>
<hr>
<p><strong>descriptor_index</strong></p>
<p>用于描述字段及方法的属性。主要有3个：</p>
<ul>
<li>全限定名</li>
<li>简单名称</li>
<li>描述符</li>
</ul>
<p>全限定名和简单名称较易于理解，以示例代码为例，类Test的全限定名为com/test/Test。方法inc()的简单名称为inc，字段m的简单名称为m。</p>
<p>描述符所表述的信息则更为复杂。对于字段而言，描述的是字段的数据结构。对于方法而言，描述的是方法的参数列表(数量，类型，顺序)和返回值。</p>
<p>根据描述符规范，基本数据类型(byte,char,double,float,int,long,short,boolean)以及代表无返回值的void(JVM规范将void单独列出，名为VoidDescriptor)都用一个大写字母表示。引用类型则使用大写字母L加对象的全限定名表示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/68.jpg" alt="68.jpg"></p>
<p>因引用类型长度不定，故仅有其最后会加上一个;以示结束。</p>
<p>对于数组类型而言，每有一个维度，都将增加一个前置的[。例如：</p>
<ul>
<li>java.lang.String[][]表示为[[Ljava/lang/String;</li>
<li>int[]表示为[I</li>
</ul>
<p>描述方法时，按照先参数列表后返回值的顺序记录。参数列表按参数顺序写入一个()中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void m1()</span></pre></td></tr><tr><td class="code"><pre><span class="line">描述为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">()V</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int m2(char[] c, int i1, int i2, String[][] s, double d)</span></pre></td></tr><tr><td class="code"><pre><span class="line">描述为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">([CII[[Ljava&#x2F;lang&#x2F;String;D)I</span></pre></td></tr></table></figure>

<p>仍然使用常量池集合的代码为例：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/69.jpg" alt="69.jpg"></p>
<p>0x0006=6。即为I。至此综合access_flags，name_index及descriptor_index。我们已可记录该字段的基本信息：private int m。</p>
<hr>
<p><strong>属性表集合</strong></p>
<p>descriptor_index之后是属性表集合。其内部分为两部分：首先是u2长度的attributes_count，随后是attributes_count个attribute_info类型。上文已介绍的access_flags，name_index及descriptor_index是field_info必定包含的数据，而属性表集合则是可选数据，若不存在则有attributes_count=0，属性表集合直接结束。仍然使用常量池集合的代码为例：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/70.jpg" alt="70.jpg"></p>
<p>此时attributes_count=0x0000=0，即不包含属性表。</p>
<p>属性表集合用于存储一些额外信息。例如有类变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final static int f &#x3D; 123;</span></pre></td></tr></table></figure>

<p>则其属性表集合中可能会存在一项名为ConstantValue的属性，其值指向常量池集合中的常量123(详见后文对属性表集合的介绍)。</p>
<hr>
<p><strong>一些细节</strong></p>
<p>字段表集合中不会列出从父类(对于类而言)或父接口(对于接口而言)中继承而来的字段，但是可能会列出没有在代码中显式声明的字段：例如内部类为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</p>
<p>对于Java语言规范而言，字段是无法重载的，两个字段的数据类型，修饰符不管是否相同，都必须使用不同的字段名。而对于JVM规范而言，只要field_info不同即可，换句话说，字段可以重名。</p>
<h1 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h1><p>紧跟在字段表集合之后的是方法表集合。方法表集合的存储思路与字段表集合几乎完全相同。</p>
<p>其内部分为两部分：第一部分为2个字节，表示方法个数(methods_count)。第二部分为methods_count个方法类型(method_info)。</p>
<p>仍然使用常量池集合的代码为例，其methods_count=2：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/71.jpg" alt="71.jpg"></p>
<p>method_info格式如下(排列顺序为先左后右)：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/72.jpg" alt="72.jpg"></p>
<p>示例代码的方法表集合中有2个method_info，现以第一个为例：</p>
<p><strong>access_flags</strong></p>
<p>method_info的第一部分占用2字节，其存储思路类似于field_info的access_flags：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/73.jpg" alt="73.jpg"></p>
<p>因字段与方法修饰符的差异，method_info较之field_info在access_flags上做了如下增删：</p>
<ul>
<li>删除只能修饰字段不能修饰方法的：volatile(ACC_VOLATILE),transient(ACC_TRANSIENT)</li>
<li>增加只能修饰方法不能修饰字段的：synchronized(ACC_SYNCHRONIZED),native(ACC_NATIVE),strictfp(ACC_STRICTFP，即FP-strict，精确浮点计算),abstract(ACC_ABSTRACT)</li>
</ul>
<p>则第一个方法的access_flags为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/74.jpg" alt="74.jpg"></p>
<p>0x0001=0000-0000-0000-0001。即只设置了ACC_PUBLIC。</p>
<hr>
<p><strong>name_index</strong></p>
<p>紧跟着access_flags之后的2字节是name_index，代表方法的简单名称。指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项。</p>
<p>则第一个方法的name_index为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/75.jpg" alt="75.jpg"></p>
<p>0x0007=7，即为&lt;init&gt;。</p>
<hr>
<p><strong>descriptor_index</strong></p>
<p>类似于field_info的descriptor_index，方法1的descriptor_index为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/76.jpg" alt="76.jpg"></p>
<p>0x0008=8。即为()V。至此综合access_flags，name_index及descriptor_index。我们已可记录该方法的基本信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void &lt;init&gt;();</span></pre></td></tr></table></figure>

<p>该方法并未在代码中显式声明，是由编译器自动添加的实例构造器。</p>
<hr>
<p><strong>属性表集合</strong></p>
<p>descriptor_index之后是属性表集合。类似于field_info的属性表集合，其内部分为两部分：首先是u2长度的attributes_count，随后是attributes_count个attribute_info类型。上文已介绍的access_flags，name_index及descriptor_index是method_info必定包含的数据，而属性表集合则是可选数据，若不存在则有attributes_count=0，属性表集合直接结束。则对于方法1而言：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/77.jpg" alt="77.jpg"></p>
<p>此时attributes_count=0x0001=1，即包含1个属性表。</p>
<p>关于属性表信息，详见后文对属性表集合的介绍。</p>
<hr>
<p><strong>一些细节</strong></p>
<p>若没有发生重写(Override)，则子类class文件中的方法表集合中不会出现父类的方法。实际上，如果我们换个思路来思考：和字段表集合一样，方法表集合中同样不会出现父类方法。所谓的重写不过是子类中的方法覆盖了父类中的方法，该方法实际上仍是属于子类的方法，并非父类中的那个方法。</p>
<p>在<a href="/2017/10/10/Java基础-重载与重写/">Java 基础-重载与重写</a>中，规定了重载的判定依据为：</p>
<ul>
<li><strong>方法的参数</strong>：必须一模一样，包括个数，顺序，类型(有继承关系的子类也不行，必须是一模一样的类)</li>
<li><strong>返回值</strong>：一样或为有继承关系的子类</li>
<li><strong>异常检查</strong>：对于Checked Exception而言，可以抛出更少的异常，但不能抛出父类中没有定义的异常。对于Unchecked Exception(RuntimeException)及Error而言则没有限制。</li>
<li><strong>访问权限</strong>：应比父类中的权限更宽松，换句话说，即允许被更多人访问(public &gt; protected &gt; default[即没有修饰] &gt; private)。</li>
</ul>
<p>之所以对方法参数的要求如此严格，就是因为要严格遵循method_info中的descriptor_index中的()中的参数列表值。</p>
<p>类似于字段表集合，方法表集合中也可能会出现没有在代码中显式定义的方法。最典型的就是类构造器方法&lt;clinit&gt;及实例构造器方法&lt;init&gt;。</p>
<p>如前所述，在Java语言规范中，字段是无法重载的。在JVM规范中，字段是可以重载的。而Java语言规范及JVM规范中方法均是可以重载的，重载的前提条件为方法间的简单名称相同，而特征签名不同。</p>
<p>Java语言规范与JVM规范对于特征签名的定义是不同的：</p>
<ul>
<li>Java语言规范：包括方法名称，参数顺序，参数类型(不考虑子类，即参数分别为父类及子类的两个方法间可以发生重载)。</li>
<li>JVM规范：在Java语言规范的基础上，又添加了方法返回值及受查异常表(均不考虑子类)。</li>
</ul>
<p>通常我们如果只说特征签名，那么指的就是Java语言规范中的特征签名。</p>
<p>类似于字段的重载，由两个规范对特征签名定义的差异可知，在Java语言规范中无法共存的两个方法在class文件中就有可能共存(举个具体的例子，两个方法仅仅依靠返回值类型不同就可以在class文件中共存，却无法通过Java语法的编译)。</p>
<h1 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h1><p>属性表(attribute_info)集合是class文件中最灵活(相对来说)也是最重要的一部分。其出现在4处地方：</p>
<ul>
<li>紧跟在方法表集合之后(即整个类文件的最后)，用于描述类的额外信息</li>
<li>每个字段表的最后，用于描述字段的额外信息</li>
<li>每个方法表的最后，用于描述方法的额外信息，其中最为重要的一种attribute_info为Code，用于记录方法体内部的代码</li>
<li>部分attribute_info(例如Code)内部的最后也会包含</li>
</ul>
<p>由此可以归纳出class文件的设计套路：每个结构先用尽量工整死板的结构存储必要的信息，然后将较为灵活的信息作为额外数据放在最后。</p>
<p>之所以说属性表最为灵活，是因为不再要求属性表集合中的attribute_info有固定的顺序。甚至只要不与已有的属性表重名，任何人实现的任何编译器都可以向属性表集合中写入自己定义的attribute_info。JVM在运行期若遇到不认识的attribute_info会自动忽略。</p>
<p>属性表集合内部分为两部分：首先是u2长度的attributes_count，随后是attributes_count个attribute_info类型。</p>
<p>每个attribute_info的结构为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/78.jpg" alt="78.jpg"></p>
<p>首先是attribute_name_index，占2个字节，它指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项。用于表示attribute_info的名称，也是attribute_info间区分的依据(前文所谓的重名)。随后是attribute_length，占4个字节，用于描述该attribute_info的净长度(即不算attribute_name_index与attribute_length，实际存储数据信息的长度)。最后就是占用attribute_length*u1空间的属性信息本身。</p>
<p>由该定义我们可以再次认识到，属性表的定义确实很灵活。只需要告诉JVM你所要记录的属性信息有多长，给一个从外部划分的边界，至于内容则是黑盒的，JVM规范并未规定。</p>
<p>JVM规范自带的attribute_info如下所示。最初在《Java虚拟机规范(第二版)》中预定义了9种attribute_info，而到了《Java虚拟机规范(Java SE 7)》中，attribute_info扩展到了21种：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/79.jpg" alt="79.jpg"></p>
<p>@Deprecated是一种注释，表示不推荐使用。</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/80.jpg" alt="80.jpg"></p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/81.jpg" alt="81.jpg"></p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/82.jpg" alt="82.jpg"></p>
<p>以下为其中常用的几种：</p>
<p><strong>Code</strong></p>
<p>Java方法的方法体会被以字节码指令的形式存储至class文件方法表的属性表集合中，其属性名为Code。</p>
<p>正如并非所有方法都有方法体一样(例如接口中的方法，或抽象类中的抽象方法)，并非所有方法表都必定包含Code属性。</p>
<p>Code属性的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/83.jpg" alt="83.jpg"></p>
<p>仍然使用常量池集合的代码为例，继续分析方法表集合中的方法1，我们已知其属性表集合中有1个属性表。现继续详细分析该属性表。</p>
<p>attribute_name_index及attribute_length为所有属性表的固定结构，前文已有描述。对于Code属性而言，attribute_name_index固定为Code：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/84.jpg" alt="84.jpg"></p>
<p>0x0009=9，即Code。</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/85.jpg" alt="85.jpg"></p>
<p>0x0000001D=29。即该属性表的长度为29个字节，则我们可以确定出其外部范围：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/86.jpg" alt="86.jpg"></p>
<p>attribute_length之后的2个字节为max_stack，代表方法操作数栈(Operand Stacks)的最大深度，即操作数栈的大小。运行期该值即为方法的栈帧(Stack Frame)中的操作数栈的深度。示例代码中：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/87.jpg" alt="87.jpg"></p>
<p>0x0001=1，即方法操作数栈最大深度为1。</p>
<p>max_stack之后的2个字节为max_locals，表示局部变量表所需的存储空间。</p>
<p>局部变量表的基本单位为Slot。可以认为一个Slot为32位，因此对于byte,char,float,int,short,boolean,returnAddress这种长度不超过32位的数据类型而言，只需1个Slot即可。而对于double,long这两种64位的数据类型而言，占用2个Slot。</p>
<p>局部变量表用于存储如下信息：</p>
<ul>
<li>方法参数(若为实例方法，还会包含默认隐藏的this)</li>
<li>显式异常处理器的参数(Exception Handler Parameter)，也就是catch括号中显式声明的异常</li>
<li>方法体中定义的局部变量</li>
</ul>
<p>对于实例方法而言，初始时0号Slot中默认为this。</p>
<p>max_locals小于等于方法所用的数据项占用的空间之和，其原因在于每个数据项在方法中都有自身的作用域，若超出作用域，其所占据的空间就可以被其他数据项复用。</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/88.jpg" alt="88.jpg"></p>
<p>0x0001=1，即局部变量表大小为1。</p>
<p>max_locals之后是字节码指令集合。其分为两部分：第一部分为4个字节的code_length，代表字节码指令流长度。第二部分为code_length*u1个字节，代表具体的字节码指令。</p>
<p>每个字节码指令的长度为u1。每当JVM读入一个字节码，都可以明白其所表征的含义，并能根据该字节码指令的定义了解其后是否需要跟随参数及这些参数的含义。</p>
<p>u1的无符号数的取值范围为[0,255]。即共可表示256种字节码指令。目前已使用了约200种。详见<a href="/2017/11/16/JVM-JVM字节码指令集/">JVM-JVM字节码指令集</a>。</p>
<p>code_length的长度为u4，则理论上最大长度可达2^32-1。但是JVM规范中明确规定1个方法的字节码指令流最大长度为65535，即实际上code_length最大只使用了u2的空间，如果超出了这个限制，javac编译器也会拒绝编译。一般来讲，除非故意为难编译器，一个方法中的字节码指令流是不会超过这个上限的。但是，某些特殊情况，例如在编译一个很复杂的JSP文件时，某些JSP编译器会把JSP内容和页面输出的信息归并于一个方法之中，此时生成的方法中的字节码指令流的长度就有可能超过上限，从而编译失败。</p>
<p>Code属性是class文件中最重要的属性，而字节码指令集合又是Code属性中最为重要的部分。</p>
<p>我们可将1个Java程序分为两部分：</p>
<ul>
<li>代码(Code)：方法体中的Java代码</li>
<li>元数据(Metadata)：类，字段，方法定义及其他信息</li>
</ul>
<p>那么映射到class文件，Code属性用于描述方法体中的Java代码，而其他所有部分都是在描述元数据。</p>
<p>示例代码中：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/89.jpg" alt="89.jpg"></p>
<p>code_length=0x00000005=5，因此向后取5个字节作为字节码指令流：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/90.jpg" alt="90.jpg"></p>
<p>由<a href="/2017/11/16/JVM-JVM字节码指令集/">JVM-JVM字节码指令集</a>得：</p>
<hr>
<p><strong>2A(aload_0)</strong>:将局部变量表0号Slot中的引用类型压入操作数栈，对于实例方法而言，初始时0号Slot中默认为this。</p>
<hr>
<p><strong>B7(invokespecial)</strong>:以操作数栈栈顶reference类型的数据所指向的对象为方法的接收者，调用此对象的实例构造器&lt;init&gt;方法，私有方法或超类构造方法。该指令之后会紧跟一个u2的参数说明具体调用的是哪个方法，该参数指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项，也就是该方法的方法符号引用。</p>
<p>0001:invokespecial的参数，即为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr></table></figure>

<hr>
<p><strong>B1(return)</strong>:从当前方法返回void，本方法结束。</p>
<hr>
<p>由上述分析可知，JVM执行字节码是基于栈的，但是与一般的基于栈的零字节指令(即每条指令只占一位，没有后续附加信息)所不同，某些指令(如invokespecial)后面还会带有参数。</p>
<p>字节码指令集合之后是异常表集合，其分为两部分，第一部分为2个字节的exception_table_length，代表异常表长度。第二部分为exception_table_length个exception_info。</p>
<p>异常表集合对于Code属性而言不是必须的，若没有该集合，则exception_table_length=0。继续分析示例代码：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/91.jpg" alt="91.jpg"></p>
<p>即exception_table_length=0。</p>
<p>exception_info的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/92.jpg" alt="92.jpg"></p>
<p>排列顺序为先左后右。其含义为：若[start_pc,end_pc)行之间的字节码出现了类型为catch_type(u2,指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项，若指向第0项，则表示能捕获任意异常)或其子类型的异常，则跳转至第handler_pc行。需要注意的是，此处字节码的行是一种形象化的表示，实际上是字节码较之方法体开始位置的偏移量。</p>
<p>class文件使用exception_info而非简单的跳转命令来实现Java的异常及finally机制。其实例可参见<a href="/2017/09/29/Java基础-异常/">Java 基础-异常</a>。</p>
<p>异常表集合之后是Code属性表内部包含的属性表集合。其内部分为两部分：首先是u2长度的attributes_count，随后是attributes_count个attribute_info类型。属性内部又有个属性表集合，听起来有点绕。但其套路与前文已讨论过的类文件，字段表，方法表一样，都是在结构的最后加一些不方便固定描述的额外信息。</p>
<p>继续分析示例代码第一个方法的Code属性：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/93.jpg" alt="93.jpg"></p>
<p>0x0001=1，即attributes_count=1，再向后取一个attribute_info类型，在该attribute_info内部，先取u2长度作为attribute_name_index：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/94.jpg" alt="94.jpg"></p>
<p>0x000A=10，即LineNumberTable。</p>
<p>attribute_name_index之后是u4长度的attribute_length：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/95.jpg" alt="95.jpg"></p>
<p>0x00000006=6，即attribute_length=6。正好蓝色的区域向后数6个也结束，说明Code属性也结束了，和预期相符。</p>
<hr>
<p><strong>LineNumberTable</strong></p>
<p>LineNumberTable用于描述Java源码的行号与字节码行号(实际是相对于方法体开始处的字节码偏移量)之间的映射关系。</p>
<p>LineNumberTable并非是必须的，但默认会在class文件中生成，在使用javac命令进行编译时，可使用-g:none及-g:lines显式取消或要求生成该属性。若取消生成该属性，则当抛出异常时，堆栈中不会显示出错的行号，并且在调试程序时，也无法按照源码行设置断点。</p>
<p>LineNumberTable的结构如下：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/96.jpg" alt="96.jpg"></p>
<p>前两项u2长度的attribute_name_index及u4长度的attribute_length同其他属性一样，随后是行号表集合。</p>
<p>行号表集合内部由2部分组成，首先是u2长度的line_number_table_length，随后是line_number_table_length个line_number_info。</p>
<p>则继续分析示例代码中的Code属性：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/97.jpg" alt="97.jpg"></p>
<p>0x0001=1，即line_number_table_length=1。则向后取1个line_number_info。</p>
<p>在line_number_info内部，首先是u2长度的start_pc，代表字节码相对于方法体开始处的偏移量。随后是u2长度的line_number，代表Java源码行号。</p>
<p>则继续分析示例代码中的Code属性：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/98.jpg" alt="98.jpg"></p>
<p>0x0000=0，即start_pc=0。</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/99.jpg" alt="99.jpg"></p>
<p>0x0003=3，即line_number=3。</p>
<p>至此，实例代码中的第一个方法所包含的Code属性已分析完毕，其结果与javap得到的信息相同：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;E:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2017-11-8; size 274 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum ba2585a36b64eb15c6657dc8440c38e0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class com.test.Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #4.#15         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Fieldref           #3.#16         &#x2F;&#x2F;  com&#x2F;test&#x2F;Test.m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; Class              #17            &#x2F;&#x2F;  com&#x2F;test&#x2F;Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Class              #18            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Utf8               m</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Utf8               I</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               inc</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Utf8               ()I</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; NameAndType        #5:#6          &#x2F;&#x2F;  m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; Utf8               com&#x2F;test&#x2F;Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public com.test.Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 3: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public int inc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;2, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: getfield      #2                  &#x2F;&#x2F; Field m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: iconst_1      </span></pre></td></tr><tr><td class="code"><pre><span class="line">         5: iadd          </span></pre></td></tr><tr><td class="code"><pre><span class="line">         6: ireturn       </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 8: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>对应方法为public com.test.Test()，其中stack代表操作数栈深度，locals代表局部变量表大小，args_size代表传入参数大小。locals及args_size均为1的原因为该方法为实例方法，默认会传入其所属对象的引用this。此时this默认占用局部变量表0号索引的位置。</p>
<p>因示例代码方法表集合的长度为2，则我们继续向后分析第二个方法，第一个方法结束后，紧接着就是第二个方法的method_info。</p>
<p>在该method_info内部，首先是u2长度的access_flags：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/100.jpg" alt="100.jpg"></p>
<p>即access_flags=0x0001=0000_0000_0000_0001。则该方法的访问标志有ACC_PUBLIC。</p>
<p>access_flags之后是u2长度的name_index：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/101.jpg" alt="101.jpg"></p>
<p>0x000B=11，即inc。</p>
<p>name_index之后是u2长度的descriptor_index：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/102.jpg" alt="102.jpg"></p>
<p>0x000C=12，即()I。</p>
<p>至此我们已可得到第二个方法的定义信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int inc()</span></pre></td></tr></table></figure>

<p>随后就是方法2的属性表集合了。其内部首先是u2长度的attributes_count，代表其属性表集合的长度：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/103.jpg" alt="103.jpg"></p>
<p>attributes_count=0x0001=1。即该属性表内部只有一个attribute_info。则向后取一个attribute_info。</p>
<p>在该attribute_info内部，首先是u2长度的attribute_name_index:</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/104.jpg" alt="104.jpg"></p>
<p>attribute_name_index=0x0009=9，即Code。随后是该attribute_info的u4长度的attribute_length：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/105.jpg" alt="105.jpg"></p>
<p>attribute_length=0x0000001F=31。即该Code属性的外部边界长度为31：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/106.jpg" alt="106.jpg"></p>
<p>接着我们详细分析该Code属性，首先是u2长度的max_stack：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/107.jpg" alt="107.jpg"></p>
<p>max_stack=0x0002=2，即操作数栈最大深度为2。</p>
<p>随后是u2长度的max_locals：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/108.jpg" alt="108.jpg"></p>
<p>max_locals=0x0001=1，即局部变量表最大占用空间为1个Slot。</p>
<p>随后是字节码指令集合。其内部首先是u4长度的code_length：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/109.jpg" alt="109.jpg"></p>
<p>code_length=0x00000007=7，即此后的7个字节为该方法方法体中代码的字节码指令流：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/110.jpg" alt="110.jpg"></p>
<p>依序分析这个字节码指令流，由<a href="/2017/11/16/JVM-JVM字节码指令集/">JVM-JVM字节码指令集</a>得：</p>
<p>前文分析已得，该方法操作数栈最大深度为2，局部变量表最大占用空间为1个Slot。</p>
<hr>
<p>初始时:</p>
<ul>
<li>操作数栈：无</li>
<li>局部变量表：this</li>
</ul>
<hr>
<p><strong>2A(aload_0)</strong>:将局部变量表0号Slot中的引用类型压入操作数栈:</p>
<ul>
<li>操作数栈：this</li>
<li>局部变量表：this</li>
</ul>
<hr>
<p><strong>B4(getfield)</strong>:获取指定类的实例域，并将其值压入操作数栈。该指令之后会紧跟一个u2的参数指明实例域的全限定名，该参数指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项。</p>
<p>0002:getfield的参数，即为：com/test/Test.m:I</p>
<p>执行该指令后：</p>
<ul>
<li>操作数栈：m</li>
<li>局部变量表：this</li>
</ul>
<hr>
<p><strong>04(iconst_1)</strong>:将int型1压入操作数栈:</p>
<ul>
<li>操作数栈：m,1</li>
<li>局部变量表：this</li>
</ul>
<hr>
<p><strong>60(iadd)</strong>:弹出操作数栈栈顶两int型数值相加并将结果压入操作数栈:</p>
<ul>
<li>操作数栈：m+1</li>
<li>局部变量表：this</li>
</ul>
<hr>
<p><strong>AC(ireturn)</strong>:返回操作数栈栈顶的int类型数值，即返回m+1</p>
<hr>
<p>随后是异常表集合，其内部首先是u2长度的exception_table_length:</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/111.jpg" alt="111.jpg"></p>
<p>exception_table_length=0x0000=0。即没有异常表，则异常表集合结束。</p>
<p>异常表集合之后是Code属性表内部包含的属性表集合。其内部分为两部分：首先是u2长度的attributes_count：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/112.jpg" alt="112.jpg"></p>
<p>0x0001=1，即attributes_count=1，再向后取一个attribute_info类型，在该attribute_info内部，先取u2长度作为attribute_name_index：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/113.jpg" alt="113.jpg"></p>
<p>0x000A=10，即LineNumberTable。</p>
<p>attribute_name_index之后是u4长度的attribute_length：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/114.jpg" alt="114.jpg"></p>
<p>0x00000006=6，即attribute_length=6。正好蓝色的区域向后数6个也结束，说明Code属性也结束了，和预期相符。</p>
<p>在LineNumberTable内部，首先是u2长度的line_number_table_length：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/115.jpg" alt="115.jpg"></p>
<p>line_number_table_length=0x0001=1。则向后取1个line_number_info。</p>
<p>在line_number_info内部，首先是u2长度的start_pc，代表字节码相对于方法体开始处的偏移量。随后是u2长度的line_number，代表Java源码行号。</p>
<p>则：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/116.jpg" alt="116.jpg"></p>
<p>start_pc=0x0000=0。</p>
<p>随后：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/117.jpg" alt="117.jpg"></p>
<p>line_number=0x0008=8。</p>
<p>至此，示例代码中的第二个方法所包含的Code属性已分析完毕，其结果与javap得到的信息相同，也就是其中的inc()：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;E:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2017-11-8; size 274 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum ba2585a36b64eb15c6657dc8440c38e0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class com.test.Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #4.#15         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Fieldref           #3.#16         &#x2F;&#x2F;  com&#x2F;test&#x2F;Test.m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; Class              #17            &#x2F;&#x2F;  com&#x2F;test&#x2F;Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Class              #18            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Utf8               m</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Utf8               I</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               inc</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Utf8               ()I</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; NameAndType        #5:#6          &#x2F;&#x2F;  m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; Utf8               com&#x2F;test&#x2F;Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public com.test.Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 3: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public int inc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;2, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: getfield      #2                  &#x2F;&#x2F; Field m:I</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: iconst_1      </span></pre></td></tr><tr><td class="code"><pre><span class="line">         5: iadd          </span></pre></td></tr><tr><td class="code"><pre><span class="line">         6: ireturn       </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 8: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>至此示例代码class文件的方法表集合彻底结束。随后就是class文件的最后一部分，即属于类的属性表集合。其内部分为两部分：首先是u2长度的attributes_count，随后是attributes_count个attribute_info类型。</p>
<p>则先取attributes_count：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/118.jpg" alt="118.jpg"></p>
<p>attributes_count=0x0001=1，即该属性表集合中只有一个attribute_info，则继续向后取该attribute_info。</p>
<p>在attribute_info内部，首先是u2长度的attribute_name_index：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/119.jpg" alt="119.jpg"></p>
<p>attribute_name_index=0x000D=13，即SourceFile。</p>
<p>随后是u4长度的attribute_length:</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/120.jpg" alt="120.jpg"></p>
<p>attribute_length=0x00000002=2。</p>
<hr>
<p><strong>SourceFile</strong></p>
<p>SourceFile用于记录生成该class文件的源文件的文件名称。本属性可选，但默认是开启的。在使用javac指令生成class文件时可通过-g:none或-g:source选项显式取消或要求生成该属性。若不生成该属性，当抛出异常时，堆栈中将不会显示出错代码所属的文件名。在Java中，多数情况下类名与其所属的文件名是一致的，但少数情况下(非public类或内部类)例外。</p>
<p>SourceFile为一个定长结构：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/121.jpg" alt="121.jpg"></p>
<p>sourcefile_index指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项。</p>
<p>继续分析示例代码：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/122.jpg" alt="122.jpg"></p>
<p>0x000E=14，即Test.java。</p>
<p>至此，示例代码全部分析完毕。</p>
<hr>
<p><strong>Exceptions</strong></p>
<p>本属性与Code属性平级，同Code属性中的数据项异常表集合是不同的。</p>
<p>Exceptions的作用为列出方法中可能抛出的受查异常(Checked Exceptions)。更具体的来说，也就是列出方法定义中throws关键字之后跟随的受查异常。其结构为：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/123.jpg" alt="123.jpg"></p>
<p>排列顺序为先左后右。该属性的前两项attribute_name_index及attribute_length为所有属性的通用数据项。随后跟随的为受查异常集合。</p>
<p>在受查异常集合内部，首先为u2长度的number_of_exceptions，即受查异常个数。随后是number_of_exceptions个u2长度的exception_index_table，每个exception_index_table都指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项，代表每个受查异常。</p>
<hr>
<p><strong>LocalVariableTable</strong></p>
<p>LocalVariableTable用于描述栈帧局部变量表中的变量与Java源码中定义的变量之间的关系。其不是必须的属性，默认不会生成在class文件中。在用javac命令生成class文件时可通过-g:none及-g:vars显式取消或生成本属性。</p>
<p>若没有生成该属性，当其他人引用该方法时，所有参数的名称都将丢失，IDE将会使用诸如arg0,arg1之类的占位符代替原有的参数名。取消本属性不会影响程序的运行，但显然会对编码造成较大不便，且在调试期间也无法根据参数名从上下文中获取参数值。</p>
<p>LocalVariableTable的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/124.jpg" alt="124.jpg"></p>
<p>该属性的前两项attribute_name_index及attribute_length为所有属性的通用数据项。随后跟随的为本地变量表集合。</p>
<p>在本地变量表集合内部，首先为u2长度的local_variable_table_length，随后为local_variable_table_length个local_variable_table。local_variable_table代表一个源码局部变量到栈帧中的局部变量的映射关系，其结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/125.jpg" alt="125.jpg"></p>
<p>start_pc代表该局部变量生命周期开始时相对于方法体的字节码偏移量。length代表该局部变量的作用范围长度。二者结合即可确定该局部变量在方法体中的作用域。</p>
<p>name_index及descriptor_index均指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项。分别表示该局部变量的名称及描述符。</p>
<p>index是该局部变量在栈帧局部变量表中的Slot位置。当该局部变量为64位(long或double)时，将占用两个Slot。此时index中记录的是第一个Slot索引值。</p>
<p>顺带一提，自JDK1.5引入泛型后，便增加了一个LocalVariableTable的姊妹属性：LocalVariableTypeTable。其与LocalVariableTable非常相似，不同之处仅仅在于其将局部变量的描述符descriptor_index替换为了局部变量的特征签名(Signature)。对于非泛型类型而言，描述符和特征签名能描述的信息是基本一致的。但是引入泛型后，由于描述符中泛型的参数化类型被擦除了，描述符就无法准确的描述泛型类型了。因此才出现了LocalVariableTypeTable。</p>
<hr>
<p><strong>ConstantValue</strong></p>
<p>根据JVM规范，ConstantValue属性的作用是通知JVM自动为静态变量赋值。只有被static修饰的变量(即类变量)才能使用该属性。</p>
<p>若变量定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int x &#x3D; 123;</span></pre></td></tr></table></figure>

<p>这被称为实例变量，其是在实例构造器&lt;init&gt;中赋值的。</p>
<p>而对于类变量(即上文x再被static修饰)，赋值时机有两个：类构造器&lt;clinit&gt;或使用ConstantValue属性。对于SUN自带的javac编译器而言，对于类变量，如果同时满足如下两个条件：</p>
<ul>
<li>使用final修饰</li>
<li>数据类型为基本类型或java.lang.String</li>
</ul>
<p>则使用ConstantValue属性初始化，反之则在&lt;clinit&gt;中初始化。</p>
<p>再次强调，JVM规范与JVM实现是不同的。对于ConstantValue属性，JVM规范只设置static一个限制条件，至于final及数据类型则是SUN实现的javac编译器自身追加的限制。</p>
<p>ConstantValue属性的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/126.jpg" alt="126.jpg"></p>
<p>很显然，这是一个定长属性。constantvalue_index表示常量值，其指向常量池集合中的一个索引项。这也是为什么ConstantValue属性会有类型限制的原因：因为常量池集合中只能存储基本数据类型及字符串类型，即便ConstantValue属性想表示其他类型也无从下手。具体来说，常量池集合中能表示的类型有如下5种：</p>
<ul>
<li>CONSTANT_Double_info</li>
<li>CONSTANT_Float_info</li>
<li>CONSTANT_Long_info</li>
<li>CONSTANT_Integer_info</li>
<li>CONSTANT_String_info</li>
</ul>
<hr>
<p><strong>InnerClasses</strong></p>
<p>InnerClasses属性用于记录内部类与宿主类之间的关联。如果一个类包含了内部类，那么编译器会为它及它所包含的内部类生成本属性。InnerClasses属性的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/127.jpg" alt="127.jpg"></p>
<p>在所有属性共有的头两个数据项之后是内部类集合。其由两部分组成，第1部分是u2长度的number_of_classes，代表需要记录多少个内部类信息，随后是number_of_classes个inner_classes_info。inner_classes_info的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/128.jpg" alt="128.jpg"></p>
<p>inner_class_info_index及outer_class_info_index均指向常量池集合中的一个CONSTANT_Class_info类型的索引项，分别代表内部类及宿主类的符号引用。</p>
<p>inner_name_index指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项，代表内部类的名称。若其为匿名内部类，则指向常量池集合的索引0。</p>
<p>inner_class_access_flags是内部类的访问标志，类似于类的access_flags，其取值范围如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/129.jpg" alt="129.jpg"></p>
<hr>
<p><strong>Deprecated及Synthetic</strong></p>
<p>Deprecated及Synthetic均是标志类型的布尔属性，只有是否存在的区别，没有具体的属性值：有该属性就被认为是true，没有该属性就是false。</p>
<p>Deprecated用于表示被其修饰的类，字段或方法已被代码作者定为不推荐使用，体现在代码中，就是@deprecated注解。</p>
<p>Synthetic表示字段或方法不是依据Java源码生成的，而是由编译器自行添加的。</p>
<p>自JDK1.5起，标志一个类，字段或方法是由编译器自动生成的，也可在它们的访问标志access_flags中设置ACC_SYNTHETIC标志位，其中最典型的例子就是Bridge Method(桥接方法是JDK1.5引入泛型后，为了使Java的泛型方法生成的字节码和JDK1.5前的字节码相兼容，由编译器自动生成的方法)。</p>
<p>除了类构造器方法&lt;clinit&gt;及实例构造器方法&lt;init&gt;之外，其他所有由非源码产生的类，方法及字段都应至少设置Synthetic属性或ACC_SYNTHETIC标志位中的一项。</p>
<p>Deprecated及Synthetic的结构均如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/130.jpg" alt="130.jpg"></p>
<p>即只有所有属性共有的那两个数据结构，且必有attribute_length=0。</p>
<hr>
<p><strong>StackMapTable</strong></p>
<p>自JDK1.6起StackMapTable被加入到class文件规范中，并于JDK1.7时强制代替了原本的基于类型推断的字节码验证器。它是一个复杂的变长属性，位于Code属性的属性表集合中。</p>
<p>StackMapTable属性会在运行期类加载中的连接中的字节码验证阶段被新类型检查验证器(Type Checker)使用。目的在于代替以前比较消耗性能的基于数据流分析的类型推导验证器。简单来说，就是将验证所需的信息的生成及验证逻辑尽可能的提前到编译阶段并形成StackMapTable属性。</p>
<p>StackMapTable属性的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/131.jpg" alt="131.jpg"></p>
<p>在所有属性共有的头两个数据项之后是栈映射帧(Stack Map  Frames)集合。其内部由两部分组成：首先是u2长度的number_of_entries，而后是number_of_entries个stack_map_frame。stack_map_frame也就是所谓的栈映射帧。每个栈映射帧都显式或隐式的包含了一个字节码偏移量，用于表示执行到该字节码时局部变量表及操作数栈需满足的验证类型。</p>
<p>《Java虚拟机规范(Java SE 7版)》中规定，版本号大于等于50(即JDK1.6)的class文件，如果方法Code属性中没有包含StackMapTable属性，那么意味着其包含一个隐式的StackMapTable属性。该StackMapTable属性的number_of_entries=0。该规范同样也规定一个方法的Code属性的属性集合中最多只能包含一个StackMapTable属性，否则将抛出ClassFormatError。</p>
<hr>
<p><strong>Signature</strong></p>
<p>Signature属性是JDK1.5新增的属性，这是一个可选的定长属性，可能出现于类，字段表及方法表的属性表集合中。</p>
<p>JDK1.5中引入了一个重要的特性-泛型。但是Java语言中的泛型是采用擦除法实现的伪泛型，在Code属性中，泛型信息(类型变量[Type Variables]，参数化类型[Parameterized Types])在编译后都会被通通擦除掉。使用擦除法实现泛型的好处在于简单，较之此前没有泛型的版本修改较小(主要只需修改javac编译器，JVM内部改动很小)，同时也非常易于实现Backport(Backport是将一个软件的补丁应用到比此补丁所对应的版本更老的版本的行为)，运行期也能节省一些类型所占用的内存空间(这个好处听起来就很牵强了，一般来说不会在乎那么点内存的)。然而其坏处却是致命的，也是Java一直被人诟病的点之一：假的就是假的，用一个伪物试图实现真物的功能必然要付出很大的代价，而且即便付出代价了，其结果往往也是似是而非。Java无法像C#等支持真泛型的语言那样，在运行期将泛型类型与用户定义的普通类型同等对待，起码无法走正常渠道直接在运行期通过反射获得泛型信息。</p>
<p>Signature属性就是这个异常渠道，或者说是试图用伪物替代真物所付出的代价。任何类，接口，方法或字段如果包含了泛型信息都需记录到Signature属性中。换句话说，该存类型信息的地方因为不想做过多的修改把泛型信息擦除了，而使用的地方又想用，那么怎么办呢？只能再找个地方把泛型信息存起来。Java的反射API能获取泛型类型，最终的数据来源也就是这个属性。</p>
<p>Signature属性的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/132.jpg" alt="132.jpg"></p>
<p>在所有属性共有的头两个数据项之后是u2长度的signature_index。其指向常量池集合中的一个CONSTANT_Utf8_info类型的索引项，若该Signature属性是类文件的属性，则其表示类签名。若该Signature属性是方法表的属性，则其表示方法类型签名。若该Signature属性是字段表的属性，则其表示字段类型签名。</p>
<hr>
<p><strong>BootstrapMethods</strong></p>
<p>BootstrapMethods属性是JDK1.7新增的属性，它是一个复杂的变长属性，位于类文件的属性表集合中。该属性用于存储invokedynamic指令引用的引导方法限定符。《Java虚拟机规范(Java SE 7版)》规定，如果常量池集合中出现过CONSTANT_InvokeDynamic_info类型的常量，那么类文件的属性表集合中必须出现且只能出现一个BootstrapMethods属性。</p>
<p>BootstrapMethods属性与invokedynamic指令及java.lang.invoke包的关系非常密切。截至JDK1.7为止，javac编译器尚无法生成invokedynamic指令及BootstrapMethods属性，必须通过一些非常规的手段才能使用到它们。</p>
<p>BootstrapMethods属性的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/133.jpg" alt="133.jpg"></p>
<p>在所有属性共有的头两个数据项之后是引导方法集合。其内部由两部分组成：首先是u2长度的num_bootstrap_methods，随后是num_bootstrap_methods个bootstrap_method。bootstrap_method的结构如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/134.jpg" alt="134.jpg"></p>
<p>首先是u2长度的bootstrap_method_ref，其指向常量池集合中的一个CONSTANT_MethodHandle_info类型的索引项。随后是引导参数集合。在引导参数集合内部，首先是u2长度num_bootstrap_arguments，其值可以为0，表示没有引导参数。随后是num_bootstrap_arguments个u2长度的bootstrap_argument。每个bootstrap_argument都指向常量池集合中的一个数据项，且必须为如下常量中的一种：</p>
<ul>
<li>CONSTANT_String_info</li>
<li>CONSTANT_Class_info</li>
<li>CONSTANT_Integer_info</li>
<li>CONSTANT_Long_info</li>
<li>CONSTANT_Float_info</li>
<li>CONSTANT_Double_info</li>
<li>CONSTANT_MethodHandle_info</li>
<li>CONSTANT_MethodType_info</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>碎片-编程语言拟人化</title>
    <url>/2017/11/07/%E7%A2%8E%E7%89%87-%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/0.png" alt="0.png"></p>
<p>支撑着这个世界的女神大人，也被称为”圣母大人”。</p>
<p>关于C的出身年月没有定论。有人说她在创世纪(指1970年1月1日左右)之前就存在于这个世界，也有人说她是在稍后的1972年左右诞生的。</p>
<p>她是女神大人，因此像”1970年左右出生的话，她现在的年龄是……”这样的想法是不信教的行为。绝对不要有这样的想法。</p>
<p>她的名字是字母表的第三个字母”C”。据新约史书上的记载，在她之前还有叫作B的女神大人。一些资料显示”肯和丹尼斯创造了B，但对此并不满足。此后丹尼斯和其它人又合力创造了C”。</p>
<p>世界上有许许多多她的信徒。然而在一段时间内都没有正确传达她的教诲的圣经。当初丹尼斯和布莱恩留下的诗篇虽然担负着这样的使命，人们却希望得到更加明确的指引。此后有许多有识之士将各种逸闻编辑整理、编著出了正确传达她的教义的圣经。本书至今已被修订过多次，根据修订年的不同，被称作C89、C99、C11等。</p>
<p>一般人是不能直接与C对话的。只有积累足够的修行者才会被允许与C交流。修行是十分严格的，需要理解”指针的指针”之类的问题，以及要求100%地成功解决无论多么努力地修行都难以克服的”malloc/free”问题。由于这样的背景，真正能跟她进行日常交流的人非常地少。然而由能够交流的人经手、世界上诞生了多种多样的知识与技术。即使你没有见过她的样子，她的慈爱也确实地每天都围绕在你身边。</p>
<hr>
<a id="more"></a>

<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/1.jpg" alt="1.jpg"></p>
<p>犹如宫泽贤治的《不畏风雨》中出现的、性格木讷的女孩子。从小就由于迟钝和大食量等特征被别人当作笨蛋，从小学入学开始进入田径部、坚持跑步，在中长跑中经常取得好成绩，给人以活泼的印象。是十分努力的女孩子。</p>
<p>她的家境并不算好。父亲Sun是有才能的艺术家，但不擅长理财，在她14岁的时候因为苦于借债积劳成疾而去世。她被Oracle叔叔收养，那时还与Google叔叔之间因为对她的抚养权问题而引起争端并闹上法庭。</p>
<p>在周围的人都担心，正值青春期的她在这样的处境下会不会一蹶不振的时候，她却处变不惊、继续着每天练习跑步的生活。</p>
<p>朴素的、认真的、难说是聪明的她，进入高中后不知是不是稍稍开始对异性在意，被人看到她偷偷地学着别的女孩子的时尚穿着在街上行走。虽然会受到”虽然很努力，也许稍微有点过时”、”那衣服与Java的印象不合”之类的否定评价，但感到”意外地很萌？”的好意的人也很多。</p>
<p>喜欢喝咖啡，只喝印度尼西亚产的。其本人曾说过”喜欢咖啡胜过三餐”，不禁让人稍稍担心”这样对健康没问题吗？”</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/2.jpg" alt="2.jpg"></p>
<p>由父亲大人Guido养大的深闺中的大小姐。她出身于荷兰的阿姆斯特丹，但在小时候就搬到了美国，父亲也在家里使用英语，所以不怎么会说荷兰语。</p>
<p>她个性随和。最出名的是她听C++宣布”想出去旅行一趟改变一下形象。200x年回来哦”出门旅行后(结果回来的时候已经2011年了……)，放言说”我也稍稍出门旅行一下，公元3000年再回来哦”后出门数年未归。虽然有着这样冒失的行动，但多亏抱着”养成大家都喜爱的孩子”的心愿的父亲大人Guido的教育，实际上和她接触后会觉得她非常容易亲近。</p>
<p>前些天，她去到某公司打工(她现在似乎在边上大学边打工)，被人们评价为”能充分融入工作、八面玲珑、给我们帮了大忙”。她不怎么说多余的话，彬彬有礼的样子，被评价为是在”天真烂漫、自由第一”的人众多的业界中与众不同的存在。</p>
<p>据说她擅长的科目是数学，经常看到她轻松地解决各种统计相关的难题。喜欢穿白色的连衣裙或浅粉色的开衫这样清新的服装。</p>
<p>实际上她还喜欢爬行动物，据说在家里还有养蛇。粉丝们经常讨论”她会给宠物们起什么样的名字呢？”这样的话题。大多得出的都是”肯定是Monty吧”这样的结论。会不会飞就不得而知了。(注：英国的六人喜剧团体Monty Python的作品The Flying Circus)</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/3.jpg" alt="3.jpg"></p>
<p>以强化Web世界为目的制作出来的女性机器人。竖着的头发是用作天线来随时接收主人的命令的。</p>
<p>为了有与人类相近的触感，使用了硅树脂来制作其皮肤。内部是类似于刀片服务器的构造，常常使用多台服务器进行复用。因此体重比人类更重一些。</p>
<p>在她最初登场的时候，还能看到她关节可动部分的骨架，行动也很僵硬，与人类的形象差别很大。然而经过了18年间6次的大版本升级之后，其行为和言语已经渐渐变得像人了。最近更是达到了像初音未来这样(比起人类仍然有少许违和感但已经十分自然了)的级别。</p>
<p>虽然笨笨的、工作时也磕磕绊绊的，但由于她遵循机器人三原则、服从主人的命令，也有很多人成为她的粉丝。她的粉丝俱乐部官网”PHPer！”无需入会费便可简单入会，是会员数在IT界首屈一指的大团体。</p>
<p>对于她持拒绝态度的人也很多，常有”她的行为在生理上有些难以接受”、”如果再聪明点就好了”、”与她稍有过接触但觉得还是与人类差别很大”这样的评论。</p>
<p>平常穿从Forever12和志村买来的衣服。想着穿便宜的快速时尚(fast fashion)的衣服便可以将省下的钱花在机器开销上。可以说是标准的机器人的效率优先的花钱方式。或许会有她也在意流行、为样子烦恼的那一天吧？</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/4.jpg" alt="4.jpg"></p>
<p>由松本爸爸养大的日本的女孩子。因为生日在圣诞节，人生最大的烦恼是生日礼物和圣诞节礼物变成一份了。出生地是岛根县松江市，除了旅游和工作以外没有到过其它的县。</p>
<p>由于受的教育是自由奔放式的，她性格好动、好奇心旺盛。平时是一个率真的好孩子，但偶尔也会看到她喜欢恶作剧的一面，这让周围的人十分困扰。看到她的身影时经常会想起IT业的”Just For Fun !”这句话。</p>
<p>小时候过着一个人在荒山野岭到处跑的生活，10岁的时候与一个叫Rails的女孩成为朋友，生活开始变化。两个人在演艺事务所门前玩耍时，谈起可以两个人结对进行演艺活动。因此便以”Ruby与Rails”的艺名出道、主要从事杂志模特，也有拍过电视广告，所以很多人都听过她们名字。</p>
<p>人们想着她在这多愁善感的年龄段体验各种演艺活动、性格多少会产生一些变化吧，但在前些天与她久违的谈话中，却惊讶地发现她仍是与从事演艺活动之前一样行动自由奔放。虽然行为举止多多少少显得更加稳重，其喜欢恶作剧、活泼的本性却和以前一样没有变化。</p>
<p>想着已经是高中生了差不多也要开始穿一些成熟一点的服装的她，对于洋装却和小时候一样穿着Mickey Mouse。虽然她个子小又是娃娃脸与这样的衣服很配，不过这样真像一个女高中生吗？</p>
<p>她的粉丝也分为想要她一直保持现在的样子，和想要看到她更成熟的样子的两派。</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/5.jpg" alt="5.jpg"></p>
<p>苗条的双腿和协调的五官。被许多人称作”IT界首屈一指的美女”的她，也因为拥有插花、茶道、钢琴和小提琴、柔道、剑道、合气道等等才能而出名。</p>
<p>她的粉丝大多很狂热，还存在着”黑暗军团”这样的粉丝俱乐部。黑暗军团是规模仅次于共济会(Freemason)的巨型团体，一般人无法入会。据说如果能回答出对她非常狂热的问题，就会有察觉到的军团成员来询问”你愿意进入黑暗军团吗？”</p>
<p>与她同父异母的姐妹Objective-C一心专注于弹钢琴，她的专注被IT界的天才史蒂夫乔布斯(也被一部分人称为紫色蔷薇)相中，而一跃成为明星，而C++则是由于其美貌和才能被人关注，长年坐稳业界明星的宝座。姐妹二人真可谓是对比鲜明。</p>
<p>她根据心情不同频繁地变换发型和服装这一点也很出名。昨天还是和服配黑发，今天却是红发哥特系登场之类的，因为她的变身而使轻度的粉丝惊奇道”啊嘞？今天是C++小姐吗？”的事也常有发生。远离业界时私下经常穿HYSTERIC GLAMOUR的服装。</p>
<p>关于她的出生年月日其事务所并不公开。虽然也有出生于1983年一说，本文采用的是在一部分粉丝中流传甚广的1985年10月14日说。其间也流传有”她自己也许也记不清自己的生日……”这样煞有介事的传言。与其说”C++小姐的话记不清自己的生日也不是什么不可思议的事情”，倒不如看作是她天真烂漫的性格的表现。</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/6.jpg" alt="6.jpg"></p>
<p>在著名的微软公司接受精英教育、11岁时便跳级进入大学学习、倍受人们关注的少女。也被称为”IT界的最强幼女”。</p>
<p>因为与C++的名字很像，一段时间内盛传”难道是私生子吗？”的流言，实际上两人没有直接的血缘关系。也有报道称两人是远房亲戚，但实际情况如何则不得而知。</p>
<p>似乎喜欢成熟的行为、讨厌像小孩子一样玩耍。有生日的时候收到父母送的名为安迪的毛绒玩具时说道”这是啥。没sense。不要”的传闻。</p>
<p>然而对于食物的兴趣却仍停留在小孩的阶段，多次目击到她在学校食堂点儿童套餐的样子。不喜欢喝咖啡，就算是甜味的罐装咖啡也会令她皱眉头。</p>
<p>虽然偶尔会见到她意外地孩子气的一面，多数情况下见到的还是她说话、待人接物彬彬有礼的样子。是一个既有成熟的一面又有稚气的一面的孩子。由于还在成长期，见到她时常有”又长高了啊”、”有些像大人的样子了”这样的感慨。一直会期待着再之后见到她时会长成什么样子。</p>
<p>常穿秀兰邓波的洋装。据说都是她本人挑选的，与她自己非常相配。她的可爱让人们无论男女都会成为她的粉丝。</p>
<p>她的志向是在大学毕业后不仅在养育她的微软公司的旗下工作、还要活跃于整个IT界。虽然没有问到更详细的计划，但据说是要做出能让苹果和企鹅等也能和睦相处的东西。到底会做出怎样的东西来呢？</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/7.png" alt="7.png"></p>
<p>Perl于1987年12月、美国的沃尔夫妇家中诞生。其父亲拉里精通计算机、语言学，母亲也从事中世纪文艺复兴和语言学专业，Perl就是在这样接受了高等教育的父母身边长大的。</p>
<p>父亲的教育虽然严厉，却也给了Perl许多自由。父亲在教育过程中经常说的一句话是：”方法不止有一个(There’s more than one way to do it)”。想要实现什么时，达成的方法不只有一种。可以考虑各种方法。父亲的这种教育方式，对她的性格形成产生了很大的影响。”这样做的话会怎么样？”……”那样做又会如何？”……张开好奇心的翅膀长大的她渐渐发现了自己”发明”方面的天赋。绝代的发明家、Perl诞生了。</p>
<p>从她踏上发明家的道路的20年来，其发明多达128890件(2014年1月统计数)，她的发明，从没什么用处的玩具，到能解决世界上许多问题的有益的发明，应有尽有。她发明的物品的原型，全都捐赠给了CPAN博物馆，任何人都可以阅览。</p>
<p>如今仍然不论实用与否、不断做出想做的新发明的她自嘲地在采访中说道：”我比起发明家，更像是各种破烂的生产装置。”她露出牙齿的笑容，非常振奋人心。</p>
<p>Perl对洋装不怎么讲究，平时因为调整机械时觉得麻烦，会穿便于运动的休闲装。最近常穿的羽绒服据说是在ame横(东京上野的一条商业街)的WEGO买的。喜欢的食物是草莓。她说作业中对因集中注意力而疲劳的大脑来说最适合的食物就是草莓。</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/8.png" alt="8.png"></p>
<p>她于2000年2月29日出身。正是残存在人们记忆中400年一遇的被诅咒的那一天。虽然出身于非常不吉利的日子，她自己却成长为人见人爱的聪明的孩子。</p>
<p>她的母亲名叫S。虽然在神话的世界里C是在B之后出生的，她的名字却是S的前一位R。这几个都是很难用Google搜出来的名字(因为太短了！)。</p>
<p>她的母亲非常擅长数学，是统计学者的助手，R也延续了这一特性。她从小时候起就很擅长数学，小学时代就已经达到能快速解决高中数学问题的级别。此外，她对几何图形也很感兴趣，经常有人看到她画着各种二维、三维图形、画好后一个人露出满足愉悦的表情。是一个稍微有点奇怪的孩子。</p>
<p>R在擅长数学的同时在语言表达方面则稍显逊色。前些日子采访她的时候，她对提出的问题想要回答却找不着合适的词，取而代之”刷——“地画了一幅散点图说”这样的感觉”。或许在她的眼里，这个世界里用语言来表达就像折叠复杂的数学公式那样复杂吧。</p>
<p>她对服装不怎么讲究，常常穿着不紧不松的连衣裙和衬衫。对于父母给她买的洋装是多少价格、哪儿买的这样的问题没有认识。仅仅是，对于最近买来的喇叭裙的裙摆张开的角度很在意。</p>
<p>她的梦想是将来成为一名统计学者，尽管只有14岁却经常混迹于大学学生中间每天都在解各种问题。最近光是大学已经不能满足、又向父母请求、在各种各样的研究所里进出。</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/9.png" alt="9.png"></p>
<p>姓氏是Basic，名字是Visual，也有很多人叫她的绰号：VB。小名是Ruby(与那个Ruby没有关系)。从小被某个资产家(不能说他的名字)看上，一家人都寄身于资产家的身边。那时她的名字换了好多次，如今才定下这个名字，有着比较复杂的家庭环境。</p>
<p>关于资产家要收养尚处于幼年的她的原因，据不可靠的传言称，他从她身上看到了从前就很憧憬的Basic女士的影子。收养具有与憧憬的女性相似气质的小孩，也即实行所谓的光源氏计划。</p>
<p>也许年轻人并不了解，Basic女士曾是《微电脑Basic杂志》的封面模特，在当时是每个人都非常向往的麦当娜一样的女性。实际上我认识的人里面年轻时为她倾倒的人非常之多。</p>
<p>VB在接受严格教育的同时，也在兴趣方面拓展天性，她在手工制品、装饰品方面有着独特的才能。看着她制作珠子的装饰品的样子会觉得犹如魔法一般。仅仅是动动手，一瞬间就可以做出一串项链。</p>
<p>在她10岁的时候，资产家的家里来了一位新的养女(人们常说的那位)。由于这个原因，她现在正在家中努力做一位好姐姐。然而本来便懦弱、不擅长说话的她却时常反过来被小她10岁、认真的、发言时间长的妹妹说教。加油啊，VB小姐。</p>
<p>小时候的VB会穿着父母买的Emily Temple的衣服，现在更多时候穿着是自己买的Lowrys Farm的衣服。今年就要大学毕业进入社会了，目标是VB小姐特有的成熟路线。</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/10.png" alt="10.png"></p>
<p>O教和F教之前有着漫长的宗教战争。Scala是这两个宗教的牧师和修女结婚诞生的异端。她出生后立即引起了两教之间激烈的对立，察觉到危险的父母将她送到私立JVM学校的Odersky老师那儿作为养女寄养。</p>
<p>现在两个宗教比起当时已有了关系改善的征兆，有一部分人也将她视为两家融合的象征。然而抱有强烈的对立心态的人仍然很多，也常常有针对她的存在引起的争论。F教的人们认为她的存在没有充分认识F的本质，而O教的人则对混有F的她感到难以理解。</p>
<p>虽然诞生于这样复杂的环境，她自己对于周围的环境却不关心，而是十分平静地到双方的教会中取面包、坚强地生活着。被她这种天真烂漫的姿态所感动、成为她的粉丝的人也很多。</p>
<p>Scala似乎喜欢同校高年级部的Java小姐，休息时间经常去找她。Java小姐也并不讨厌她，经常会像大姐姐一样让她坐在她的膝盖上温柔地抚摸她的头。虽然在Scala把Java喜欢的Duke的人偶用红绳子绑起来进行恶作剧时把Java惹得十分生气，在此以外则几乎没怎么吵过架。两个人就好像亲生姐妹一样。</p>
<p>有着见多识广的父亲和温柔的姐姐的Scala现在也许是，与其出身的复杂情况相反、实际上非常幸福地生活着吧。</p>
<p>对于洋装她喜欢明快的颜色和花纹，经常穿着Algonquin的衣服。虽然是比较有个性的时装，由与生俱来的有个性的她穿来却不可思议地自然。</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/11.png" alt="11.png"></p>
<p>在争议地区诞生的13岁女孩子。她的父亲是有名的设计师，但是在她5岁的时候被卷入战火身亡了。幸运的是她那时年纪还小、将她收养的Adobe叔叔非常用心地将她养大，没有在她心中留下很大的伤痕。叔叔和她父亲同样都是设计师。也许在她的记忆中已经把两个人混淆在一起了也说不定。</p>
<p>她所居住的国家与JavaScript所居住的国家是邻国，两国同样是由ECMA人种构成的。在外国人看来JavaScript和ActionScript的外貌非常相似。确实看她们儿童时期的照片，在肤色和五官上都很相像，但如今长大了的照片看了的话会如何呢。</p>
<p>她把”为祖国和叔叔努力”作为座右铭努力着，然而努力却经常得不到回报，是一个运气不太好的孩子。在争论地区盛传将实行新的公用语的时候，她希望为即将到来的和平时代出一份力，比谁都更早开始学习这门语言，然而在好不容易能说好这门语言的时候，这语言被采用为公用语的提案泡汤了。在她刚开始学习移动端上的设计时，她想着在移动方面强大了会对叔叔的工作有用。也可以减少祖国的外贷。在这样的想法中努力的时候，叔叔经营的公司却被某个巨型移动终端公司强行终止的交易，关于移动端的工作也急剧减少。</p>
<p>十分努力却常常得不到回报的她，伫立于这片如今也看不到纷争停止的土地上，继续地前进着。</p>
<p>有朝一日努力会得到回报的吧。祝福她在10年后仍能平安，不断地前进着、生活着。</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/12.jpg" alt="12.jpg"></p>
<p>在争议地区长大的17岁的女孩子。常常面无表情、谈话时总给人以一定的距离感。</p>
<p>虽然与Java的名字很像，两个人之间却没有血缘关系。在当时Java这样的名字很流行，所以父母也给她起了类似的名字。她本人似乎对自己的名字并不在意，有时也以”ECMA”的笔名进行活动。偶尔也会被叫”JS”的外号，对此则更不在意，甚至对这种称法公然无视。</p>
<p>她的生涯非常不幸。刚一出生祖国便爆发战争。懂事之前便母亲去世、离开了父亲。在大人们任性的争斗中，她学会了将自己藏在壳中、保护自己周围的生存之术。同年龄的女孩子随着年龄的变化都在挑战各种风格的时候，她却不顾周围的话语、一个人继续闭锁在壳中。当时就是非得这样才能生存的艰难环境。</p>
<p>由于有了这样的儿童时期，她的说话、思考、待人接物的方式与其它的孩子都稍显不同。有很多人在与她说话时都会烦恼该怎样说才好。不过，也有人对她持有简单的一根筋的思考方式”容易接触”、”某种程度上来说，很好理解”的印象。</p>
<p>现在，她的国家正向努力解决纷争、开拓新的居住土地的方向前进着。大人们虽然仍旧任性地互相斗争，至少在这几年里，已经没有发生像以前那样互相憎恨、互相残杀的战争了。</p>
<p>在开始复兴的祖国里，她如今应该能幸福地生活着吧？什么时候才能看到她像同龄的女孩一样欢笑呢？</p>
<hr>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/13.png" alt="13.png"></p>
<p>创世纪(1970年1月1日)起经过数年后被目击到的妖精。会寄宿在家中，有着类似于棕精灵(Brownie)的生活方式，向她们拜托家务事或者杂活的时候，会回答两次并接受的温顺的孩子。</p>
<p>她们不常出现在人类存在的地方，因为言语不通，因此往往会用信件交流。如果拜托的事情说得比较含糊的话，有可能会造成误解而发生不得了的事情。对此的技巧是明确地像”做那个|做这个&gt;放在这里”这样有顺序地将要拜托她们做的事写好。如果对拜托的事理解得很好的话，她们会在夜里将事情都处理好。如果很好地完成了工作的话，请别忘了在第二天的晚上放上作为谢礼的方糖。</p>
<p>Shell中有各种各样的种族。现在已确认的种族中比较有名的有：”ba”、”c”、”k”、”tc”、”z”等等。其服装根据种族不同而不同，我所目击到的是一只身高60cm左右、穿着巴宝莉的儿童服装的个体。恐怕人们目击到最多的是”ba”种。个人而言我也想遇到身高更高一些、尖耳朵的”z”种，现在虽然知道如何写信，却从未见过实物。</p>
<p>尽量她们会在同一个屋子里居住，却很少有人有机会见到，也不如何才能遇到他们。有一种说法是，每天都把写程序这一仪式进行到午夜、勉强靠咖啡因支撑着抬起头的状态下突然向屏幕看去，能够看到她的身影。确实我遭遇她，也是在公司里熬夜写程序的时候。</p>
<p>Shell的个体非常地多，据说每家每户都会有一只。在大家的家里，实际上有着许多的她们居住着、等着来信也说不定。</p>
<h1 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h1><p><strong>1920*1080</strong></p>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/14.jpg" alt="14.jpg"></p>
<p><strong>1366*768</strong></p>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/15.jpg" alt="15.jpg"></p>
<p><strong>1600*900</strong></p>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%8B%9F%E4%BA%BA%E5%8C%96/16.jpg" alt="16.jpg"></p>
]]></content>
      <categories>
        <category>碎片</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-原码补码反码</title>
    <url>/2017/11/06/Java%E5%9F%BA%E7%A1%80-%E5%8E%9F%E7%A0%81%E8%A1%A5%E7%A0%81%E5%8F%8D%E7%A0%81/</url>
    <content><![CDATA[<p>Java中的整数(long,int,short,byte)均为有符号数，第一位代表符号位(0:正数,1:负数)。内存中以补码存储。</p>
<p>下文均以byte举例。</p>
<a id="more"></a>

<p><strong>原码</strong></p>
<p>原码是给人读的。即符号位+绝对值。</p>
<p>7原码：00000111</p>
<p>-7原码：10000111</p>
<p><strong>反码</strong></p>
<p>反码为原码到补码间的过渡。正数的反码与原码相同。负数符号位不变，其余位取反。</p>
<p>7反码：00000111</p>
<p>-7反码：11111000</p>
<p><strong>补码</strong></p>
<p>补码是机器存储用的。正数的补码与其原码及反码相同。负数的补码为反码加1。进位不会改变符号位。</p>
<p>7补码：00000111</p>
<p>-7补码：11111001</p>
<p>计算机中存储的值均为补码，因此负数求原码的方法为减1取反。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; Integer.MAX_VALUE + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Integer.toBinaryString(i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-2147483648</span></pre></td></tr><tr><td class="code"><pre><span class="line">10000000000000000000000000000000</span></pre></td></tr></table></figure>

<p>推演：</p>
<p>Integer.MAX_VALUE为：01111111-11111111-11111111-11111111</p>
<p>加1后为：10000000-00000000-00000000-00000000。该值为负数并以补码的形式在内存中存储。其原码为减1后取反，即：</p>
<p>减1：11111111-11111111-11111111-11111111<br>取反：10000000-00000000-00000000-00000000</p>
<p>即其原码与补码相同。因此这是一个特殊的负数：实际上其表示的为-0。但为0划分正负没有意义。0已由+0表示。则该值就赋予一个特殊值，即负数的最小值-2^31(Integer.MIN_VALUE)。</p>
<h1 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(Integer.toBinaryString(-32));</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11111111111111111111111111100000</span></pre></td></tr></table></figure>

<p>推演：</p>
<p>-32原码：10000000-00000000-00000000-00100000<br>-32反码：11111111-11111111-11111111-11011111<br>-32补码：11111111-11111111-11111111-11100000</p>
<p>补码即为计算机中存储的值。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>原码</tag>
        <tag>补码</tag>
        <tag>反码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-instanceof与isInstance</title>
    <url>/2017/11/05/Java%E5%9F%BA%E7%A1%80-instanceof%E4%B8%8EisInstance/</url>
    <content><![CDATA[<p>instanceof与isInstance通常用于规避类型转换异常(ClassCastException)。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; obj instanceof(Type):对象的实际类型是否为某类型(子类接口均可)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; Class.isInstance(obj):该对象的实际类型能否转化为某类(强制自动均可)。Class为类对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        A a &#x3D; new A();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        B b &#x3D; new B();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        A ba &#x3D; new B();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;1------------&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b instanceof B);    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b instanceof A);    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b instanceof Object);    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(ba instanceof A);    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(ba instanceof B);    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a instanceof B);    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(null instanceof Object);    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;2------------&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.getClass().isInstance(b));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.getClass().isInstance(a));    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;3------------&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(a.getClass().isInstance(ba));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.getClass().isInstance(ba));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(b.getClass().isInstance(null));    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;4------------&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(A.class.isInstance(a));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(A.class.isInstance(b));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(A.class.isInstance(ba));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;5------------&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(B.class.isInstance(a));    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(B.class.isInstance(b));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(B.class.isInstance(ba));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;6------------&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Object.class.isInstance(b));    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Object.class.isInstance(null));    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class B extends A &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>instanceof</tag>
        <tag>isInstance</tag>
      </tags>
  </entry>
  <entry>
    <title>碎片-计算机语言发展历史</title>
    <url>/2017/11/04/%E7%A2%8E%E7%89%87-%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<p>计算机语言是写给计算机看的，因此必须符合机器阅读的规范。然而计算机语言又是由人写的，因此又必须能让人读得懂。计算机语言越是发展，就越是远离机器的自然语言，靠向人类的自然语言。原因主要有二：</p>
<ol>
<li><p>人类想写得更为舒服。将精力更多的放在业务本身，而非语言上。</p>
</li>
<li><p>硬件的高速发展导致人们根本不在乎从人类的自然语言到机器的自然语言之间的翻译导致的那一点点的性能流失。</p>
</li>
</ol>
<p><img src="/images/blog_pic/%E7%A2%8E%E7%89%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<h1 id="第一代：机器语言"><a href="#第一代：机器语言" class="headerlink" title="第一代：机器语言"></a>第一代：机器语言</h1><p>相当于机器的自然语言，由一串01组成。不同的硬件架构有不同的语法。换句话说，正如人类的自然语言不止一种，机器的自然语言也不止一种。</p>
<h1 id="第二代：汇编语言"><a href="#第二代：汇编语言" class="headerlink" title="第二代：汇编语言"></a>第二代：汇编语言</h1><p>程序员开始使用英文单词作为助记符来标志01。汇编语言已然离开了机器的自然语言的范畴而进入了人类的自然语言，只是语法简单，无法表达复杂的含义。</p>
<p>现在仍然有很多领域在使用汇编语言，比如：操作工业机器人、单片机编程、甚至某些计算机病毒的编写等。</p>
<h1 id="第三代：高级语言"><a href="#第三代：高级语言" class="headerlink" title="第三代：高级语言"></a>第三代：高级语言</h1><p><strong>面向过程</strong></p>
<p><strong>C:</strong>由B语言升级而来，是高级语言的鼻祖。依然在广泛使用。1972年由美国贝尔实验室发明(其还发明了计算机硬件行业的基石-晶体管)。</p>
<p><strong>Fortran:</strong>20世纪50年代诞生，当前依然在使用。由IBM(International Business Machines Corporation,国际商业机器公司或万国商业机器公司，1911年创立于美国，是世界上最古老的IT公司)提出。</p>
<p><strong>COBOL:</strong>较为古老的语言，当前在一些金融及银行的系统中依然在用。</p>
<p><strong>PASCAL:</strong>主要用于大学。当前用的已不多。</p>
<p><strong>ADA:</strong>美国国防部提出的语言，基于PASCAL，擅于写控制软件。</p>
<p><strong>面向对象</strong></p>
<p><strong>C++:</strong>1983年由贝尔实验室发明，是C引入面向对象思维后的升级。</p>
<p><strong>Java:</strong>有人将Java称为C++-。即Java去掉了C++中的一些复杂的让人难以理解的设计。降低了灵活性，但也降低了语言的学习成本。</p>
<p><strong>C#:</strong>C Sharp(锋利的C)，也被称为C++++。与Java渊源极深。比尔盖茨本人对Java非常赞许，甚至曾有”Java是我见过的最好的语言”的引战言论。因此微软曾试图在自己的体系中重用Java。在微软与Sun的蜜月期，微软甚至为Java推出了一个Windows上的运行平台Visual J++。后来微软与Sun就Java的版权问题打了旷日持久的官司，微软重用Java的计划也随之告吹。C#是微软在官司失败后山寨的Java，或者说是微软所希望的Java的样子。其各方面与Java都非常相似。因为是微软希望的样子，C#自然就与Windows平台绑定，无法像Java那样保有平台无关性。而服务器领域当前依然是Linux/Unix的天下，因此在该领域，无论其从语法及性能上较之Java是否真的有优势，C#的市场占有率依然很小。</p>
<p><strong>Object-C语言:</strong>现在IOS和Mac开发中的主流语言。根据C语言所衍生出来的语言，继承了C语言的特性，是扩充C的面向对象编程语言。它主要使用于Mac OS X和GNUstep这两个使用OpenStep标准的系统，而在NeXTSTEP和OpenStep中它更是基本语言。</p>
<h1 id="第四代-伪-：SQL"><a href="#第四代-伪-：SQL" class="headerlink" title="第四代(伪)：SQL"></a>第四代(伪)：SQL</h1><p>有人认为SQL是第四代计算机语言，然而更多的人持反对态度：毕竟SQL主要还是用来操作数据库等数据集合，其能实现的功能较之高级语言差之太远。</p>
]]></content>
      <categories>
        <category>碎片</category>
      </categories>
      <tags>
        <tag>程序语言</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-JDK自带JVM工具</title>
    <url>/2017/11/03/JVM-JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>解决Java程序JVM相关问题时，知识与经验是基础，数据是依据，工具是运用知识与经验处理数据的手段。</p>
<p>JVM相关的数据举例：</p>
<ul>
<li>运行日志</li>
<li>异常堆栈</li>
<li>GC日志</li>
<li>线程快照(threaddump/javacore)</li>
<li>堆转储快照(heapdump/hprof)</li>
</ul>
<a id="more"></a>

<p>本文所介绍的环境为Windows平台下的JDK1.7.0_80，其bin目录中的内容如下：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/0.jpg" alt="0.jpg"></p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/0.jpg" alt="0.jpg"></p>
<p><img src="/images/blog_pic/Java%E5%B7%A5%E5%85%B7/%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas/0.jpg" alt="0.jpg"></p>
<p>这些工具大多只有十几K，之所以能做到如此小巧，是因为它们基本都是对jdk/lib/tools.jar的二次封装，可以对比看一下tools.jar解压后的内容：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/1.jpg" alt="1.jpg"></p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/2.jpg" alt="2.jpg"></p>
<h1 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h1><p><strong>jps</strong></p>
<p>jps(JVM Process Status Tool)类似于Linux的ps命令，用于显示系统中所有的Hotspot VM进程，并显示JVM执行的主类(Main Class，即main()所在的类)及这些JVM进程的本地虚拟机唯一ID(Local Virtual Machine Identifier,LVMID)。LVMID是整个JDK监控工具体系的线索，用于作为后续监控工作的查询条件。</p>
<p>对于本地虚拟机进程而言，LVMID与操作系统的进程ID(Process Identifier,PID)是一致的。Windows下利用资源管理器Linux下利用ps均可得到该PID，但此时无法根据JVM执行的主类进行定位。</p>
<p>运行一个测试用的小程序:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC -XX:MaxTenuringThreshold&#x3D;15</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>将该程序运行起来后：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/3.jpg" alt="3.jpg"></p>
<p>-q只输出LVMID。</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/4.jpg" alt="4.jpg"></p>
<p>-m输出启动时传递给main()的参数。</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/5.jpg" alt="5.jpg"></p>
<p>-l输出主类的全路径名。若进程执行的是Jar包则输出Jar路径。</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/6.jpg" alt="6.jpg"></p>
<p>-v输出JVM参数</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/7.jpg" alt="7.jpg"></p>
<p><strong>jstat</strong></p>
<p>jstat(JVM Statistics Monitoring tool)可用于监控JVM的运行时状态信息。它可以显示本地或远程JVM进程中的类装载，内存，垃圾收集，JIT编译等运行时数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC -XX:MaxTenuringThreshold&#x3D;15</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/8.jpg" alt="8.jpg"></p>
<p>6372是LVMID，1000是输出间隔(单位ms)，5是输出次数。</p>
<p>-gcutil：监控堆及方法区的内存使用情况，GC时间等信息。并重点关注已使用空间占总空间百分比。即各内存区域下的数值为已用空间占总空间的百分比。</p>
<ul>
<li>S0:Survivor0</li>
<li>S1:Survivor1</li>
<li>E:Eden</li>
<li>O:old(老年代)</li>
<li>P:Permanent(永久代)</li>
<li>YGC:Young GC(Minor GC)次数</li>
<li>YGCT:Young GC(Minor GC)耗时。单位为秒。</li>
<li>FGC:Full GC次数</li>
<li>FGCT:Full GC耗时，单位为秒。</li>
<li>GCT:所有GC总耗时，单位为秒。</li>
</ul>
<p><strong>jinfo</strong></p>
<p>jinfo(Configuration Info For Java)可查看JVM参数。jps -v可查看启动时显式指定的JVM参数，而jinfo能查询到包含默认值在内的所有参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC -XX:MaxTenuringThreshold&#x3D;15</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/9.jpg" alt="9.jpg"></p>
<p>即老年代与年轻代的比例默认为2:1。</p>
<p><strong>jmap</strong></p>
<p>jmap(Memory Map for Java)用于生成堆转储快照(heapdump/dump)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC -XX:MaxTenuringThreshold&#x3D;15</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/10.jpg" alt="10.jpg"></p>
<p>该命令即在e盘下生成dump文件dumpTest。</p>
<p><strong>jhat</strong></p>
<p>由jmap dump出的堆转储快照无法直接阅读，需使用jhat(JVM Heap Analysis Tool)读取。jhat内置了一个微型的HTTP/HTML服务器用于分析阅读堆转储快照。</p>
<p>分析上小节中jmap产生的dumpTest：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/11.jpg" alt="11.jpg"></p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/12.jpg" alt="12.jpg"></p>
<p>分析内存泄漏问题时主要会用到其中的Show heap histogram，点进去：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/13.jpg" alt="13.jpg"></p>
<p>该页面可显示进程中所有的同类实例数及总大小。</p>
<p><strong>jstack</strong></p>
<p>jstack(Stack Trace for Java)用于生成JVM当前时刻的线程快照(threaddump,javacore)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread thread &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        thread.setName(&quot;testThread&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        thread.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;jstack -l 7432 &gt; &#x2F;e&#x2F;1.txt</span></pre></td></tr></table></figure>

<p>其中7432为LVMID。输出文件1.txt中的内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-11-03 16:35:11</span></pre></td></tr><tr><td class="code"><pre><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (24.80-b11 mixed mode):</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;DestroyJavaVM&quot; prio&#x3D;6 tid&#x3D;0x00000000024ce800 nid&#x3D;0x1df4 waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;testThread&quot; prio&#x3D;6 tid&#x3D;0x000000000c3bc000 nid&#x3D;0x1d34 in Object.wait() [0x000000000cf7e000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting on &lt;0x00000007d5d9af10&gt; (a java.lang.Class for com.test.Test)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Object.java:503)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$1.run(Test.java:11)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d9af10&gt; (a java.lang.Class for com.test.Test)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Service Thread&quot; daemon prio&#x3D;6 tid&#x3D;0x000000000acaf800 nid&#x3D;0x1e8c runnable [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;C2 CompilerThread1&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000acac800 nid&#x3D;0xcbc waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;C2 CompilerThread0&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000acab000 nid&#x3D;0x1fa4 waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Attach Listener&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000aca8000 nid&#x3D;0x1df8 waiting on condition [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Signal Dispatcher&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000aca7000 nid&#x3D;0x1b48 runnable [0x0000000000000000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: RUNNABLE</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Finalizer&quot; daemon prio&#x3D;8 tid&#x3D;0x000000000ac2f000 nid&#x3D;0x1b28 in Object.wait() [0x000000000c25e000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting on &lt;0x00000007d5d04858&gt; (a java.lang.ref.ReferenceQueue$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d04858&gt; (a java.lang.ref.ReferenceQueue$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;Reference Handler&quot; daemon prio&#x3D;10 tid&#x3D;0x000000000ac2d800 nid&#x3D;0x884 in Object.wait() [0x000000000c00e000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting on &lt;0x00000007d5d04470&gt; (a java.lang.ref.Reference$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Object.java:503)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d04470&gt; (a java.lang.ref.Reference$Lock)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">   Locked ownable synchronizers:</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- None</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;VM Thread&quot; prio&#x3D;10 tid&#x3D;0x000000000ac2a000 nid&#x3D;0x187c runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x000000000251d000 nid&#x3D;0x9b4 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x000000000251e800 nid&#x3D;0x1ffc runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#2 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x0000000002520800 nid&#x3D;0x1ce4 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;GC task thread#3 (ParallelGC)&quot; prio&#x3D;6 tid&#x3D;0x0000000002522000 nid&#x3D;0x1ce8 runnable </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&quot;VM Periodic Task Thread&quot; prio&#x3D;10 tid&#x3D;0x000000000c3b3000 nid&#x3D;0x1e34 waiting on condition </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">JNI global references: 107</span></pre></td></tr></table></figure>

<p>其中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;testThread&quot; prio&#x3D;6 tid&#x3D;0x000000000c3bc000 nid&#x3D;0x1d34 in Object.wait() [0x000000000cf7e000]</span></pre></td></tr><tr><td class="code"><pre><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- waiting on &lt;0x00000007d5d9af10&gt; (a java.lang.Class for com.test.Test)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Object.wait(Object.java:503)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test$1.run(Test.java:11)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	- locked &lt;0x00000007d5d9af10&gt; (a java.lang.Class for com.test.Test)</span></pre></td></tr></table></figure>

<p>表明名为testThread的线程wait在了com.test.Test的类对象上。</p>
<p>使用Thread.getAllStackTraces()可通过编程实现jstack的绝大多数功能。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread thread &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        thread.setName(&quot;testThread&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        thread.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(100);    &#x2F;&#x2F; 确保testThread已wait</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Map.Entry&lt;Thread, StackTraceElement[]&gt; stackTrace : Thread.getAllStackTraces().entrySet()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot; + stackTrace.getKey().getId() + &quot;-&quot; + stackTrace.getKey().getName());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (StackTraceElement element : stackTrace.getValue()) System.out.println(element);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;4-Signal Dispatcher</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;3-Finalizer</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:135)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:151)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;9-testThread</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Object.wait(Object.java:503)</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test$1.run(Test.java:13)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1-main</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Thread.dumpThreads(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Thread.getAllStackTraces(Thread.java:1640)</span></pre></td></tr><tr><td class="code"><pre><span class="line">com.test.Test.main(Test.java:23)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2-Reference Handler</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Object.wait(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Object.wait(Object.java:503)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;5-Attach Listener</span></pre></td></tr></table></figure>

<h1 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h1><p><strong>Jconsole</strong></p>
<p>Jconsole(Java Monitoring and Management Console)诞生于JDK1.5。是一种基于JMX(Java Management Extensions，即Java管理扩展)的可视化监视及管理工具。工具位置：jdk/bin/jconsole.exe。</p>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread thread &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        thread.setName(&quot;testThread&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        thread.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/14.jpg" alt="14.jpg"></p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/15.jpg" alt="15.jpg"></p>
<p>再来构造一个死锁的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r1 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (&quot;八云紫&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (&quot;八云蓝&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r2 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (&quot;八云蓝&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (&quot;八云紫&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r1, &quot;r1&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r2, &quot;r2&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>点击“检测死锁”：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/16.jpg" alt="16.jpg"></p>
<p>随后多出了一个“死锁”标签。</p>
<p>r1：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/17.jpg" alt="17.jpg"></p>
<p>r2：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/18.jpg" alt="18.jpg"></p>
<p><strong>VisualVM</strong></p>
<p>VisualVM(All-in-One Java Troubleshooting Tool)诞生于JDK1.6 Update7。现已成为Sun主力推动的多合一故障处理，性能分析(Profiling)工具，并已从JDK中分离出来成为可以独立发展的开源项目。不需要被监视的程序基于特殊Agent运行，因此它对被监视的程序的实际影响很小。</p>
<p>程序位置为/jdk/bin/jvisualvm.exe。</p>
<p>构建一个死锁的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r1 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (&quot;八云紫&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (&quot;八云蓝&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r2 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (&quot;八云蓝&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (&quot;八云紫&quot;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r1, &quot;r1&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(r2, &quot;r2&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>有两种方式生成堆转储快照：</p>
<p>方法1：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/19.jpg" alt="19.jpg"></p>
<p>方法2：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/20.jpg" alt="20.jpg"></p>
<p>生成后：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/21.jpg" alt="21.jpg"></p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/22.jpg" alt="22.jpg"></p>
<p>实例信息需要由类信息点击进入：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/23.jpg" alt="23.jpg"></p>
<p>生成的堆转储文件会在VisualVM关闭时删除，若欲保存生成的堆转储快照：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/24.jpg" alt="24.jpg"></p>
<p>装入已存在的快照：</p>
<p><img src="/images/blog_pic/JVM/JDK%E8%87%AA%E5%B8%A6JVM%E5%B7%A5%E5%85%B7/25.jpg" alt="25.jpg"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-内存分配策略</title>
    <url>/2017/11/02/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<p>JVM的自动内存管理可归结为两部分：自动内存分配及自动内存回收。二者互为因果：因为分配了内存才会产生垃圾。而不进行垃圾清理就无法倒出空间用于分配。</p>
<p>从宏观的角度来看，分配和回收的都是对象，分配和回收的区域为堆(暂不考虑JIT优化导致的栈上分配的标量类型)。而主要的分配和回收的战场又可聚焦于Eden：对象生于Eden，绝大多数的对象也死在Eden。少数对象会进入Survivor，更少数的对象会进入老年代。这就是对象分配的基本规则，但是为了提高性能，JVM偶尔也会打破规则。</p>
<a id="more"></a>

<h1 id="对象生于Eden"><a href="#对象生于Eden" class="headerlink" title="对象生于Eden"></a>对象生于Eden</h1><p>这是内存分配的基本规则。当Eden没有空间时会触发一次Minor GC。</p>
<p>示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a1, a2, a3, a4;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a1 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a2 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a3 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a4 &#x3D; new byte[4 * Test._1MB];    &#x2F;&#x2F; 触发Minor GC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC[DefNew: 6816K-&gt;469K(9216K), 0.0055103 secs] 6816K-&gt;6613K(19456K), 0.0055674 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> def new generation   total 9216K, used 4893K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K,  54% used [0x00000000f9a00000, 0x00000000f9e51f90, 0x00000000fa200000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K,  45% used [0x00000000fa300000, 0x00000000fa375608, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> tenured generation   total 10240K, used 6144K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 10240K,  60% used [0x00000000fa400000, 0x00000000faa00030, 0x00000000faa00200, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> compacting perm gen  total 21248K, used 2570K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb082978, 0x00000000fb082a00, 0x00000000fc2c0000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">No shared spaces configured.</span></pre></td></tr></table></figure>

<p>日志分析：</p>
<p>发生了一次Minor GC。欲分配a4的空间时的内存区域状况为：Eden使用6816K(a1+a2+a3)，Survivor及老年代均未使用。此时Eden的剩余空间已不足以分配a4所需的4MB空间。因此触发该次Minor GC。因单个Survivor的大小为1MB，不足以容纳a1/a2/a3中的任何一个，因此触发老年代的担保机制，a1,a2,a3均直接进入老年代，新生代大小由6816K减为469K。而因为确实也无法回收什么东西，所以堆总使用空间(6816K-&gt;6613K)几乎没有变化。本次GC后，Eden空出了足以分配a4的空间并将a4分配入其中。</p>
<p>进程结束前的内存使用情况：Eden使用8192*0.54=4424用于存储a4。老年代使用6144K用于存储a1,a2,a3。</p>
<h1 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h1><p>所谓的大对象即是指占用大量内存空间的对象。典型的大对象就是那种很长的字符串或数组。大对象对内存分配而言是灾难：举一个极端的例子，Eden大小为10MB，而程序不断产生大小为15MB的大对象，因为Eden无法分配支撑15MB对象的空间(Survivor一般会比Eden小得多，更没可能)，因此这些对象会直接进入老年代。更遭的是，若这些对象又是朝生夕死的，则又需高频度的触发Major GC。因此我们在写程序时应尽可能的避免写大对象，更不要写朝生夕死的大对象。</p>
<p>但也只能是尽量，JVM显然不能规定程序员不能写大对象，也不能在程序员写了大对象后就无法优化。另一个角度来说，到底多大的对象算是大也难于界定。</p>
<p>对于Parallel Scavenge而言，会自动进行优化，无需程序员多操心。而对于Serial及ParNew而言，提供了PretenureSizeThreshold来作为直接晋升老年代对象的大小阀值。即大于该值的对象将直接在老年代分配。该值单位默认为B且无法修改。即设置晋升阀值大小1MB(1024*1024=1048576)为-XX:PretenureSizeThreshold=1048576。设置该值后可避免Eden及Survivor之间发生不必要的大对象复制。</p>
<p>举一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC -XX:PretenureSizeThreshold&#x3D;1048576</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设定直接晋升老年代的对象大小阀值为1MB</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a &#x3D; new byte[4 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> def new generation   total 9216K, used 835K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K,  10% used [0x00000000f9a00000, 0x00000000f9ad0fb8, 0x00000000fa200000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> tenured generation   total 10240K, used 4096K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 10240K,  40% used [0x00000000fa400000, 0x00000000fa800010, 0x00000000fa800200, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> compacting perm gen  total 21248K, used 2570K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb082920, 0x00000000fb082a00, 0x00000000fc2c0000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">No shared spaces configured.</span></pre></td></tr></table></figure>

<p>显然，尽管Eden的空间足够，a还是被直接分配进了老年代。</p>
<h1 id="长寿的对象进入老年代"><a href="#长寿的对象进入老年代" class="headerlink" title="长寿的对象进入老年代"></a>长寿的对象进入老年代</h1><p>按照基本理论，老年代只是一个保人，即只在Eden+一个Survivor的内容无法完全在GC后存入另一个Survivor时才会介入。</p>
<p>为了减少复制量，我们会直接让大对象进入老年代。同理，对于那些长寿的对象，即便Survivor空间足够，我们也没必要反复复制它们：因为挺过越多次GC的对象挺过即将到来的GC的概率越大。</p>
<p>对象初始年龄为0，每经过一次GC则年龄加1。-XX:MaxTenuringThreshold=?用于指定多大年龄的对象有资格晋升入老年代。默认值为15。特别的，若该值设定为0，对象仍需先尝试进入Eden，但在Eden已满时不会进入Survivor而会直接进入老年代。</p>
<p>举个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC -XX:MaxTenuringThreshold&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a1 &#x3D; new byte[Test._1MB &#x2F; 4];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a2 &#x3D; new byte[4 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a3 &#x3D; new byte[4 * Test._1MB];    &#x2F;&#x2F; 触发Minor GC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC[DefNew: 5188K-&gt;0K(9216K), 0.0033932 secs] 5188K-&gt;4821K(19456K), 0.0034431 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> def new generation   total 9216K, used 4178K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K,  51% used [0x00000000f9a00000, 0x00000000f9e14820, 0x00000000fa200000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> tenured generation   total 10240K, used 4821K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 10240K,  47% used [0x00000000fa400000, 0x00000000fa8b5660, 0x00000000fa8b5800, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> compacting perm gen  total 21248K, used 2570K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb082960, 0x00000000fb082a00, 0x00000000fc2c0000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">No shared spaces configured.</span></pre></td></tr></table></figure>

<p>分配a3前的内存分配状态：Eden占用5188K(a1+a2)，Survivor与老年代为空。此时Eden已不足以容纳a3，触发Minor GC。因晋升年龄的阀值为0，因此a1与a2全部进入老年代(即便Survivor可以容纳a1)。</p>
<p>程序退出时的内存分配状况：新生代使用4178K(a3)，Survivor为空，老年代使用4821K(a1+a2)。</p>
<p>对上例稍作修改，让-XX:MaxTenuringThreshold=1，则输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC[DefNew: 5024K-&gt;725K(9216K), 0.0041689 secs] 5024K-&gt;4821K(19456K), 0.0042235 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> def new generation   total 9216K, used 5149K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K,  54% used [0x00000000f9a00000, 0x00000000f9e51f90, 0x00000000fa200000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K,  70% used [0x00000000fa300000, 0x00000000fa3b5618, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> tenured generation   total 10240K, used 4096K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 10240K,  40% used [0x00000000fa400000, 0x00000000fa800010, 0x00000000fa800200, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> compacting perm gen  total 21248K, used 2570K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb082960, 0x00000000fb082a00, 0x00000000fc2c0000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">No shared spaces configured.</span></pre></td></tr></table></figure>

<p>显然，a1在GC后进入了Survivor中。</p>
<h1 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h1><p>若Survivor中相同年龄的对象大小总和大于单个Survivor大小总空间的一半，则年龄大于等于该值的对象都会晋升入老年代，而不必等待对象的年龄到达MaxTenuringThreshold。</p>
<h1 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h1><p>老年代的诞生目的是为年轻代作保，但是却没人为老年代作保，从而可能会导致担保失败(Handle Promotion Failure)。因此在进行内存分配时就有乐观与悲观之别。模拟一个情景：Eden已满，触发一次Minor GC。若当前老年代的可容空间能容纳新生代所有的对象，则老年代这个保人是绝对稳的，无论是乐观或悲观都可以进行GC。但是若无法完全容纳，则对于悲观的策略而言此次Minor GC就有可能失败，将直接转而触发Full GC清理全堆。对于乐观的策略而言，会继续检查老年代最大可用空间是否大于历次Minor GC晋升老年代大小的平均值，若小于，则即便是乐观的策略也无法再乐观下去了：将转而触发一次Full GC。若大于，尽管本次Minor GC有风险，依然会进行Minor GC，若不幸担保失败，则再触发一次Full GC。</p>
<p>开关-XX:+HandlePromotionFailure用于控制这个策略。开启为乐观策略，关闭为悲观策略。</p>
<p>在JDK1.6 Update 24之后，虽然-XX:+HandlePromotionFailure开关依然存在，但已然失效，系统默认为开关打开时的状态。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-垃圾收集</title>
    <url>/2017/10/26/JVM-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h1 id="垃圾收集的历史"><a href="#垃圾收集的历史" class="headerlink" title="垃圾收集的历史"></a>垃圾收集的历史</h1><p>垃圾收集(Garbage Collection, GC)的历史比Java要久远，只是因为近年来Java的高歌猛进让人们产生了一种”GC是Java的产物”的错觉。实际上1960年诞生于MIT的Lisp才是第一门使用内存动态分配及垃圾收集技术的语言。</p>
<a id="more"></a>

<h1 id="哪些区域需要进行GC？"><a href="#哪些区域需要进行GC？" class="headerlink" title="哪些区域需要进行GC？"></a>哪些区域需要进行GC？</h1><ul>
<li>程序计数器(Program Counter Register)：线程私有，小到不会抛出内存溢出异常，无需垃圾收集。</li>
<li>虚拟机栈(Virtual Machine Stack)：线程私有，栈中的元素为栈帧，一个栈帧代表线程调用的一个方法。栈帧的大小在编译期就已基本确定(运行期JIT可能会做出一些优化)，方法执行完成栈帧随之销毁，无需垃圾回收。</li>
<li>本地方法栈(Native Method Stack)：同虚拟机栈。</li>
<li>堆(Heap)：线程间共享。特定类型的对象的大小是固定的，然而编译期只能确定静态类型，实际类型要到运行期才能确定，因此对象的大小到运行期才能确定，即需要在运行时动态分配内存，需垃圾收集。</li>
<li>方法区(Method Area)：线程间共享。类的装载及卸载都是在运行期动态进行的，需垃圾收集。</li>
</ul>
<p>从广义上讲，JVM回收虚拟机栈及本地方法栈的内存也是垃圾收集，只是这部分收集的逻辑简单明了，无需一个复杂的机制来支撑。因此垃圾收集通常是指对运行时动态分配的那部分内存的回收。进而，内存动态分配与垃圾收集往往是成对出现的：内存动态分配迫使垃圾收集的复杂化。</p>
<h1 id="如何判断堆中的哪些对象是垃圾？"><a href="#如何判断堆中的哪些对象是垃圾？" class="headerlink" title="如何判断堆中的哪些对象是垃圾？"></a>如何判断堆中的哪些对象是垃圾？</h1><p>判断方法有2：</p>
<ul>
<li>引用计数算法(Reference Counting)</li>
<li>可达性分析算法(Reachability Analysis)</li>
</ul>
<p><strong>引用计数算法</strong></p>
<p>描述：给每个对象都配备一个引用计数器，每当有一个地方引用它，计数值加1。每当一个引用失效，计数值减1。任何时刻计数值为0的对象就是垃圾。</p>
<p>优点：简单粗暴，判断效率高。</p>
<p>使用案例：微软的COM(Component Object Model)技术，使用ActionScript3的FlashPlayer，Python，在游戏脚本领域被广泛应用的Squirrel。</p>
<p>缺点：难以解决对象间的相互循环引用问题。依对象间的引用关系我们可以将堆中的对象划分为复数张图。当某张图中只有一个点(即没有其他地方引用该对象)，本算法是可以正确判断其为垃圾的，但是若某张图中有复数个点，而这些点全部是垃圾，本算法就很难将这些点均正确判为垃圾。</p>
<p><strong>可达性分析算法</strong></p>
<p>主流的JVM(C#及Lisp等主流商用程序语言也多采用本算法)均采用本算法来判断堆中的垃圾对象。</p>
<p>既然引用计数算法的缺陷在于某张图中有复数个点，且这些点全部为垃圾时难以判断，那么可达性分析算法就人为的设定几个”带头大哥”，告诉JVM没有带头大哥存在的图中的点均为垃圾。即带头大哥不可达的点是垃圾。</p>
<p>这些带头大哥被称为GC Root，GC Root在搜索点时所走过的路径被称为引用链(Reference Chain)。</p>
<p>那么如何筛选带头大哥呢？首要标准自然就是正在被使用着的对象，再次浏览JVM所管理的内存区域：</p>
<ul>
<li>程序计数器(Program Counter Register)：没有对象引用，不会存在带头大哥。</li>
<li>虚拟机栈(Virtual Machine Stack)：栈帧的本地变量表(执行上下文)中引用的对象为带头大哥。</li>
<li>本地方法栈(Native Method Stack)：JNI(Java Native Interface，即Native方法)引用的对象为带头大哥。</li>
<li>堆(Heap)：欲被回收的区域，无法筛选出带头大哥。</li>
<li>方法区(Method Area)：常量或类静态属性(全局性引用)引用的对象为带头大哥。</li>
</ul>
<p>例如，如下代码中对象a,b相互持有对方的引用，随后将a，b引用的位置置为空(即中断对象与GC ROOT间的可达性联系)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Test reference &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 占据2MB空间。使垃圾收集的效果更为明显</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private byte[] bigSize &#x3D; new byte[2 * 1024 * 1024];</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -XX:+PrintGCDetails</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test a &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test b &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a.reference &#x3D; b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b.reference &#x3D; a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        b &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC [PSYoungGen: 5427K-&gt;536K(38400K)] 5427K-&gt;536K(124416K), 0.0090463 secs] [Times: user&#x3D;0.05 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC [PSYoungGen: 536K-&gt;0K(38400K)] [ParOldGen: 0K-&gt;468K(86016K)] 536K-&gt;468K(124416K) [PSPermGen: 2563K-&gt;2562K(21504K)], 0.0120810 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> PSYoungGen      total 38400K, used 998K [0x00000007d5d00000, 0x00000007d8780000, 0x0000000800000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 33280K, 3% used [0x00000007d5d00000,0x00000007d5df9a60,0x00000007d7d80000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 5120K, 0% used [0x00000007d7d80000,0x00000007d7d80000,0x00000007d8280000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 5120K, 0% used [0x00000007d8280000,0x00000007d8280000,0x00000007d8780000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ParOldGen       total 86016K, used 468K [0x0000000781800000, 0x0000000786c00000, 0x00000007d5d00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  object space 86016K, 0% used [0x0000000781800000,0x0000000781875228,0x0000000786c00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> PSPermGen       total 21504K, used 2569K [0x000000077c600000, 0x000000077db00000, 0x0000000781800000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  object space 21504K, 11% used [0x000000077c600000,0x000000077c8826b8,0x000000077db00000)</span></pre></td></tr></table></figure>

<p>很明显，GC前本来是存在于年轻代的大小合计大概是4MB的两个对象已被GC回收。</p>
<p><strong>建立对象间的联系：引用</strong></p>
<p>无论是引用计数算法亦或是可达性分析算法，都以对象为点连接成图。而进行连接的线即为引用。</p>
<p>在JDK1.1时，Java中关于引用的定义传统而又纯粹：若某内存区域中存储的数值代表另一块内存区域的起始地址，则这块内存区域代表着一个引用，其类型为引用类型。这种定义下，从引用关系的角度划分，对象的身份只有两个：引用者及被引用者。我们无法建立更为复杂的引用关系，例如：某些引用关系虽然并非是没有，但是并没有那么重要。即当内存充足时，该引用代表一个正常的引用。当内存吃紧时，该引用可以忽略。</p>
<p>因此，从JDK1.2起，Java将引用的概念扩充为4种，强度从强至弱依次为：</p>
<ol>
<li><strong>强引用(Strong Reference)</strong>：即为JDK1.1中的传统意义上的引用。程序中绝大多数的引用(诸如Object o = new Object())均是强引用。垃圾收集器绝不会收集通过强引用可达GC ROOT的对象。</li>
<li><strong>软引用(Soft Reference)</strong>：使用SoftReference类实现。该引用即为前文”例如”所描述的那种引用：当某次垃圾收集后内存依然不够用，会进行第二次垃圾收集，此次收集将无视软引用。</li>
<li><strong>弱引用(Weak Reference)</strong>：使用WeakReference类实现。也就是所谓的”消耗性引用”：经过一次垃圾收集后，该引用即失效。</li>
<li><strong>虚引用(Phantom Reference)</strong>：使用PhantomReference类实现。又名幽灵引用或幻影引用。该引用并不是一个真正的引用，也无法在可达性计算中发挥任何作用，其存在价值仅仅为对象被回收后能发出一个系统通知。</li>
</ol>
<h1 id="对象逃避被回收的手段"><a href="#对象逃避被回收的手段" class="headerlink" title="对象逃避被回收的手段"></a>对象逃避被回收的手段</h1><p>通过可达性分析算法被标记为垃圾的对象仅仅只是被打上了一个垃圾的标记，并没有真正的被回收。在垃圾收集器真正动手之前，该对象还有最后一次死里逃生的机会：若对象重写了finalize()方法且该实例方法并未被调用过，则该对象会被放置到一个叫F-Queue的队列中。JVM会在合适的时机自动创建一个低优先级的Finalizer线程执行F-Queue队列中的方法。为了避免因finalize()方法执行得过慢甚至于死循环导致F-Queue中后续的方法无法执行甚至内存回收系统的崩溃，JVM并不承诺一定会等待finalize()方法执行完成，一旦超过其容忍限度JVM会强制终止方法的运行。</p>
<p>之所以说finalize()是对象最后一次死里逃生的机会，是因为对象可以在其finalize()方法中重新与GC ROOT建立可达性关系。垃圾收集器会对F-Queue中已执行完finalize()的对象重新进行可达性标记，若此时对象成功的与GC ROOT建立了可达性联系，则可逃脱被回收的命运。</p>
<p>因为每个对象的finalize()方法最多只会被JVM调用一次，因此这种自救机会最多也只有一次。</p>
<p>下面是一个被标记为垃圾的对象自救的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 垃圾对象与GC ROOT之间重新建立可达性联系的救命稻草</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Test STRAW;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void finalize() throws Throwable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.finalize();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;finalize() 被调用&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.STRAW &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.STRAW &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.STRAW &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(500);    &#x2F;&#x2F; 确保finalize()执行完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; Test.STRAW) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;垃圾对象被回收&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;垃圾对象未被回收&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 完全相同的代码。但test无法再次通过finalize()自救了</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.STRAW &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.gc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(500);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; Test.STRAW) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;垃圾对象被回收&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;垃圾对象未被回收&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">finalize() 被调用</span></pre></td></tr><tr><td class="code"><pre><span class="line">垃圾对象未被回收</span></pre></td></tr><tr><td class="code"><pre><span class="line">垃圾对象被回收</span></pre></td></tr></table></figure>

<p>值得特别说明的是，虽然上例中使用finalize()方法进行自救弥漫着悲壮的艺术色彩，但是却并不推荐大家在程序中使用finalize()方法。最好能在写代码时忘记这个方法。finalize()方法是Java在诞生之初为了照顾C/C++程序员而做出的妥协(人之常情，不是自己所习惯的就会下意识的认为是不对的)，它其实是没必要存在的，运行代价高昂且结果具有不确定性，使用try-finally可以做得更好。</p>
<h1 id="如何判断方法区中哪些数据是垃圾？"><a href="#如何判断方法区中哪些数据是垃圾？" class="headerlink" title="如何判断方法区中哪些数据是垃圾？"></a>如何判断方法区中哪些数据是垃圾？</h1><p>JVM规范中并没有明确指明方法区的实现方式及是否需要进行垃圾收集。本文讨论的方法区为HotSpot VM在JDK1.7及此前的版本：方法区是以永久代的方式实现的，会进行垃圾收集。</p>
<p>在方法区中进行垃圾收集的性价比通常较低：在堆中，尤其是在新生代中，常规应用进行一次垃圾收集通常可以回收70%~95%的空间，而永久代的垃圾收集效率远低于此。</p>
<p>永久代的垃圾收集主要回收两部分内容：</p>
<ul>
<li><strong>废弃常量</strong>:类似于回收堆中的对象。以JDK1.6的字符串常量为例(此时字符串常量池尚在方法区中，它是在JDK1.7时被移至堆中的)，假设当前字符串常量池中有字符串”八云紫”，但是此时系统中已没有任何一个String型的变量引用该常量值。如果发生内存回收，且有必要的话，该常量值即会被从字符串常量池中清除。其他的符号引用类似。</li>
<li><strong>无用的类</strong>:同时满足如下3个条件可称之为”无用的类”：1.堆中不存在该类的实例。2.加载该类的ClassLoader已被回收。3.该类对应的Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。注意即便同时满足这3个条件也仅仅只是被标记为了无用的类。并非必然会因此被清理。类的回收条件较之堆中的对象及方法区中的常量要苛刻得多。</li>
</ul>
<h1 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h1><p><strong>标记-清除算法</strong></p>
<p>标记-清除(Mark-Sweep)算法是最基础的垃圾收集算法。如其名称所示，算法分为标记及清除两步：</p>
<ul>
<li><strong>标记</strong>:扫描所有可能存在垃圾的区域(即上文所总结出的堆及方法区)并标记出其中的垃圾</li>
<li><strong>清除</strong>:待标记完成后，统一回收垃圾</li>
</ul>
<p>如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/0.jpg" alt="0.jpg"></p>
<p>其不足主要体现为两点：</p>
<ol>
<li>效率低下：每次垃圾回收都需要扫描所有可能产生垃圾的内存区域，且清理时需要跳跃式的一小块一小块的清理</li>
<li>会产生内存碎片</li>
</ol>
<p><strong>复制算法</strong></p>
<p>以堆为例，复制(Copying)算法：将堆分为了相等的两块(不妨命名为区域1及区域2)。每次只使用其中的一块。</p>
<p>不妨模拟一种情境：区域1正在使用，区域2闲置。当区域1装满后:</p>
<ol>
<li>标记区域1中的垃圾</li>
<li>将区域1中仍存活的对象复制到区域2</li>
<li>将区域1清空</li>
</ol>
<p>进行完上述3步后，区域1及区域2的功能发生了交换：区域2变为了正在使用的区域，区域1闲置。并一直循环下去。</p>
<p>较之标记清除算法，复制算法的改进为：</p>
<ul>
<li>效率有所提升，清理时直接将某一区域清空即可，简单高效</li>
<li>不会产生内存碎片：复制后的对象仍然是紧密相邻的</li>
</ul>
<p>但是复制算法的缺点也是致命的：可用内存缩小为了原来的一半。</p>
<p><strong>改进的复制算法</strong></p>
<p>IBM公司的研究表明，正常的应用中98%的对象都是朝生夕死，即出生后基本连一次垃圾收集都挺不住。因此其实在复制算法中，闲置的区域通常并不需要一半那么大(这其实是最坏的情况，某区域满了且进行垃圾收集后什么都没清理掉)，每次清理后通常只有极为少量的对象能幸存下来。</p>
<p>基于此，可对复制算法的内存划分做出调整，整体上划分为如下两个区域：</p>
<ul>
<li><strong>Eden区</strong>:语源为圣经中的伊甸园，即对象诞生的地方</li>
<li><strong>Survivor区</strong>:幸存者区，即挺过至少一次垃圾收集后的幸存对象所处的区域。其承担了复制算法原有的复制功能，因此又将其分为相等的两块(不妨仍以区域1及区域2命名)。每次仅使用其中一块。</li>
</ul>
<p>结合上文IBM公司的研究结果，显然，Eden要远大于Survivor才合理。HotSpot VM中Eden与Survivor的默认比例为8:2。而Survivor又要分为均等的两份，因此堆被划分为了8:1:1 3小份。</p>
<p>举一个具体的例子：初始时堆中为空。而后新创建的对象被加入Eden。当Eden被装满后，触发垃圾收集，将Eden中经过本次垃圾收集后依然存活的对象加入Survivor的区域1。而后清空Eden。这样新创建的对象又可以进入Eden，当Eden第二次装满后将再次触发垃圾收集，此时的收集区域为Eden及Survivor的区域1，而后将这两个区域中经过本次垃圾收集依然存活的对象加入Survivor的区域2。而后清空Eden及Survivor的区域1。此时Survivor的区域1及区域2的功能发生了互换，随后重复这个步骤。</p>
<p>改进的复制算法极大的弥补了普通的复制算法的缺陷：浪费的内存从50%下降为了10%，通常来说这已经是一个可接受的值了。</p>
<p>但是改进是有前提的：即90%的内存空间在经过垃圾收集后所幸存的对象应能被10%的内存空间所容纳。根据IBM公司的研究，通常情况下这是没问题的。但是若不是通常情况呢？此时明明尚有大量的内存空间(90%的区域)，却无法创建新的对象了。</p>
<p>举个现实中的例子，一个信誉良好的人是可以凭其信誉向银行贷款的，因为通常情况下该人具备还款能力。但如果不是通常情况呢？银行为了减少损失，往往需要贷款人提供担保，要么是担保人，要么是抵押物。总之就是在贷款人无法还款时担保应顶上。</p>
<p>JVM采取的也是类似的机制，名为分配担保(Handle Promotion)。因此此前我们说到的8:1:1的这块空间的内部结构不变，但不再占据所有的堆空间了，而将其统一命名为新生代(young generation)。相对的，它的保人被称为老年代(old/tenured generation)，Minor GC后将按优先顺序(主要是依据年龄)把Survivor无法容纳的对象移入老年代。</p>
<p>HotSpot VM在默认情况下新生代与老年代的比例为1:2(因为保人的实力自然应该雄厚一些)。</p>
<p>除了保人制度外，引入新生代与老年代的划分还可将垃圾收集进行细化，即分代收集(Generational Collection)。从概率论的角度来说，两个对象o1及o2，o1经过了m次垃圾收集依然幸存，而o2经过了n次垃圾收集依然幸存。若有m大于n，即在下一次垃圾收集到来时，o1依然存活的概率应比o2大，其大的幅度将与m大于n的幅度成正相关。</p>
<p>举一个实际的例子，文学作品中的妖怪往往是越长寿的越强力。这种描述其实颠倒了因果关系：不是因为长寿导致了强力，而是因为足够强力的妖怪才不容易死，长寿的可能才更大。所以实际上强力才是因，而长寿为果。</p>
<p>类比到垃圾收集机制中，若将对象看作上例中的”妖怪”，每经过一次垃圾收集看作涨了一岁(其实更像是在渡劫)，那么很显然若有两个对象，其一很长寿，其二刚诞生，那么在下一次垃圾收集到来时，自然是已经很长寿的对象活下去的概率更大。</p>
<p>因此，从效果最大化的角度来看(即每次垃圾收集时可收集的内存占扫描总内存的比例应尽可能的高)。对于新生代中对象的收集应频繁一些，这被称为Minor GC。而对老年代中的长寿对象的收集的频率应低一些，这被称为Major GC。</p>
<p>还有一个名词名为Full GC。指得是清理整个堆空间—包括年轻代和老年代。但Major GC之前往往(注意仅是往往，Parallel架构的收集器就有直接只进行Major GC的策略)都会进行至少一次的Minor GC，因此通常二者是相连的，所以多数情况下我们会将Full GC与Major GC视为同一个概念。</p>
<p>除了堆区外，Full GC还会顺带收集方法区。</p>
<p>模拟一个情境。Eden已满，触发Minor GC，幸存的对象超过了Survivor一个区的容纳能力，则按长者优先的原则将无法容纳的对象加入老年代。若此时老年代也已满，则触发Major GC回收老年代的空间。</p>
<p>除了Survivor无法容纳以外，对象还可以其他方式进入老年代：</p>
<ul>
<li>足够长寿了。即使Survivor空间足够，反复试图收集那些足够长寿的对象也是在浪费时间。倒不如直接将它们移入老年代。HotSpot VM进入老年代的默认年龄为15岁</li>
<li>大对象。Survivor毕竟是一块较小的内存，因此占用内存空间巨大的大对象并不会进入Survivor，而是直接进入老年代</li>
</ul>
<p><strong>标记-整理算法</strong></p>
<p>改进的复制算法采用老年代作为保人，其内存空间不足时会触发Major GC回收老年代的空间。那么具体的回收算法是什么呢？当然不能再是改进的复制算法了，因为采用该算法的话就要再整出个老老年代来作为老年代的保人，系统将变得更为复杂，且这种复杂是不值得的：老年代的回收频率本就不高。但是采用普通的复制算法其缺陷又过于明显：浪费了一半的空间不说，老年代的回收效率不高导致每次都需要复制大量的对象。</p>
<p>因此老年代可采用标记-清除算法，为避免其缺陷基于其又改进出了标记-整理(Mark-Compact)算法。其中标记与标记-清除算法相同。随后的整理则会将所有的存活对象向一端移动。而后清理掉后端边界以外的内存。这样便避免了内存碎片问题。</p>
<h1 id="Stop-The-World"><a href="#Stop-The-World" class="headerlink" title="Stop The World"></a>Stop The World</h1><p>所谓Stop The World(下文简称STW)即是指垃圾收集过程中停顿所有的除垃圾收集线程以外的一切线程：正如其字面意思所述，整个世界都静止了，只有垃圾收集线程在活动。</p>
<p>STW是必要的，因为垃圾收集器在分析垃圾时必须要在一个能保证一致性的快照中进行：这个快照中对象的引用关系不能在分析的过程中发生变化，否则分析结果的准确性就无从保证。</p>
<p>但STW的缺陷又是致命的。用户程序将会被强制的中断以等待垃圾收集的完成，在响应时间要求较高的场景里有时这种停顿是不可接受的。</p>
<p>为此，垃圾收集器的一个重要使命就是尽量的减少STW对用户程序的干扰，但是直至现在，所有的垃圾收集器(无论是新生代的，老年代的，抑或是不分代的)都无法完全消除STW，即便是号称几乎不会发生停顿的CMS也仅仅只能说是”几乎”，其在初始标记及重新标记时也必须STW。</p>
<p><strong>oopMap</strong></p>
<p>既然无法避免STW，那么只能让这个时间尽可能的短。而缩短这一时间的有效手段之一就是尽可能的减小搜索范围。这也是JVM采用准确式GC的原因。所谓准确式GC即是指垃圾收集器可以明确知道某块内存区域中到底是引用还是实际值。这样在枚举根节点时就可以不用搜索非引用的内存区域。</p>
<p>准确式GC依托于准确式内存管理(Exact Memory Management)。所谓准确式内存管理即是指JVM可以明确知道某内存空间存储的数据的类型是什么。例如可明确知道123456究竟是代表一个整数值还是一个引用的地址值。</p>
<p>HotSpot使用oopMap这个数据结构来实现准确式内存管理的功能。oopMap中存储了执行到某条指令时内存中各变量的类型。</p>
<p><strong>安全点</strong></p>
<p>为每一条指令都生成一个oopMap是最简单的方法：这样仅从枚举根节点的角度来看，线程就可以断在任意一条指令上。但是需要生成大量的oopMap，占用大量的额外空间。</p>
<p>因此，HotSpot VM只会为特定的指令生成oopMap，这些指令所处的位置被称为安全点(Safepoint)。当程序需要进行垃圾收集时，非垃圾收集线程只能在安全点上停顿(因为只能在安全点上枚举根节点。严格来说，不包括正在执行native代码的用户线程，因为native代码一般不会改变Java对象间的引用关系，因此没有必要特意挂起它们。只要保证在GC的过程中不让它们从native方法中离开即可。若需要读取oopMap从上一个安全点处读取即可)。</p>
<p>关于安全点的设置需要满足一个平衡：既不能因设置得过多而占用过大的额外内存，也不能因设置得过少而导致GC线程等待过久。选取的要点为两个安全点之间为一个相对完整的小模块，即：</p>
<ol>
<li>循环的末尾</li>
<li>方法临返回前或调用方法的call指令后</li>
<li>可能抛异常的位置</li>
</ol>
<p>为确保STW发生时非垃圾收集线程都在安全点上，可采取的策略有两种：</p>
<ul>
<li><strong>抢先式中断(Preemptive Suspension)</strong>:中断所有非垃圾收集线程，若发现某个线程未中断在安全点上则恢复线程，让其跑到安全点上后再次中断。</li>
<li><strong>主动式中断(Voluntary Suspension)</strong>：欲STW时将中断标志设为true。各非垃圾收集线程在运行时会主动去轮询这个标志。当发现其为true后即中断自身。轮询的位置为创建对象分配内存时及各安全点处。</li>
</ul>
<p>HotSpot VM采用主动式中断(现在几乎已经没有JVM采用抢先式中断了)。</p>
<p><strong>安全区域</strong></p>
<p>使用安全点进入STW有一个前提条件：即非垃圾收集线程是能”跑”的(已获得CPU的)，若设置了中断标志后线程正处于wait,block等状态，那么它就不能跑到最近的安全点上，让GC等待其获得CPU显然是不合理的。</p>
<p>为此引入了安全区域(Safe Region)。安全区域是指这样的一段代码：在该段代码内部，引用关系不会发生变化(因此，调用native方法的过程也会被定义为安全区域)。即只要线程没有离开安全区域，在其内部任意位置开始GC都是安全的。安全区域可以视为安全点的扩展。</p>
<p>总结一下的话，安全区域可以是：</p>
<ul>
<li>线程无法移动的区域(wait,block)</li>
<li>线程可移动，但是线程的运行不会影响引用关系(这种情况的可能性较小)</li>
</ul>
<p>当线程进入安全区域时，会为自身打上已经入安全区域的标志。这样GC就不必在意在安全区域中的线程了，也无须强制要求其中断。只是，当线程欲离开安全区域时，必须查看系统是否正处于STW中，若正处于STW中，则必须等待系统退出STW才能向下运行。</p>
<h1 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h1><p>垃圾收集器是对上文所讨论的垃圾收集算法的具体实现。JVM规范中并未对垃圾收集器的实现细节做任何规定，因此各厂商的各代JVM之间的垃圾收集器均有较大的差异。本文讨论的垃圾收集器是JDK1.7中HotSpot VM所实现的垃圾收集器。其提供了多个垃圾收集器供使用者依需求组合使用，如下图所示：</p>
<p><img src="/images/blog_pic/JVM/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/1.png" alt="1.png"></p>
<p>图中两个垃圾收集器间若存在连线则证明可以组合使用。</p>
<p>顺带一提，JDK1.7，JDK1.8及JDK1.9中的默认垃圾收集器分别为：</p>
<ul>
<li>JDK1.7 : Parallel Scavenge + Parallel Old</li>
<li>JDK1.8 : Parallel Scavenge + Parallel Old</li>
<li>JDK1.9 : G1</li>
</ul>
<p><strong>Serial</strong></p>
<p>最基本，发展历史最为悠久的新生代收集器。在JDK1.3.1之前，是唯一的新生代收集器。</p>
<p>如其名”串行的”所示，这是一个单线程收集器。整个GC过程将仅使用一个线程完成，采用的算法为改进的复制算法，在整个GC期间都需要STW。</p>
<p>Serial的缺点很明显：单线程无法利用多CPU的并发计算能力，全程STW，停顿时间过长。但是在JDK1.7中其依然是Clinet模式下的默认新生代垃圾收集器。原因就在于在单线程的环境下其实现简单高效，且在用户的桌面应用场景中，分配给JVM的内存通常不会太大，其中新生代通常也就在几十兆到几百兆之间，使用Serial收集器的停顿时间基本都能控制在几十毫秒至多两百毫秒之内，这个停顿时间通常都是可接受的。</p>
<p><strong>Parallel New</strong></p>
<p>Parallel New(后文简称为ParNew)是Serial的多线程版本。除了使用多线程完成GC过程以外，其余部分可认为与Serial一样(实际上二者确实也共用了相当多的代码)，采用的算法为改进的复制算法，GC依然全程STW。</p>
<p>在单CPU环境中ParNew往往是不如Serial的，而在并发环境中，ParNew较之Serial会有所提升，这与所有串行代码及其被改造为的并行代码的比较结论相同。默认情况下，ParNew开启的线程数与系统可用的CPU数相等。</p>
<p>由上文的收集器关系图可知，老年代收集器CMS只能与Serial或ParNew配合使用，所以在并发环境下，如果老年代选择CMS，则新生代的最优选择只能为ParNew。事实上，使用-XX:+UseConcMarkSweepGC指定CMS为老年代收集器后，新生代收集器自动的就会被指定为ParNew。</p>
<p><strong>Parallel Scavenge</strong></p>
<p>Parallel Scavenge(并发清理，下文简称为PS)如其名所示，是一个多线程的新生代收集器。其与其他的所有垃圾收集器的目标均不相同。</p>
<p>大多数的垃圾收集器的目标在于降低STW的停顿时间，或者具体来说，减少用户在使用时的卡顿感。而PS的目标在于提高系统的吞吐量，因此PS收集器又名吞吐量优先收集器。</p>
<p>所谓吞吐量(Throughput)即是指CPU运行用户代码的时间与CPU消耗的总时间的比值，其概念类似于内燃机中的有效功率。</p>
<p>举个例子，假设在100秒内有两种系统运行状况：</p>
<ol>
<li>系统停顿了1次用于GC，这1次停了10秒。其余时间都在运行用户程序，则这100秒的吞吐量为0.9。</li>
<li>系统停顿了200次用于GC，每次0.1秒，合计停顿了20秒。其余时间都在运行用户程序，则这100秒内的吞吐量为0.8。</li>
</ol>
<p>以停顿时间为优化目标的收集器会认为情况2更优。而以吞吐量为优化目标的收集器会认为情况1更优。</p>
<p>PS提供了-XX:MaxGCPauseMillis参数来设置最大的单次停顿时间。这是一个大于0的整数值，代表最大的停顿毫秒值。JVM将尽量保证单次GC时间不超过该值。这里的注意点有2：</p>
<ol>
<li>注意这仅仅是尽量。</li>
<li>如上例所示，减少停顿往往是以牺牲吞吐量为代价的。另外可行的策略还有减小新生代的大小(需扫描的总空间小了收集自然快了)。</li>
</ol>
<p>PS提供了-XX:GCTimeRatio参数用以精确控制吞吐量。该值是一个取值范围在(0,100)之间的整数。GC收集时间默认为1，非GC时间为该参数值。即若该值=2，则GC最多占总时间的1/3。默认该值为99，即GC最多占总时间的1/100。</p>
<p>PS提供了GC自适应的调节策略(GC Ergonomics)。用开关参数-XX:+UseAdaptiveSizePolicy开启。开启该参数后，只需要指定基本的参数(例如最大堆-Xmx)即可。其他小区域上的参数，例如新生代的大小-Xmn，新生代中Eden与一个Survivor的比例-XX:SurvivorRatio，晋升老年代的对象大小-XX:PretenureSizeThreshold等均无需手动设置，JVM会根据系统当前的运行情况做出动态的调整。</p>
<p><strong>Serial Old</strong></p>
<p>与Serial所配对的单线程的，基于标记-整理算法的老年代收集器。</p>
<p>类似于Serial的原因，Serial Old主要在Client模式下使用。</p>
<p>而在Server模式下，其用途主要有以下两点：</p>
<ul>
<li>在JDK1.5及此前的版本，与PS配合使用(可以这样想，PS NTR 了Serial)：与PS所配对的老年代收集器Parallel Old诞生于JDK1.6。换言之，在JDK1.5及此前的版本，PS并没有与之配对的老年代收集器。此时PS使用其自带的PS MarkSweep(MSC)进行老年代垃圾的收集。该收集器与Serial Old的实现非常接近，因此在官方的资料中往往也会以Serial Old来代指PS MarkSweep。</li>
<li>使用CMS作为老年代收集器时，若其在并发收集的过程中发生了Concurrent Mode Failure，则Serial Old会作为后备收集器被使用。</li>
</ul>
<p><strong>Parallel Old</strong></p>
<p>与PS所配对的多线程的，基于标记-整理算法的，诞生于JDK1.6的老年代收集器。</p>
<p>在Parallel Old诞生之前，PS只能与Serial Old(PS MarkSweep,MSC)配合使用，这就导致了很尴尬的局面：新生代以多线程收集，老年代以单线程收集。单线程环境中PS收集器拖累了Serial Old，而并发环境中Serial Old又拖累了PS。而且PS以吞吐量为优化目标，Serial Old以缩短STW为优化目标，二者的追求也不同。换句话说，NTR虽然很爽，但终究不伦不类，没有原配和谐：PS+Serial Old在单线程环境中不如Serial+Serial Old，在并发环境中不如ParNew+CMS。</p>
<p>PS+Parallel Old是吞吐量优先的程序的最优选择。</p>
<p><strong>Concurrent Mark Sweep</strong></p>
<p>Concurrent Mark Sweep(后文简称为CMS)是一种多线程的老年代收集器。</p>
<p>CMS基于标记-清除算法，为了最大限度的减少STW的时间，其将”标记”与”清除”又细化为如下4步。核心思想就是能并发着做的就尽量并发着做。</p>
<ol>
<li><strong>初始标记(CMS initial mark)</strong>：必须STW，只标记GC ROOT能直接关联的对象，相当于稍微扩大一下搜索的范围，因此该步速度很快。</li>
<li><strong>并发标记(CMS concurrent mark)</strong>：无需STW。根据可达性分析算法从GC ROOT开始完成对象的标记，在此期间用户程序可正常运行。</li>
<li><strong>重新标记(CMS remark)</strong>：必须STW。对并发标记过程中因用户线程活动导致的标记错误进行修正。很显然，这是一种乐观的加锁思维。若用户线程在并发标记阶段对标记的影响很小，那么重新标记很快就可完成。反之重新标记就可能会花费很长的时间。</li>
<li><strong>并发清除(CMS concurrent sweep)</strong>：无需STW。在此期间用户程序可正常运行。这也是为什么CMS使用标记清除算法而非标记整理算法的原因：因为清除的过程中用户程序还在并行运行，因此不能移动对象。</li>
</ol>
<p>除非特别的不幸，否则可并行的时间(并发标记+并发清除)是远大于必须STW的时间(初始标记+重新标记)的。因此总体来说，STW对用户程序的影响下降到了一个非常低的程度，故而CMS又被称为并发低停顿收集器(Concurrent Low Pause Collector)。目前很大一部分的Java应用集中在互联网站或B/S架构的Server端上，这类程序对服务响应时间非常敏感，因此对它们而言CMS是非常友好的。</p>
<p>当然，为了”减少STW”这一优化目标，CMS也付出了不小的代价：</p>
<ul>
<li>虽然CMS会保证用户程序在GC期间尽可能的始终处于运行状态，但是终究无法运行得那么舒服：毕竟还要分出CPU资源来执行GC。默认情况下CMS创建的用于GC的线程数为(CPU数+3)/4的下取整。即若是在单CPU环境下用户依然相当于被完全的STW了，而在CPU较少时，例如只有2个，此时GC和用户程序各占用一个CPU，用户程序能利用的CPU资源直接减半。曾产生过这样的解决方案：增量式并发收集器(Incremental Concurrent Mark Sweep，简称为i-CMS)。类似于操作系统使用时间片轮转等抢占式机制在单CPU中模拟多任务环境，在并发标记及并发清除时垃圾收集线程无法完全独占CPU，从而尽量提高用户程序所能掌控的CPU资源。但是效果却不太理想：该机制延长了垃圾收集时间，例如独占一个CPU的情况下并发GC操作需要1毫秒，若采用交替执行的方式平均向两个线程分配CPU，并发GC操作所需的时间并非2毫秒，而是一个更大的值：因为线程的切换与恢复也需耗费CPU时间。因此JDK1.7中，i-CMS已被标记为deprecated，即不推荐开发人员使用。</li>
<li>无法处理浮动垃圾(Floating Garbage)。并发运行期间用户程序仍然可能产生新的垃圾，若重新标记动作已过，CMS就无法在本次GC中收集这部分垃圾而只能推迟至下一次。这一部分垃圾就被称为浮动垃圾。</li>
<li>垃圾收集动作提前。因为GC过程中用户程序尚在运行，那么在没有发生STW的并发运行期间CMS就必须为用户线程预留出足够的内存。其他老年代收集器可在老年代将满时才触发GC，而CMS必须将GC动作提前。JDK1.5中CMS在老年代使用68%时即触发GC，而到了JDK1.6中这个值已提升为92%。可通过-XX:CMSInitiatingOccupancyFraction参数手动设置该值。</li>
<li>可能出现Concurrent Mode Failure。CMS收集GC的阀值设置得过低会导致垃圾收集过于频繁，设置得过高又容易导致用户线程在GC期间的内存不足。无论该值设置为多大都只是一个经验值，且只要不是0，就无法完全确保用户线程的内存供应：即发生Concurrent Mode Failure。此时CMS将启动备用方案：对于本次GC而言，后续垃圾的收集将由Serial Old完成。显然，这是一个乐观锁的并发控制策略：先依经验设置一个GC阀值，而后乐观的认为不会或只会导致很少的Concurrent Mode Failure。若符合预期则性能不会受到太大的影响。若不符合预期性能会大幅下降。</li>
<li>CMS采用的算法为标记-清除。这意味着CMS会产生内存碎片。为解决(或者说是缓解)这个问题，CMS提供了开关参数-XX:+UseCMSCompactAtFullCollection用于在因内存碎片而不得不产生新一次的Full GC之前允许进行压缩，默认该开关是打开的。CMS还提供了另一个参数-XX:CMSFullGCsBeforeCompaction用于控制压缩频率，这是一个自然数值，即每隔多少次不压缩的GC之后跟着一次压缩的GC。默认值为0，即每次GC后都需进行压缩。这样就完全避免了内存碎片问题，但每次GC的运行时间也不得不增长。</li>
</ul>
<p><strong>Garbage-First</strong></p>
<p>Garbage-First(后文简称G1)管理下的堆的内存结构与其他垃圾收集器均有较大的差异，虽然逻辑上依然有新生代和老年代的概念，但是这两个区域不再在物理上隔离。在物理上，G1将堆划分为了多个大小相等的独立区域(Region)，新生代和老年代实际上是由一个个不连续的Region拼接而成的逻辑概念。因此，和其他所有的垃圾收集器都不同，G1可以收集整个堆的垃圾，而不仅仅是只有新生代或老年代。</p>
<p>G1是一款面向服务端应用的垃圾收集器。JDK1.6 6u14提供了G1的Early Access版本供开发人员体验，G1的这种Experimental状态持续了数年的时间直至JDK1.7 7u4才移除变为商用正式版。Sun期望其在未来能取代JDK1.5时诞生的CMS(Sun的继任者Oracle完成了这一点，JDK1.9的默认垃圾收集器已经变为了G1)。</p>
<p>G1的核心特点如下：</p>
<ul>
<li>G1以和CMS类似的策略实现了与CMS类似的缩短STW的功能。所不同的是CMS只能在老年代降低停顿，而G1将这个福利扩展为全堆。</li>
<li>G1在逻辑上依然分为新生代及老年代，且对新生代及老年代中的对象有不同的收集策略。</li>
<li>从整体上看，G1采用标记-整理算法。从局部来看(两个Region之间)，G1采用标记-复制算法。因此，无论是从整理上还是局部上，G1都不会产生内存碎片。</li>
<li>除了尽可能的降低STW之外，G1还能建立可预测的停顿时间模型：能让使用者明确指定在一个长度为M毫秒的时间片段内，消耗在GC上的时间不超过N毫秒。</li>
</ul>
<p>在物理层面上不区分新生代与老年代并没有增大每次GC所需扫描的内存区域，恰恰相反，G1还采用化整为零的思想大幅减少了每次GC需扫描的内存区域。这也是G1能建立可预测的停顿时间模型的原因。G1根据已获得的统计数据(每次回收获得的空间大小及所需时间等)预估出各Region的回收收益，并将其按回收收益由高至低排序维护一个优先列表。根据用户指定的停顿时间，选择出回收收益最大的区域组合(这也是Garbage-First这一名称的由来)。</p>
<p>G1之外的收集器在物理上将堆划分为了彼此隔离的新生代及老年代，表面上来说各收集器仅仅只需要扫描自己负责的区域即可。但是实现上却并非能这么简单：若新生代的某对象是通过老年代的某对象而被加入GC ROOT的引用链，那么起码必须要扫描到老年代中的那个对象才能保证标记的准确。而G1的矛盾则更为突出，因为其将堆在物理上划分为了远多于两个的Region，将需扫描的区域限定在一个Region之内更为困难。所有收集器都使用一个名为Remembered Set的数据结构来避免不必要的扫描。每个物理上隔离的区域都维护一份属于自身的Remembered Set。每当对对象的引用类型字段进行写操作时，都会产生一个Write Barrier暂时中断写操作，检查引用实际所引用的对象是否处于物理隔离的不同区域，若是，则将相关引用信息加入到被引用对象所在区域的Remembered Set中。当对某一区域进行垃圾收集时，将其他区域Remembered Set中被本区域对象引用的对象也设置为本次GC的GC ROOT即可。</p>
<p>类似于CMS，G1分为如下4步：</p>
<ol>
<li><strong>初始标记(Initial Marking)</strong>：必须STW，只标记GC ROOT能直接关联的对象，因此该步速度很快。</li>
<li><strong>并发标记(Concurrent Marking)</strong>：无需STW。根据可达性分析算法从GC ROOT开始完成对象的标记，在此期间用户程序可正常运行。</li>
<li><strong>最终标记(Final Marking)</strong>：必须STW。对并发标记过程中因用户线程活动导致的标记错误进行修正。很显然，这是一种乐观的加锁思维。若用户线程在并发标记阶段对标记的影响很小，那么重新标记很快就可完成。反之重新标记就可能会花费很长的时间。</li>
<li><strong>筛选回收(Live Data Counting and Evacuation)</strong>：根据用户指定的GC停顿时间结合垃圾收集收益优先列表确定回收计划。其实本步是可以不用STW的，但是计划制定后时间本就是可控在用户指定的范围之内了，因此G1会在本步STW以提升垃圾收集效率。</li>
</ol>
<p>G1转为正式版的时间较短，因此在商业生产环境中的应用并不多，主流依然是使用ParNew+CMS实现替代的功能。</p>
<h1 id="阅读GC日志文件"><a href="#阅读GC日志文件" class="headerlink" title="阅读GC日志文件"></a>阅读GC日志文件</h1><p>-XX:+PrintGCDetails：显式打印GC日志细节。</p>
<p>不同收集器的GC日志有细节上的差异，但总体来说有一个共性的规范。</p>
<p>以如下的GC日志片段(JDK1.7)为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC [PSYoungGen: 5427K-&gt;536K(38400K)] 5427K-&gt;536K(124416K), 0.0090463 secs] [Times: user&#x3D;0.05 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC [PSYoungGen: 536K-&gt;0K(38400K)] [ParOldGen: 0K-&gt;468K(86016K)] 536K-&gt;468K(124416K) [PSPermGen: 2563K-&gt;2562K(21504K)], 0.0120810 secs] [Times: user&#x3D;0.01 sys&#x3D;0.00, real&#x3D;0.01 secs]</span></pre></td></tr></table></figure>

<p>开头的[GC及[Full GC表示GC类型。[GC是新生代GC，[Full GC是全内存GC。</p>
<p>随后的[PSYoungGen，[ParOldGen，[PSPermGen等表示本次GC所涵盖的区域。对于每个区域而言，后续的都是：GC前本区域所用空间-&gt;GC后本区域所用空间(本区域总空间)。再随后的是GC耗时，单位为秒。</p>
<p>则仔细分析上述GC日志片段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC [PSYoungGen: 5427K-&gt;536K(38400K)] 5427K-&gt;536K(124416K), 0.0090463 secs] [Times: user&#x3D;0.05 sys&#x3D;0.00, real&#x3D;0.01 secs]</span></pre></td></tr></table></figure>

<p>本行GC代表新生代GC([GC)，新生代使用Parallel Scavenge收集器([PSYoungGen)，该收集器的收集情况为：进行GC前占用新生代内存5427K，GC完成后占用新生代内存536K(新生代总大小38400K)。从整个堆的角度看：进行GC前占用内存5427K，GC完成后占用内存536K(堆总大小124416K)。本次GC耗时0.0090463秒。</p>
<p>[Times: user=0.05 sys=0.00, real=0.01 secs]与Linux的time命令所输出的时间含义一致，即：</p>
<ul>
<li>user:用户态消耗的CPU时间</li>
<li>sys:内核态消耗的CPU时间</li>
<li>real:操作从开始到结束所经过的墙钟时间(Wall Clock Time)</li>
</ul>
<p>CPU时间与墙钟时间的区别在于，CPU时间就是指CPU运算所需的时间。而墙钟时间在此基础上又加入了各种非运算的等待耗时，例如磁盘I/O，线程阻塞等。</p>
<p>如果有多个CPU或CPU为多核的话，CPU时间是指这复数个CPU时间的总和，因此并发环境下CPU时间往往反而会超过墙钟时间。</p>
<h1 id="垃圾收集参数"><a href="#垃圾收集参数" class="headerlink" title="垃圾收集参数"></a>垃圾收集参数</h1><p><strong>-XX:+UseSerialGC</strong></p>
<p>打开此开关后，将使用Serial+Serial Old的收集器组合进行垃圾收集。这也是Client模式下的默认值。示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseSerialGC</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a1, a2, a3, a4,a5,a6,a7;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a1 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a2 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a3 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a4 &#x3D; new byte[2 * Test._1MB];    &#x2F;&#x2F; 触发Minor GC</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a5 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a6 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a7 &#x3D; new byte[2 * Test._1MB];    &#x2F;&#x2F; 触发Full GC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC[DefNew: 6980K-&gt;469K(9216K), 0.0046578 secs] 6980K-&gt;6613K(19456K), 0.0047158 secs] [Times: user&#x3D;0.00 sys&#x3D;0.02, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[GC[DefNew: 6787K-&gt;6787K(9216K), 0.0000141 secs][Tenured: 6144K-&gt;8192K(10240K), 0.0048865 secs] 12931K-&gt;12755K(19456K), [Perm : 2563K-&gt;2563K(21248K)], 0.0049309 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> def new generation   total 9216K, used 6693K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K,  81% used [0x00000000f9a00000, 0x00000000fa0896d0, 0x00000000fa200000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> tenured generation   total 10240K, used 8192K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 10240K,  80% used [0x00000000fa400000, 0x00000000fac000c8, 0x00000000fac00200, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> compacting perm gen  total 21248K, used 2570K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb0829c8, 0x00000000fb082a00, 0x00000000fc2c0000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">No shared spaces configured.</span></pre></td></tr></table></figure>

<p><strong>-XX:+UseParNewGC</strong></p>
<p>打开此开关后，将使用ParNew+Serial Old的收集器组合进行垃圾收集。示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseParNewGC</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a1, a2, a3, a4,a5,a6,a7;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a1 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a2 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a3 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a4 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a5 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a6 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a7 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC[ParNew: 6980K-&gt;479K(9216K), 0.0039713 secs] 6980K-&gt;6623K(19456K), 0.0040409 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[GC[ParNew: 6797K-&gt;6797K(9216K), 0.0000098 secs][Tenured: 6144K-&gt;8192K(10240K), 0.0046224 secs] 12941K-&gt;12755K(19456K), [Perm : 2563K-&gt;2563K(21248K)], 0.0046706 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> par new generation   total 9216K, used 6693K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K,  81% used [0x00000000f9a00000, 0x00000000fa0896d0, 0x00000000fa200000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> tenured generation   total 10240K, used 8192K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 10240K,  80% used [0x00000000fa400000, 0x00000000fac000c8, 0x00000000fac00200, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> compacting perm gen  total 21248K, used 2570K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">   the space 21248K,  12% used [0x00000000fae00000, 0x00000000fb0829c8, 0x00000000fb082a00, 0x00000000fc2c0000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">No shared spaces configured.</span></pre></td></tr></table></figure>

<p><strong>-XX:+UseConcMarkSweepGC</strong></p>
<p>打开此开关后，将使用ParNew+CMS(Serial Old为发生Concurrent Mode Failure时的后备)的收集器组合进行垃圾收集。示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails -XX:+UseConcMarkSweepGC</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a1, a2, a3, a4,a5,a6,a7;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a1 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a2 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a3 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a4 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a5 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a6 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a7 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC[ParNew: 6816K-&gt;490K(9216K), 0.0031159 secs] 6816K-&gt;6636K(19456K), 0.0032050 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[GC[ParNew: 6888K-&gt;6888K(9216K), 0.0000282 secs][CMS: 6146K-&gt;8192K(10240K), 0.0080740 secs] 13034K-&gt;12756K(19456K), [CMS Perm : 2564K-&gt;2563K(21248K)], 0.0081410 secs] [Times: user&#x3D;0.02 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[GC [1 CMS-initial-mark: 8192K(10240K)] 14804K(19456K), 0.0005862 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> par new generation   total 9216K, used 6775K [0x00000000f9a00000, 0x00000000fa400000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K,  82% used [0x00000000f9a00000, 0x00000000fa09df78, 0x00000000fa200000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K,   0% used [0x00000000fa300000, 0x00000000fa300000, 0x00000000fa400000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K,   0% used [0x00000000fa200000, 0x00000000fa200000, 0x00000000fa300000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> concurrent mark-sweep generation total 10240K, used 8192K [0x00000000fa400000, 0x00000000fae00000, 0x00000000fae00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> concurrent-mark-sweep perm gen total 21248K, used 2570K [0x00000000fae00000, 0x00000000fc2c0000, 0x0000000100000000)</span></pre></td></tr></table></figure>

<p><strong>-XX:+UseParallelGC 或 -XX:+UseParallelOldGC</strong></p>
<p>打开此开关后，将使用Parallel Scavenge+Parallel Old的收集器组合进行垃圾收集。这也是Server模式(JDK的默认模式)下的默认值。</p>
<p>示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m -Xmn10m -XX:+PrintGCDetails</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        byte[] a1, a2, a3, a4,a5,a6,a7;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a1 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a2 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a3 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a4 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a5 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a6 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a7 &#x3D; new byte[2 * Test._1MB];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[GC [PSYoungGen: 6980K-&gt;600K(9216K)] 6980K-&gt;6744K(19456K), 0.0032780 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC [PSYoungGen: 600K-&gt;0K(9216K)] [ParOldGen: 6144K-&gt;6612K(10240K)] 6744K-&gt;6612K(19456K) [PSPermGen: 2563K-&gt;2562K(21504K)], 0.0113665 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">[Full GC [PSYoungGen: 6317K-&gt;4096K(9216K)] [ParOldGen: 6612K-&gt;8659K(10240K)] 12929K-&gt;12755K(19456K) [PSPermGen: 2562K-&gt;2562K(21504K)], 0.0070159 secs] [Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.01 secs] </span></pre></td></tr><tr><td class="code"><pre><span class="line">Heap</span></pre></td></tr><tr><td class="code"><pre><span class="line"> PSYoungGen      total 9216K, used 6226K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  eden space 8192K, 76% used [0x00000000ff600000,0x00000000ffc148c8,0x00000000ffe00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  from space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  to   space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> ParOldGen       total 10240K, used 8659K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  object space 10240K, 84% used [0x00000000fec00000,0x00000000ff474ed0,0x00000000ff600000)</span></pre></td></tr><tr><td class="code"><pre><span class="line"> PSPermGen       total 21504K, used 2569K [0x00000000f9a00000, 0x00000000faf00000, 0x00000000fec00000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  object space 21504K, 11% used [0x00000000f9a00000,0x00000000f9c82640,0x00000000faf00000)</span></pre></td></tr></table></figure>

<p><strong>-XX:SurvivorRatio=?</strong></p>
<p>Eden与Survivor的一个区的比值。默认值为8。</p>
<p><strong>-XX:+PrintGCDetails</strong></p>
<p>打印如下信息至控制台：</p>
<ol>
<li>发生GC时打印GC日志。</li>
<li>进程退出时打印当前内存各区域的分配情况。</li>
</ol>
<h1 id="显式调用GC"><a href="#显式调用GC" class="headerlink" title="显式调用GC"></a>显式调用GC</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.gc();</span></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().gc();</span></pre></td></tr></table></figure>

<ul>
<li>显式调用GC只是建议而非命令，因此JVM可能会屏蔽掉显式垃圾回收调用，因此并非调用了就一定会有效。</li>
<li>不推荐采用显式调用的方式进行垃圾回收，推荐将垃圾回收完全托管给JVM。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
        <tag>GC</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-堆中对象的创建及布局</title>
    <url>/2017/10/18/JVM-%E5%A0%86%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p><strong>注意：</strong></p>
<ul>
<li>本文描述的是HotSpot实现下的情况</li>
<li>对象指的是普通的实例对象，不包括类对象及数组对象</li>
</ul>
<a id="more"></a>

<h1 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h1><p>可以模拟一个实际场景：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ob o &#x3D; new Ob();</span></pre></td></tr></table></figure>

<p>这行代码在JVM中实际的执行步骤如下：</p>
<p><strong>1.确保用于生成实例的模版已准备好</strong></p>
<p>检查Ob是否能在方法区的运行时常量池中定位到一个类的符号引用，并检查这个符号引用所代表的类是否已完成了加载，连接(验证，准备，解析)，初始化。若没有，则完成。</p>
<p><strong>2.JVM为实例分配内存</strong></p>
<p>某类的实例所需的内存大小在类加载完成后便已完全确定，因此对于同一个类的不同实例，JVM所分配的内存空间都是完全相同的。</p>
<p>有如下两种划分方式：</p>
<ul>
<li>指针碰撞(Bump the Pointer)：若堆中已用内存及空闲内存的划分是规整的，即我们可以设置一个指针作为分界线，在指针的一边的内存空间全部为已用空间，另一边的空间则全部为空闲空间。那么只要将指针向空闲空间那边移动相应空间的距离即可完成内存分配。</li>
<li>空闲列表(Free List)：若堆中已用内存及空闲内存的划分不是规整的，那么JVM就需要维护一张空闲列表，每次需要分配新的内存空间时，就从空闲列表中找到一份足够大的空间，分配后再更新这个列表。</li>
</ul>
<p>而堆是否规整主要依垃圾收集器是否有压缩整理的功能而定。因此使用Serial及ParNew等带有压缩整理的垃圾收集器时采用指针碰撞。使用CMS这种基于Mark-Sweep算法的垃圾收集器时则采用空闲列表。</p>
<p>分配内存空间时还应关注线程安全问题：例如采用指针碰撞时，线程1为对象a申请内存空间，指针还没来得及移动，线程2又为对象b申请了内存空间。解决策略主要有二：</p>
<ul>
<li>采用CAS配上失败重试的方式保证内存分配的原子性。</li>
<li>为每个线程在堆中分配一小块内存，称为本地线程分配缓冲(Thread Local Allocation Buffer, TLAB)。只有当分配给某线程的堆空间不足需要扩展时才会进行同步控制。虚拟机 开启/关闭 TLAB可通过 -XX:+/-UseTLAB 参数设置。</li>
</ul>
<p><strong>3.初始化内存空间</strong></p>
<p>除对象头外，JVM会将分配出去的内存空间都初始化为零值。该操作也是对象的实例成员变量未在代码中显式初始化也能直接使用的原因(当然，读到的结果为对应类型的零值)。相对的，方法中的局部变量就没有这个初始化的操作，因此必须显式声明，否则无法通过编译。</p>
<p><strong>4.初始化对象头</strong></p>
<p>对象头(Object Header)相当于该对象的描述信息，例如：</p>
<ul>
<li>这个对象是哪个类的实例</li>
<li>如何才能找到类的元数据信息(即与方法区中存储的类的模版信息进行关联)</li>
<li>对象的哈希码</li>
<li>对象的GC分代年龄</li>
</ul>
<p>等。</p>
<p>根据JVM当前运行状态的不同，例如是否启用偏向锁等，对象头会有不同的设置方式。</p>
<p>至此，从JVM的角度来看，对象分配已然结束了，再接下来就是对象内部操作自己得到的内存了。</p>
<p><strong>5.赋初值</strong></p>
<p>&lt;init&gt;方法会将对象按照程序员的意愿进行初始化，即赋上程序员为实例字段设置的值，其内部会调用对象对应的构造函数。</p>
<p>至此，一个对象的创建已经完成。</p>
<h1 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h1><p>在HotSpot中，内存中存储的对象可分为3块：对象头(Header)，实例数据(Instance Data)和对齐填充(Padding)。</p>
<p><strong>对象头</strong></p>
<p>对象头又可分为两部分：Mark Word及类型指针。</p>
<p>所谓Mark Word即为对象的运行时描述信息，如哈希码(HashCode)，GC分代年龄，锁状态标志，线程持有的锁，偏向线程ID，偏向时间戳等。在32位及64位(未开启指针压缩)的JVM上的长度分别为32及64位。实际上Mark Word中所存储的全部状态信息已无法用32位或64位完全表示，而Mark Word又只是一个与对象实际信息无关的描述信息，为了节省内存空间，Mark Word采用了一种非固定的数据结构：对象处于不同状态时需存储的状态信息不同，数据结构也不同。对象的状态列举如下：</p>
<p><img src="/images/blog_pic/JVM/%E5%A0%86%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%B8%83%E5%B1%80/0.png" alt="0.png"></p>
<p>例如标志为01，即对象状态为未锁定时，对于32位的JVM而言，2位用于存储标志信息，25位用于存储对象的哈希码，4位用于存储对象的分代年龄，1位固定为0。</p>
<p>类型指针并非对象头中的必要元素。这牵涉到对象的访问定位。我们通过栈上的reference来访问堆上的对象，而如何定位，定位到哪里，JVM规范中并没有具体规定。目前主流的访问方式有两种：</p>
<p>使用句柄：</p>
<p><img src="/images/blog_pic/JVM/%E5%A0%86%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%B8%83%E5%B1%80/1.jpg" alt="1.jpg"></p>
<p>使用直接指针(此时对象头中就要存储类型指针了)：</p>
<p><img src="/images/blog_pic/JVM/%E5%A0%86%E4%B8%AD%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%8F%8A%E5%B8%83%E5%B1%80/2.jpg" alt="2.jpg"></p>
<p>使用句柄的好处为reference中存储的为稳定的句柄地址，在对象被移动时(垃圾收集时移动对象是很常见的行为)只需要修改句柄中对象的实际地址，而reference中存储的句柄地址则无需修改。</p>
<p>使用直接指针的好处为减少了一次指针定位。由于对象的访问非常频繁，因此积少成多这也节省了一笔非常可观的时间开销。</p>
<p>HotSpot使用直接指针的方式来定位对象，因此对象头中需要存储类型指针。</p>
<p>除Mark Word及类型指针外，若对象为数组，那么对象头中还必须有一块记录数组长度的区域。因为JVM可以通过普通对象的元数据确定其大小，却无法通过数组对象的元数据确定其大小。</p>
<p><strong>实例数据</strong></p>
<p>对象真正存储的有效信息，即各种类型的字段信息，包括从父类中继承而得的及在自身类中定义的。</p>
<p>字段的存储顺序由JVM的分配策略参数(FieldsAllocationStyle)所确定，依分配策略参数无法确定顺序的字段则由字段在代码中的定义顺序而定(父类中定义的变量会出现在子类之前)。</p>
<p>HotSpot默认的分配策略参数依类型所占用内存空间的大小降序排列： long/double ,int, short/char , byte/boolean ,oop(Ordinary Object Pointer，普通对象指针，即reference类型)。这样分配的好处在于宽度临近的类型总被分配在附近。</p>
<p><strong>对齐填充</strong></p>
<p>HotSpot的自动内存管理系统要求对象的起始地址必须是8字节的整数倍。因此当 对象头+实例数据 不是8字节的整数倍时，就以对齐填充的方式补全。该部分仅仅起到一个占位符的作用，不是必然会存在的(若 对象头+实例数据 恰好为8字节的整数倍该部分就不需要存在)。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM-运行时数据区域</title>
    <url>/2017/10/17/JVM-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<p>JVM的运行时数据区域即是指JVM所管理的内存区域。JVM规范依功能又将其分为如下几部分：</p>
<ul>
<li>程序计数器(Program Counter Register)</li>
<li>虚拟机栈(Virtual Machine Stack)</li>
<li>本地方法栈(Native Method Stack)</li>
<li>堆(Heap)</li>
<li>方法区(Method Area)</li>
</ul>
<p>JVM规范中详细指明了每条虚拟机指令的执行过程，执行前后对操作数栈及局部变量表的影响。Sun最早的JVM Sun Classic VM基本严格遵循这一规范。然而随着技术的发展及对性能的追求，高性能JVM真正的实现细节已与JVM规范产生了很大的差异。虽然”能做到什么”依然遵循JVM规范，然而”如何做到的”已不完全遵循规范的指引。</p>
<p>基于上述原因，再加之规范中本来就会有一些供实现自行发挥的弹性部分，因此基于同一个JVM规范得到的不同实现之间会有着不小的差异。若非特别指明，本文所讨论的实现均为Sun公司的HotSpot。</p>
<a id="more"></a>

<h1 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h1><p>这是一块很小的，线程私有的内存区域，其生命周期与拥有其的线程相同。可看作是线程所执行字节码的行号指示器，用于记录线程正在执行的字节码的行号(实际上是偏移量)。</p>
<p>若某线程正在执行的字节码属于一个Java方法，则该线程的程序计数器中存储的是该字节码指令的行号。若某线程正在执行的字节码属于一个本地方法，此时该线程的程序计数器中的值为Undefined。</p>
<p>因为存储的数据简单明确，程序计数器是运行时数据区域中唯一不会抛出内存相关Error的区域。</p>
<h1 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h1><p>虚拟机栈是线程私有的，它的生命周期与拥有其的线程相同。</p>
<p>每当线程调用Java方法，就会产生一个栈帧(Stack Frame)压入其自身的虚拟机栈，方法执行结束后对应的栈帧出栈。栈帧中记录了该方法的信息：</p>
<ul>
<li>局部变量表</li>
<li>操作数栈</li>
<li>动态链接(记录符号引用所对应的实际地址，编译期不可知，运行期生成)</li>
<li>方法出口</li>
</ul>
<p>等。</p>
<p>局部变量表中存放了其所属方法用到的：</p>
<ul>
<li>基本数据类型</li>
<li>对象引用</li>
<li>returnAddress: 指向一条字节码指令的地址，用于在代码发生跳跃并局部运行完成后指定返回的位置。例如try后跳入finally执行，finally执行完成后returnAddress会指示需要返回到的字节码指令的地址，JDK1.7中已取消returnAddress，改以冗余复制的方式完成try-catch-finally的功能</li>
</ul>
<p>其中64位的long和double会占用两个Slot(局部变量表的基本单位)，其余则占用1个Slot。</p>
<p>操作数栈是和执行器关系最为密切的数据存储单元，执行器只能看到操作数栈中的数据。而操作数栈所需的数据则来源于局部变量表。操作数栈与局部变量表的关系有些类似于CPU的寄存器与内存(在此我们不妨将缓存视为内存的一部分)。例如，某方法欲计算1+2+4，那么可能的执行顺序是这样的：</p>
<ol>
<li>局部变量表中存入1,2,4</li>
<li>从局部变量表中取出1与2压入操作数栈进行加法计算得到结果3</li>
<li>将计算得到的3存入局部变量表</li>
<li>从局部变量表中取出3与4压入操作数栈进行加法计算得到结果7</li>
<li>将7存入局部变量表</li>
</ol>
<p>全程执行器可见的只有操作数栈，而操作数栈中的值也必须通过存入局部变量表才能传递到外界。</p>
<p>局部变量表的大小及操作数栈的深度在编译期(.java –&gt; .class)即可完全确定，运行期不会发生变化。</p>
<p>有人会将运行时数据区域比较粗旷的分为堆(Heap)及栈(Stack)。这种划分去掉了他们认为”不那么重要的”程序计数器及方法区。堆是我们通常认识的那个堆，而栈则去掉了本地方法栈仅仅指虚拟机栈。换句话说，这种划分认为Java运行时数据区域最重要的是如下两部分：堆及虚拟机栈。进一步的，更有人将虚拟机栈中的”不那么重要的”部分也去掉了，具体特指局部变量表。</p>
<p>虚拟机栈可能抛出的和内存相关的Error有两种：</p>
<ul>
<li>压入的栈帧数超过了虚拟机栈允许的最大深度，将抛出StackOverflowError。</li>
<li>扩展栈(虚拟机栈默认即为可扩展的，当然也允许设置虚拟机栈为固定长度)或创建新栈时无法申请到足够的内存空间，则抛出OutOfMemoryError。</li>
</ul>
<p><strong>OOM小例子</strong></p>
<p>因为HotSpot将虚拟机栈及本地方法栈合二为一，因此虽然-Xoss(设置本地方法栈大小)依然存在，但实际是无效的。栈容量只由-Xss控制。</p>
<p>栈可能会报的异常有两种：OutOfMemoryError，StackOverflowError。但从一个更大的角度来看，这两个错误描述的都是同一件事：无法分配新的栈空间了。至于具体原因，可能是因为空间不够了，也可能是因为压入的栈帧太多了。</p>
<p>为了使错误更容易出现，即更容易的促成”无法分配新的栈空间”。可行的方法有两种。</p>
<p>第一种是减少每个栈的总容量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int STACK_LENGTH;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void stackTest() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.STACK_LENGTH++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.stackTest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xss256k</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Test.stackTest();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Error e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;stack length&#x3D;&quot; + Test.STACK_LENGTH);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中设置的-Xss256k是一个相对靠谱的正常的栈大小，运行后输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stack length&#x3D;2728</span></pre></td></tr><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.StackOverflowError</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:8)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:9)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:9)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:9)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	...</span></pre></td></tr></table></figure>

<p>若改为-Xss8k，则输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The stack size specified is too small, Specify at least 104k</span></pre></td></tr></table></figure>

<p>很显然，如果过于小的话那么是连启动都启动不起来的。于是改为-Xss65k(比错误信息里的最小值还要小不少，这是我的环境下试出的最小值，可见那个描述只是推荐值，实际没那么精确)，输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; stack length&#x3D;1097</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.StackOverflowError</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:8)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:9)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:9)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.stackTest(Test.java:9)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	...</span></pre></td></tr></table></figure>

<p>此时能触及的最大深度显然就小很多了。</p>
<p>第二种是增大每个栈帧的大小，最简便的方法就是疯狂的创建基本类型的局部变量(创建引用类型先爆的八成会是堆)，撑爆栈空间：尚未找到有效的测试代码，因为最先爆掉的总是堆。不过根据[深入理解Java虚拟机第二版]的说法，最终抛出的错误也是StackOverflowError(姑且先信了他，不知道他是怎么测的)。</p>
<p>无论如何，在单线程环境下都只能模拟出StackOverflowError的异常(尝试了将-Xss设置为一个极大的值，但貌似没有生效)。可以这样理解：例如-Xss256k，那么系统只要足以分配这256k的空间，超过该值抛出的错误都是StackOverflowError。而只有当系统连这最大的256k都无法分配的时候才会抛出OutOfMemoryError。因此自然想到通过创建多线程来触发这个Error：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xss3m</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>因为在Windows平台的JVM中，Java线程是映射到操作系统的内核线程上的。因此执行上述代码时我的电脑壮烈的死机了。强制关机并重启才恢复了正常。因此自然也没有得到输出。不过同样是根据[深入理解Java虚拟机第二版]的说法，这段代码可以得到如下输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: unable to create new native thread</span></pre></td></tr></table></figure>

<h1 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h1><p>本地方法栈与虚拟机栈的功能非常类似：同样是线程私有的，同样会抛出StackOverflowError及OutOfMemoryError。虚拟机栈为JVM执行Java方法(即字节码)服务，本地方法栈为JVM使用本地方法服务。</p>
<p>HotSpot VM将虚拟机栈与本地方法栈合二为一。</p>
<h1 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h1><p>该区域的唯一目的就是存储对象实例，JVM规范对其的描述为：”所有的对象实例及数组都要在堆上分配内存”。但是在实际实现中，随着JIT编译器的发展，逃逸分析技术的日渐成熟，诸如栈上分配，标量替换等优化措施使得这个描述不那么准确了。不过我们仍可说，在具体实现中，”绝大多数的对象实例及数组都是在堆上分配内存的”。</p>
<p>对绝大多数应用而言，堆都是占用内存最大的一块区域。堆随着JVM的启动而创建，生命周期与JVM相同。很显然，堆中的对象实例是被所有线程所共享的。</p>
<p>堆是垃圾收集器收集垃圾的主要区域，因此堆有时也被称为GC堆(Garbage Collected Heap)(幸亏没直译为垃圾堆=-=)。</p>
<p>根据JVM规范中的规定，类似于磁盘空间，堆可以处于物理上不连续的内存空间中，只要逻辑上连续即可。具体实现时，既可以是固定大小的，也可以是可扩展的。不过当前主流的JVM实现都是可扩展的(Hotspot通过-Xmx及-Xms控制。-Xmx为最大堆空间，-Xms为最小堆空间)。</p>
<p>若当前堆无法满足分配需求且无法扩展，则抛出OutOfMemoryError。</p>
<p><strong>OOM小例子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xms20m -Xmx20m</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Test&gt; list &#x3D; new ArrayList&lt;Test&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) list.add(new Test());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.Arrays.copyOf(Arrays.java:2245)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.Arrays.copyOf(Arrays.java:2219)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.ArrayList.grow(ArrayList.java:242)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:216)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.ArrayList.ensureCapacityInternal(ArrayList.java:208)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.ArrayList.add(ArrayList.java:440)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:13)</span></pre></td></tr></table></figure>

<h1 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h1><p>JVM规范将方法区描述为堆的一个逻辑组成部分，但是方法区与堆中所存储的对象实例又有明显区别。简单来说，只要能从具体实例中抽象出的属于类的模版信息都应存储在方法区中。</p>
<p>说方法区是堆的逻辑组成部分，是因为堆和方法区中描述的都是对象信息。方法区中存储的是干细胞，堆中存储的则是由干细胞产生的具体的细胞实例。但方法区与堆中存储的数据又存在明显的界限，因此它才会在分类时被完全并列出来单独列举，并且它还有一个别名：非堆(Non-Heap)。</p>
<p>特别的，用于描述类信息的，与每个类一一对应的Class类的实例，也被称为该类的类对象，作为一个普通的实例对象也是存在于堆中的，只不过其所封装的信息都来源于方法区(好像句柄呀)。</p>
<p>很显然，方法区中的数据也是线程共享的。和堆相同，方法区也可以处于物理上不连续的内存空间中，只要逻辑上连续即可。具体实现时，既可以是固定大小的，也可以是可扩展的。</p>
<p>在JDK1.6及此前的版本，HotSpot VM的方法区大致可分为如下两部分：</p>
<ul>
<li>永久代：类的模版信息，例如类的描述信息，常量，静态变量。粗略的看，可认为是.class文件读入内存后存放在了永久代。所谓的对方法区的垃圾回收实际管理的就是这个区域，主要回收的内存为运行时常量池及类的卸载。</li>
<li>代码缓存：即时编译器(JIT)编译后的代码。</li>
</ul>
<p>JVM规范中并未明确规定方法区该如何实现，也未规定垃圾收集器是否该收集这个区域的内容。具体到HotSpot VM，其方法区是以永久代(Permanent Generation)实现的，并将垃圾收集器的垃圾收集范围扩展到方法区。这样做的好处是垃圾收集器可以像管理堆一样来管理方法区，而不用特地为方法区去编写内存管理代码。但这样做却更容易发生内存溢出：永久代有-XX:MaxPermSize的上限，达到该上限后即便尚有内存空间也无法再行分配了。</p>
<p>因此，HotSpot VM在逐步废弃永久代。在JDK1.7中，储存在永久代中的部分数据就已经转移到了堆(例如字符串常量池，类的静态变量)或本地内存(例如符号引用)中。但永久代依然存在，并未完全移除。</p>
<p>我们不妨以String.intern()这个方法来证明该变化。该方法的作用为返回该字符串所对应的字符串常量池中的那个字符串的引用。具体来说，当我们调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str.intern()</span></pre></td></tr></table></figure>

<p>会先检查str所对应的值是否已在字符串常量池中存在，若已存在则返回那个已存在的字符串值对应的对象引用。若不存在，JDK1.6时，字符串常量池尚在方法区中，因此需要以str的值为基础在方法区的字符串常量池中创建一个新的字符串对象，而后把这个对象的引用返回回去；而JDK1.7时字符串常量池本就在堆中，因此只需将该str对象的引用加入到字符串常量池中即可。</p>
<p>首先验证的就是字符串常量池的位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -XX:PermSize&#x3D;10m -XX:MaxPermSize&#x3D;10m</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;String&gt; list &#x3D; new ArrayList&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) list.add(String.valueOf(i++).intern());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在JDK1.6中，运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError:PermGen space</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure>

<p>而在JDK1.7中，除非触碰到堆内存的分配上限(即便真的触碰上限抛出了Error，Error的区域也是Heap space而非PermGen space)，否则代码会一直运行下去。</p>
<p>其次验证的是String.intern()的功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String str &#x3D; new String(&quot;紫婆婆&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(str.intern() &#x3D;&#x3D; str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时因为在创建str对象时代表”紫婆婆”这个字符串常量的字符串已然创建过并将其作为该常量值的引用加入到了字符串常量池，因此无论是JDK1.6抑或是JDK1.7，返回的都是false。因为str.intern()返回的是”紫婆婆”这个常量值代表的字符串引用而非str。</p>
<p>为保证创建的字符串未曾在字符串常量池中出现过，可做如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String str &#x3D; new StringBuilder(&quot;紫&quot;).append(&quot;婆婆&quot;).toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(str.intern() &#x3D;&#x3D; str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在调用str.intern()时，”紫婆婆”并未被加入字符串常量池(此前出现的字符串常量只有”紫”及”婆婆”)，因此JDK1.6会以”紫婆婆”为基础在方法区的字符串常量池中创建一个新的对象并返回该对象的引用，因其并非str，因此依然输出false。而对于JDK1.7，由于直接将str的引用加入到了字符串常量池并返回，因此输出true。</p>
<p>特别的，若代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String str &#x3D; new StringBuilder(&quot;ja&quot;).append(&quot;va&quot;).toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(str.intern() &#x3D;&#x3D; str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时对于str的值”java”看似是在调用str.intern()时第一次出现在字符串常量池，但实际上此前像”java”这类有特殊含义的单词已然作为常量在字符串常量池中出现过了，只不过出现的地方并非用户程序所写的代码而已。因此此种情况实际相当于此前”紫婆婆”的例子，JDK1.6及JDK1.7均会输出false。</p>
<p>而到了JDK1.8永久代完全被元空间所替代。元空间是一块本地内存(Native Memory)，因此元空间的扩展极限是本机内存空间的扩展极限，垃圾收集器依然可以对其进行管理。自然，以前那些和永久代相关的设置参数及异常也不复存在了。</p>
<p>特别的，JDK1.8中字符串常量池依然在堆中。上文中关于String.intern()的测试代码在JDK1.8中的返回值均同JDK1.7。</p>
<p>方法区中最重要的一部分空间为运行时常量池(Runtime Constant Pool)。很多人将其与.class文件中的常量池(Constant Pool Table)等同看待，这是错误的：运行时常量池并不一定会读取常量池中的所有内容，它可能会根据本次加载的需求有所删减；同时除了编译期生成的.class文件外，运行期程序员也可以添加新的内容至运行时常量池(例如上文提到的JDK1.6及此前版本中的String类的intern方法)。</p>
<p>当方法区无法满足内存分配请求时会抛出OutOfMemoryError。拥有大量JSP或动态产生JSP文件的应用(JSP第一次运行时需要编译为Java类)容易触发这个Error。下面使用CGLib直接操作字节码在运行时生成大量的动态类来触发这个Error：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import net.sf.cglib.proxy.Enhancer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import net.sf.cglib.proxy.MethodInterceptor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import net.sf.cglib.proxy.MethodProxy;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -XX:PermSize&#x3D;10m -XX:MaxPermSize&#x3D;10m</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Enhancer enhancer &#x3D; new Enhancer();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            enhancer.setSuperclass(OOMObject.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            enhancer.setUseCache(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            enhancer.setCallback(new MethodInterceptor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return proxy.invokeSuper(obj, args);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            enhancer.create();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class OOMObject &#123;&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; </span></pre></td></tr><tr><td class="code"><pre><span class="line">Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread &quot;main&quot;</span></pre></td></tr></table></figure>

<h1 id="本地内存"><a href="#本地内存" class="headerlink" title="本地内存"></a>本地内存</h1><p>本地内存(Native Memory)并不是JVM运行时数据区域的一部分，JVM要操作这部分内存需要一些本地函数库的辅助。但是这块内存和JVM的内存管理又息息相关：例如上文提到的方法区中的元空间。</p>
<p>同样的例子还有JDK1.4中引入的NIO(New Input/Output)模式，该模式引入了一种基于通道(Channel)与缓冲区(Buffer)的I/O方式，它可以通过本地函数库直接分配本地内存，然后通过一个存于堆中的对象作为引用操作这块本地内存，这样就可以避免在Java堆及本地内存之间来回的复制数据，从而提升了程序的运行效率。</p>
<p>既然是内存空间，那么一定有其上限，对本地内存的申请超出其承载上限时会抛出OutOfMemoryError。</p>
<p>下面的例子越过了DirectByteBuffer类，直接通过反射获取Unsafe实例进行内存分配(Unsafe的getUnsafe()限制了只有引导类加载器才会返回实例，即Unsafe类设计者希望只有rt.jar中的类才能使用Unsafe的功能)。之所以这么做，是因为DirectByteBuffer类在分配内存时虽然也会抛出内存溢出异常，但是它并没有真正的向操作系统申请分配内存，而是通过计算得知内存不够了。作为操作系统而言并不知道曾有这样的一次内存分配操作。真正直接向操作系统申请分配内存的方法是Unsafe类的实例方法allocateMemory()。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import sun.misc.Unsafe;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int _1MB &#x3D; 1024 * 1024;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -Xmx20m -XX:MaxDirectMemorySize&#x3D;10m</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本地内存可由MaxDirectMemorySize指定，若未显式指定则与堆的最大值一致。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Field unsafeField &#x3D; Unsafe.class.getDeclaredFields()[0];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        unsafeField.setAccessible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Unsafe unsafe &#x3D; (Unsafe)unsafeField.get(null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) unsafe.allocateMemory(Test._1MB);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.misc.Unsafe.allocateMemory(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:19)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-发展历史</title>
    <url>/2017/10/16/Java%E5%9F%BA%E7%A1%80-%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2/</url>
    <content><![CDATA[<h1 id="1991-4-—–-Java前身Oak"><a href="#1991-4-—–-Java前身Oak" class="headerlink" title="1991.4 —– Java前身Oak"></a>1991.4 —– Java前身Oak</h1><p>Sun公司(Sun Microsystems，Sun的由来为斯坦福大学校园网[Stanford University Network])的James Gosling领导的绿色计划(Green Project)开发出了一种面向消费性电子产品(如机顶盒，冰箱，收音机)的语言Oak(橡树)，反响平平。</p>
<h1 id="1995-5-23-—–-Java语言1-0"><a href="#1995-5-23-—–-Java语言1-0" class="headerlink" title="1995.5.23 —– Java语言1.0"></a>1995.5.23 —– Java语言1.0</h1><p>随着互联网大潮的袭来，Oak迅速找到了自身的市场定位，并在Sun World大会上改名为Java并发布了1.0版本。同时Java也提出了它那句最为著名的广告语：Write Once,Run Anywhere。</p>
<a id="more"></a>

<h1 id="1996-1-23-—–-JDK1-0"><a href="#1996-1-23-—–-JDK1-0" class="headerlink" title="1996.1.23 —– JDK1.0"></a>1996.1.23 —– JDK1.0</h1><p>JDK(Java Development Kit)是JVM+Java语言语法+Java API类库中的核心类库的统称。至此Java终于拥有了完整的官方运行环境。</p>
<p>JDK1.0所使用的JVM为Sun Classic VM，这是一个纯解释执行的虚拟机，因此执行代码较慢，给很多人留下了Java运行慢的第一印象并直至今日。实际上，随着JIT及各种优化策略的引入，当今Java在执行速度上已不弱于其他主流语言。</p>
<p>JDK1.0的代表技术包括：</p>
<ul>
<li><p>Applet：包含在Html页面中的Java小程序。</p>
</li>
<li><p>AWT(Abstract Window Toolkit，抽象窗口工具集)：Java的图形用户界面(Graphical User Interface,GUI)的根基。</p>
</li>
</ul>
<h1 id="1996-3"><a href="#1996-3" class="headerlink" title="1996.3"></a>1996.3</h1><p>微软申请并获得了Java许可证。</p>
<h1 id="1996-4"><a href="#1996-4" class="headerlink" title="1996.4"></a>1996.4</h1><p>10个最主要的操作系统供应商申明将在其产品中嵌入Java技术。</p>
<h1 id="1996-5月底"><a href="#1996-5月底" class="headerlink" title="1996.5月底"></a>1996.5月底</h1><p>Sun公司于美国旧金山举行了首届JavaOne大会，自此其成为了Java使用者每年一度的技术盛会。</p>
<h1 id="1996-9"><a href="#1996-9" class="headerlink" title="1996.9"></a>1996.9</h1><p>已有大约8.3万个网页应用了Java技术。</p>
<h1 id="1997-2-19-—–-JDK1-1"><a href="#1997-2-19-—–-JDK1-1" class="headerlink" title="1997.2.19 —– JDK1.1"></a>1997.2.19 —– JDK1.1</h1><p>JDK1.1发布了大量Java中最为基础的技术支撑点，例如：</p>
<ul>
<li><p>JDBC(Java DataBase Connectivity)。</p>
</li>
<li><p>JAR(Java Archive)：java归档文件格式。</p>
</li>
<li><p>JavaBean。</p>
</li>
<li><p>RMI(Remote Method Invoke，远程方法调用)。</p>
</li>
<li><p>内部类(Inner Class)。</p>
</li>
<li><p>反射(Reflection)。</p>
</li>
</ul>
<h1 id="1997-9-12-—–-JDK1-1-4"><a href="#1997-9-12-—–-JDK1-1-4" class="headerlink" title="1997.9.12 —– JDK1.1.4"></a>1997.9.12 —– JDK1.1.4</h1><p>截至1997年9月12日为止，共发布了3个JDK1.1的升级版本：JDK1.1.1~JDK1.1.3。</p>
<p>1997年9月12日JDK1.1.4发布，自此开始基本每个版本都会有一个工程代号，JDK1.1.4的工程代号为Sparkler(宝石)。</p>
<h1 id="1997-10"><a href="#1997-10" class="headerlink" title="1997.10"></a>1997.10</h1><p>Sun状告微软于1997年发布的Visual J++对Java做出了”不恰当的修改”，这些修改将Java绑定在了Windows平台下，违背了JVM平台无关性的基本规划。</p>
<h1 id="1997-12-03-—–-JDK1-1-5"><a href="#1997-12-03-—–-JDK1-1-5" class="headerlink" title="1997.12.03 —– JDK1.1.5"></a>1997.12.03 —– JDK1.1.5</h1><p>工程代号Pumpkin(南瓜)。</p>
<h1 id="1998-4-24-—–-JDK1-1-6"><a href="#1998-4-24-—–-JDK1-1-6" class="headerlink" title="1998.4.24 —– JDK1.1.6"></a>1998.4.24 —– JDK1.1.6</h1><p>工程代号Abigail(阿比盖尔，女性名)。</p>
<h1 id="1998-9-28-—–-JDK1-1-7"><a href="#1998-9-28-—–-JDK1-1-7" class="headerlink" title="1998.9.28 —– JDK1.1.7"></a>1998.9.28 —– JDK1.1.7</h1><p>工程代号Brutus(布鲁图，古罗马政治家，将军)。</p>
<h1 id="1998-12-4-—–-JDK1-2"><a href="#1998-12-4-—–-JDK1-2" class="headerlink" title="1998.12.4 —– JDK1.2"></a>1998.12.4 —– JDK1.2</h1><p>工程代号Playground(竞技场)。</p>
<p>JDK1.2将Java的技术体系依应用平台划分为3个方向：J2ME(Java 2 Platform, Micro Edition)，J2SE(Java 2 Platform, Standard Edition)，J2EE(Java 2 Platform, Enterprise Edition)。详见<a href="/2017/10/16/Java基础-技术体系/">Java 基础-技术体系</a>。</p>
<p>JDK1.2的代表性技术包括：</p>
<ul>
<li><p>EJB(Enterprise JavaBean)：J2EE平台下对JavaBean技术的扩展。</p>
</li>
<li><p>Java Plug-in：因官司纠纷的原因IE不支持JAVA2的特征，所以Sun设计了该插件以解决这个问题。</p>
</li>
<li><p>Java IDL(Interface Definition Language)：实现网络上不同平台不同语言之间的交互。</p>
</li>
<li><p>Swing：新一代GUI，AWT的升级版。</p>
</li>
<li><p>strictfp(strict float point,精确浮点)关键字。</p>
</li>
<li><p>Collection框架。</p>
</li>
</ul>
<p>JDK1.2在整个周期中曾存在过3个JVM：</p>
<ul>
<li><p>Sun Classic VM：JDK1.0~JDK1.1中的唯一JVM，JDK1.2中依然以其为默认JVM。</p>
</li>
<li><p>HotSpot VM。</p>
</li>
<li><p>Exact VM：只在Solaris平台上出现过。因使用准确式内存管理(Exact Memory Management)而得名(详见<a href="/2017/10/26/JVM-垃圾收集/">JVM-垃圾收集</a>)。</p>
</li>
</ul>
<p>JDK1.2首次引入了JIT(Just In Time)编译器。Sun Classic VM只能以外挂的形式使用JIT编译器，且编译器与解释器无法混合使用，即要么纯编译，要么纯解释(因此执行效率依然糟糕)。HotSpot VM及Exact VM则内置了JIT编译器，且编译器与解释器可以混合执行。</p>
<h1 id="1999-3-30-—–-JDK1-2-1"><a href="#1999-3-30-—–-JDK1-2-1" class="headerlink" title="1999.3.30 —– JDK1.2.1"></a>1999.3.30 —– JDK1.2.1</h1><p>无工程代号。</p>
<h1 id="1999-4-8-—–-JDK1-1-8"><a href="#1999-4-8-—–-JDK1-1-8" class="headerlink" title="1999.4.8 —– JDK1.1.8"></a>1999.4.8 —– JDK1.1.8</h1><p>工程代号Chelsea(切尔西，城市名)。</p>
<h1 id="1999-4-27-—–-HotSpot-VM发布"><a href="#1999-4-27-—–-HotSpot-VM发布" class="headerlink" title="1999.4.27 —– HotSpot VM发布"></a>1999.4.27 —– HotSpot VM发布</h1><p>HotSpot VM最初由一家名为Longview Technologies的小公司所开发，后该公司于1997年被Sun收购。</p>
<p>与Sun自行研发的Exact VM相比，HotSpot VM具备作为Exact VM名称由来的准确式内存管理技术。相对的，Exact VM同样具备作为HotSpot VM名称由来的热点探测技术。因此二者在核心竞争力上其实相去不远。关于二者究竟哪一个会作为后续版本的主力JVM在Sun内部还曾有过激烈的争论。因此HotSpot VM最终的胜利并非是依托于压倒性的技术优势，而是带有一些”总得选一个吧，那就它吧”的小幸运。</p>
<p>所谓热点探测技术，就是指可以通过执行计数器找到最具编译价值的代码，然后通过JIT编译器以方法为单位进行编译。若方法被频繁调用将会触发标准编译。若方法中的有效循环次数很多，将会触发栈上替换(OSR)。</p>
<h1 id="1999-7-8-JDK1-2-2"><a href="#1999-7-8-JDK1-2-2" class="headerlink" title="1999.7.8 JDK1.2.2"></a>1999.7.8 JDK1.2.2</h1><p>工程代号Cricket(板球)。</p>
<h1 id="2000-5-8-JDK1-3-0"><a href="#2000-5-8-JDK1-3-0" class="headerlink" title="2000.5.8 JDK1.3.0"></a>2000.5.8 JDK1.3.0</h1><p>工程代号Kestrel(美洲红隼)。自JDK1.3.0起，HotSpot VM成为默认JVM，Classic VM则作为可选JVM提供。</p>
<p>本次大版本的更新主要集中在类库上，例如数学运算和新的Timer API等。</p>
<p>JNDI(Java Naming and Directory Interface,Java命名和目录接口)开始被作为一项平台级服务被提供(此前仅仅是一项扩展)。</p>
<p>使用CORBA IIOP(Internet Inter-ORB Protocol,互联网内部对象请求代理协议)实现RMI的通信协议。</p>
<p>提供了大量新的Java 2D API(然并卵)，并新增JavaSound类库。</p>
<p>自本版本起，Sun维持了一个习惯：大约每隔两年发布一个大版本，以动物命名工程代号；期间的小版本则以昆虫命名工程代号。</p>
<h1 id="2001-5-17-JDK1-3-1"><a href="#2001-5-17-JDK1-3-1" class="headerlink" title="2001.5.17 JDK1.3.1"></a>2001.5.17 JDK1.3.1</h1><p>工程代号Ladybird(瓢虫)。</p>
<h1 id="2001-1"><a href="#2001-1" class="headerlink" title="2001.1"></a>2001.1</h1><p>Sun与微软达成和解。微软承诺会逐步在其产品中移除Java技术。</p>
<h1 id="2001-7"><a href="#2001-7" class="headerlink" title="2001.7"></a>2001.7</h1><p>微软公布新版的Windows XP将不再支持Sun的JVM，并且推出了.NET平台与Java分庭抗礼。</p>
<h1 id="2002-2-13-JDK1-4-0"><a href="#2002-2-13-JDK1-4-0" class="headerlink" title="2002.2.13 JDK1.4.0"></a>2002.2.13 JDK1.4.0</h1><p>工程代号Merlin(灰背隼)。在这个大版本的更新中，JDK真正的摆脱了成长期走入了成熟。Compaq(康柏电脑)，Fujitsu(富士通)，SAS(STATISTICAL ANALYSIS SYSTEM)，Symbian(塞班)，IBM(International Business Machines Corporation,国际商业机器公司)等都参与甚至实现了自己独立的JDK1.4。正因为如此，JDK1.4.0至今仍能基本被主流应用(Spring等)所兼容。</p>
<p>JDK1.4带来了很多新特性，例如正则表达式，异常链，NIO(java non-blocking IO或New IO，用以替代此前的阻塞式IO)，日志系统，XML解析器，XSLT(XSL指EXtensible Stylesheet Language,扩展样式表语言，其为XML的扩展。T指转换)转换器等。</p>
<p>JVM方面，彻底移除了Classic VM。</p>
<h1 id="2002-9-16-JDK1-4-1"><a href="#2002-9-16-JDK1-4-1" class="headerlink" title="2002.9.16 JDK1.4.1"></a>2002.9.16 JDK1.4.1</h1><p>工程代号Grasshopper(蚱蜢)。</p>
<h1 id="2003-6-26-JDK1-4-2"><a href="#2003-6-26-JDK1-4-2" class="headerlink" title="2003.6.26 JDK1.4.2"></a>2003.6.26 JDK1.4.2</h1><p>工程代号Mantis(螳螂)。</p>
<h1 id="2004-9-29-JDK1-5-0"><a href="#2004-9-29-JDK1-5-0" class="headerlink" title="2004.9.29 JDK1.5.0"></a>2004.9.29 JDK1.5.0</h1><p>工程代号Tiger(老虎)。自本版本起，官方在宣发上已不再采取类似于JDK1.5.0的命名方式，取而代之的是采用JDK5。只有在程序内部使用的开发版本号(Developer Version，例如java -version的输出)才继续沿用此前的命名方式。为了行文统一，本文在后续描述中将沿用此前的命名方式。</p>
<p>JDK1.5做出了自JDK1.2以来在语法层面上最大幅度的改进。引入了自动装箱，泛型，动态注解，枚举，可变长参数，foreach等新功能点。</p>
<p>JVM层面改进了Java的内存模型JMM(Java Memory Model)。</p>
<p>API层面引入了java.util.concurrent并发包实现了一个粗粒度的并发框架。</p>
<h1 id="2006-11-13-开源"><a href="#2006-11-13-开源" class="headerlink" title="2006.11.13 开源"></a>2006.11.13 开源</h1><p>在当日的JavaOne大会上，Sun宣布将对Java进行开源。并建立起OpenJDK组织管理这些开源代码。在随后的一年多的时间内，除了极少量的私有的与语言特性基本无关的代码以外，OpenJDK基本可与官方的JDK等同。</p>
<p>OpenJDK中所用的JVM与官方的JDK相同，即也为HotSpot VM。</p>
<h1 id="2006-12-11-JDK1-6-0"><a href="#2006-12-11-JDK1-6-0" class="headerlink" title="2006.12.11 JDK1.6.0"></a>2006.12.11 JDK1.6.0</h1><p>工程代号Mustang(野马)。自本版本起sun终结了J2SE,J2ME,J2EE，转而使用Java SE 6,Java ME 6,Java EE 6。</p>
<p>该版本新增的功能包括：通过内置Mozilla JavaScript Rhino引擎的方式提供动态语言支持。提供编译APT。提供微型HTTP服务器API。</p>
<p>JVM方面，改进了锁与同步，垃圾收集，类加载等方面的算法。</p>
<h1 id="2009-4-20-Oracle收购Sun"><a href="#2009-4-20-Oracle收购Sun" class="headerlink" title="2009.4.20 Oracle收购Sun"></a>2009.4.20 Oracle收购Sun</h1><p>此前Oracle已收购了BEA并从其手中接收了三大商用JVM之一的JRockit(主要面向的市场为服务器端，因此可以不必考虑启动时间及响应时间，JRockit内部仅有即时编译器而没有解释器)。收购Sun后Oracle又从其手中接收了三大商用JVM中的第二个，也是最为流行的HotSpot。Oracle计划未来将会将这两款JVM合二为一，形成HotRockit。合并后的JVM将兼具两家之长，譬如使用JRockit的垃圾回收器与MissionControl(任务控制，是一种调优工具)。使用HotSpot的JIT编译器等。</p>
<p>三大商用JVM中的最后一个为IBM公司的J9，该虚拟机主要用于支持IBM自身的Java设备。其应用范围和HotSpot基本一致。</p>
<h1 id="2011-7-28-JDK1-7-0"><a href="#2011-7-28-JDK1-7-0" class="headerlink" title="2011.7.28 JDK1.7.0"></a>2011.7.28 JDK1.7.0</h1><p>工程代号Dolphin(海豚)。</p>
<p>JDK1.7.0立项时共计划了10个里程碑，原始计划至2010年9月9日完成所有里程碑。2009年2月19日完成了第一个里程碑后，因为Sun公司经营上的问题，进度将无法如期完成。</p>
<p>在Sun被Oracle收购后，为保证JDK1.7.0能在2011年7月28日准时发布，只能放弃部分计划中的功能点：例如Lambda项目(Lambda表达式，函数式编程)，Jigsaw项目(虚拟机模块化支持)，Coin项目(语言细节进化)等。</p>
<p>最终，JDK1.7的功能为：动态语言支持，GarbageFirst(G1)收集器(刚推出时G1依然处于Experimental状态，直到2012年4月的Update 4才转为正式版)，加强对非Java语言的调用支持(JSR-292，直至JDK1.7周期结束也未完全完成)，改进类加载架构等。</p>
<p>API层面引入了java.util.concurrent.forkjoin包完善了java.util.concurrent的并发框架。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-技术体系</title>
    <url>/2017/10/16/Java%E5%9F%BA%E7%A1%80-%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h1 id="JVM的两个无关性"><a href="#JVM的两个无关性" class="headerlink" title="JVM的两个无关性"></a>JVM的两个无关性</h1><p>大家较为熟知的是平台无关性。即JVM屏蔽了下层操作系统的技术细节，正如其广告语所言：Write Once,Run Anywhere。</p>
<p>另一个无关性是语言无关性。即实际编写代码的语言并非必须是Java，只要最终给出的是符合规范的平台无关的字节码(ByteCode)文件(Java中特指class文件)，JVM就能正确运行。正因为如此，描述class文件的字节码指令所能表示的语义肯定比Java语法要强，因为其不仅仅可以描述Java语法，还需支持其他语言的语义。详见<a href="/2017/11/07/JVM-类文件结构/">JVM-类文件结构</a>。语言无关性并没有平台无关性那么普及，主要原因在于其推广很不理想：JVM的设计者是很具野心及攻击性的，其希望将JVM做成一个通用的平台，所有语言都可在其上运行。因此打从一开始，Java虚拟机规范(Java Virtual Machine Specification)与Java语言规范(Java Language Specification)就是分开发布的。从纯技术的角度而言，理论上这是可行的。但目前已成熟的主流语言(C，C++，Python等)，即便有可在JVM上运行的版本，让它们放弃已经非常成熟的自有体系转而投入这个需要做二次转换的平台是很不现实的。</p>
<p>当然，语言无关性也并非一无所成。一些新兴的小众语言(Clojure，JRuby，Groovy，Scala等)选择依托Java这个成熟而又完整的体系来帮助自己节约成本，迅速起飞。从广义上讲，这些语言都是Java技术体系中的一员。</p>
<p>举个小例子：JVM就好比微信公众平台。对于订餐软件而言，理论上都可以使用该平台进行推广。但是对于美团，饿了吗之类的巨头，其投入重点自然是自家的APP而非微信公众号。相反，对于一些小的创业性质的订餐软件而言，独立开发一款APP需要付出高昂的成本，此时利用微信平台所积累的技术及用户基础全力推广公众号将是更好的选择。</p>
<p>虽然一直受挫，但JVM的语言无关性寄托了一个非常美好的愿景：在一个平台上可运行多种语言，意味着同一个程序的不同模块可分别使用不同语言完成，每个语言都做它最擅长的那一部分。同时因为各语言身处同一平台之上，相互之间的沟通也将毫无障碍：跨语言的协作将像调用自身语言原生的API那样自然。</p>
<p>通常我们所说的Java技术体系是狭义的(本文也是如此)：即编写代码的语言特指Java。毕竟这是JVM最为广泛的应用。</p>
<a id="more"></a>

<h1 id="Java技术体系"><a href="#Java技术体系" class="headerlink" title="Java技术体系"></a>Java技术体系</h1><p><strong>依功能划分</strong></p>
<p>即站在软件开发人员的角度思考问题，分为：</p>
<ul>
<li><p>JVM。</p>
</li>
<li><p>class文件(字节码文件)格式。</p>
</li>
<li><p>Java语言语法。</p>
</li>
<li><p>Java API类库。又可细分为核心类库及扩展类库。核心类库一般以java.*作为包名，主要面向Java SE。扩展类库一般以javax.*作为包名，主要是针对Java EE对核心类库所作出的补充。但由于历史原因，一部分曾经的扩展类库进入到了核心类库，因此核心类库中也会包含部分javax.*的代码。</p>
</li>
<li><p>第三方Java类库。例如Spring，Mybatis及Maven仓库中的众多框架。</p>
</li>
</ul>
<p>JVM+Java语言语法+Java API类库中的核心类库统称为JDK(Java Development Kit)。JDK是官方所定义的开发一个标准Java应用的最小集，也是Java技术体系中最为重要的一部分，因此很多时候我们都会用JDK来代指Java技术体系。</p>
<p>相对应的，JVM+Java API类库中的核心类库统称为JRE(Java Runtime Environment)，JRE是官方所定义的运行一个标准Java应用的最小集。较之JDK之所以少了Java语言语法，是因为JVM的语言无关性：如果仅仅只为运行程序的话，JVM只需拿到class格式的文件即可。</p>
<p><strong>依应用平台划分</strong></p>
<p>即站在用户的角度思考问题，分为：</p>
<ul>
<li><p>Java Card：支持Java小程序(Applet)运行在小内存设备(如智能卡)上的平台。</p>
</li>
<li><p>Java ME(Micro Edition)：最初被称为J2ME(Java 2 Platform, Micro Edition)。支持Java程序运行在移动终端上的平台。其Java API类库有所精简，并会加入针对移动终端的特殊支持。Java ME与同样是以Java为基础，面向移动终端的安卓(Android)相比是完全不同的两种平台。Java ME所使用的JVM遵循Java虚拟机规范，而安卓则是完全另起炉灶。虽然Java ME的诞生时间较之安卓要早，但近年来安卓如日中天，Java ME则处于不断衰落的边缘化状态。</p>
</li>
<li><p>Java SE(Standard Edition)：最初被称为J2SE(Java 2 Platform, Standard Edition)。支持面向桌面级应用(使用JDK开发的标准Java应用)的平台。</p>
</li>
<li><p>Java EE(Enterprise Edition)：最初被称为J2EE(Java 2 Platform, Enterprise Edition)。支持使用多层架构的企业应用(如ERP[Enterprise Resource Planning,企业管理系统])的平台。可看作是Java SE的升级复杂版。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 反射-基础</title>
    <url>/2017/10/13/Java%E5%8F%8D%E5%B0%84-%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="/2017/11/23/JVM-类加载机制/">JVM-类加载机制</a>的第一阶段加载是整个类加载过程中最为灵活的一个阶段。<a href="/2017/11/23/JVM-类加载机制/">JVM-类加载机制</a>中具体介绍了在类信息来源上可以玩的花活，其实总结一下，来源主要可分为两大类：</p>
<ol>
<li>编译期已知。或者具体来说，就是由javac编译器生成的class文件。</li>
<li>编译期未知。会在运行期类加载-加载阶段动态的从某一特定数据源获取class文件。</li>
</ol>
<p>前者也被称作RTTI(Run-Time Type Identification，即运行时类型识别)，后者则被称作反射。</p>
<p>在Java API中，反射的功能大多集中在包java.lang.reflect中。</p>
<h1 id="获得一个类的类对象"><a href="#获得一个类的类对象" class="headerlink" title="获得一个类的类对象"></a>获得一个类的类对象</h1><ul>
<li>类型.class，例如：String.class</li>
<li>对象.getClass()，例如：str.getClass()</li>
<li>Class.forName()，例如：Class.forName(“java.lang.String”)</li>
</ul>
<p>大多的反射操作基本都是通过这个类对象完成的。</p>
<a id="more"></a>

<h1 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h1><p>类对象.newInstance()，例如：String.class.newInstance()。默认调用无参构造函数，因此要求被调用类中必须有显式定义的可调用的无参构造函数。违反该规定可通过编译，但是运行时会抛出异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InstantiationException, IllegalAccessException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.class.newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.InstantiationException: com.test.Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Class.newInstance(Class.java:368)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:9)</span></pre></td></tr></table></figure>

<hr>
<p>类对象.getConstructor()：返回指定参数类型、具有public访问权限的构造器对象。</p>
<p>类对象.getDeclaredConstructor()：返回指定参数类型、所有声明的(包括private)构造器对象。 </p>
<p>获得构造器对象(Constructor)后调用其newInstance()方法创建对象。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.lang.reflect.InvocationTargetException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int i;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若类型为int则会报错:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * java.lang.NoSuchMethodException: com.test.Test.&lt;init&gt;(java.lang.Integer)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(Integer i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.i &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException, SecurityException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Constructor&lt;Test&gt; constructor &#x3D; Test.class.getConstructor(Integer.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(constructor.newInstance(5).i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span></pre></td></tr></table></figure>

<h1 id="通过反射获取和设置对象私有字段"><a href="#通过反射获取和设置对象私有字段" class="headerlink" title="通过反射获取和设置对象私有字段"></a>通过反射获取和设置对象私有字段</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Constructor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.lang.reflect.Field;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通过反射获取对象指定字段(变量)的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param target 目标对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param fieldName 字段的名字</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @return 字段的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Object getValue(Object target, String fieldName) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Class&lt;?&gt; clazz &#x3D; target.getClass();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String[] fs &#x3D; fieldName.split(&quot;\\.&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for(int i &#x3D; 0; i &lt; fs.length - 1; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Field f &#x3D; clazz.getDeclaredField(fs[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                f.setAccessible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                target &#x3D; f.get(target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                clazz &#x3D; target.getClass();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Field f &#x3D; clazz.getDeclaredField(fs[fs.length - 1]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            f.setAccessible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return f.get(target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new RuntimeException(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通过反射给对象的指定字段赋值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param target 目标对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param fieldName 字段的名称</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param value 值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void setValue(Object target, String fieldName, Object value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Class&lt;?&gt; clazz &#x3D; target.getClass();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String[] fs &#x3D; fieldName.split(&quot;\\.&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for(int i &#x3D; 0; i &lt; fs.length - 1; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Field f &#x3D; clazz.getDeclaredField(fs[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                f.setAccessible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Object val &#x3D; f.get(target);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if(val &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Constructor&lt;?&gt; c &#x3D; f.getType().getDeclaredConstructor();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    c.setAccessible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    val &#x3D; c.newInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    f.set(target, val);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                target &#x3D; val;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                clazz &#x3D; target.getClass();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Field f &#x3D; clazz.getDeclaredField(fs[fs.length - 1]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            f.setAccessible(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            f.set(target, value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new RuntimeException(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="通过反射调用对象的方法"><a href="#通过反射调用对象的方法" class="headerlink" title="通过反射调用对象的方法"></a>通过反射调用对象的方法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String str &#x3D; &quot;hello&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Method m &#x3D; str.getClass().getMethod(&quot;toUpperCase&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(m.invoke(str));    &#x2F;&#x2F; 输出HELLO</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 反射</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDBC-事务</title>
    <url>/2017/10/12/JavaJDBC-%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<p>只有存在并发数据访问时才需要事务。</p>
<h1 id="事务的ACID"><a href="#事务的ACID" class="headerlink" title="事务的ACID"></a>事务的ACID</h1><ul>
<li>原子性(Atomic)：事务中各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败</li>
<li>一致性(Consistent)：事务必须使数据库从一个一致性状态变到另一个一致性状态</li>
<li>隔离性(Isolated)：并发执行的事务彼此无法看到对方的中间状态</li>
<li>持久性(Durable)：事务完成后所做的改动都会被持久化。即使发生灾难性的失败，都可以通过日志和同步备份在故障发生后重建数据</li>
</ul>
<a id="more"></a>

<h1 id="事务常见问题"><a href="#事务常见问题" class="headerlink" title="事务常见问题"></a>事务常见问题</h1><p>当多个事务访问同一数据时，可能会存在5类问题：包括3类数据读取问题(脏读，不可重复读和幻读)和2类数据更新问题(第1类丢失更新和第2类丢失更新)。</p>
<p><strong>脏读(Dirty Read)</strong></p>
<p>A事务读取B事务尚未提交的数据并在此基础上操作，而B事务执行回滚，那么A读取到的数据就是脏数据。</p>
<p><img src="/images/blog_pic/JavaJDBC/%E4%BA%8B%E5%8A%A1/0.jpg" alt="0.jpg"></p>
<p><strong>不可重复读(Unrepeatable Read)</strong></p>
<p>事务A重新读取前面读取过的数据，发现该数据已经被另一个已提交的事务B修改过了。</p>
<p><img src="/images/blog_pic/JavaJDBC/%E4%BA%8B%E5%8A%A1/1.jpg" alt="1.jpg"></p>
<p><strong>幻读(Phantom Read)</strong></p>
<p>事务A重新执行一个查询，返回一系列符合查询条件的行，发现其中插入了被事务B提交的行。</p>
<p><img src="/images/blog_pic/JavaJDBC/%E4%BA%8B%E5%8A%A1/2.jpg" alt="2.jpg"></p>
<p><strong>第1类丢失更新</strong></p>
<p>事务A撤销时，把已经提交的事务B的更新数据覆盖了。</p>
<p><img src="/images/blog_pic/JavaJDBC/%E4%BA%8B%E5%8A%A1/3.jpg" alt="3.jpg"></p>
<p><strong>第2类丢失更新</strong></p>
<p>事务A覆盖事务B已经提交的数据，造成事务B所做的操作丢失。</p>
<p><img src="/images/blog_pic/JavaJDBC/%E4%BA%8B%E5%8A%A1/4.jpg" alt="4.jpg"></p>
<h1 id="常见问题的对策"><a href="#常见问题的对策" class="headerlink" title="常见问题的对策"></a>常见问题的对策</h1><p>数据库通常会通过锁机制来解决数据并发访问问题。按锁定对象不同可以分为表级锁和行级锁；按并发事务锁定关系可以分为共享锁和独占锁。</p>
<p>直接使用锁是非常麻烦的，为此数据库为用户提供了自动锁机制，只要用户指定会话的事务隔离级别，数据库就会通过分析SQL语句然后为事务访问的资源加上合适的锁。ANSI/ISO SQL 92标准定义了4个等级的事务隔离级别，如下表所示：</p>
<p><img src="/images/blog_pic/JavaJDBC/%E4%BA%8B%E5%8A%A1/5.jpg" alt="5.jpg"></p>
<h1 id="JDBC中的事务处理"><a href="#JDBC中的事务处理" class="headerlink" title="JDBC中的事务处理"></a>JDBC中的事务处理</h1><p>Connection提供了事务处理的方法，通过调用setAutoCommit(false)可以设置手动提交事务，当事务完成后用commit()显式提交事务。如果在事务处理过程中发生异常则通过rollback()进行事务回滚。除此之外，从JDBC 3.0开始还引入了Savepoint(保存点)的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。</p>
]]></content>
      <categories>
        <category>Java JDBC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDBC</tag>
        <tag>并发</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDBC-示例</title>
    <url>/2017/10/12/JavaJDBC-%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>引入依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;version&gt;5.1.43&lt;&#x2F;version&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;dependency&gt;</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.sql.Connection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.DriverManager;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.PreparedStatement;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.ResultSet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.SQLException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Connection connection &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PreparedStatement preparedStatement &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ResultSet resultSet &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            connection &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8&quot;, &quot;root&quot;, &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    &#x2F;&#x2F; ?表示占位符</span></pre></td></tr><tr><td class="code"><pre><span class="line">            preparedStatement &#x3D; connection.prepareStatement(&quot;select * from user where name&#x3D;?&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	    &#x2F;&#x2F; 向占位符中填入值。需要注意的是，该值从1开始</span></pre></td></tr><tr><td class="code"><pre><span class="line">            preparedStatement.setString(1, &quot;博丽灵梦&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            resultSet &#x3D; preparedStatement.executeQuery();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (resultSet.next()) System.out.println(resultSet.getString(&quot;id&quot;) + &quot;    &quot; + resultSet.getString(&quot;name&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch(Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null !&#x3D; resultSet) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    resultSet.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null !&#x3D; preparedStatement) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    preparedStatement.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null !&#x3D; connection) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    connection.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (SQLException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该代码在import时，有以下冲突：</p>
<ul>
<li>com.mysql.cj.jdbc.PreparedStatement(C)</li>
<li>java.sql.PreparedStatement(I，导入)</li>
</ul>
<hr>
<p>执行insert,update,delete等操作时需sqlSession.commit()，select时则无需这么做。</p>
<hr>
<p>JDBC将封装SQL的单元称为statement，PreparedStatement是其中的一种，即预编译的Statement。</p>
<p>较之普通的statement，PreparedStatement有如下两点优势：</p>
<p><strong>防止SQL注入</strong></p>
<p>SQL注入简单举例:</p>
<p>SQL模版如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String sql &#x3D; &quot;select * from user where name&#x3D;&#39;&quot; + name + &quot;&#39;&quot;;</span></pre></td></tr></table></figure>

<p>正常情况下，若传入name如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String name &#x3D; &quot;博丽灵梦&quot;;</span></pre></td></tr></table></figure>

<p>则模版实际执行时的sql为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where name&#x3D;&#39;博丽灵梦&#39;</span></pre></td></tr></table></figure>

<p>若传入name变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String name &#x3D; &quot;博丽灵梦&#39; or &#39;1&#x3D;1&quot;;</span></pre></td></tr></table></figure>

<p>则模版实际执行时的SQL为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where name&#x3D;&#39;博丽灵梦&#39; or &#39;1&#x3D;1&#39;</span></pre></td></tr></table></figure>

<p>会将表中所有数据均查询出来，形成SQL注入。</p>
<p><strong>效率高</strong></p>
<p>当使用statement时，数据库接收到SQL语句后会找寻最优执行途径即进行编译，编译的结果会记录到缓存中，下次再遇到相同的SQL则会直接读取缓存中已有的方案而跳过编译的步骤。但是在使用statement时SQL1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where id&#x3D;1</span></pre></td></tr></table></figure>

<p>与SQL2:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where id&#x3D;2</span></pre></td></tr></table></figure>

<p>是两条不同的SQL，因此即便数据库缓存中已有SQL1的处理结果，当其接到SQL2的请求时仍需重新编译，即便这两个SQL执行的最优途径实际上是相同的。PreparedStatement使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from user where id&#x3D;?</span></pre></td></tr></table></figure>

<p>规避了这个问题。</p>
]]></content>
      <categories>
        <category>Java JDBC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDBC-碎片</title>
    <url>/2017/10/12/JavaJDBC-%E7%A2%8E%E7%89%87/</url>
    <content><![CDATA[<h1 id="JDBC能否处理Blob和Clob？"><a href="#JDBC能否处理Blob和Clob？" class="headerlink" title="JDBC能否处理Blob和Clob？"></a>JDBC能否处理Blob和Clob？</h1><a id="more"></a>

<p>Blob是为存储大的二进制数据而设计的二进制大对象(Binary Large Object)。Clob是为存储大的文本数据而设计的大字符对象(Character Large Object)。JDBC的PreparedStatement和ResultSet都提供了相应的方法来支持Blob和Clob操作。</p>
<p>例如，表设计如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table person_photo</span></pre></td></tr><tr><td class="code"><pre><span class="line">(</span></pre></td></tr><tr><td class="code"><pre><span class="line">id int primary key auto_increment,</span></pre></td></tr><tr><td class="code"><pre><span class="line">name varchar(20) unique not null,</span></pre></td></tr><tr><td class="code"><pre><span class="line">photo longblob</span></pre></td></tr><tr><td class="code"><pre><span class="line">);</span></pre></td></tr></table></figure>

<p>程序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.Connection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.DriverManager;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.PreparedStatement;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.sql.SQLException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Connection connection &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PreparedStatement ps &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            connection &#x3D; DriverManager.getConnection(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis?characterEncoding&#x3D;utf-8&quot;, &quot;root&quot;, &quot;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ps &#x3D; connection.prepareStatement(&quot;insert into person_photo values (default, ?, ?)&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ps.setString(1, &quot;八云紫&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try (InputStream in &#x3D; new FileInputStream(&quot;d:\\0.jpg&quot;)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ps.setBinaryStream(2, in);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(ps.executeUpdate() &#x3D;&#x3D; 1 ? &quot;插入成功&quot; : &quot;插入失败&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch(IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ClassNotFoundException | SQLException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null !&#x3D; ps) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ps.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null !&#x3D; connection) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    connection.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (SQLException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">插入成功</span></pre></td></tr></table></figure>

<p>数据库受影响变为：</p>
<p><img src="/images/blog_pic/JavaJDBC/%E7%A2%8E%E7%89%87/0.jpg" alt="0.jpg"></p>
]]></content>
      <categories>
        <category>Java JDBC</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-回显服务器</title>
    <url>/2017/10/12/Java%E5%B9%B6%E5%8F%91-%E5%9B%9E%E6%98%BE%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="用套接字-Socket-编程实现一个多线程的回显-echo-服务器"><a href="#用套接字-Socket-编程实现一个多线程的回显-echo-服务器" class="headerlink" title="用套接字(Socket)编程实现一个多线程的回显(echo)服务器"></a>用套接字(Socket)编程实现一个多线程的回显(echo)服务器</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStreamReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.PrintWriter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.net.ServerSocket;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.net.Socket;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.slf4j.Logger;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.slf4j.LoggerFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class EchoServer &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final static Logger LOGGER &#x3D; LoggerFactory.getLogger(EchoServer.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class ClientHandler implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private Socket client;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public ClientHandler(Socket client) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.client &#x3D; client;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try(BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(client.getInputStream()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                PrintWriter pw &#x3D; new PrintWriter(this.client.getOutputStream())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String msg &#x3D; br.readLine();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                LOGGER.info(&quot;server get &quot; + this.client.getInetAddress() + &quot;:&quot; + msg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pw.println(&quot;已处理 [&quot; + msg + &quot;]&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                pw.flush();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch(Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                LOGGER.error(&quot;fail to get data&quot;, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    client.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    LOGGER.error(&quot;fail to close client&quot;, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try(ServerSocket server &#x3D; new ServerSocket(6789)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            LOGGER.info(&quot;server start...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            es &#x3D; Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while(true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Socket client &#x3D; server.accept();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                es.submit(new ClientHandler(client));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            LOGGER.error(&quot;server catch error&quot;, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStreamReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.PrintWriter;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.net.Socket;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.slf4j.Logger;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.slf4j.LoggerFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class EchoClient &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final static Logger LOGGER &#x3D; LoggerFactory.getLogger(EchoClient.class);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Socket client &#x3D; new Socket(&quot;localhost&quot;, 6789);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        PrintWriter pw &#x3D; new PrintWriter(client.getOutputStream());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String msg &#x3D; &quot;八云蓝请求更多的鱼豆腐&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pw.println(msg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        pw.flush();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        LOGGER.info(&quot;client send:&quot; + msg);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(client.getInputStream()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        LOGGER.info(&quot;server return:&quot; + br.readLine());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        br.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        client.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>日志输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017-10-12 17:14:59 echo.EchoServer:49 [INFO] - server start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">2017-10-12 17:15:04 echo.EchoServer:31 [INFO] - server get &#x2F;127.0.0.1:八云蓝请求更多的鱼豆腐</span></pre></td></tr><tr><td class="code"><pre><span class="line">2017-10-12 17:15:04 echo.EchoClient:21 [INFO] - client send:八云蓝请求更多的鱼豆腐</span></pre></td></tr><tr><td class="code"><pre><span class="line">2017-10-12 17:15:04 echo.EchoClient:23 [INFO] - server return:已处理 [八云蓝请求更多的鱼豆腐]</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>回显</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-字符串在文件中的出现次数</title>
    <url>/2017/10/12/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%9C%A8%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0/</url>
    <content><![CDATA[<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int countWordInFile(String filename, String word) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int count &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try (FileReader fr &#x3D; new FileReader(filename)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try (BufferedReader br &#x3D; new BufferedReader(fr)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                String line &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while ((line &#x3D; br.readLine()) !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int index &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    while (line.length() &gt;&#x3D; word.length() &amp;&amp; (index &#x3D; line.indexOf(word)) &gt;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        line &#x3D; line.substring(index + word.length());</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ex.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return count;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(countWordInFile(&quot;e:\\blog\\test\\temp.txt&quot;, &quot;public&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO-流</title>
    <url>/2017/10/12/JavaIO-%E6%B5%81/</url>
    <content><![CDATA[<h1 id="Java中有几种类型的流？"><a href="#Java中有几种类型的流？" class="headerlink" title="Java中有几种类型的流？"></a>Java中有几种类型的流？</h1><ul>
<li>字节流，继承于InputStream，OutputStream</li>
<li>字符流，继承于Reader，Writer</li>
</ul>
<a id="more"></a>

<h1 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.InputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.OutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.nio.ByteBuffer;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.nio.channels.FileChannel;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void fileCopy(String source, String target) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try (InputStream in &#x3D; new FileInputStream(source)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try (OutputStream out &#x3D; new FileOutputStream(target)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                byte[] buffer &#x3D; new byte[4096];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int bytesToRead;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while((bytesToRead &#x3D; in.read(buffer)) !&#x3D; -1) out.write(buffer, 0, bytesToRead);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void fileCopyNIO(String source, String target) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try (FileInputStream in &#x3D; new FileInputStream(source)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try (FileOutputStream out &#x3D; new FileOutputStream(target)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                FileChannel inChannel &#x3D; in.getChannel();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                FileChannel outChannel &#x3D; out.getChannel();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ByteBuffer buffer &#x3D; ByteBuffer.allocate(4096);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while(inChannel.read(buffer) !&#x3D; -1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    buffer.flip();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    outChannel.write(buffer);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    buffer.clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fileCopyNIO(&quot;e:\\1.txt&quot;, &quot;e:\\2.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="Scanner接受键盘输入"><a href="#Scanner接受键盘输入" class="headerlink" title="Scanner接受键盘输入"></a>Scanner接受键盘输入</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Scanner;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try (Scanner scanner &#x3D; new Scanner(System.in)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;String Line:&quot; + scanner.nextLine());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;String:&quot; + scanner.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;Boolean:&quot; + scanner.nextBoolean());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;Byte:&quot; + scanner.nextByte());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;short:&quot; + scanner.nextShort());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;Integer:&quot; + scanner.nextInt());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;Long:&quot; + scanner.nextLong());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;float:&quot; + scanner.nextFloat());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;double:&quot; + scanner.nextDouble());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">line</span></pre></td></tr><tr><td class="code"><pre><span class="line">String Line:line</span></pre></td></tr><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">String:reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">Boolean:true</span></pre></td></tr><tr><td class="code"><pre><span class="line">12</span></pre></td></tr><tr><td class="code"><pre><span class="line">Byte:12</span></pre></td></tr><tr><td class="code"><pre><span class="line">14</span></pre></td></tr><tr><td class="code"><pre><span class="line">short:14</span></pre></td></tr><tr><td class="code"><pre><span class="line">22</span></pre></td></tr><tr><td class="code"><pre><span class="line">Integer:22</span></pre></td></tr><tr><td class="code"><pre><span class="line">342</span></pre></td></tr><tr><td class="code"><pre><span class="line">Long:342</span></pre></td></tr><tr><td class="code"><pre><span class="line">2.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">float:2.1</span></pre></td></tr><tr><td class="code"><pre><span class="line">4.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">double:4.5</span></pre></td></tr></table></figure>

<p>线程执行至scanner.nextXXX()时会阻塞(基本数据类型中没有针对char的操作)，等待用户输入。当接收到回车时认为用户输入完成。用户在此期间输入的内容会作为scanner.nextXXX()的返回值返回。当传入字节流对应的数据不符合接收函数的类型规范时会抛出异常。</p>
]]></content>
      <categories>
        <category>Java IO</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IO</tag>
        <tag>流</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-查找链表中的倒数第k个结点</title>
    <url>/2017/10/12/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E6%9F%A5%E6%89%BE%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
    <content><![CDATA[<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Node reGetKthNode(Node head, int k) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (k &lt;&#x3D; 0) throw new IllegalArgumentException(&quot;k &lt;&#x3D; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; head) return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node p &#x3D; head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node q &#x3D; head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; p移动k-1次。即保证p指在正数第k个结点上</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 1; i &lt; k; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (null &#x3D;&#x3D; p) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            p &#x3D; p.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 链表没有正数第k个结点，自然不会有倒数第k个结点</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; p) return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 记忆时，可依k&#x3D;1的特例记忆</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (null !&#x3D; p.next) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            p &#x3D; p.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            q &#x3D; q.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return q;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node head &#x3D; Node.createList(new int[] &#123;1, 2, 3, 4, 5&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(reGetKthNode(head, 5).data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Node &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int data;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Node next;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Node createList(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node head &#x3D; new Node();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node temp &#x3D; head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp.data &#x3D; a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &#x3D;&#x3D; a.length - 1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp.next &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp.next &#x3D; new Node();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp &#x3D; temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void show() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node temp &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (null !&#x3D; temp) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(temp.data + &quot;\t&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp &#x3D; temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-查找</title>
    <url>/2017/10/12/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>时间复杂度：O(logN)</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Search &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int serch(int[] a, int key) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return search(a, key, 0, a.length - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int search(int[] a, int key, int begin, int end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (begin &gt; end) return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int mid &#x3D; begin + (end - begin) &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key &#x3D;&#x3D; a[mid]) return mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key &lt; a[mid]) return search(a, key, begin, mid - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (key &gt; a[mid]) return search(a, key, mid + 1, end);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[] a &#x3D; &#123;1, 2, 3, 5&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(serch(a, 3));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-翻转单链表</title>
    <url>/2017/10/11/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BF%BB%E8%BD%AC%E5%8D%95%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 递归</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Node reverse(Node node) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; node || null &#x3D;&#x3D; node.next) return node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node head &#x3D; reverse(node.next);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        node.next.next &#x3D; node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        node.next &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 遍历</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Node reverse2(Node node) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; node || null &#x3D;&#x3D; node.next) return node;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           Node p &#x3D; node;    &#x2F;&#x2F; 前一个结点</span></pre></td></tr><tr><td class="code"><pre><span class="line">           Node c &#x3D; node.next;    &#x2F;&#x2F; 当前结点</span></pre></td></tr><tr><td class="code"><pre><span class="line">           Node n &#x3D; c;    &#x2F;&#x2F; 后一个结点</span></pre></td></tr><tr><td class="code"><pre><span class="line">           while (null !&#x3D; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               n &#x3D; c.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               c.next &#x3D; p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               p &#x3D; c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">               c &#x3D; n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           node.next &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           return p;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node head &#x3D; Node.createList(new int[] &#123;1, 2, 3, 4, 5&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        head.show();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        reverse2(head).show();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Node &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int data;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Node next;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static Node createList(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node head &#x3D; new Node();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node temp &#x3D; head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; a.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp.data &#x3D; a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &#x3D;&#x3D; a.length - 1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp.next &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp.next &#x3D; new Node();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                temp &#x3D; temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return head;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void show() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Node temp &#x3D; this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (null !&#x3D; temp) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(temp.data + &quot;\t&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp &#x3D; temp.next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-跳线数组中的最大值</title>
    <url>/2017/10/11/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E8%B7%B3%E7%BA%BF%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<p>求形如4,5,6,1,2,3中的最大值，可能会包含重复值。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static int serchMax(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (null &#x3D;&#x3D; a) throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return serchMax(a, 0, a.length - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private static int serchMax(int[] a, int begin, int end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (a[end] &gt; a[begin]) return a[end];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    while (begin &lt; end &amp;&amp; a[begin] &#x3D;&#x3D; a[begin + 1]) begin++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (begin &#x3D;&#x3D; end) return a[begin];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    while (a[end] &#x3D;&#x3D; a[end - 1]) end--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int mid &#x3D; begin + (end - begin) &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (a[mid] &gt; a[mid + 1]) return a[mid];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (a[mid] &gt;&#x3D; a[begin]) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return serchMax(a, mid + 1, end);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return serchMax(a, begin, mid - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-抽象类及接口</title>
    <url>/2017/10/10/Java%E5%9F%BA%E7%A1%80-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%8F%8A%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><p>接口可以继承接口，而且支持多重继承。</p>
<p>接口默认隐含的修饰符为public abstract，且只能是public abstract。</p>
<p>接口中的字段默认隐含了public,static,final，且只能被这3个修饰符修饰。</p>
<p>接口中的方法默认隐含了public abstract(其实就是比普通的抽象方法多了public这个限制条件)，且只能被这两个修饰符修饰。</p>
<a id="more"></a>

<h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><p>抽象类可以实现接口。</p>
<p>抽象类可继承具体类也可继承抽象类。</p>
<p>抽象类可以包含构造函数，但不能用来new实例，只能被子类的构造函数调用。看下面的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract void m1();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void m2() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.m1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>编译是不会报错的。因为抽象方法无法new实例，而欲调用实例方法又必须先实例化，因此m2中的this必然是该抽象类的某个非抽象的孩子。</p>
<h1 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h1><p>抽象方法不可以是静态方法，被final修饰的方法，私有方法。因为这些方法不可以被继承，而抽象方法必须要依靠继承才得以实现。</p>
<p>抽象方法不可以是本地方法，因为本地方法已有本地方法实现，而抽象方法没有实现。</p>
<p>抽象方法不可以被synchronized修饰，因为同步控制必须涉及实现细节，而抽象方法没有实现。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>抽象类</tag>
        <tag>接口</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-方法参数的值传递及引用传递</title>
    <url>/2017/10/10/Java%E5%9F%BA%E7%A1%80-%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E5%8F%8A%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>本质上，只有值传递这一种传递方式，所谓的引用传递是值传递的一种。即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将2这个值复制一份传递给m</span></pre></td></tr><tr><td class="code"><pre><span class="line">int a &#x3D; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">m(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 将引用o复制一份并将其值传递给m</span></pre></td></tr><tr><td class="code"><pre><span class="line">m(o);</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>值传递的核心就在于”复制”。传递的并不是原始数据，而是复制出的，与原始数据相等的东西。因此方法对这个克隆体所做的一切操作都不会影响原始数据。</p>
<p>虽然理论基础是统一的，但是当传递的是引用时，可能会让人产生一些迷茫。这也是为什么很多人将引用传递从值传递中提出来单独论述的原因。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O o &#x3D; new O();</span></pre></td></tr><tr><td class="code"><pre><span class="line">m(o);</span></pre></td></tr></table></figure>

<p>执行m(o)时，会复制出一份引用o的副本o_c并将其传递给m。自此o与o_c就是两个完全独立的个体，不会再有任何瓜葛。但是问题在于，初始时，因为o_c是o的副本，因此其空间中存放的对象地址必然与o相同。进而，如果m中有如下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">o &#x3D; new O();</span></pre></td></tr></table></figure>

<p>此举相当于将o_c中存放的对象地址指向了一个新的对象。而由于o与o_c已完全独立，因此并不会导致o中存放的对象地址发生变化。</p>
<p>但是，如果我们在m中做如下操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">o.setName(&quot;八云紫&quot;);</span></pre></td></tr></table></figure>

<p>此时o_c并没有修改其内部存放的对象地址，而是直接操作了该对象中的数据。对此o中存放的对象地址依然没有发生变化，但由于其所存放的对象本身被o_c的操作所修改，看起来仿佛是传递进方法的引用影响了原始引用一样。但是即便如此，o_c也没有真正修改o中存储的值。</p>
<p>举一个生活中的小例子：小王手中有一个神秘网站的网址，从这个网站可以下载神奇的影片。本质上，小王所拥有的并非网站本身，而仅仅是网址这个字符串。小刘抄到了这个网址，那么无论小刘做什么事，对小王所拥有的那个字符串都不会造成影响。注意：这里所说的不会被影响的事物是小王的”网址字符串”。若小刘仅仅只是修改他拿到的网址为另一个网址，那么对小王完全没影响。如果小刘因为没钱充会员导致无法下载神奇的影片而一怒之下黑进了这个网站并将其中的影片全部换成了金刚葫芦娃，那么小王也无法在这个网站下载神奇的影片了。此时，小李所改变的是网站本身，并不是小王所持有的网址字符串。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>值传递</tag>
        <tag>引用传递</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-hashCode与equals</title>
    <url>/2017/10/10/Java%E5%9F%BA%E7%A1%80-hashCode%E4%B8%8Eequals/</url>
    <content><![CDATA[<h1 id="hashCode-与equals-Object-obj-的设计原则"><a href="#hashCode-与equals-Object-obj-的设计原则" class="headerlink" title="hashCode()与equals(Object obj)的设计原则"></a>hashCode()与equals(Object obj)的设计原则</h1><p>在设计hashCode()及equals(Object obj)时，应满足如下两点：</p>
<ol>
<li><p>hashCode()相等，equals(Object obj)不一定相等。</p>
</li>
<li><p>equals(Object obj)相等，hashCode()必然相等。</p>
</li>
</ol>
<a id="more"></a>

<p>如果违背了第一条，即强行要求hashCode()相等必有equals(Object obj)相等，那么配合第二条，hashCode()与equals(Object obj)就变成一回事了。换句话说，我们为了能够区分两个对象，必须保证能为其分配一个唯一的int型数字，这样做的成本太高了，对于集合型的对象而言，这甚至几乎是不可做到的。</p>
<p>如果违背了第二条，那么基于该规则定义的法则将受到动摇，程序可能发生难以预期的错误。</p>
<p>例如，Map之所以能快速找到作为key的对象，是因为其查找过程分为两步：首先通过hashCode()计算出对象在散列表中的位置，然后在该位置中使用equals(Object obj)进行线性查找。插入过程也类似：首先通过hashCode()计算出对象在散列表中的位置，然后通过equals(Object obj)判断该位置是否已有待插入对象，若已有则拒绝插入。</p>
<p>显然，如果违背了第二条，在插入时equals(Object obj)相等的对象因为不在同一个散列值下都可以插入Map中了，这违背了Map的key不可重复的原则。而查到时，自然也无法正确定位到满足equals(Object obj)相等的对象。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int hashCode;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(int hashCode) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.hashCode &#x3D; hashCode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.hashCode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;Test, Object&gt; map &#x3D; new HashMap&lt;Test, Object&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(new Test(0), null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        map.put(new Test(1), null);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(map.size());    &#x2F;&#x2F; 输出2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(map.containsKey(new Test(2)));    &#x2F;&#x2F; 输出false</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="equals-Object-obj-必须满足的原则"><a href="#equals-Object-obj-必须满足的原则" class="headerlink" title="equals(Object obj)必须满足的原则"></a>equals(Object obj)必须满足的原则</h1><ul>
<li><p>自反性：x.equals(x)必须返回true。</p>
</li>
<li><p>对称性：x.equals(y)返回true时，y.equals(x)也必须返回true。</p>
</li>
<li><p>传递性：x.equals(y)和y.equals(z)都返回true时，x.equals(z)也必须返回true。</p>
</li>
<li><p>一致性：当x和y引用的对象信息没有被修改时，多次调用x.equals(y)应该得到同样的返回值。而且对于任何非null值的引用x，x.equals(null)必须返回false。</p>
</li>
</ul>
<h1 id="equals-Object-obj-设计技巧"><a href="#equals-Object-obj-设计技巧" class="headerlink" title="equals(Object obj)设计技巧"></a>equals(Object obj)设计技巧</h1><ol>
<li><p>使用==操作符检查参数是否为这个对象的引用。</p>
</li>
<li><p>使用instanceof操作符检查参数是否为正确的类型。</p>
</li>
<li><p>对于类中的关键属性，检查参数传入对象的属性是否与之相匹配。</p>
</li>
<li><p>编写完equals方法后，确认是否满足自反性，对称性，传递性及一致性。</p>
</li>
<li><p>重写equals时总是要重写hashCode。</p>
</li>
<li><p>不要将equals方法参数中的Object对象替换为其他的类型，在重写时不要忘掉@Override注解。</p>
</li>
</ol>
<h1 id="为何hashCode-常用素数31？"><a href="#为何hashCode-常用素数31？" class="headerlink" title="为何hashCode()常用素数31？"></a>为何hashCode()常用素数31？</h1><p>以java.util.AbstractList中的hashCode()为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int hashCode &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (E e : this)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        hashCode &#x3D; 31*hashCode + (e&#x3D;&#x3D;null ? 0 : e.hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return hashCode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>为何是素数：素数减少了相乘后质因数分解的个数，和合数相比减少了冲突的概率。</p>
<p>为何是31：如果仅仅是为了避免冲突，理论上越大的素数越利于避免冲突。但是过大的素数又有导致溢出的风险。31就是这样一个大小适中的素数。同时，31 * num 等价于(num &lt;&lt; 5) – num，JVM对这个计算做过特殊的优化。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>hashCode</tag>
        <tag>equals</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-重载与重写</title>
    <url>/2017/10/10/Java%E5%9F%BA%E7%A1%80-%E9%87%8D%E8%BD%BD%E4%B8%8E%E9%87%8D%E5%86%99/</url>
    <content><![CDATA[<p>关于重载和重写的底层实现，可参见<a href="/2017/12/06/JVM-运行期方法调用/">JVM-运行期方法调用</a>，本文将从解题技巧的角度上分析重载与重写。</p>
<a id="more"></a>

<h1 id="解题技巧"><a href="#解题技巧" class="headerlink" title="解题技巧"></a>解题技巧</h1><p>不妨设计一种通用的场景：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G0 o &#x3D; new G0&#x2F;G1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">o.m(P p);</span></pre></td></tr></table></figure>

<p>其中G1为G0的孩子(儿子，孙子，重孙…)。</p>
<p><strong>总体思路</strong></p>
<ul>
<li><p>解重载(Overload)与重写(Override)问题其实就是模拟运行期JVM的方法调用操作：首先，无论如何都会在类加载的连接-解析阶段进行静态多分派(如果需要重载则重载)。随后，如果有必要(实际类型与静态类型不同)，在运行到该调用指令时进行动态单分派(即重写)。</p>
</li>
<li><p>静态方法，私有方法，构造方法，被final修饰的方法不可被子类继承，连接方式被称为解析。解析在类加载的连接-解析阶段完成，采用的手段为静态多分派(其间可能会发生重载)。但绝不会有重写(不能被子类继承，自然也不能出现静态类型与实际类型不同的情况)。换句话说，这些方法只会进行解题步骤中的第一步。</p>
</li>
<li><p>对于其他能被子类继承的方法而言，除了依然要进行静态多分派之外，在运行到该调用指令时，如果有必要(实际类型与静态类型不同)，还需进行动态单分派(即重写)。因此解题步骤中的两步都要进行。</p>
</li>
<li><p>问题的实质其实是确定两个”哪个”：调用”哪个类”的”哪个方法”。</p>
</li>
</ul>
<p><strong>解题步骤：</strong></p>
<p><strong><em>1.模拟静态多分派</em></strong></p>
<p>只考虑方法调用者o的静态类型，本步骤的所有操作都局限在这个类(即例子中的G0)中。在G0中定位出具体的m(P p)，所找寻的方法不仅仅是显式写在G0中的，G0从父类中继承到的也算。若G0中有若干个同名的方法，即需要重载。参数数量及顺序不同导致的重载易于判断，而对于存在继承关系的类型判断，寻找与P p在血缘中最为亲密的那一个。在进行类型判断时，不需要考虑方法参数P的实际类型，只以其静态类型为依据。</p>
<p>实质上，无论是o还是p，该阶段都只需要判断静态类型，因为只要没有实际运行到这一行字节码指令，JVM就无法知道实际类型到底是什么。</p>
<p>一旦该阶段完成，重载便已彻底完成其使命，后续的判断中不再涉及重载，”哪个方法”的问题也已解决一大半。不妨设此阶段决定的方法为G0类中的x，则在本次解题中，G0中对后续操作有意义的方法只有x，其余方法都可以作为干扰项剔除。</p>
<p>本步所模拟的过程是在类加载的连接-解析阶段完成的，其判断依据完全来自于编译期。因此称之为”静态”；本步的判断依据为静态类型及方法参数两个宗量，因此称之为”多分派”。</p>
<p><strong><em>2.模拟动态单分派</em></strong></p>
<p>如果静态类型与实际类型相同，即不存在重写的可能，则”哪个类”为G0，”哪个方法”为步骤1确定的x。</p>
<p>如果静态类型与实际类型不同，或者具体的说，实际类型是静态类型的子类，则此时存在重写的可能(注意仅仅是可能)。G1继承了源自G0的x(再次强调，只关注x，G0中的其他方法已与本题无关)，若发生了重写，则G1中的x将覆盖从G0中继承的x。换句话说，G1中的x已经是被G1覆盖过之后的了。最终，”哪个类”为实际类型，”哪个方法”为实际类型中的x。</p>
<p>所以简单来说，本步主要回答了以下两点问题：实际类型是否和静态类型一样？若不一样，是否发生了重写？判断重写的规则如下：</p>
<ul>
<li><p>方法的参数：必须一模一样，包括个数，顺序，类型(有继承关系的子类也不行，必须是一模一样的类)。</p>
</li>
<li><p>返回值：一样或为有继承关系的子类。</p>
</li>
<li><p>异常检查：对于Checked Exception而言，可以抛出更少的异常，但不能抛出父类中没有定义的异常。对于Unchecked Exception(RuntimeException)及Error而言则没有限制。</p>
</li>
<li><p>访问权限：应比父类中的权限更宽松，换句话说，即允许被更多人访问(public &gt; protected &gt; default[即没有修饰] &gt; private)。</p>
</li>
</ul>
<p>本步所模拟的过程是在具体执行到当行调用方法的字节码指令时完成的，因此称之为”动态”；本步的判断依据仅为实际类型这一个宗量(第三次强调，方法x在步骤1已确定，其参数自然也已确定，重写的判断依据之一就是要求参数必须一模一样)，因此称之为”单分派”。</p>
<h1 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Test test) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;Test equals&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object o &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(o.equals(new Test()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>输出：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>步骤1，模拟静态多分派:静态类型为Object，调用的方法为equals(Test test)，Object中与之血缘关系最亲近的方法为equals(Object obj)。</p>
<p>步骤2，模拟动态单分派：实际类型为Test，步骤1中确定的方法在Test中没有被重写(方法参数的类型不完全相同)。因此，最终确定被调用的方法为Test类中继承自Object类的equals(Object obj)，或者更准确的说，调用的方法为Object类中的equals(Object obj)。因为该类中的比较是基于对象地址的，因此两个不同的对象的比较结果自然为false。</p>
<p>深入分析一下，做如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Test test) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;Test equals&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object o &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(o.equals(new Test()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时无法通过编译，Eclipse下的提示为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The method equals(Test) of type Test must override or implement a supertype method。</span></pre></td></tr></table></figure>

<p>因此，如果我们试图重写父类方法，那么总是在新方法前面加上@Override是很正确的做法，因为它会在编译阶段就给出检查。</p>
<p>如果，想要重写，那么应做如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;Test equals&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object o &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(o.equals(new Test()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Test equals</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>步骤1，模拟静态多分派:静态类型为Object，调用的方法为equals(Test test)，Object中与之血缘关系最亲近的方法为equals(Object obj)。</p>
<p>步骤2，模拟动态单分派：实际类型为Test，步骤1中确定的方法在Test中被重写，因此，最终确定被调用的方法为Test类中的equals(Object obj)。</p>
<h1 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        G00 g00 &#x3D; new G10();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        G10 p &#x3D; new G10();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g00.print(p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class G00 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void print(G00 g00) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;G00 G00&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class G10 extends G00 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void print(G00 g00) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;G10 G00&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G10 G00</span></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>步骤1，模拟静态多分派:静态类型为G00，调用的方法为print(G10 p)，G00中与之血缘关系最亲近的方法为print(G00 g00)。</p>
<p>步骤2，模拟动态单分派：实际类型为G10，步骤1中确定的方法在G10中被重写，因此，最终确定被调用的方法为G10类中的print(G00 g00)。</p>
<p>稍加修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        G00 g00 &#x3D; new G10();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        G10 p &#x3D; new G10();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        g00.print(p);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class G00 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void print(G00 g00) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;G00 G00&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void print(G10 g10) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;G00 G10&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class G10 extends G00 &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void print(G00 g00) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;G10 G00&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">G00 G10</span></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>步骤1，模拟静态多分派:静态类型为G00，调用的方法为print(G10 p)，G00中与之血缘关系最亲近的方法为print(G10 g10))。</p>
<p>步骤2，模拟动态单分派：实际类型为G10，步骤1中确定的方法在G10中没有被重写。因此，最终确定被调用的方法为G10类中继承自G00类的print(G10 g10)，或者更准确的说，调用的方法为G00类中的print(G10 g10)。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>重载</tag>
        <tag>重写</tag>
        <tag>分派</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程阻塞工具类LockSupport</title>
    <url>/2017/10/07/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E5%B7%A5%E5%85%B7%E7%B1%BBLockSupport/</url>
    <content><![CDATA[<p><a href="/2017/10/05/Java并发-Thread类/">Java 并发-Thread类</a>中介绍过一对挂起-恢复线程的方法，它们是Thread类的suspend()及resume()方法。因为线程在使用suspend()方法挂起时不会让出任何资源，因此这一对方法现在已被标记为废弃。</p>
<p>那么该如何做到线程的挂起-恢复呢？Object类的wait()及notify()虽然也能起到挂起-恢复的功能，但它们最本质的功能是为synchronized机制提供通信，即便做到了线程的挂起-恢复也仅仅只是附带的结果，而非手段。而且wait()及notify()必须在synchronized代码块的范围内由其所从属的监视器对象调用，不仅灵活度不够，也不合理：线程的挂起及恢复是线程自身意愿的体现，不应该必须限制在synchronized同步代码块内，因为事实上二者并没有必然的联系。</p>
<a id="more"></a>

<p>LockSupport就是Java API针对这个问题提供的解决策略。它是一个方便使用的线程阻塞工具，可以看作是suspend()及resume()的替代品，它同样可以在线程内任意位置让线程挂起。和suspend()及resume()相比，它还有如下改进：</p>
<ul>
<li><p>被挂起的线程将让出一切资源，即处于WAITING状态。</p>
</li>
<li><p>不会出现类似于resume()被先调用导致唤醒信号丢失的情况。</p>
</li>
</ul>
<p>和wait()及notify()相比，LockSupport的不同之处在于：</p>
<ul>
<li><p>不会抛出InterruptedException。</p>
</li>
<li><p>和synchronized机制无关。不需局限在synchronized代码块的范围内。</p>
</li>
</ul>
<p>可以这样认为，在线程的挂起-恢复这个问题上，LockSupport吸收了suspend()/resume()及wait()/notify()的优点。</p>
<p>java.util.concurrent.locks.LockSupport的类定义为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class LockSupport</span></pre></td></tr></table></figure>

<p>常用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 挂起当前线程</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public static void park()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static void parkNanos(long nanos)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static void parkUntil(long deadline)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 恢复传入线程</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public static void unpark(Thread thread)</span></pre></td></tr></table></figure>

<p>下面来看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.LockSupport;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable  r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                LockSupport.park();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;线程恢复并结束&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        LockSupport.unpark(t);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程恢复并结束</span></pre></td></tr></table></figure>

<p>关于这个小例子，需要注意的是：事实上我们无法保证unpark()一定会在park()之前被调用。对于suspend()/resume()而言，这可能会导致恢复消息的丢失。然而对于LockSupport而言，无论unpark()与park()的调用顺序为何，都能保证恢复消息生效。其原因就在于LockSupport使用了类似于信号量的机制，每个线程都有一个唯一的信号量，可以称之为许可。unpark()会将该许可置为可用，park()会检查这个许可，若不可用则挂起并等待，若可用则消费这个许可并继续进行。</p>
<p>park()会将线程转为WAITING状态，如果我们将此时的线程dump出来，还会发现这个WAITING状态被贴心的标记为是由park()引起的。如果我们想在dump时获得更多的信息，还可使用如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void park(Object blocker)</span></pre></td></tr></table></figure>

<p>blocker被称为被挂起线程的阻塞对象，这样在分析问题时，就能更加的方便。</p>
<p>前文在比较LockSupport与wait()/notify()的差异时，提到LockSupport不会抛出InterruptedException，这并不意味着park()不响应中断，它只是不抛出InterruptedException：它会什么都不做，默默的返回。例子如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.LockSupport;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable  r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                LockSupport.park();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;线程继续，中断标志&#x3D;&quot; + Thread.interrupted());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程继续，中断标志&#x3D;true</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>阻塞</tag>
        <tag>LockSupport</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-守护线程</title>
    <url>/2017/10/07/Java%E5%B9%B6%E5%8F%91-%E5%AE%88%E6%8A%A4%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>守护线程(Daemon)：完成系统性服务。例如垃圾回收线程，JIT线程。</p>
<p>用户线程：完成应用程序的业务操作。</p>
<p>当用户线程全部结束时，也就意味着程序员指定的需求都已完成了。守护线程要守护的对象已经不存在了，守护线程也会结束。整个应用程序也就自然结束了。</p>
<a id="more"></a>

<p>小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread daemon &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">          public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 手动将自定义的线程设置为守护线程。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        daemon.setDaemon(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        daemon.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后，程序会随着main线程的结束而结束。</p>
<p>注意守护线程的设置必须在其启动之前，如果按如下方式改写代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread daemon &#x3D; new Thread() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">          public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">              while (true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        daemon.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 手动将自定义的线程设置为守护线程。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        daemon.setDaemon(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;后续&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后程序抛出运行时异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalThreadStateException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.setDaemon(Thread.java:1388)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:14)</span></pre></td></tr></table></figure>

<p>此时程序无法随着main线程的结束而结束。换言之daemon.setDaemon(true);失败了。daemon并非作为守护线程而是普通的用户线程在运行着。</p>
<p>main线程因抛出异常而终止，因此其后续的语句无法执行；daemon线程作为普通应用线程不受影响，因此程序会无限循环下去。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>守护线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程组</title>
    <url>/2017/10/06/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E7%BB%84/</url>
    <content><![CDATA[<h1 id="线程组与线程池的区别"><a href="#线程组与线程池的区别" class="headerlink" title="线程组与线程池的区别"></a>线程组与线程池的区别</h1><a id="more"></a>

<p>线程组关注的是线程在逻辑上的从属，使用线程组可让程序的逻辑结构更清晰，更利于模拟复杂的现实环境；线程池关注的是线程的管理，使用线程池可以避免线程频繁的创建与关闭，提高系统性能。</p>
<p>美好的猜想：从线程池处获得线程，而后交由线程组进行业务上的划分管理。</p>
<p>实际上：向线程池提交的是Runnable，具体Thread是由线程池内部创建的。而关联Thread与ThreadGroup需要在新建Thread时显示声明。因此当前尚未找到能让二者协调工作的方法。</p>
<p>或者说，这个猜想本质上是错误的：线程池管理的并非一个个已经成型的线程。即用以构建线程池中的线程所需提供的素材并非线程本身，而是生成线程的核心部件Runnable。也就是说线程池并不希望我们确定下来线程再交给它，这样它也就没法管理了。使用线程池时我们只管从池子里取线程即可，该线程是基于我们传入的Runnable生成的，因此可以满足我们的业务需求，至于这个线程是何时生成的，怎么生成的我们一概不管。而线程组是在明确的给线程打上编号：即某某线程属于某某组。一定要先有一个明确的线程才行。因此二者是无法协同工作的。</p>
<p>线程池适用的场景：大量的量产型工人迅速的出生死亡做着流程化的工作，我们不关心干活的工人是谁，甚至于我们认为新出生的工人其实不是新出生的，而是一个我们以为已经死了的工人其实没死复用的，这都无所谓，只要核心部件Runnable相同，线程池创造出的工人能力就是相同的，他们都可以毫不违和的做其他工人的工作，他们没有”自我”，没有某个工作只有这个线程才能做的情况，他们之间可以互相替代。</p>
<p>线程组适用的场景：固定的几个精英人士长时间生存，他们的工作是独一无二的，只有他们才能做，因此比起他们做的事，对他们本身的管理更为重要，因为他们的人和他们做的事是一一对应的，管理了他们的人，自然相当于管理了他们做的事。</p>
<p>下面的示例说明了这个问题。</p>
<h1 id="线程组示例"><a href="#线程组示例" class="headerlink" title="线程组示例"></a>线程组示例</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Thread.currentThread().getName() + &quot; start...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized(Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void showThreadGroup(ThreadGroup threadGroup) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; &quot; + threadGroup.getName() + &quot; &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 已启动而未终止的线程数，阻塞状态或等待状态均算。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 由于线程是动态的，因此这个值只是估计值，无法保证精确。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;当前活跃线程数&quot; + threadGroup.activeCount());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;包含线程信息:&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        threadGroup.list();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadGroup hongMoGuan &#x3D; new ThreadGroup(&quot;红魔馆&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadGroup yongYuanTing &#x3D; new ThreadGroup(&quot;永远亭&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String name : new String[]&#123;&quot;蕾米莉亚&quot;, &quot;芙兰朵露&quot;, &quot;帕秋莉&quot;&#125;) new Thread(hongMoGuan, new Test(), name).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String name : new String[]&#123;&quot;蓬莱山辉夜&quot;, &quot;八意永琳&quot;, &quot;铃仙&quot;&#125;) new Thread(yongYuanTing, new Test(), name).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.showThreadGroup(hongMoGuan);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test.showThreadGroup(yongYuanTing);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 罪袋在工作 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService zuidaiEs &#x3D; Executors.newFixedThreadPool(3);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable zuidai &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;罪袋 &quot; + Thread.currentThread().getId() + &quot; 完成工作，被回收...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 需要干出10个罪袋的工作量的活。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 我们不关心到底有几个罪袋真正工作了：也许有10个罪袋各干了一人份的活；也许只有两个罪袋每人干了5人份。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 只要结果上干完了就行。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) zuidaiEs.submit(zuidai);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">芙兰朵露 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">蕾米莉亚 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">蓬莱山辉夜 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">八意永琳 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">铃仙 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">帕秋莉 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 红魔馆 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">当前活跃线程数3</span></pre></td></tr><tr><td class="code"><pre><span class="line">包含线程信息:</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.ThreadGroup[name&#x3D;红魔馆,maxpri&#x3D;10]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread[蕾米莉亚,5,红魔馆]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread[芙兰朵露,5,红魔馆]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread[帕秋莉,5,红魔馆]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 永远亭 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">当前活跃线程数3</span></pre></td></tr><tr><td class="code"><pre><span class="line">包含线程信息:</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.ThreadGroup[name&#x3D;永远亭,maxpri&#x3D;10]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread[蓬莱山辉夜,5,永远亭]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread[八意永琳,5,永远亭]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread[铃仙,5,永远亭]</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 罪袋在工作 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 15 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 17 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 17 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 16 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 16 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 17 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 17 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 15 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 17 完成工作，被回收...</span></pre></td></tr><tr><td class="code"><pre><span class="line">罪袋 16 完成工作，被回收...</span></pre></td></tr></table></figure>

<h1 id="终止线程组中的线程-stop"><a href="#终止线程组中的线程-stop" class="headerlink" title="终止线程组中的线程(stop)"></a>终止线程组中的线程(stop)</h1><p>ThreadGroup类提供如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void stop()</span></pre></td></tr></table></figure>

<p>类似于Thread类提供的stop()，ThreadGroup类提供的stop()会强制终止线程组中的所有线程。理所当然的该方法也会有Thread类中stop()类似的问题。因此和Thread类中的stop()一样，该方法也是废弃方法。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>线程组</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-Thread类</title>
    <url>/2017/10/05/Java%E5%B9%B6%E5%8F%91-Thread%E7%B1%BB/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.Thread</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Thread implements Runnable</span></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="线程终止-stop"><a href="#线程终止-stop" class="headerlink" title="线程终止(stop)"></a>线程终止(stop)</h1><p>Thread类提供了终止线程的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void stop()</span></pre></td></tr></table></figure>

<p>类似于linux中的kill -9对进程的处理，调用该方法后，会由JVM强制从外部粗暴的杀掉线程。被杀掉的线程没有机会对其已做的事情做妥善的处理，可能会导致数据不一致的问题(已经改到一半的数据没机会回滚)。因此stop()是一个被废弃的方法。</p>
<p>用户程序可自己实现安全停止线程的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private volatile boolean ifStop;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void stopMe() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.ifStop &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.ifStop) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test test &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(3000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.stopMe();    &#x2F;&#x2F; 经过3s的睡眠后，线程终止</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="线程中断-interrupt"><a href="#线程中断-interrupt" class="headerlink" title="线程中断(interrupt)"></a>线程中断(interrupt)</h1><p>stop()方法之所以只能强制停止线程是因为JVM无法了解用户程序的业务逻辑，即无法判断何时才算是”告一段落”，何时终止线程才不会写坏数据。而上文中实现的安全停止线程的方法其实思路很简单，也很机械：在合适的，不会写坏数据的位置设置一个停止的标记，然后在合适的时机激活它。除了自己实现外，JDK也提供了一套中断机制来实现这个功能。</p>
<p>Thread类中和中断有关的方法有3个：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void interrupt()</span></pre></td></tr></table></figure>

<p>和上文的stopMe()类似，仅仅将中断标记设置为true，如果没有具体的中断处理逻辑的话单纯调用该方法是没有意义的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public boolean isInterrupted()</span></pre></td></tr></table></figure>

<p>实例方法：通过中断标记判断线程是否已被标记为中断。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static boolean interrupted()</span></pre></td></tr></table></figure>

<p>类方法：通过当前线程的中断标记判断当前线程是否已被中断。</p>
<p>如果使用Java的中断机制，上文中实现的安全停止线程的方法变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (this.isInterrupted()) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test test &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(3000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.interrupt();    &#x2F;&#x2F; 经过3s的睡眠后，线程终止</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (Thread.interrupted()) break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test test &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(3000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.interrupt();    &#x2F;&#x2F; 经过3s的睡眠后，线程终止</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>除了减少代码量外，因为中断机制是JDK所实现的基本功能，自然也能配合JDK的其他功能。sleep(), wait()/wait(long millis), join()/join(long millis) 等均可以响应中断。</p>
<p>sleep()响应中断的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(5000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;线程被中断&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;此时的中断标志为：&quot; + this.isInterrupted());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test test &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后的输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程被中断</span></pre></td></tr><tr><td class="code"><pre><span class="line">此时的中断标志为：false</span></pre></td></tr></table></figure>

<p>这段代码的结果说明两点问题：</p>
<ol>
<li><p>处于睡眠状态的线程在接到中断信息后会以抛出受检查异常InterruptedException的方式响应中断(这也是为什么sleep()要强制检查InterruptedException的原因)。</p>
</li>
<li><p>sleep()响应过中断后，线程的中断标记被重新置为false。可以理解为一次中断请求仅会被处理一次。</p>
</li>
</ol>
<p>wait()响应中断的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;线程被中断&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;此时的中断标志为：&quot; + this.isInterrupted());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test test &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        test.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后的输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程被中断</span></pre></td></tr><tr><td class="code"><pre><span class="line">此时的中断标志为：false</span></pre></td></tr></table></figure>

<p>对该代码的分析同sleep()的例子。</p>
<p>join()响应中断的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Thread t;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(Thread t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.t &#x3D; t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.t.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;被中断&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.t.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r1 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;被中断&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread(r1, &quot;t1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Thread(new Test(t1), &quot;t2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后程序会在极短的时间内结束，且输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t2被中断</span></pre></td></tr><tr><td class="code"><pre><span class="line">t1被中断</span></pre></td></tr></table></figure>

<p>对该代码的分析同wait()的例子。因为调用t.join()实质上就是让当前线程wait在了t的等待队列上。</p>
<p>该代码首先t2.interrupt();触发了this.t.join();的中断，因为其实质上是将当前线程(即t2)加入到了t1的等待队列中，因此响应中断的实质是t1的wait()。在this.t.join();的中断处理逻辑中又触发了t1的中断，此时t1在Test.class的等待队列中等待，触发中断后t1也进入中断响应逻辑处理代码，程序得以结束。</p>
<h1 id="挂起-suspend-与继续执行-resume"><a href="#挂起-suspend-与继续执行-resume" class="headerlink" title="挂起(suspend)与继续执行(resume)"></a>挂起(suspend)与继续执行(resume)</h1><p>Thread提供了如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void suspend()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public final void resume()</span></pre></td></tr></table></figure>

<p>挂起(suspend)与继续执行(resume)所实现的功能基本与Object类的wait()及notify()相同。不同之处主要有两点：</p>
<ol>
<li><p>wait()及notify()必须与synchronized配合使用。suspend()及resume()则没有限制。</p>
</li>
<li><p>处于可运行(RUNNABLE)状态的线程调用wait()后进入无限期等待(WAITING)状态，并放弃CPU和已获得的监视器对象的认可；处于可运行(RUNNABLE)状态的线程调用suspend()后依然还是可运行(RUNNABLE)状态，且不会放弃任何已获得的资源；也就是说，suspend()纯粹是线程内部的打算，和用户程序自己设计实现的忙等待并发程序很类似：在JVM看来，进入挂起状态的程序依然是在运行的，和非挂起状态没什么不同。正因为如此，挂起(suspend)与继续执行(resume)被标记为了废弃方法。</p>
</li>
</ol>
<h1 id="等待线程结束-join"><a href="#等待线程结束-join" class="headerlink" title="等待线程结束(join)"></a>等待线程结束(join)</h1><p>Thread提供了如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void join() throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    join(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public final synchronized void join(long millis) throws InterruptedException</span></pre></td></tr></table></figure>

<p>t.join()相当于让当前线程一直等到t执行结束后再继续向下执行。</p>
<p>join()本质上是由join(long millis)实现的，而join(long millis)本质上是由wait(long millis)。换句话说t.join()的本质为：将当前线程加入t的等待队列，再直白些说，就是调用了t.wait()，在t执行结束后再调用t.notifyAll()唤醒所有线程。这种逻辑带来了两个比较糟糕的问题：</p>
<p>问题1：notifyAll()唤醒的是所有挂在t等待队列上的线程，也就是说不是因为join()被挂上去的线程也被唤醒了，代码求证如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r1 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread(r1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (t1) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                t1.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;after wait on t1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>设定的1s过去后，输出了after wait on t1。而如果注掉t1.start();，程序将不会有输出，且main线程会因等待t1而无法完成。其原因就在于t1为了支持join()方法，会在结束时调用t1.notifyAll()方法，此时本不希望被唤醒的main方法线程就被意外唤醒了。</p>
<p>问题2：如果我们主动调用了notifyAll()唤醒了join()在t上的线程，甚至于我们足够不幸，调用notify()时随机唤醒了join()在t上的线程，这都不是我们所希望的(仅是理论分析，代码求证失败了，可能是还有其他保护机制)。</p>
<p>为了避免这两种情况的出现，不要将Thread的实例对象作为监视器对象。</p>
<h1 id="谦让-yield"><a href="#谦让-yield" class="headerlink" title="谦让(yield)"></a>谦让(yield)</h1><p>Thread类提供了如下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static native void yield();</span></pre></td></tr></table></figure>

<p>运行(RUNNING)状态的当前线程调用yield()后会进入就绪(READY)状态，即主动让出CPU。需要注意的有两点：</p>
<ol>
<li><p>无论运行(RUNNING)抑或就绪(READY)，都是可运行(RUNNABLE)。调用yield()后只是让出了已占有的CPU资源，并没有让出其他资源。</p>
</li>
<li><p>调用yield()进入就绪(READY)状态的线程依然还会依据基本法进行下一轮的资源竞争。</p>
</li>
<li><p>CPU只会被让给具有相同或更高优先级的线程。</p>
</li>
<li><p>无需运行于synchronized代码块中。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>线程</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>EditPlus-配置</title>
    <url>/2017/10/04/EditPlus-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h1><p>修改editplus_u.ini为：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Options]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Placement&#x3D;2C0000000200000003000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF140000000000000000050000A8020000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Window List&#x3D;00000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Marker List&#x3D;00000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Function List&#x3D;00000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Open Remote&#x3D;5C020000550100006404000067030000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Expand&#x3D;00000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Project Pos&#x3D;00000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Workspace Path&#x3D;D:\work\EditPlus</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cliptext Window&#x3D;224</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cliptext Window 2&#x3D;489</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output&#x3D;90</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output 2&#x3D;170</span></pre></td></tr><tr><td class="code"><pre><span class="line">Folding&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">FindX&#x3D;586</span></pre></td></tr><tr><td class="code"><pre><span class="line">FindY&#x3D;429</span></pre></td></tr><tr><td class="code"><pre><span class="line">Find&#x3D;align</span></pre></td></tr><tr><td class="code"><pre><span class="line">Tab Index&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cliptext&#x3D;2</span></pre></td></tr><tr><td class="code"><pre><span class="line">Custom colors&#x3D;6D6D7200FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF0031282700FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FFFFFF00FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Matching Brace&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">Indent guide&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cliptext Edit&#x3D;00000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Files]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Encoding&#x3D;65001</span></pre></td></tr><tr><td class="code"><pre><span class="line">Backup&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Backup Remote&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Fonts]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Edit Window&#x3D;F0FFFFFF00000000000000000000000090010000000000000302013143006F007500720069006500720020004E0065007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Printer&#x3D;F4FFFFFF00000000000000000000000090010000000000000000003143006F007500720069006500720020004E0065007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Output Window&#x3D;F4FFFFFF00000000000000000000000090010000000000000000003143006F007500720069006500720020004E0065007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Cliptext Window&#x3D;F4FFFFFF0000000000000000000000009001000000000001000000004D006900630072006F0073006F006600740020005900610048006500690020005500490000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Document Selector&#x3D;F4FFFFFF0000000000000000000000009001000000000001000000004D006900630072006F0073006F006600740020005900610048006500690020005500490000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hex Viewer&#x3D;F4FFFFFF00000000000000000000000090010000000000010000003143006F007500720069006500720020004E0065007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Custom 1&#x3D;F4FFFFFF00000000000000000000000090010000000000000000002241007200690061006C000000720020004E0065007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Custom 2&#x3D;F5FFFFFF000000000000000000000000900100000000000000000022560065007200640061006E00610000004E0065007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Custom 3&#x3D;F4FFFFFF000000000000000000000000900100000000000000000012540069006D006500730020004E0065007700200052006F006D0061006E0000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Custom 4&#x3D;F5FFFFFF0000000000000000000000009001000000000000000000224D0053002000530061006E0073002000530065007200690066000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">Custom 5&#x3D;F3FFFFFF00000000000000000000000090010000000000FF000000315400650072006D0069006E0061006C00000065007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Tool Option]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Top Selector&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Text]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;2238503</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;16777215</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8272368</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Embedded script]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;16777215</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;16777215</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 6]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8716287</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 7]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8716287</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 8]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8716287</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 9]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8454143</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 10]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8716287</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Quotation]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8454143</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Quotation 2]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;5107956</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Line comment]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;10789024</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Line number]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;12632256</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;2238503</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Folding mark -]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;2238503</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Matching words]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;718314</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 2]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;16379142</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Folding mark +]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;2238503</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Text selection]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;7039851</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Number]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;16524240</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Block comment]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;8421504</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Keyword 5]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;15574913</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Ruler]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;12632256</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;2566187</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Cursor indicator]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Background&#x3D;16777215</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Colors\Indent Guide]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Foreground&#x3D;7499117</span></pre></td></tr><tr><td class="code"><pre><span class="line">Default&#x3D;0</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>EditPlus</category>
      </categories>
      <tags>
        <tag>EditPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-并发级别</title>
    <url>/2017/10/04/Java%E5%B9%B6%E5%8F%91-%E5%B9%B6%E5%8F%91%E7%BA%A7%E5%88%AB/</url>
    <content><![CDATA[<h1 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h1><p>被多线程并发请求时可能导致糟糕结果的资源被称为临界区。最稳妥的做法是，同一时间点仅有一个线程能请求到临界区。</p>
<p>从狭义的角度上讲，临界区并不等同于被多线程并发请求的资源。临界区是其的子集。若被多线程并发请求的资源不可能因为并发访问产生不可预期的结果，那么程序员完全可以不将其设置为临界区。从这个角度而言，一个资源是否是被多线程并发请求的资源是客观事实，不因人的意志而转移；但是其是否是临界区则主要依托于人的判断：对于我而言，这个共享资源是否会因并发访问而产生不可预期的结果？</p>
<a id="more"></a>

<h1 id="多线程的活跃性问题"><a href="#多线程的活跃性问题" class="headerlink" title="多线程的活跃性问题"></a>多线程的活跃性问题</h1><p>下面我们就重点说下这个”糟糕”，从糟糕程度由重到轻，依次为：死锁(Deadlock) –&gt; 饥饿(Starvation) –&gt; 活锁(Livelock)。</p>
<p><strong>死锁</strong></p>
<p>简单的小例子：线程A持有资源x而欲请求资源y。线程B持有资源y而欲请求资源x。不巧的是x，y均为临界区。如果现状得不到改善(AB均不愿意放弃已到手的资源)，那么死锁将一直进行下去，永远看不到解决的希望。因此死锁是活跃性问题中最糟糕的情况：它会直接导致被锁住的线程卡死。</p>
<p><strong>饥饿</strong></p>
<p>分为两种情况：</p>
<ul>
<li><p>线程优先级不够高，导致其始终无法获得临界区。在自然界中，母鸟给小鸟喂食时，强壮的小鸟总会更容易的抢到食物，而瘦弱的小鸟则不得不忍受饥饿。这也是并发中”饥饿”这个概念的出处。</p>
</li>
<li><p>已占有临界区的线程迟迟不肯让出临界区，导致其他线程无法获得该临界区。</p>
</li>
</ul>
<p>与死锁不同，饥饿总还是有希望解除的，起码不能像断言死锁那样断定饥饿的话这个程序就没救了。但是饥饿仍然是有着残酷的竞争的：列举的两种情况说明该资源确实足够抢手，也就是所谓的”狼多肉少”。往乐观了想，强壮的小鸟吃饱了，不乐意抢了，瘦弱的小鸟就有机会吃上饭了；但是往悲观了想，若母鸟带来的食物并没有那么充足，或者那些强壮的小鸟是吃撑了也要继续下去的吃货，此时瘦弱的小鸟就有被饿死的可能。</p>
<p><strong>活锁</strong></p>
<p>举一个生活中的小例子：一个狭窄的过道，仅容两人通过。此时有两人相对而行又恰好走在同一边。于是二人均产生了给对方让路的行为。于是两人同时的让向另一边。于是二人又把刚才的剧情重演了一遍：又撞上了。通常情况下，如果这两个人情商正常的话，往往会进行简单的眼神或言语沟通，然后两人就能很好的通行了。</p>
<p>然而计算机并不具备这种在人类看来最简单的”情商”。如果程序设计不得当，两个线程会无休止的这样谦让下去。</p>
<p>之所以说”活锁”没有”饥饿”那么糟，是因为本质上来说，”活锁”中并不存在资源竞争：资源是足够的，仅仅只是程序的设计不当而已。</p>
<h1 id="并发级别"><a href="#并发级别" class="headerlink" title="并发级别"></a>并发级别</h1><p>并发级别描述的是面对上文中并发的缺陷，我们”该怎么办”，或者说”有何对策”。因此并发级别表达的是”请求方请求资源”时”请求方”的意愿。换成具体的情境，表达的就是”线程请求临界区”时线程的意愿及策略，属于主观愿望，也就是想不想的问题；而临界区中定义的”同一时间点仅有一个线程能请求到临界区”是临界区的客观情况，是能不能做得到的问题。线程在设定并发级别时如果足够”乐观”，那么便可能会任性的无视临界区的客观定义。</p>
<p>在应对并发问题的态度上，我们可以画一条数轴。负无穷大代表绝对的悲观：并发程序又复杂问题又多，咱们别并发了吧，如果实在要搞咱们就必须事无巨细把所有(注意是所有)可能的情况都catch住；正无穷大代表绝对的乐观：不要怂，就是干！问题，不存在的！</p>
<p>这种绝对的二元论的说法显然很极端，但是它们却为我们提供了标杆，我们在设计并发程序时总会偏向其中一方一点。简单来说，越是悲观对并发的检查就越严格；越是乐观对并发的检查就越宽松。从悲观到乐观排序的话并发级别大致有如下几类：阻塞(Blocking) –&gt; 无饥饿(Starvation-Free) –&gt; 无障碍(Obstruction-Free) –&gt; 无锁(Lock-Free) –&gt; 无等待(Wait-Free)。</p>
<p><strong>阻塞(Blocking)</strong></p>
<p>临界区同一时刻仅有一个线程能进入。其他请求该临界区的线程全部等着。简单粗暴，使得对临界区的访问又变回了串行的状态。</p>
<p><strong>无饥饿(Starvation-Free)</strong></p>
<p>在简单粗暴的阻塞的基础上，增加了对多线程的活跃性问题中的饥饿情况的处理(换句话说，无饥饿依然是阻塞的，其仅仅只是对饥饿的情况做出了改善)。假设当前正在使用Java的锁机制实现并发(synchronized是监视机制，并非锁。其也无法做到后文提到的公平锁)，如果说普通的阻塞级别的锁是非公平锁(判断线程执行与否仅看其优先级)的话，那么无饥饿实现的就是所谓的公平锁。最简单的公平锁是完全无视线程的优先级，而完全只按时间上的先后顺序执行，此时相当于用时间上的先后顺序作为新的优先级替换了线程原有的优先级。较为复杂的实现会把时间作为优先级的一个分量和线程原有的优先级进行融合：也就是综合考虑线程优先级和其已等待的时间。</p>
<p>我们常说的公平锁是由重入锁(ReentrantLock)所实现的，该锁属于最简单的那类公平锁。</p>
<p><strong>无障碍(Obstruction-Free)</strong></p>
<p>无障碍是检查最为严格的非阻塞调度。</p>
<p>先来说阻塞与非阻塞的区别。模拟一个场景，两个线程并发请求临界区。阻塞级别的并发(阻塞及无饥饿)会切实遵守临界区的客观规定，老老实实的等着。而非阻塞则是两个线程都进入临界区，没出问题最好，出了问题再想办法解决。而”解决策略”的不同就在非阻塞这个大的概念下又分化出了不同的并发级别。</p>
<p>如果真实情况是并发冲突的频率并不高，也即临界区中所描述的”被多线程并发请求，且有可能因此导致糟糕结果的资源”中的”可能”并不常出现，那么非阻塞是优于阻塞的；但是如果这个”可能”的出现概率很高，那么非阻塞时的”解决策略”相应的登场就更为频繁。无论设计得多为巧妙。这个”解决策略”也是决计比不上一开始便谨慎的进行悲观处理的阻塞调度的。此时非阻塞调度便劣于阻塞调度了。</p>
<p>相对于阻塞而言，非阻塞已经足够乐观了。但是在非阻塞内部却仍可细分。无障碍便是非阻塞中最为悲观的那一个。其”解决策略”多种多样，一种可行的方案是依赖于”一致性标记”。假如当前临界区的一致性标记值为0。当线程1进入临界区后，会先更新这个值，例如改为1，代表线程1已进入，而后线程在临界区中操作(无论是读操作还是写操作)，当其完事决定退出时会再看一眼这个标记，若仍为1，说明在此期间没有别的线程进入临界区，也就是满足”乐观”的预期，可以自然的退出；但是如果在此期间线程2也进入了临界区，那么它会在进入后将标记值更新为2。此时线程1在完事后回看时就会发现值对不上了，此时它便会采用fail-fast原则(不管新来的那个线程做了什么，也许人家只是读，也许人家写的东西和你没关系。总之只要检测到有其他线程进来了就算失败)，回滚此前已做的操作，然后从头再来。</p>
<p>无障碍在冲突激烈时会导致临界区中的所有线程都不停的在回滚，极大的影响了程序的性能。严重时，没有一个线程能走出这个回滚的泥潭，形成一种伪死锁的状态。</p>
<p><strong>无锁(Lock-Free)</strong></p>
<p>无锁是一种特殊的无障碍。其诞生的目的就是为了解决无障碍”没有一个线程能走出这个回滚的泥潭”的问题。也就是说在任意时刻，无锁都能保证临界区中的线程中至少有一个可以在有限的步骤内离开临界区。因为仅能保证1个，因此排在后面的线程可能会面临饥饿的问题。</p>
<p><strong>无等待(Wait-Free)</strong></p>
<p>无等待在无锁的基础上又做了进一步的优化，其解决了无锁中的”饥饿”问题。无锁仅保证同一时刻内只有一个线程能在有限步骤内退出临界区，而无等待更进一步，要求临界区中的所有线程都能在有限的步骤内退出临界区。</p>
<p>无等待所采取的一种典型的”解决策略”就是RCU(Read-Copy-Update)：想要修改临界区的数据时，不能直接在临界区上修改，而是copy出一份当前的副本，而后在这个副本上修改，随后再在合适的时机写回。这样保证临界区不是”脏”的，也不会是写线程写到一半的中间态。因此读线程在进入临界区时就不需要任何并发控制了。这个做法与Git等代码版本控制库的做法很类似，大家可以对比着理解。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-同步异步阻塞非阻塞</title>
    <url>/2017/10/03/Java%E5%B9%B6%E5%8F%91-%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5%E9%98%BB%E5%A1%9E%E9%9D%9E%E9%98%BB%E5%A1%9E/</url>
    <content><![CDATA[<p>同步(Synchronous)与异步(ASynchronous)是一组相对的概念，阻塞(Blocking)与非阻塞(Non-Blocking)是另一组相对的概念。</p>
<p>通常，同步异步被用以形容一次方法调用。阻塞非阻塞被用以形容多线程间的相互影响。但本质上，这两组概念都是在从不同角度描述同一类事件：请求方请求资源。</p>
<p>同步异步是资源的固有属性，或者说是资源的能力状态。和请求方打算怎么做无关：不管你请求的人有什么打算，我能提供的也就这样了。</p>
<p>阻塞非阻塞是请求方采取的策略，和资源的固有属性或能力状态无关：不管你能提供给我怎么样的资源，或者干脆提供不了，我不管我就要这么做。</p>
<p>因此，若以请求方为主视角的话，同步异步描述的是客观情况下被请求资源”能不能”的问题；阻塞非阻塞描述的请求方自身打算怎么做，也就是”想不想”的问题。</p>
<a id="more"></a>

<h1 id="小例子：线程调用方法"><a href="#小例子：线程调用方法" class="headerlink" title="小例子：线程调用方法"></a>小例子：线程调用方法</h1><p>本例中，线程即为请求方，方法即为资源。</p>
<p>为了便于描述，不妨以日常生活中的例子：”小王烧水”来模拟这个小例子。”小王”代表”线程”，”水壶”代表”方法”。而小王烧水的这个行为代表线程对方法的调用。</p>
<p>同步异步是”水壶”的固有属性：</p>
<ul>
<li>同步：普通水壶，烧开水后无提示。</li>
<li>异步：响铃水壶，烧开水后会响铃提示。</li>
</ul>
<p>阻塞非阻塞是”小王”采取的策略：</p>
<ul>
<li>阻塞：小王在水壶边等着直至水烧开。</li>
<li>非阻塞：小王开始烧水后即离开做别的事情。</li>
</ul>
<p>同步/异步 阻塞/非阻塞 一共有如下4种排列组合：</p>
<h2 id="同步阻塞"><a href="#同步阻塞" class="headerlink" title="同步阻塞"></a>同步阻塞</h2><p>小王用普通水壶烧水，他决定在水壶边等着直至水烧开。</p>
<h2 id="同步非阻塞"><a href="#同步非阻塞" class="headerlink" title="同步非阻塞"></a>同步非阻塞</h2><p>小王用普通水壶烧水，按照水壶本身的设计初衷，他本该在水壶边等着直至水烧开，但是可能会有如下情况：水烧开所需的时间长到无法忍受，例如水烧开需要1小时。显然在水壶边站1小时是很sb的行为，因此小王决定去客厅看电视，因为水壶没有响铃提示，小王只能在感觉差不多的时候”轮询”着反复回厨房看水烧开了没有。</p>
<h2 id="异步非阻塞"><a href="#异步非阻塞" class="headerlink" title="异步非阻塞"></a>异步非阻塞</h2><p>小王用响铃水壶烧水，烧上水后他就去客厅看电视了，响铃后他再回厨房取水。</p>
<h2 id="异步阻塞"><a href="#异步阻塞" class="headerlink" title="异步阻塞"></a>异步阻塞</h2><p>明明水壶可以响铃，此时还站在水壶边上等貌似是很不理智的行为，但是可能会有如下情况导致在水壶边等着反而更好：</p>
<ol>
<li><p>水烧开的时间灰常灰常短。短到和小王打算去做的事不成比例。例如水烧开需要10秒，而小王从厨房走到客厅需要1分钟。此时小王如果去客厅的话那么10秒后铃便响了，他还要再花10秒走回来，不仅没看上电视，还搭上了10秒(一直呆在水壶边只需要等10秒就好了)。</p>
</li>
<li><p>小王接下来要去做的事需要这壶水。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>同步</tag>
        <tag>异步</tag>
        <tag>阻塞</tag>
        <tag>非阻塞</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程池</title>
    <url>/2017/10/03/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<h1 id="线程池的产生背景"><a href="#线程池的产生背景" class="headerlink" title="线程池的产生背景"></a>线程池的产生背景</h1><p>在使用线程时，我们常会遇到以下的业务需求：以runnable1为核心声明thread1。不久后，我们又需要runnable1的功能了，但是此时thread1尚未执行完，或已因run()的结束被JVM回收，总之是没办法再利用了，我们只能以runnable1为核心声明一个新的线程thread2…类比下去，我们还可能需要生成thread3，thread4，thread5…</p>
<p>乍看下来似乎没毛病，然而，如果线程执行完成的速度跟不上线程创建的速度，程序所使用的线程数就会不断上升，但更底层操作系统所能承载的线程总数一定是有限的，持续下去，必然会导致没有充分的资源分配新的线程，使得程序崩溃。</p>
<p>即便线程执行完成的速度跟得上线程创建的速度，依然还会存在问题，只是没那么糟糕了而已：虽然与进程相比，线程是一种轻量级的工具，但其创建与回收依然需要花费时间与资源，而这其实是没有必要的。在我们所模拟的场景中，真正重要的只有runnable1，至于thread1，thread2…不过是为了完成runnable1功能的载体，事实上，如果我们能做到thread1在run()结束后不被回收，同时也能容忍只有一个线程串行执行的效率的话，那么只用thread1串行执行完全可以完成功能。</p>
<p>我们当然不能接受串行执行(否则引入线程的意义何在？)，不过照顾底层操作系统的承受能力，为runnable1设置一个允许创建的最大线程数还是很合理的，比如我们规定最大线程数是2，那么可能会有如下执行流程：</p>
<ul>
<li><p>需求1:需要runnable1的功能，创建thread1。</p>
</li>
<li><p>需求2:需要runnable1的功能，创建thread2。</p>
</li>
<li><p>需求3:需要runnable1的功能，但是能创建的线程数已达上限。且thread1及thread2仍未执行完，只能继续等待。</p>
</li>
<li><p>需求2率先执行完了，这样thread2便空了出来，可以用来执行需求3。</p>
</li>
</ul>
<p>这便是线程池的雏形了，它是系统性能与程序执行效率之间制衡的结果。使用线程池后，创建线程变为向线程池讨要线程，销毁线程变为向线程池归还线程。至于线程创建，销毁的真正细节都交由线程池管理。这与数据库连接池等连接池的理念是相同的。</p>
<a id="more"></a>

<h1 id="Java-API中线程池的层次结构"><a href="#Java-API中线程池的层次结构" class="headerlink" title="Java API中线程池的层次结构"></a>Java API中线程池的层次结构</h1><p>Java API提供了完善的线程池组件，其顶层为接口Executor，它的代码很简单，全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util.concurrent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Executor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    void execute(Runnable command);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这便是我们在上文讨论的线程池所欲实现的核心内容了：使用者向线程池提交核心功能command，它自行创建(或者是复用，总之与使用者无关)线程实现对应的功能。</p>
<p>它的子接口为ExecutorService，全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util.concurrent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.security.PrivilegedAction;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.security.PrivilegedExceptionAction;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface ExecutorService extends Executor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关闭线程池</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注意这只是不再接受新的请求了，已在执行的线程会执行完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;Runnable&gt; shutdownNow();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 线程池已关闭(已调用过shutdown()或shutdownNow())返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isShutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若未调用过shutdown()或shutdownNow()则返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若已调用过shutdown()或shutdownNow()，则所有线程执行完成返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isTerminated();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean awaitTermination(long timeout, TimeUnit unit)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Future&lt;?&gt; submit(Runnable task);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  long timeout, TimeUnit unit)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws InterruptedException, ExecutionException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    long timeout, TimeUnit unit)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws InterruptedException, ExecutionException, TimeoutException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>execute，submit，invoke均是用来执行线程的，其不同之处主要在于是否能得到线程执行后的返回值Future，可详见<a href="/2018/01/09/Java并发-Future/">Java 并发-Future</a>。简单来说，如果我们不需要收集线程的执行结果，则使用execute就好。</p>
<p>ExecutorService有一个子接口ScheduledExecutorService，它在ExecutorService的基础上扩展了在给定时间执行某任务的功能：如在某个固定的延时之后执行，或者周期性的执行某个任务。</p>
<p>实现ExecutorService接口骨架功能的类为java.util.concurrent.AbstractExecutorService，其类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class AbstractExecutorService implements ExecutorService</span></pre></td></tr></table></figure>

<p>这是一个抽象类，其最常用的非抽象子类为java.util.concurrent.ThreadPoolExecutor，其类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ThreadPoolExecutor extends AbstractExecutorService</span></pre></td></tr></table></figure>

<p>这便是我们最常用的线程池的实现了。不过Java API为了简化程序员的操作，还贴心的为我们提供了线程池的生产工厂java.util.concurrent.Executors，它的类定义如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Executors</span></pre></td></tr></table></figure>

<p>该工厂能生产我们最需要的那几种线程池，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static ScheduledExecutorService newSingleThreadScheduledExecutor()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</span></pre></td></tr></table></figure>

<p>上文所述的接口与类均位于java.util.concurrent包中，我们可以用一张图来描述这些类/接口之间的关系：</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/%E7%BA%BF%E7%A8%8B%E6%B1%A0/0.jpg" alt="0.jpg"></p>
<p>其中，实线是继承，虚线是实现接口。</p>
<h1 id="Executors提供的常用线程池"><a href="#Executors提供的常用线程池" class="headerlink" title="Executors提供的常用线程池"></a>Executors提供的常用线程池</h1><p>下面我们来依次详细讨论下Executors所提供的最常用的那些线程池。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads)</span></pre></td></tr></table></figure>

<p>返回一个固定线程数量的线程池。当有一个新的任务被提交时，若此时已没有空闲线程，则该任务会被暂存于一个等待队列中，待有线程空闲后再处理该任务。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor()</span></pre></td></tr></table></figure>

<p>返回一个只有一个线程的线程池，可类比理解为newFixedThreadPool中nThreads=1的情况(只是帮助理解，实际还是有区别的)。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool()</span></pre></td></tr></table></figure>

<p>返回一个根据实际情况调整线程数量的线程池：当有一个新的任务被提交时，若此时已没有空闲线程，则会创建新线程。创建的线程在执行完成后默认再保存60秒，若在此期间有复用请求则复用该线程，反之则在到时间后销毁。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ScheduledExecutorService newSingleThreadScheduledExecutor()</span></pre></td></tr></table></figure>

<p>返回一个只有一个线程的，有定时任务功能的线程池。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize)</span></pre></td></tr></table></figure>

<p>返回一个可指定线程数量的，有定时任务功能的线程池。</p>
<hr>
<p>下面我们以newFixedThreadPool为例，给出一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Long BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(5);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&quot; + Thread.currentThread().getId() + &quot; run&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) es.execute(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[5]12 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[5]11 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[7]13 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[7]10 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1005]11 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1005]12 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1006]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1007]13 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1007]10 run</span></pre></td></tr></table></figure>

<p>程序被分为两组，两组间的间隔约为1秒。且第二组其实并未创建新线程，只是对第一组线程的复用。</p>
<p>我们不妨将上例的线程池换为newCachedThreadPool，其余不做改动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Long BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newCachedThreadPool();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&quot; + Thread.currentThread().getId() + &quot; run&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) es.execute(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[5]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]13 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[5]10 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[5]11 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]14 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]15 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]12 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]18 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]17 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[6]16 run</span></pre></td></tr></table></figure>

<p>几乎在同时创建了10个新线程。</p>
<p>通览Executors工厂提供的线程池，可分为两大类：一类是上文给出过小例子的，诸如newFixedThreadPool，newCachedThreadPool等普通的线程池，这类线程池会在有空闲线程后立即执行。另一类就是方法名中包含关键字Scheduled，返回ScheduledExecutorService的定时任务线程池，这类线程池所实现的功能类似于linux中的crontab命令。</p>
<p>ScheduledExecutorService的全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util.concurrent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.atomic.*;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.*;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface ScheduledExecutorService extends ExecutorService &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在延迟时间delay之后，对任务进行一次调度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ScheduledFuture&lt;?&gt; schedule(Runnable command,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                       long delay, TimeUnit unit);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在延迟时间delay之后，对任务进行一次调度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public &lt;V&gt; ScheduledFuture&lt;V&gt; schedule(Callable&lt;V&gt; callable,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                           long delay, TimeUnit unit);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 创建一个周期性任务</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 任务开始于给定的初始延时initialDelay之后</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后续的任务按照给定的周期进行：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后续第一个任务于initialDelay+period执行</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后续第二个任务于initialDelay+2*period执行</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 依此类推</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                  long initialDelay,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                  long period,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                  TimeUnit unit);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 创建一个周期性任务</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 任务开始于给定的初始延时initialDelay之后</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 每当前一个任务完成后，再过延时delay后，开始下一个任务</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ScheduledFuture&lt;?&gt; scheduleWithFixedDelay(Runnable command,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                     long initialDelay,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                     long delay,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                     TimeUnit unit);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>下面给出一个scheduleAtFixedRate的小例子，例子中任务执行耗时1秒，初始延迟2秒，每隔3秒执行一次：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ScheduledExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Long BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&quot; + Thread.currentThread().getId() + &quot; run&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ScheduledExecutorService ses &#x3D; Executors.newScheduledThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ses.scheduleAtFixedRate(r, 2, 3, TimeUnit.SECONDS);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>截取最开始的那部分输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2007]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[5007]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[8008]11 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11008]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[14008]12 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[17008]11 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[20009]13 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[23009]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[26009]14 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[29010]12 run</span></pre></td></tr></table></figure>

<p>确实是按照预期执行了。不过需要注意的是，尽管其实只需1个线程就足够了，线程池仍然创建了新的其他线程(知道有这么个事就行了，具体的决策交给线程池)。</p>
<p>在完成这个小例子后，我们不禁会想：如果任务的执行时间大于循环周期的话，那么会出现任务堆叠的现象吗？我们可以将任务耗时调整为5秒，其余不变：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ScheduledExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Long BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&quot; + Thread.currentThread().getId() + &quot; run&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(5000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ScheduledExecutorService ses &#x3D; Executors.newScheduledThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ses.scheduleAtFixedRate(r, 2, 3, TimeUnit.SECONDS);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>截取最开始的那部分输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2009]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[7009]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[12010]11 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[17010]9 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[22010]12 run</span></pre></td></tr><tr><td class="code"><pre><span class="line">[27010]11 run</span></pre></td></tr></table></figure>

<p>循环周期被自动调整为了5秒，并没有出现任务堆叠的情况。这样设计是很合理的：因为任务的执行时间大于循环周期的话，随着时间的推移，积压的任务会越来越多(能用于执行任务的线程毕竟是有限的)，无法执行的话还不如最开始就不要积压，降低执行频率。</p>
<p>最后，在使用定时任务，尤其是周期性循环的周期任务时，要尤为注意异常的捕获，因为只要一个任务抛出了未被捕获的异常，后续任务都会停止。</p>
<h1 id="Executors提供的常用线程池的内部实现"><a href="#Executors提供的常用线程池的内部实现" class="headerlink" title="Executors提供的常用线程池的内部实现"></a>Executors提供的常用线程池的内部实现</h1><p>Executors工厂所提供的常用线程池本质上是Java API为我们创建的套路化的，常见功能的线程池，其内部还是需要创建ExecutorService的具体实现。以newFixedThreadPool，newSingleThreadExecutor，newCachedThreadPool这3个方法为例，他们均返回了ExecutorService的实现，源码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new ThreadPoolExecutor(nThreads, nThreads,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  0L, TimeUnit.MILLISECONDS,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new FinalizableDelegatedExecutorService</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (new ThreadPoolExecutor(1, 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                0L, TimeUnit.MILLISECONDS,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                new LinkedBlockingQueue&lt;Runnable&gt;()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  60L, TimeUnit.SECONDS,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  new SynchronousQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>原来如此，这3种线程池本质上都是调用同一个构造函数新建了一个ThreadPoolExecutor对象(newSingleThreadExecutor在外面又包了一层，不过影响不大)。也就是说它们3个本质上是一回事，只是生成的参数有所不同。它们所调用的ThreadPoolExecutor的构造函数为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          int maximumPoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          long keepAliveTime,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          TimeUnit unit,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>哦，原来只是一个壳子，它内部调用的那个构造函数为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          int maximumPoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          long keepAliveTime,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          TimeUnit unit,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          ThreadFactory threadFactory,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          RejectedExecutionHandler handler) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (corePoolSize &lt; 0 ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        maximumPoolSize &lt;&#x3D; 0 ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        maximumPoolSize &lt; corePoolSize ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        keepAliveTime &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new IllegalArgumentException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (workQueue &#x3D;&#x3D; null || threadFactory &#x3D;&#x3D; null || handler &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.corePoolSize &#x3D; corePoolSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.maximumPoolSize &#x3D; maximumPoolSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.workQueue &#x3D; workQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.keepAliveTime &#x3D; unit.toNanos(keepAliveTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.threadFactory &#x3D; threadFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.handler &#x3D; handler;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这次不是壳子了，不过所做的也无非就是给对象赋个值，没什么别的逻辑，确实很有构造函数的样子。我们需要重点关注的是它的入参。</p>
<p>先说相对简单的，threadFactory指线程工厂，用于创建线程。handler指拒绝策略，指明当任务超出线程池的承载能力时该如何应对。这两个参数也是上文那个壳子函数中少掉的两个参数，用的都是系统的默认值，并未由用户指定。</p>
<p>corePoolSize指预期中该线程池通常情况下会包含的线程数。当一个新的任务被提交至线程池，若有空闲线程则直接复用。在没有空闲线程的情况下，若此时已有线程数在[0,corePoolSize)之间，说明仍在预期的范围之内，可直接创建新线程。若已有线程数已达到corePoolSize，则说明超过了预期，新任务会被放入阻塞队列workQueue中，等待执行时机。</p>
<p>上文叙述的是在预期范围内的正常情况，而异常情况指得就是阻塞的任务数量超出了workQueue的承载极限。对于这种情况，ThreadPoolExecutor并没有直接判定失败进而调用handler的拒绝策略，而是又给出了一个弹性的空间：若此时已有线程数量在[corePoolSize,maximumPoolSize)的范围内，那么仍允许创建新线程。而若线程数已达maximumPoolSize而仍要创建新线程，则会判定失败并调用handler的拒绝策略。</p>
<p>不过，异常状况终究是异常状况，在(corePoolSize,maximumPoolSize]范围内的线程是紧急事态下的紧急应对，因此为它们设置了失效时间keepAliveTime(unit就是这个时间的单位)：一旦它们闲置的时间超过了这个失效时间，换句话说，危机应该是已经过去了，它们就会被销毁。</p>
<p>上文所述的调度逻辑可通过ThreadPoolExecutor中下述的核心调度代码得以体现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void execute(Runnable command) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (command &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int c &#x3D; ctl.get();    &#x2F;&#x2F; c代表当前线程池</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;&#x2F; workerCountOf(c)为当前线程池持有的线程总数</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (workerCountOf(c) &lt; corePoolSize) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (addWorker(command, true))    &#x2F;&#x2F; 创建新线程</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        c &#x3D; ctl.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;    &#x2F;&#x2F; 欲进入等待队列</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int recheck &#x3D; ctl.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (! isRunning(recheck) &amp;&amp; remove(command))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            reject(command);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else if (workerCountOf(recheck) &#x3D;&#x3D; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            addWorker(null, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    else if (!addWorker(command, false))    &#x2F;&#x2F; 进入等待队列失败，将任务交还给线程池，判断是否达到maximumPoolSize</span></pre></td></tr><tr><td class="code"><pre><span class="line">        reject(command);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在上文所述的ThreadPoolExecutor的入参中，还需特别展开论述的就是workQueue了，通常情况下，会传给ThreadPoolExecutor的阻塞队列有如下几种：</p>
<hr>
<p><strong>ArrayBlockingQueue</strong></p>
<p>即有界任务队列。该队列的构造函数均包含一个容量参数，表示该队列所能承载的极限容量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ArrayBlockingQueue(int capacity)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public ArrayBlockingQueue(int capacity, boolean fair)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public ArrayBlockingQueue(int capacity, boolean fair,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              Collection&lt;? extends E&gt; c)</span></pre></td></tr></table></figure>

<hr>
<p><strong>LinkedBlockingQueue</strong></p>
<p>即无界任务队列。除非系统资源耗尽，否则LinkedBlockingQueue可一直插入新元素。</p>
<hr>
<p><strong>PriorityBlockingQueue</strong></p>
<p>即优先任务队列。它是一个特殊的无界任务队列，可以按照自身设定好的优先级计算规则控制任务执行的先后顺序。不过更确切的说，也可以认为无界任务队列是一种特殊的优先任务队列：它的优先计算规则为时间上的FIFO。</p>
<hr>
<p><strong>SynchronousQueue</strong></p>
<p>即直接提交队列。其实这已经不能算作一种队列了：它并没有容量，即容量为0。换句话说，任何一个对SynchronousQueue的写需要等待一个对SynchronousQueue的读，反之亦然。因此，SynchronousQueue与其说是一个队列，更像是一个数据的中转站。</p>
<hr>
<p>了解了线程池的生成方式后，我们终于可以逐一的分析上文列出的那3种线程池了：</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newFixedThreadPool(int nThreads) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new ThreadPoolExecutor(nThreads, nThreads,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  0L, TimeUnit.MILLISECONDS,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>线程数在[0,nThreads)范围内时(nThreads即为设定好的容量)，当有新任务提交又没有空闲线程时(其实有空闲线程时也有可能创建新线程，一切看线程池的调度)，会创建新线程。当线程数已达nThreads，又没有空闲线程，此时新任务会被提交给阻塞队列LinkedBlockingQueue，这是一个无界任务队列，只要系统资源没有崩溃，理论上可以无限的提交下去。这样一来参数2，3，4即maximumPoolSize，keepAliveTime，unit实际上等同于无效了：因为不可能出现阻塞队列满了的情况。</p>
<p>使用LinkedBlockingQueue虽然不会导致线程池失败，然而在任务提交速度远大于消费速度的场合却有可能导致系统因资源耗尽而崩溃，需要谨慎使用。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newSingleThreadExecutor() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new FinalizableDelegatedExecutorService</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (new ThreadPoolExecutor(1, 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                0L, TimeUnit.MILLISECONDS,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                new LinkedBlockingQueue&lt;Runnable&gt;()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>不看外面包的那层FinalizableDelegatedExecutorService的话，完全可以按照nThreads=1的newFixedThreadPool来分析，就不再赘述了。</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ExecutorService newCachedThreadPool() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  60L, TimeUnit.SECONDS,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                  new SynchronousQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>corePoolSize=0，这意味着该线程池稳定状态下的线程数是0，即所有线程都是临时工。新任务会被无条件的送入阻塞队列。而它的阻塞队列又是SynchronousQueue，所以立刻又会被踢皮球一样送回来，进入所谓的战时状态，最多可创建Integer.MAX_VALUE个线程。这个数字基本就可被视为无限大了(因为不会有系统能顶得住开这么多的线程的)。这些线程在闲置后均会被保持60秒，若无人使用则销毁。</p>
<p>在任务提交速度远大于消费速度的场合下，系统可能会因创建线程过多而卡死崩溃。这个问题比使用newFixedThreadPool时可能遇到的资源耗尽问题要更严峻一些：因为线程资源往往是更易于耗尽的。</p>
<hr>
<h1 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h1><p>前文我们提到了线程池实现类ThreadPoolExecutor的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          int maximumPoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          long keepAliveTime,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          TimeUnit unit,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          int maximumPoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          long keepAliveTime,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          TimeUnit unit,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          ThreadFactory threadFactory,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          RejectedExecutionHandler handler) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (corePoolSize &lt; 0 ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        maximumPoolSize &lt;&#x3D; 0 ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        maximumPoolSize &lt; corePoolSize ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        keepAliveTime &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new IllegalArgumentException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (workQueue &#x3D;&#x3D; null || threadFactory &#x3D;&#x3D; null || handler &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.corePoolSize &#x3D; corePoolSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.maximumPoolSize &#x3D; maximumPoolSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.workQueue &#x3D; workQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.keepAliveTime &#x3D; unit.toNanos(keepAliveTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.threadFactory &#x3D; threadFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.handler &#x3D; handler;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中有一个参数名为handler，代表着线程池的拒绝策略，在使用线程池工厂Executors创建常用线程池时并不需要关注这个参数，Executors会自动为我们补上默认的拒绝策略defaultHandler。</p>
<p>所谓的拒绝策略，就是当任务提交量超出了线程池的承载能力时需要做的补救策略。相当于是一种变相的try-catch。</p>
<p>拒绝策略的顶层接口为RejectedExecutionHandler，它的全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util.concurrent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface RejectedExecutionHandler &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param r Runnable, 导致请求失败的那个任务</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param executor ThreadPoolExecutor, 当前线程池</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void rejectedExecution(Runnable r, ThreadPoolExecutor executor);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Java API提供了4种实现类：</p>
<hr>
<p>java.util.concurrent.ThreadPoolExecutor$AbortPolicy</p>
<p>最为简单粗暴的拒绝策略：直接抛出异常，停止线程池。这也是Java API默认使用的策略。</p>
<p>我们可以追溯下源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          int maximumPoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          long keepAliveTime,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          TimeUnit unit,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>其中的defaultHandler为ThreadPoolExecutor对象的字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private static final RejectedExecutionHandler defaultHandler &#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    new AbortPolicy();</span></pre></td></tr></table></figure>

<hr>
<p>java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy</p>
<p>该策略会将无法完成的任务交还给调用者线程。这样做不会使线程池关闭，也不会丢弃任务，但却会使调用者线程的压力增大，也就是俗称的甩锅策略。</p>
<hr>
<p>java.util.concurrent.ThreadPoolExecutor$DiscardOldestPolicy</p>
<p>该策略会丢弃最老的一个请求(也就是即将被执行的请求)。</p>
<hr>
<p>java.util.concurrent.ThreadPoolExecutor$DiscardPolicy</p>
<p>该策略会丢弃无法处理的请求(也就是最新提交的那个请求)。</p>
<hr>
<p>当然，我们也可以自己实现RejectedExecutionHandler：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ArrayBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.RejectedExecutionHandler;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static long BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&quot; + Thread.currentThread().getId() + &quot; start...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        RejectedExecutionHandler reh &#x3D; new RejectedExecutionHandler() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[&quot; + (System.currentTimeMillis() &#x2F; Test.BEGIN) + &quot;]&quot; + r.toString() + &quot; is discard&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; new ThreadPoolExecutor(5, 5, 0L, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(3), Executors.defaultThreadFactory(), reh);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) es.execute(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[3]10 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1]com.test.Test$1@620a9239 is discard</span></pre></td></tr><tr><td class="code"><pre><span class="line">[3]13 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[3]12 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[3]11 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[3]9 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1]com.test.Test$1@620a9239 is discard</span></pre></td></tr><tr><td class="code"><pre><span class="line">[103]11 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[106]10 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[105]12 start...</span></pre></td></tr></table></figure>

<p>需要注意的一个点是reh的rejectedExecution()是在main方法线程中被执行的：因为线程池es就是main方法线程创建的。</p>
<h1 id="线程创建工厂"><a href="#线程创建工厂" class="headerlink" title="线程创建工厂"></a>线程创建工厂</h1><p>我们继续分析线程池实现类ThreadPoolExecutor的构造函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          int maximumPoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          long keepAliveTime,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          TimeUnit unit,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          int maximumPoolSize,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          long keepAliveTime,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          TimeUnit unit,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          ThreadFactory threadFactory,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                          RejectedExecutionHandler handler) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (corePoolSize &lt; 0 ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        maximumPoolSize &lt;&#x3D; 0 ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        maximumPoolSize &lt; corePoolSize ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">        keepAliveTime &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new IllegalArgumentException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (workQueue &#x3D;&#x3D; null || threadFactory &#x3D;&#x3D; null || handler &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.corePoolSize &#x3D; corePoolSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.maximumPoolSize &#x3D; maximumPoolSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.workQueue &#x3D; workQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.keepAliveTime &#x3D; unit.toNanos(keepAliveTime);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.threadFactory &#x3D; threadFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.handler &#x3D; handler;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上文已分析了handler，那么我们索性将其分析完，再来说一说另一个默认的参数：threadFactory。</p>
<p>在<a href="/2017/10/06/Java并发-线程组/">Java 并发-线程组</a>中，我在比较线程组与线程池的区别时曾说到：</p>
<p><strong>线程池管理的并非一个个已经成型的线程。即用以构建线程池中的线程所需提供的素材并非线程本身，而是生成线程的核心部件Runnable。也就是说线程池并不希望我们确定下来线程再交给它，这样它也就没法管理了。使用线程池时我们只管从池子里取线程即可，该线程是基于我们传入的Runnable生成的，因此可以满足我们的业务需求，至于这个线程是何时生成的，怎么生成的我们一概不管。而线程组是在明确的给线程打上编号：即某某线程属于某某组。一定要先有一个明确的线程才行。因此二者是无法协同工作的。</strong></p>
<p>结合本文，相信大家会有一个更深入的了解。</p>
<p>不过，虽然线程池不希望使用者看到它所持有的线程的细节，但为了执行任务，它总是要创建线程的，所用的就是下面要说的这个默认参数threadFactory。</p>
<p>ThreadFactory是一个接口，它的全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util.concurrent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface ThreadFactory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread newThread(Runnable r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>够简洁，我喜欢！我们可以先来看看ThreadPoolExecutor的默认实现是什么样子的，也就是Executors.defaultThreadFactory()方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static ThreadFactory defaultThreadFactory() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new DefaultThreadFactory();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>依然灰常的直接，而这个DefaultThreadFactory全称为java.util.concurrent.Executors$DefaultThreadFactory。它的全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class DefaultThreadFactory implements ThreadFactory &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final AtomicInteger poolNumber &#x3D; new AtomicInteger(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final ThreadGroup group;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final AtomicInteger threadNumber &#x3D; new AtomicInteger(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final String namePrefix;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    DefaultThreadFactory() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SecurityManager s &#x3D; System.getSecurityManager();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        group &#x3D; (s !&#x3D; null) ? s.getThreadGroup() :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              Thread.currentThread().getThreadGroup();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        namePrefix &#x3D; &quot;pool-&quot; +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                      poolNumber.getAndIncrement() +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                     &quot;-thread-&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Thread newThread(Runnable r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t &#x3D; new Thread(group, r,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              namePrefix + threadNumber.getAndIncrement(),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                              0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (t.isDaemon())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            t.setDaemon(false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (t.getPriority() !&#x3D; Thread.NORM_PRIORITY)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>大概看下来，它的newThread()所创建的线程就是普通的线程，还特意确保了它的普通性：不是守护线程，优先级为NORM_PRIORITY。</p>
<p>理所当然的，我们也可以自己写ThreadFactory的实现类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadFactory;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static long BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&quot; + Thread.currentThread().getName() + Thread.currentThread().getId() + &quot; start...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadFactory tf &#x3D; new ThreadFactory() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public Thread newThread(Runnable r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread t &#x3D; new Thread(r, &quot;tf制造&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                t.setDaemon(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return t;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; new ThreadPoolExecutor(5, 5, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;(), tf);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 10; i++) es.execute(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[2]tf制造10 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[2]tf制造12 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[2]tf制造11 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[2]tf制造9 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[3]tf制造13 start...</span></pre></td></tr></table></figure>

<p>这个输出就比较有意思了，因为线程均被设置为了守护线程，因此在main方法结束后正在sleep的那5个线程会被强制终止，线程池也被强制关闭，已提交在阻塞队列中的另5个任务自然也失去了执行的机会。</p>
<h1 id="线程池的继承与扩展"><a href="#线程池的继承与扩展" class="headerlink" title="线程池的继承与扩展"></a>线程池的继承与扩展</h1><p>讨论了这么多，不知大家是否会产生这样的疑问：线程池究竟是如何执行提交给它的任务的呢？</p>
<p>在ThreadPoolExecutor这个实现中，执行任务的工作交于了它的内部类Worker：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private final class Worker extends AbstractQueuedSynchronizer implements Runnable</span></pre></td></tr></table></figure>

<p>它实现了Runnable接口。每个任务在执行时都会对应一个Worker实例。并通过该实例的run()方法执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    runWorker(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>runWorker()方法在ThreadPoolExecutor中，它的全部代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final void runWorker(Worker w) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Thread wt &#x3D; Thread.currentThread();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Runnable task &#x3D; w.firstTask;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    w.firstTask &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    w.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean completedAbruptly &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (task !&#x3D; null || (task &#x3D; getTask()) !&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            w.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if ((runStateAtLeast(ctl.get(), STOP) ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 (Thread.interrupted() &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                !wt.isInterrupted())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                wt.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                beforeExecute(wt, task);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Throwable thrown &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    task.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (RuntimeException x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    thrown &#x3D; x; throw x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Error x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    thrown &#x3D; x; throw x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Throwable x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    thrown &#x3D; x; throw new Error(x);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    afterExecute(task, thrown);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                task &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                w.completedTasks++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                w.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        completedAbruptly &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        processWorkerExit(w, completedAbruptly);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>task就是实际要执行的任务本体。有趣的是runWorker()方法会在task.run()开始前添加beforeExecute(wt, task)，而在task.run()执行完成后执行afterExecute(task, thrown)。这样线程池就可以在任务开始前及结束后插入一些套路化的东西。这两个方法均属于ThreadPoolExecutor，它们的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void beforeExecute(Thread t, Runnable r) &#123; &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">protected void afterExecute(Runnable r, Throwable t) &#123; &#125;</span></pre></td></tr></table></figure>

<p>这是两个权限为protected的空方法。很显然，Java API其实没什么套路，不过它为使用者留好了途径，使得他们可以通过继承ThreadPoolExecutor并重写这两个方法的方式实现自身的套路。</p>
<p>这实在是一个很有用的功能。我通常用它来更精细化的记录线程池及其中线程的状态变化，这对日志分析极为有益。</p>
<p>beforeExecute及afterExecute实际上是在每个任务开始前及结束后插入的AOP方法，通常它们会配合ThreadPoolExecutor中的另一个方法一起被重写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void terminated() &#123; &#125;</span></pre></td></tr></table></figure>

<p>terminated默认也是空方法，它会在线程池关闭时被触发。我们不妨以ThreadPoolExecutor中最常用的shutdown()方法为起点，来看一下调用terminated()的方法链。</p>
<p>首先shutdown()方法的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void shutdown() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    final ReentrantLock mainLock &#x3D; this.mainLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mainLock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkShutdownAccess();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        advanceRunState(SHUTDOWN);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        interruptIdleWorkers();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        onShutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mainLock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    tryTerminate();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后我们进入ThreadPoolExecutor.tryTerminate()：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final void tryTerminate() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int c &#x3D; ctl.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (isRunning(c) ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">            runStateAtLeast(c, TIDYING) ||</span></pre></td></tr><tr><td class="code"><pre><span class="line">            (runStateOf(c) &#x3D;&#x3D; SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (workerCountOf(c) !&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            interruptIdleWorkers(ONLY_ONE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        final ReentrantLock mainLock &#x3D; this.mainLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mainLock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    terminated();    &#x2F;&#x2F; AOP方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    ctl.set(ctlOf(TERMINATED, 0));</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    termination.signalAll();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            mainLock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在其内部可以找到terminated()。</p>
<p>下面给出一个应用beforeExecute，afterExecute，terminated的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.BlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static Long BEGIN &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        MyPool myPool &#x3D; new MyPool(5, 5, 0L, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            myPool.execute(new MyTask(&quot;task&quot; + i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        myPool.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyTask(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&#123;&quot; + Thread.currentThread().getId() + &quot;&#125;&quot; + this.name + &quot; start...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&#123;&quot; + Thread.currentThread().getId() + &quot;&#125;&quot; + this.name + &quot; finish&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyPool extends ThreadPoolExecutor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void beforeExecute(Thread t, Runnable r) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;prepare work for &quot; + ((MyTask)r).name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void afterExecute(Runnable r, Throwable t) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for &quot; + ((MyTask)r).name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void terminated() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + (System.currentTimeMillis() - Test.BEGIN) + &quot;]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for myPool shutdown&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[4]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;prepare work for task0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[4]&#123;9&#125;task0 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[14]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;prepare work for task1</span></pre></td></tr><tr><td class="code"><pre><span class="line">[14]&#123;10&#125;task1 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[24]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;prepare work for task2</span></pre></td></tr><tr><td class="code"><pre><span class="line">[24]&#123;11&#125;task2 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[34]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;prepare work for task3</span></pre></td></tr><tr><td class="code"><pre><span class="line">[34]&#123;12&#125;task3 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[44]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;prepare work for task4</span></pre></td></tr><tr><td class="code"><pre><span class="line">[44]&#123;13&#125;task4 start...</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1005]&#123;9&#125;task0 finish</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1005]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for task0</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1014]&#123;10&#125;task1 finish</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1014]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for task1</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1024]&#123;11&#125;task2 finish</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1024]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for task2</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1035]&#123;12&#125;task3 finish</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1036]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for task3</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1044]&#123;13&#125;task4 finish</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1045]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for task4</span></pre></td></tr><tr><td class="code"><pre><span class="line">[1045]&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;AOP&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;after work for myPool shutdown</span></pre></td></tr></table></figure>

<h1 id="合理选择线程池中线程的数量"><a href="#合理选择线程池中线程的数量" class="headerlink" title="合理选择线程池中线程的数量"></a>合理选择线程池中线程的数量</h1><p>纯粹从性能的角度来看，线程数的极限值为可用CPU的数量。Java API提供了获取可用CPU的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4</span></pre></td></tr></table></figure>

<p>因为一个CPU同时只能运行一个线程，因此设定多于CPU数的线程通常都是伪并行，不仅无法得到性能的提升，反而还会因CPU在线程间的切换而导致性能的下降。</p>
<p>当然，这只是理论上的数值。设置线程数这种东西最重要的还是经验。通常有以下两种情况会导致我们设置多于上文极限值的线程数：</p>
<ol>
<li><p>从逻辑建模的角度而言，就需要设置这么多的线程。此时虽然会损失机器性能，但是却能更好的模拟现实环境，利于程序的开发及维护。</p>
</li>
<li><p>生成的线程并非是一直占据CPU的，在它的生存周期中可能会让出CPU做一些无需CPU的操作(例如各种I/O中断)。此时适当的提高线程数可以提高系统性能。</p>
</li>
</ol>
<h1 id="查看线程池中线程的堆栈信息"><a href="#查看线程池中线程的堆栈信息" class="headerlink" title="查看线程池中线程的堆栈信息"></a>查看线程池中线程的堆栈信息</h1><p>我们先来看一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadPoolExecutor te &#x3D; new ThreadPoolExecutor(5, 5, 0, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) te.submit(new MyTask(&quot;task&quot; + i, 100, i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        te.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyTask(String name, int d1, int d2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d1 &#x3D; d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d2 &#x3D; d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot; + this.name + &quot; result&#x3D;&quot; + (this.d1 &#x2F; d2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10]task1 result&#x3D;100</span></pre></td></tr><tr><td class="code"><pre><span class="line">[12]task3 result&#x3D;33</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11]task2 result&#x3D;50</span></pre></td></tr><tr><td class="code"><pre><span class="line">[13]task4 result&#x3D;25</span></pre></td></tr></table></figure>

<p>这可真是一个扎心的结果：我们提交了5个任务，最后只有4组输出。很显然有一组因为除0异常导致线程崩了。之所以说这个结果扎心，并非因为抛出了异常，而在于系统对于异常无动于衷：单看输出天下太平，并没抛出任何异常。</p>
<p>这真的是最为糟心的情况了：程序出问题了，但是从日志来看到处都是正常的。一种最简单的，可以让我们获得部分异常堆栈的做法是用execute替换submit：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadPoolExecutor te &#x3D; new ThreadPoolExecutor(5, 5, 0, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) te.execute(new MyTask(&quot;task&quot; + i, 100, i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        te.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyTask(String name, int d1, int d2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d1 &#x3D; d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d2 &#x3D; d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot; + this.name + &quot; result&#x3D;&quot; + (this.d1 &#x2F; d2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时的输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[11]task2 result&#x3D;50</span></pre></td></tr><tr><td class="code"><pre><span class="line">[12]task3 result&#x3D;33</span></pre></td></tr><tr><td class="code"><pre><span class="line">[10]task1 result&#x3D;100</span></pre></td></tr><tr><td class="code"><pre><span class="line">[13]task4 result&#x3D;25</span></pre></td></tr><tr><td class="code"><pre><span class="line">Exception in thread &quot;pool-1-thread-1&quot; java.lang.ArithmeticException: &#x2F; by zero</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyTask.run(Test.java:32)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr></table></figure>

<p>好多了，虽然无法精确定位，但是起码让我们知道线程池中有线程出异常了。</p>
<p>原因其实很好理解，submit与execute最大的不同之处就在于submit有返回值，而execute没有。因此execute必须要将线程的异常信息抛出，否则就是彻底没了。而submit的异常信息实际上是在它的结果中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutionException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ThreadPoolExecutor te &#x3D; new ThreadPoolExecutor(5, 5, 0, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(te.submit(new MyTask(&quot;task&quot; + i, 100, i)).get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException | ExecutionException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        te.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyTask(String name, int d1, int d2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d1 &#x3D; d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d2 &#x3D; d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot; + this.name + &quot; result&#x3D;&quot; + (this.d1 &#x2F; d2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.util.concurrent.ExecutionException: java.lang.ArithmeticException: &#x2F; by zero</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.FutureTask.report(FutureTask.java:122)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.FutureTask.get(FutureTask.java:188)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:14)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Caused by: java.lang.ArithmeticException: &#x2F; by zero</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyTask.run(Test.java:40)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:262)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr><tr><td class="code"><pre><span class="line">[10]task1 result&#x3D;100</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11]task2 result&#x3D;50</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">[12]task3 result&#x3D;33</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">[13]task4 result&#x3D;25</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr></table></figure>

<p>此时除0异常在get()时被捕获，随后该方法向上层抛出ExecutionException，进而被我们的程序捕获。</p>
<p>虽然上述两种做法能获得部分异常堆栈，但这”部分信息”对于我们的异常分析基本是然并卵的。上述异常信息只能定位到核心Runnable的位置(MyTask.run)，但却定位不到是哪个线程池抛出的异常，无法提供线程池的详细信息。</p>
<p>对此，我们同样可以通过继承ThreadPoolExecutor获得更多的堆栈信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.BlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Future;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        MyPool mp &#x3D; new MyPool(5, 5, 0, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) mp.execute(new MyTask(&quot;task&quot; + i, 100, i));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mp.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyPool extends ThreadPoolExecutor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;pool&#x3D;&quot; + this.getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void execute(MyTask task) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.execute(this.hull(task, this.baseTrace(task)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Future&lt;?&gt; submit(MyTask task) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.submit(this.hull(task, this.baseTrace(task)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Exception baseTrace(MyTask task) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Exception(&quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot; + this.toString() + &quot;-------task&#x3D;&quot; + task.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Runnable hull(final MyTask task, final Exception baseTrace) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    task.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    baseTrace.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyTask(String name, int d1, int d2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d1 &#x3D; d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d2 &#x3D; d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot; + this.name + &quot; result&#x3D;&quot; + (this.d1 &#x2F; d2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[10]task1 result&#x3D;100</span></pre></td></tr><tr><td class="code"><pre><span class="line">[12]task3 result&#x3D;33</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11]task2 result&#x3D;50</span></pre></td></tr><tr><td class="code"><pre><span class="line">[13]task4 result&#x3D;25</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.lang.Exception: [1]pool&#x3D;com.test.MyPool@470ae2bf-------task&#x3D;task0</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyPool.baseTrace(Test.java:38)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyPool.execute(Test.java:30)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:13)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Exception in thread &quot;pool-1-thread-1&quot; java.lang.ArithmeticException: &#x2F; by zero</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyTask.run(Test.java:72)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyPool$1.run(Test.java:46)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr></table></figure>

<p>该输出中同时打出了出错的线程池及任务。一般是不需要打出任务的：因为通常我们只会向线程池提交一种任务。</p>
<p>事实上，这并不能被称之为一个功能，这只是一个小技巧而已：我们仅仅只是在默认的ThreadPoolExecutor之外又包了一层外壳，外壳中记录下当前线程池的信息(如上文代码所示，如果有必要也可以特化外壳类中execute，submit等接受的Runnable的类型，这样就可以打印出更多的任务相关的信息)，当发生异常时，将该线程池的堆栈信息打印出来。</p>
<p>同理，使用submit时的代码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.BlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutionException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Future;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.LinkedBlockingQueue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ThreadPoolExecutor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        MyPool mp &#x3D; new MyPool(5, 5, 0, TimeUnit.SECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(mp.submit(new MyTask(&quot;task&quot; + i, 100, i)).get());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException | ExecutionException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            </span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mp.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyPool extends ThreadPoolExecutor &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyPool(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;pool&#x3D;&quot; + this.getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void execute(MyTask task) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.execute(this.hull(task, this.baseTrace(task)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Future&lt;?&gt; submit(MyTask task) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.submit(this.hull(task, this.baseTrace(task)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Exception baseTrace(MyTask task) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Exception(&quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot; + this.toString() + &quot;-------task&#x3D;&quot; + task.name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Runnable hull(final MyTask task, final Exception baseTrace) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    task.run();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    baseTrace.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    int d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    MyTask(String name, int d1, int d2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d1 &#x3D; d1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.d2 &#x3D; d2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;[&quot; + Thread.currentThread().getId() + &quot;]&quot; + this.name + &quot; result&#x3D;&quot; + (this.d1 &#x2F; d2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.Exception: [1]pool&#x3D;com.test.MyPool@620a9239-------task&#x3D;task0</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyPool.baseTrace(Test.java:46)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyPool.submit(Test.java:42)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:16)</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.util.concurrent.ExecutionException: java.lang.ArithmeticException: &#x2F; by zero</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.FutureTask.report(FutureTask.java:122)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.FutureTask.get(FutureTask.java:188)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:16)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Caused by: java.lang.ArithmeticException: &#x2F; by zero</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyTask.run(Test.java:80)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.MyPool$1.run(Test.java:54)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:262)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.run(Thread.java:745)</span></pre></td></tr><tr><td class="code"><pre><span class="line">[10]task1 result&#x3D;100</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">[11]task2 result&#x3D;50</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">[12]task3 result&#x3D;33</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">[13]task4 result&#x3D;25</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr></table></figure>

<h1 id="同一个线程池execute-的Runnable可以不同"><a href="#同一个线程池execute-的Runnable可以不同" class="headerlink" title="同一个线程池execute()的Runnable可以不同"></a>同一个线程池execute()的Runnable可以不同</h1><p>通常情况下，我们只会向一个线程池提供一种Runnable，即该线程池产生的线程的能力都相同。这是Java推荐的使用方式，一个线程池只产生单一功能的线程有利于程序逻辑的划分。但是这仅仅是推荐，而非必须。事实上，我们可以向线程池提交任意的，不同的Runnable：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService es &#x3D; Executors.newFixedThreadPool(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r1 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;r1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable r2 &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;r2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 4; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i % 2 &#x3D;&#x3D; 0) es.execute(r1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            else es.execute(r2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        es.shutdown();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r2</span></pre></td></tr><tr><td class="code"><pre><span class="line">r1</span></pre></td></tr><tr><td class="code"><pre><span class="line">r2</span></pre></td></tr><tr><td class="code"><pre><span class="line">r1</span></pre></td></tr></table></figure>

<p>可以这样理解：线程池管理的只是线程的壳子，而Thread与Runnable是解耦的。我们可以将Thread看作人的肉体，Runnable看作人的灵魂。线程池管理的仅仅是人的肉体，在需要使用时赋予不同的灵魂(上例中的线程池只管理了一个线程)。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程实现方式</title>
    <url>/2017/10/03/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>JDK1.5以前实现多线程有两种方法：一种是继承Thread类；另一种是实现Runnable接口。两种方式都要通过重写run()方法来定义线程的行为，推荐使用后者，因为Java中的继承是单继承，一个类只有一个父类，如果继承了Thread类就无法再继承其他类了，显然使用Runnable接口更为灵活。</p>
<p>JDK1.5以后创建线程还有第三种方式：实现Callable接口，该接口中的call方法可以在线程执行结束时产生一个返回值，代码如下所示：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Callable;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutionException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.ExecutorService;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Executors;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.Future;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException, ExecutionException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Future&lt;Integer&gt;&gt; list &#x3D; new ArrayList&lt;&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ExecutorService executorService &#x3D; Executors.newFixedThreadPool(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; 10; i++) list.add(executorService.submit(new MyTask(100)));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int sum &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(Future&lt;Integer&gt; future : list) sum +&#x3D; future.get();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(sum);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyTask implements Callable&lt;Integer&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int upperBounds;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyTask(int upperBounds) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.upperBounds &#x3D; upperBounds;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Integer call() throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int sum &#x3D; 0; </span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 1; i &lt;&#x3D; upperBounds; i++) sum +&#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50500</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>Thread</tag>
        <tag>Runnable</tag>
        <tag>Callable</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-ReentrantLock</title>
    <url>/2017/10/03/Java%E5%B9%B6%E5%8F%91-ReentrantLock/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ReentrantLock implements Lock, java.io.Serializable</span></pre></td></tr></table></figure>

<p>JDK1.5引入了显式的锁机制。该机制以Lock接口及其实现类为代表。</p>
<p>ReentrantLock使用显式锁机制实现了synchronized的所有功能，在此基础上又增加了新功能，因此ReentrantLock可以视为synchronized的功能增强版：synchronized所监视的监视器对象可以是任何对象，那么能不能特化出一种对象就是专门用来处理锁，只作为锁对象使用呢？这个锁对象就是ReentrantLock。</p>
<p>实际上，Lock接口比synchronized更接近于底层：synchronized在软件层面依赖JVM实现锁，而Lock在硬件层面依赖特殊的CPU指令(CAS操作)实现锁。</p>
<p>不妨设有ReentrantLock的示例lock对象。lock.lock()在位置1立起了一道门，门上有一把锁即为lock对象。lock对象有一把唯一与之配对的钥匙，存放在lock对象的专有空间中。当线程执行到此处时，它会被这道门挡住，此时若钥匙还在专有空间中，它就可以拿起这把钥匙打开锁向下进行，因为唯一的一把钥匙在这个线程身上，那么后续所有被这把锁挡住的线程都无法进行(不仅仅是被位置1挡住的线程，若该锁也在位置2立起了门，那么被挡在位置2的线程也进行不下去，因为钥匙只有一把)。当持有钥匙的线程走到位置1对应的lock.unlock()处时，它将把钥匙还回lock对象的专有空间。</p>
<p>如果按照这个思路，竞争的其实不是锁，因为只要被门挡了，不论线程是否乐意，锁就在它们面前。真正竞争的其实是唯一配对的那一把钥匙(仅仅是用于理解，日常描述时我们还是会说线程持有了锁而非钥匙)。正如使用synchronized关键字时线程竞争的是监视器对象唯一的认可。</p>
<p>线程在等锁池等待的实现原理是阻塞原语线程挂起park()及线程恢复unpark()。详见<a href="/2017/10/07/Java并发-线程阻塞工具类LockSupport/">Java 并发-线程阻塞工具类LockSupport</a>。</p>
<a id="more"></a>

<p>简单的小例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReentrantLock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int COUNT;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; 100000; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Test.COUNT++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test t1 &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test t2 &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Test.COUNT);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">200000</span></pre></td></tr></table></figure>

<h1 id="判断锁-的钥匙-是否被当前线程持有"><a href="#判断锁-的钥匙-是否被当前线程持有" class="headerlink" title="判断锁(的钥匙)是否被当前线程持有"></a>判断锁(的钥匙)是否被当前线程持有</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ReentrantLock lock &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;加锁前：&quot; + lock.isHeldByCurrentThread());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;已获得锁：&quot; + lock.isHeldByCurrentThread());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        lock.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;释放锁后：&quot; + lock.isHeldByCurrentThread());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加锁前：false</span></pre></td></tr><tr><td class="code"><pre><span class="line">已获得锁：true</span></pre></td></tr><tr><td class="code"><pre><span class="line">释放锁后：false</span></pre></td></tr></table></figure>

<h1 id="中断响应"><a href="#中断响应" class="headerlink" title="中断响应"></a>中断响应</h1><p>使用synchronized时，如果一个线程在等待监视器对象的认可，那么等待的结果只有两种：要么获得认可结束等待；要么无限期的等下去。换句话说，等待监视器对象认可的线程是没有中断机制的。</p>
<p>ReentrantLock在加锁时可使用lockInterruptibly()使得所加的锁可响应中断：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReentrantLock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Test.LOCK.lockInterruptibly();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while(true) ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;在等锁时被中断&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Thread.currentThread().getName() + &quot;执行结束&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Test(&quot;t1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Test(&quot;t2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.interrupt();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后输出如下。且程序不会结束：因为t1不会停止。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">t2在等锁时被中断</span></pre></td></tr><tr><td class="code"><pre><span class="line">t2执行结束</span></pre></td></tr></table></figure>

<p>注意响应中断的是等锁的这一行为，即卡在Test.LOCK.lockInterruptibly();这一行时发生了中断，卡在这一行的线程并没有获得锁。</p>
<h1 id="限时等待"><a href="#限时等待" class="headerlink" title="限时等待"></a>限时等待</h1><p>为了避免在申请不到锁时无限等待，上文中响应中断是其中一种方法，另一种方法是设置限时等待锁。</p>
<p>最为暴躁的等待方式为不等，即只要没申请到锁，立刻判为失败放弃申请，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReentrantLock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (Test.LOCK.tryLock()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(System.currentTimeMillis() + &quot; -- &quot; + Thread.currentThread().getName() + &quot;获得锁&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread.sleep(3000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(System.currentTimeMillis() + &quot; -- &quot; + Thread.currentThread().getName() + &quot;正常执行结束&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(System.currentTimeMillis() + &quot; -- &quot; + Thread.currentThread().getName() + &quot;无法获得锁，执行结束&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Test(&quot;t1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Test(&quot;t2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1507366890797 -- t1获得锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">1507366891815 -- t2无法获得锁，执行结束</span></pre></td></tr><tr><td class="code"><pre><span class="line">1507366893817 -- t1正常执行结束</span></pre></td></tr></table></figure>

<p>不那么粗暴的方式是设置一个等待时间：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.TimeUnit;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReentrantLock LOCK &#x3D; new ReentrantLock();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (Test.LOCK.tryLock(5, TimeUnit.SECONDS)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(System.currentTimeMillis() + &quot; -- &quot; + Thread.currentThread().getName() + &quot;获得锁&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Thread.sleep(3000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(System.currentTimeMillis() + &quot; -- &quot; + Thread.currentThread().getName() + &quot;正常执行结束&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(System.currentTimeMillis() + &quot; -- &quot; + Thread.currentThread().getName() + &quot;无法获得锁，执行结束&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Test(&quot;t1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Test(&quot;t2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1507367395772 -- t1获得锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">1507367398777 -- t1正常执行结束</span></pre></td></tr><tr><td class="code"><pre><span class="line">1507367398777 -- t2获得锁</span></pre></td></tr><tr><td class="code"><pre><span class="line">1507367401784 -- t2正常执行结束</span></pre></td></tr></table></figure>

<h1 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h1><p>synchronized及普通的ReentrantLock是非公平的，即当许可或钥匙空出后，哪一个线程获得它是随机的。线程优先级只能影响获得概率的大小，无法确保先进入等待队列的线程就一定能先获得资源。因此可能产生饥饿的现象。</p>
<p>公平锁严格遵守FIFO原则，即不会因插队现象导致饥饿的发生(已获得资源的线程不愿意释放而导致的饥饿就没办法了)。</p>
<p>公平锁的构建方式：new ReentrantLock(true)。默认的new ReentrantLock()相当于传入了false，即默认为非公平锁。之所以这么设计是因为公平锁为了实现功能必然需要维护一个有序队列，如果不需要FIFO，则这是不必要的开销。</p>
<p>如下代码实现了公平锁，输出基本为t1,t2交替进行。如果改为new ReentrantLock();即使用非公平锁，因为锁机制的优化，线程会更容易获得其曾经持有过的锁，此时的输出为大块的连续t1及大块的连续t2交替进行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.locks.ReentrantLock;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ReentrantLock LOCK &#x3D; new ReentrantLock(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Test.LOCK.lock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Thread.currentThread().getName() + &quot;获得了锁&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Test.LOCK.unlock();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Test(&quot;线程1&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Test(&quot;线程2&quot;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>锁</tag>
        <tag>Lock</tag>
        <tag>ReentrantLock</tag>
        <tag>重入锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-3个并发相关的定律</title>
    <url>/2017/09/29/Java%E5%B9%B6%E5%8F%91-3%E4%B8%AA%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9A%E5%BE%8B/</url>
    <content><![CDATA[<p>Amdahl定律及Gustafson定律主要探讨的是并发程序对性能的提升。</p>
<h1 id="摩尔定律"><a href="#摩尔定律" class="headerlink" title="摩尔定律"></a>摩尔定律</h1><a id="more"></a>

<p>摩尔定律是由英特尔(Intel)创始人之一的戈登·摩尔(Gordon Moore)所提出的。其内容为：当价格不变时，集成电路上可容纳的元器件的数目，约每隔24个月便会增加一倍，性能也将提升一倍。</p>
<p>经常被引用的18个月，出自英特尔首席执行官大卫·豪斯。</p>
<h1 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h1><p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/3%E4%B8%AA%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9A%E5%BE%8B/0.jpg" alt="0.jpg"></p>
<p>其中：</p>
<p>T1:1个CPU时的耗时。Tn：n个CPU时的耗时。F：程序中只能串行执行的比例。</p>
<p>首先分析F的极端情况。若F=0，即程序全部为可并行执行的代码，那么有T1=nTn，即加速比=n，即有几个CPU，程序的速度就被提升了几倍。若F=1，即程序代码全部都只能串行执行，那么有T1=Tn，即加速比=1，此时无论有多少个CPU，程序的效率都不会提升。</p>
<p>然后分析n的极端情况。若n=1，即只有一个CPU，那么有T1=Tn，即加速比=1，此时无论可并行执行的代码比例有多高，程序的效率都不会提升。若n=正无穷大，此时Tn=FT1，即加速比=1/F，与串行化代码的比例成反比，串行化比例越低，程序执行效率越高。</p>
<p>由此可得出：程序串行化代码比例越低，CPU数越多，并行执行的效率越高。</p>
<h1 id="Gustafson定律"><a href="#Gustafson定律" class="headerlink" title="Gustafson定律"></a>Gustafson定律</h1><p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/3%E4%B8%AA%E5%B9%B6%E5%8F%91%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9A%E5%BE%8B/1.jpg" alt="1.jpg"></p>
<p>其中：</p>
<p>执行时间：并行程序优化后的耗时。总执行时间：未并行化前的耗时。</p>
<p>首先分析F的极端情况。若F=0，即程序全部为可并行执行代码，那么有加速比=n，即有几个CPU，程序的速度就被提升了几倍。若F=1，即程序代码全部都只能串行执行，那么有加速比=1，此时无论有多少个CPU，程序的效率都不会提升。</p>
<p>然后分析n的极端情况。若n=1，即只有一个CPU，那么有加速比=1，此时无论可并行执行的代码比例有多高，程序的效率都不会提升。若n=正无穷大，此时加速比=(1-F)n+F，若F也取极端值，即若F=1，则加速比=1；若F=0，加速比=n。至此还和预期相同，但是当F在(0,1)时，加速比依然为无穷大，只是这个无穷大受F的影响：F越大，增长越慢，但是无穷大依然还是无穷大，与预期的结果不同。</p>
<p>由此可得出：程序串行化代码比例越低，CPU数越多，并行执行的效率越高。</p>
<h1 id="Amdahl定律及Gustafson定律是否矛盾"><a href="#Amdahl定律及Gustafson定律是否矛盾" class="headerlink" title="Amdahl定律及Gustafson定律是否矛盾"></a>Amdahl定律及Gustafson定律是否矛盾</h1><p>本质上，两个定律描述的都是加速比，CPU数n，串行化执行代码的比例F三者之间的关系。但是二者不仅公式不同，在某些极限值情况下的结果也不同，那么二者是否矛盾？</p>
<p>首先需要说明的是，所谓的”在某些极限值情况下的结果也不同”其实是弱极限情况。本质上这两个公式都是在用n与F来描述加速比。而前文的极限情况都是n，F其中之一达到极限值，另一个依然是可变的。若n与F都达到极限值，那么这两个定律的结论是相同的。前文推断出的认为Gustafson定律有问题的极限情况其实只有：n达到了正无穷，F未在极限值的状态下这一种。</p>
<p>造成这个差异的原因是因为两个公式在看待这个问题时从一开始的出发点就不同。Amdahl定律着重强调的是F的重要性，即F一定的情况下，无论CPU数怎么折腾，程序都会有一个理论的极限值。Gustafson定律强调的是n的重要性，即当F所占比重足够少时，程序执行的效率将随n线性增长。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>摩尔定律</tag>
        <tag>Amdahl定律</tag>
        <tag>Gustafson定律</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-碎片</title>
    <url>/2017/09/29/Java%E5%B9%B6%E5%8F%91-%E7%A2%8E%E7%89%87/</url>
    <content><![CDATA[<h1 id="并发与并行"><a href="#并发与并行" class="headerlink" title="并发与并行"></a>并发与并行</h1><p>并发(Concurrency)是指在一个”时间段”内多任务同时进行。并行(Parallelism)是指在一个”时间点”上多任务同时进行。</p>
<p>显然我们可以认为并行是并发的子集，因为一个时间段涵盖了无数的时间点。并发如果能做到在其时间段内的每个时间点都是多任务同时进行，那么就会特化为并行；如果做不到，那么在那些做不到的时间点上，任务其实还是串行的，只是通过CPU的调度轮转让各任务都有机会执行，如果这个轮转的时间间隔足够短，就会给观测的人造成”这些任务都是在并行执行”的错觉。</p>
<p>因为一个CPU(多核架构中指CPU的一个核)一次只能执行一条指令。因此如果只有一个CPU，那么只能实现并发，无论如何也无法实现并行。</p>
<p>从外部观测者的视角来看，并行和并发的结果是一致的：除非强迫症患者，一般我们是不会纠结于是否真的”同时在进行”。因此通常并不严格区分并发与并行。更常见的情况是，我们往往只会使用并发这个说法。</p>
<a id="more"></a>

<h1 id="并发的意义"><a href="#并发的意义" class="headerlink" title="并发的意义"></a>并发的意义</h1><ol>
<li><p>充分利用多处理器的性能。</p>
</li>
<li><p>我们所身处的世界本质上就是并发的，因此如果所要模拟实现的系统已经较为复杂，使用并发也是更自然合理的做法。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程优先级</title>
    <url>/2017/09/29/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>用户可指定不同线程间的优先级，高优先级的线程在竞争资源时更有利。注意这仅仅是”有利”，即高优先级线程较之低优先级线程有更高的概率获得资源，而非在资源争夺中一定会获胜。Java将线程的优先级分为1-10的十个级别，并且提供了3个内置在Thread类中的静态标量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final static int MIN_PRIORITY &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final static int NORM_PRIORITY &#x3D; 5;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final static int MAX_PRIORITY &#x3D; 10;</span></pre></td></tr></table></figure>

<p>默认情况下，线程的优先级为NORM_PRIORITY = 5。</p>
<a id="more"></a>

<p>Java中的线程优先级是一个相对不靠谱的东西：</p>
<ul>
<li><p>但凡是牵扯到概率，程序就无法精确控制。我们并不能确定高优先级的线程就一定会先于低优先级的线程获得资源。</p>
</li>
<li><p>本质上，Java线程的优先级必须要映射到操作系统底层的线程优先级才能发挥作用。但是很多操作系统的线程优先级的分级根本就没有10个那么多。这就导致复数个Java层面的线程优先级在操作系统看来实际是一回事。即程序员将两个线程的优先级分别设置为5,6并期望二者能在优先级上有所差异，但其实底层操作系统在实现时也许二者的优先级就完全一样了。这也是Java提供3个静态标量的原因：无论操作系统多么糟心，3个档次的优先级一般还是有的。因此推荐用静态标量的方式设置优先级，而不要自己指定数字。</p>
</li>
</ul>
<p>所以，在要求严格的场合，还是要程序员自己在应用层面通过代码逻辑来控制线程的优先级。</p>
<p>小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test extends Thread &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Test(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(name);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int count &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (true) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                count++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (count &gt; 10000000) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot; finish.&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread low &#x3D; new Test(&quot;low&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        low.setPriority(Thread.MIN_PRIORITY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread high &#x3D; new Test(&quot;high&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        high.setPriority(Thread.MAX_PRIORITY);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        low.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        high.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>绝大多数情况，输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">high finish.</span></pre></td></tr><tr><td class="code"><pre><span class="line">low finish.</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>线程</tag>
        <tag>优先级</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-集合</title>
    <url>/2017/09/29/Java%E5%9F%BA%E7%A1%80-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="阐述ArrayList、Vector、LinkedList的存储性能和特性。"><a href="#阐述ArrayList、Vector、LinkedList的存储性能和特性。" class="headerlink" title="阐述ArrayList、Vector、LinkedList的存储性能和特性。"></a>阐述ArrayList、Vector、LinkedList的存储性能和特性。</h1><a id="more"></a>

<p>ArrayList 和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector中的方法由于添加了synchronized修饰，因此Vector是线程安全的容器，但性能上较ArrayList差，因此已经是Java中的遗留容器。LinkedList使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。Vector属于遗留容器(Java早期的版本中提供的容器，除此之外，Hashtable(可简单的看作是线程安全的HashMap)、Dictionary、BitSet、Stack、Properties都是遗留容器)，已经不推荐使用，但是由于ArrayList和LinkedListed都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类Collections中的synchronizedList方法将其转换成线程安全的容器后再使用(这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现)。</p>
<p>补充：遗留容器中的Properties类和Stack类在设计上有严重的问题，Properties是一个键和值都是字符串的特殊的键值对映射，在设计上应该是关联一个Hashtable并将其两个泛型参数设置为String类型，但是Java API中的Properties直接继承了Hashtable，这很明显是对继承的滥用。这里复用代码的方式应该是Has-A关系而不是Is-A关系，另一方面容器都属于工具类，继承工具类本身就是一个错误的做法，使用工具类最好的方式是Has-A关系(关联)或Use-A关系(依赖)。同理，Stack类继承Vector也是不正确的。</p>
<h1 id="Collection和Collections的区别？"><a href="#Collection和Collections的区别？" class="headerlink" title="Collection和Collections的区别？"></a>Collection和Collections的区别？</h1><p>Collection是一个接口，它是Set、List等容器的父接口；Collections是个一个工具类，提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。</p>
<h1 id="List、Map、Set三个接口存取元素时，各有什么特点？"><a href="#List、Map、Set三个接口存取元素时，各有什么特点？" class="headerlink" title="List、Map、Set三个接口存取元素时，各有什么特点？"></a>List、Map、Set三个接口存取元素时，各有什么特点？</h1><p>List以特定索引来存取元素，可以有重复元素。Set不能存放重复元素(用对象的equals()方法来区分元素是否重复)。Map保存键值对(key-value pair)映射，映射关系可以是一对一或多对一。Set和Map容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为O(1)，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键(key)构成排序树从而达到排序和去重的效果。</p>
<h1 id="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？"><a href="#TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort-方法如何比较元素？" class="headerlink" title="TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？"></a>TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？</h1><p>TreeSet(可以简单的看作有序的集合)要求存放的对象所属的类必须实现Comparable接口，该接口提供了比较元素的compareTo()方法，当插入元素时会回调该方法比较元素的大小。TreeMap(可以简单的看作有序的Map)要求存放的键值对映射的键必须实现Comparable接口从而根据键对元素进行排序。Collections工具类的sort方法有两种重载的形式，第一种要求传入的待排序容器中存放的对象比较实现Comparable接口以实现元素的比较；第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数必须实现Comparator接口(需要重写compare方法实现元素的比较)，相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用(Java中对函数式编程的支持)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.TreeSet;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;Person&gt; set &#x3D; new TreeSet&lt;&gt;();    &#x2F;&#x2F; Java7的钻石语法(构造器后面的尖括号中不需要写类型)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(new Person(&quot;博丽灵梦&quot;, 16));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(new Person(&quot;八云紫&quot;, 999999999));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(new Person(&quot;雾雨魔理沙&quot;, 15));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(new Person(&quot;十六夜咲夜&quot;, 18));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(Person person : set) System.out.println(person);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Person implements Comparable&lt;Person&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Person(String name, int age) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.age &#x3D; age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Student [name&#x3D;&quot; + name + &quot;, age&#x3D;&quot; + age + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int compareTo(Person o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.age - o.age;    &#x2F;&#x2F; 比较年龄(年龄的升序)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student [name&#x3D;雾雨魔理沙, age&#x3D;15]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Student [name&#x3D;博丽灵梦, age&#x3D;16]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Student [name&#x3D;十六夜咲夜, age&#x3D;18]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Student [name&#x3D;八云紫, age&#x3D;999999999]</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Collections;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Comparator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Person&gt; list &#x3D; new ArrayList&lt;&gt;();     &#x2F;&#x2F; Java 7的钻石语法(构造器后面的尖括号中不需要写类型)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Person(&quot;博丽灵梦&quot;, 16));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Person(&quot;八云紫&quot;, 999999999));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Person(&quot;雾雨魔理沙&quot;, 15));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Person(&quot;十六夜咲夜&quot;, 18));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 通过sort方法的第二个参数传入一个实现Comparator接口的对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 相当于是传入一个比较对象大小的算法到sort方法中</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 由于Java中没有函数指针、仿函数、委托这样的概念</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 因此要将一个算法传入一个方法中唯一的选择就是通过接口回调</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collections.sort(list, new Comparator&lt;Person&gt; () &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public int compare(Person o1, Person o2) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return o1.age - o2.age;    &#x2F;&#x2F; 比较年龄(年龄的升序)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(Person person : list) System.out.println(person);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Person &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int age;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Person(String name, int age) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.age &#x3D; age;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Student [name&#x3D;&quot; + name + &quot;, age&#x3D;&quot; + age + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Student [name&#x3D;雾雨魔理沙, age&#x3D;15]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Student [name&#x3D;博丽灵梦, age&#x3D;16]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Student [name&#x3D;十六夜咲夜, age&#x3D;18]</span></pre></td></tr><tr><td class="code"><pre><span class="line">Student [name&#x3D;八云紫, age&#x3D;999999999]</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Collection</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-异常</title>
    <url>/2017/09/29/Java%E5%9F%BA%E7%A1%80-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<p>首先做一个约定：</p>
<ul>
<li><p>设计者：可能会抛出Throwable的代码的编写者。</p>
</li>
<li><p>使用者：使用代码的人。</p>
</li>
</ul>
<p>所谓异常机制，就是设计者明确自己所写的代码有何风险，应该由自己处理的就自己处理，不该自己处理的抛出给使用者。从而使程序更加健壮。</p>
<a id="more"></a>

<h1 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h1><p>java.lang.Throwable是异常机制的顶层类，常见的java.lang.Error与java.lang.Exception均为其子类。</p>
<p>以Throwable本身为例，Throwable一系通常都有如下两个构造函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Throwable()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public Throwable(String message)</span></pre></td></tr></table></figure>

<p>对于Throwable的实例t而言，直接打印t与打印t.toString()等同。而t.getMessage()则返回生成t时所用的字符串message。</p>
<p>无论是t，t.toString()亦或是t.getMessage()，在打印时都是返回一个字符串。另一个常用的异常打印方法为t.printStackTrace()，该方法的返回值为null，它会在自身的内部将t的堆栈轨迹信息打印至控制台上。</p>
<h1 id="throw与throws"><a href="#throw与throws" class="headerlink" title="throw与throws"></a>throw与throws</h1><p>若程序在执行到某行代码时产生了Throwable，则会自动将其抛出，程序中断。这样虽然简单方便，易于理解，然而却将异常机制的一切都交由JVM处理，问题直至运行期才会暴露出来，不可控性太大。因此Java提供了throw与throws关键字供程序员手动抛出Throwable，从而可以在编写代码时就手动处理这些Throwable。</p>
<p>throw出现在方法体内部的代码逻辑中，可以精确指定程序执行到该行代码时会抛出哪种Throwable。throws则出现在方法定义中。</p>
<p>当程序员在编写代码时遇到了一个在代码中显式抛出的Throwable，都需依序考虑如下两个问题：</p>
<ol>
<li><p>是否需要处理这个Throwable？</p>
</li>
<li><p>如果需要，如何处理这个Throwable？</p>
</li>
</ol>
<p>首先需要明确的是，无论是设计者亦或是使用者，无论Throwable抛出的方式是throw还是throws，这两个问题的处理思路都是一致的：</p>
<p>对于第一个问题。Throwable依严重性由大至小被分为Error与Exception，Exception依严重性由大至小又分为受检查异常(Checked Exception)及运行时异常(RuntimeException，为与受检查异常对应，也被称为Unchecked Exception，从这个角度来看，Error都是Unchecked)。所谓受检查，实际指得是受编译器检查：编译器认为这个Throwable非常重要，无论是向更上一层抛出也好，try-catch自行处理也罢，程序员不能无视。而Unchecked则是指编译器不会检查，程序员可自行决定是否无视：Error被设定为Unchecked是因为问题太大程序员已无法处理，而运行时异常被设定为Unchecked是因为问题不大程序员可以不用处理。</p>
<p>所谓不处理就是无视，个人并不推荐这种方式。也就是说虽然从语法的角度上讲可以无需处理运行时异常及Error，但均推荐显式处理它们。</p>
<p>然后进入第二个问题。处理方式有以下两种：</p>
<ol>
<li><p>应该由自己处理的使用try-catch在内部将这个Throwable消化，对于更上层的观测者而言，他们是感知不到抛出过这个Throwable的。</p>
</li>
<li><p>不应该由自己处理的通过throws抛出给更上层的观测者。 </p>
</li>
</ol>
<p>这个”应该”取决于具体的代码逻辑。通常来说，以AOP形式存在的切面方法，比如与主业务流程无关的工具型类方法，都会将Throwable throws出去。因为主业务流程最好能够掌控全局：知道工具方法可能产生的Throwable，并制定合理的对策，同时也可以在主流程的日志文件中留下记录。而若工具类方法通过try-catch将Throwable自己消化掉，那么主业务流程将完全不知道发生了什么，它只知道我求这个工具类方法办个事，那边回复办不到(有些时候甚至连这点也确认不了。比如工具类方法返回的不是代表成功或失败的标志，而是一个具体的对象，那么若这个对象为null，是无法判断到底是因为出错了返回null还是没出错就该是null)。同时因为主流程拿不到Throwable，那么错误日志也要由工具类方法打印。这样就会使得能够打印错误日志的类增多，错误信息打印得过于松散，不利于日志分析。更本质的来说，错误信息就不该工具类方法打印，工具类方法就是一个个简单的，处理某个小功能的函数，应该是随时复制粘贴到一个新的工程中直接就能用的，不应与日志系统做这么强的耦合。当然也可以要求工具类方法在其返回值内部包装错误信息，不过这么做显然太过复杂了。</p>
<h1 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h1><p>Error是设计者认为的严重错误：这类错误一旦发生，程序便无法继续下去而应停止。这里的重点在于”认为”两个字，也就是说这是设计者的主观判断，而非客观事实。对于优秀的设计者而言，客观上确实会导致程序无法进行下去的错误，例如Java虚拟机栈溢出等严重的JVM错误，系统崩溃，所需内存空间不足等自然应该被设定为Error。不过还有一些Error是设计者纯从业务角度上设置的，比较典型的就是Java的断言机制：满足断言所需的条件从业务的角度上考虑极其重要，只要断言结果失败，程序便需停止。</p>
<p>纯粹从try-catch的机制上考虑，它能捕获所有的Throwable，自然也可以捕获Error，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 启动参数：-ea</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该参数用于开启断言</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int a &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            assert a &gt; 0 : &quot;a小于等于0&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Error e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;继续&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.AssertionError: a小于等于0</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:8)</span></pre></td></tr><tr><td class="code"><pre><span class="line">继续</span></pre></td></tr></table></figure>

<p>不过我并不推荐大家在代码中强行使用try-catch处理Error。关于Error，很多人都搞反了一个因果关系：并非因为是Error而不推荐使用try-catch捕获，而是因为设计者不推荐使用try-catch，所以才将其设定为Error。因此如果在编码中遇到了需要捕获Error的场景，最佳的解决方案应该是联系设计者将其改为Exception：因为此时这个问题已经是可处理的了，应该从本质上修改它的含义，而非由使用者强制捕获。</p>
<p>那么Java异常机制又为什么允许try-catch捕获Error呢？为什么不从语法上干脆将其判为非法呢？这样不是更符合Error的初衷吗？这样不是能迫使更多的程序员遵守良好的规范吗？个人推测原因主要有以下两点：</p>
<p>其一，虽然程序必须因Error而停止，但是允许使用者在停止前做点收尾工作还是很合理的。实际上，Error最为常见的处理方式就是用try-catch捕获，在完成收尾工作后再在catch中将其throw出去。</p>
<p>其二，Throwable是否严重依靠的是设计者的主观判断，而设计者和使用者往往不是一个人，有着不同的身份，对同样一个问题的严重性的判断自然也不同。</p>
<p>我们不妨用一个小例子来说明这个问题。假如程序员A写了工具类方法m，该方法可能会抛出Error。又有程序员B，C，D使用A的m。某天B找到A，说你这个m抛出的那个错误吧，在我这看没什么大不了的，顶多算个Exception，要不你给改成Exception吧。A说那可不行，m是我写的，到底怎么样算严重错误自然应该我来把控，我抛出了Error就说明它确实就是有这么严重。而且不仅是我这么想，你看C，D他们俩也没有意见啊，难道我能为了你而让C，D他俩难办吗？B一想确实是这么个理，便自己用try-catch机制捕获并处理了这个Error。</p>
<p>上例虽然打破了前文说的那个规范，但却不能因此说规范便不重要了。恰恰相反，这正证明了规范的重要之处：若B不遵守规范，他就不会去找A并希望A将Error改为Exception，而是直接就用try-catch将Error处理了。虽然结果上来看是一样的，但是过程却有巨大的不同：上例中B最后捕获并处理Error的前提是建立在他去找了A并进行了细致的沟通，可以说这是一个大家都认可的结果。能做到这一点便已经完成了整个Java异常机制中最重要的目标：让使用者明确他们所欲使用的代码有何风险，并做出合理的应对。正如异常机制的顶层类Throwable的名字所表达的：所谓异常就是设计者将自己的代码可能的问题”抛出”给使用者，让他们心里有点B数。</p>
<h1 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h1><p>Exception表示设计者认为的，程序可以处理的异常。使用者可以通过捕获异常将灾害控制在尽量小的范围内。</p>
<p>和上文说的Error同理，Exception的这个”可处理”依然是设计者的主观判断。换句话说，围绕Throwable类所构建的整个异常机制都来自于设计者的主观判断，所以使用者其实是默认相信设计者的判断的。如果设计者对问题严重性的判断有误，那么自然就会影响到整个代码的健壮性。</p>
<p>Throwable依严重性由大至小被分为Error与Exception，Exception依严重性由大至小又分为受检查异常(Checked Exception)及运行时异常(RuntimeException)。</p>
<p>Exception有一个名为java.lang.RuntimeException的子类，所有继承自RuntimeException的类都被称为运行时异常，其他的Exception的子类被称为受检查异常。</p>
<p>程序员可以无视被抛出的运行时异常，却必须显式的处理被抛出的受检查异常：使用try-catch自行处理或者使用throws抛给更上一层。</p>
<p>例如以下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(-100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时无法通过编译，Eclipse下提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unhandled exception type InterruptedException。</span></pre></td></tr></table></figure>

<p>而java.lang.Thread类的sleep方法是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static native void sleep(long millis) throws InterruptedException;</span></pre></td></tr></table></figure>

<p>InterruptedException就是设计者显式声明的受检查异常。换句话说，就是设计者在提醒使用者：我的代码可能会出如下的问题！你必须想好合理的应对措施。那么作为使用者，我们可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread.sleep(-100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时，使用者不处理这个异常，而是将其向更高的层次抛去。在上例中，调用位置main方法已经是顶级层次了，因此这样写就相当于没管这个异常，设计者是否将其抛出结果都一样。不过类似于上文中提到的ABCD四个程序员的例子，即便如此，设计者抛出异常InterruptedException依然是有意义的：因为此时使用者将该异常继续向上抛出是在明确了这个风险后思考的结果，而非真的是在什么都不知道的情况下什么都不做。</p>
<p>当然，我们也可以选择处理这个异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(-100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后我们运行上述代码，输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: timeout value is negative</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.Thread.sleep(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at test.Test.main(Test.java:7)</span></pre></td></tr></table></figure>

<p>try-catch并未生效，程序还是因异常而中断了。因为此时抛出的异常并非设计者显示抛出的那个InterruptedException，而是IllegalArgumentException：时间当然不可能是负数。这是一个运行时异常。</p>
<p>这种未被使用者显式处理的异常就像是一颗炸弹，只有当程序产生异常时才会因无法处理而挂到，这实在是一件让人很遗憾的事：上线新功能后观察了1个小时运行情况，哦耶一切正常，然后开开心心的下班回家，半夜的时候出现了异常，服务跪掉，然后被领导一个电话拎起来跪着改bug直到天明。</p>
<p>那么，设计者能否将自身代码所有可能产生的问题都显式声明出来呢(写在注释里或在方法定义中throws出去)？这显然是不可能做到的，没有人可以在编码阶段就考虑到所有情况，算无遗策，设计者只能根据他自身的判断，尽可能的将必须处理的问题挑出来。</p>
<p>不过上面那个半夜起床改bug的问题实在是过于让人忧郁了，为此伟大的前辈们总结了这样一个套路：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(-100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;捕获并处理InterruptedException&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IllegalArgumentException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;捕获并处理IllegalArgumentException&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;捕获并处理未知的Exception&quot; + e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">捕获并处理IllegalArgumentException</span></pre></td></tr></table></figure>

<p>这其实是利用了Java的继承机制，其思路很明显：先处理设计者显式声明的异常，随后如果使用者有什么不放心的，也可在与设计者沟通或者看设计者提供的文档后写几个自己认为可能会出现的异常。最后用所有异常类的父类Exception兜底，将可能产生的运行时异常一网打尽，并用一个公共的，稳妥的方式处理它。其效果拔群：起码基本是不会在半夜被拎起来了，而是可以在第二天偷摸的通过日志发现异常，然后再偷摸的改掉这个bug。</p>
<p>当然，如果某些异常的处理策略确实就是相同的，也可将它们写到一起：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(-100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (InterruptedException | IllegalArgumentException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;捕获并处理&quot; + e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;捕获并处理未知的Exception&quot; + e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">捕获并处理java.lang.IllegalArgumentException: timeout value is negative</span></pre></td></tr></table></figure>

<p>那么又有人说了，用Exception兜底很稳啊，那还费什么劲，只捕获Exception不行吗：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Thread.sleep(-100);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;捕获并处理未知的Exception:&quot; + e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">捕获并处理未知的Exception:java.lang.IllegalArgumentException: timeout value is negative</span></pre></td></tr></table></figure>

<p>这样做确实可以让代码更简洁，然而问题也很致命：使用者只能用公共的处理模块处理所有异常，不能根据不同的异常设置不同的对策了。因此在这里我还是建议大家不要怕麻烦，除非某些异常确实就是要用通用的模块处理，否则还是单独写处理逻辑更利于维护。</p>
<h1 id="异常机制使用技巧"><a href="#异常机制使用技巧" class="headerlink" title="异常机制使用技巧"></a>异常机制使用技巧</h1><p>首先我们来看如下这段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int a &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int b &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (a &#x3D;&#x3D; 0) System.out.println(b &#x2F; (a + 1));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else System.out.println(b &#x2F; a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>当然也可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int a &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int b &#x3D; 100;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(b &#x2F; a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ArithmeticException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(b &#x2F; (a + 1));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这两种写法均能实现相同的功能，看似没有什么区别，但是事实上，写代码不仅仅要看当前的业务逻辑，更要遵守语法本身的基本规范。第二段代码最本质的问题根本就不是什么异常机制占用资源高，降低程序性能之类的具体原因，因为如果问题是这些的话，那么是不是说如果程序不大，机器硬件资源很充足，第二段代码就没问题了？当然不是，第二段代码最本质的问题在于它违反了Java异常机制的设计初衷，这两段代码中的除零根本就不是异常，而是一个正常的业务逻辑，换句话说，尽量不要用异常机制去处理正常逻辑的代码，即不要把异常机制当成正常逻辑下的条件分支去用。这里之所以用了尽量，是因为写代码也要有灵性，某些特殊情况下取个巧，将异常机制融入正常逻辑会更好。不过上例显然不属于这种情况。</p>
<hr>
<p>正如上文所说的不要用异常机制处理正常的业务逻辑那样，Throwable终究是一种无可避免的情况下产生的不正常的东西，所以能用正常业务代码处理的就不要显式声明为Throwable。例如有人不进行边界判断，而是直接用异常机制去控制非法的方法入参，这是不可取的。比如如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int m(int a, int b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return a &#x2F; b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int c &#x3D; Test.m(1, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException: &#x2F; by zero</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.m(Test.java:6)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:10)</span></pre></td></tr></table></figure>

<p>显然这是最糟的写法，调用者对于m可能会抛出ArithmeticException这一运行时异常完全没有准备。因此自然而言想要这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int m(int a, int b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (b &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;除数不能为0，m执行失败&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return a &#x2F; b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int c &#x3D; Test.m(1, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">除数不能为0，m执行失败</span></pre></td></tr></table></figure>

<p>我想，大家在看到方法m里的那句输出时心里可能就会隐隐觉得不妥了，这代码似乎依然不怎么样。没错，这种处理方式对于调用者而言异常是透明的。那么怎么写比较好呢？笔者比较认可如下的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArithmeticException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static int m(int a, int b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (b &#x3D;&#x3D; 0) throw new ArithmeticException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return a &#x2F; b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int c &#x3D; Test.m(1, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.ArithmeticException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at aaa.Test.m(Test.java:6)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at aaa.Test.main(Test.java:11)</span></pre></td></tr></table></figure>

<p>需要注意的是，上述代码是先进行了边界判断，再依具体的代码逻辑选择抛出ArithmeticException这一具体的异常。和直接使用异常机制代替边界判断是不同的。</p>
<hr>
<p>正如我所信奉的那句仿佛是出自于圣经一般的格言：Thou Shalt Comment(汝应注释)所说，设计者一定要为异常写好注释。</p>
<hr>
<p>catch代码块的内容不要为空。最不济也要打一行日志，记录下错误。</p>
<h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>优先使用Java API提供的标准Throwable，尽量不要自造Throwable。因为设计者只要自造了Throwable，使用者就必须引入这个Throwable，平添复杂性。实际上，根据我自身的经验，Java API提供的标准Throwable基本上已经能满足所有业务需求了。如果实在是需要自造Throwable，建议也只是自造Exception。</p>
<p>在真正开始自造Exception之前，我们不妨以IOException为例，看看Java API中的异常是怎么写的。因为代码都很短，我们可以从更上层的Exception开始贴起(Throwable就有些长了)</p>
<p>Exception:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.lang;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Exception extends Throwable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static final long serialVersionUID &#x3D; -3387516993124229948L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Exception() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Exception(String message) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Exception(String message, Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message, cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Exception(Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Exception(String message, Throwable cause,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        boolean enableSuppression,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        boolean writableStackTrace) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message, cause, enableSuppression, writableStackTrace);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>IOException:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.io;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public</span></pre></td></tr><tr><td class="code"><pre><span class="line">class IOException extends Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    static final long serialVersionUID &#x3D; 7818375828146090155L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public IOException() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public IOException(String message) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public IOException(String message, Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message, cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public IOException(Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>实在是有趣！</p>
<p>一共没几行代码不说，还没有任何独有的逻辑，全部都是super。看来Java API的思路就是在Throwable中设计一个套路，然后它的小弟们都沿着这个套路走。仔细想想确实也够用了，我们在查看异常信息时需要的无非就是异常类型及描述字符串。</p>
<p>仿造IOException，我们很容易的就可以写出一个自定义异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws MyIOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new MyIOException(&quot;自造的IOException&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyIOException extends IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException(String message) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException(String message, Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message, cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException(Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; com.test.MyIOException: 自造的IOException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:8)</span></pre></td></tr></table></figure>

<p>默认调用的是toString()方法，它位于Throwable中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String s &#x3D; getClass().getName();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    String message &#x3D; getLocalizedMessage();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return (message !&#x3D; null) ? (s + &quot;: &quot; + message) : s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>我们当然也可以重写它：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws MyIOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new MyIOException(&quot;描述信息&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class MyIOException extends IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 1L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException(String message) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException(String message, Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(message, cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public MyIOException(Throwable cause) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(cause);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String s &#x3D; &quot;一种特殊的IOException&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String message &#x3D; super.getLocalizedMessage();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (null !&#x3D; message) ? (s + &quot;: &quot; + message) : s;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; 一种特殊的IOException: 描述信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:8)</span></pre></td></tr></table></figure>

<h1 id="try-catch-finally中的return"><a href="#try-catch-finally中的return" class="headerlink" title="try-catch-finally中的return"></a>try-catch-finally中的return</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static String test() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String result &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; &quot;try&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; &quot;catch&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; &quot;finally&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;method result &#x3D; &quot; + Test.test());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try</span></pre></td></tr><tr><td class="code"><pre><span class="line">finally</span></pre></td></tr><tr><td class="code"><pre><span class="line">method result &#x3D; try</span></pre></td></tr></table></figure>

<p>上例的执行顺序为：</p>
<ol>
<li><p>return前将待return的值保存。</p>
</li>
<li><p>将待return的值复制一份给finally。</p>
</li>
<li><p>执行finally。类似于<a href="/2017/10/10/Java基础-方法参数的值传递及引用传递/">Java 基础-方法参数的值传递及引用传递</a>。finally中所有的操作都是基于这份复制后的新值，与原有待返回的值无关。</p>
</li>
<li><p>执行返回。</p>
</li>
</ol>
<p>那么上述执行顺序的底层实现是什么样的呢？我们再来看如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int inc() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x &#x3D; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x &#x3D; 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>为从字节码层面分析该问题，我们先用javap生成该类class文件的反编译文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;D:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2017-11-17; size 397 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum c86c2f92295c441780b75728395e2c1f</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #4.#16         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Class              #17            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Exception</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; Class              #18            &#x2F;&#x2F;  Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Class              #19            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               inc</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               ()I</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               StackMapTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Class              #17            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Exception</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Class              #20            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Throwable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; NameAndType        #5:#6          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; Utf8               java&#x2F;lang&#x2F;Exception</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; Utf8               Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #19 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #20 &#x3D; Utf8               java&#x2F;lang&#x2F;Throwable</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 1: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public int inc();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;5, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: iconst_1  &#x2F;&#x2F; 将int型1压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: istore_1  &#x2F;&#x2F; 将栈顶int型数值弹出并存入局部变量表1号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：无</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         2: iload_1   &#x2F;&#x2F; 将局部变量表1号索引位置的int型数值压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         3: istore_2  &#x2F;&#x2F; 将栈顶int型数值弹出并存入局部变量表2号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：无</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,1,1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: iconst_3  &#x2F;&#x2F; 将int型3压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：3</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,1,1</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         5: istore_1  &#x2F;&#x2F; 将栈顶int型数值弹出并存入局部变量表1号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：无</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,3,1</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 </span></pre></td></tr><tr><td class="code"><pre><span class="line">         6: iload_2   &#x2F;&#x2F; 将局部变量表2号索引位置的int型数值压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,3,1</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 </span></pre></td></tr><tr><td class="code"><pre><span class="line">         7: ireturn   &#x2F;&#x2F; 返回操作数栈栈顶的int类型数值</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 </span></pre></td></tr><tr><td class="code"><pre><span class="line">         8: astore_2  &#x2F;&#x2F; [0,3]产生异常跳入本行，跳入时默认会将异常对象压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 假设压入异常对象之前的操作数栈及局部变量表保持指令2结束时的样子。</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 本指令为：将栈顶引用型值弹出并存入局部变量表2号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 操作数栈(自底向上)：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,1,e</span></pre></td></tr><tr><td class="code"><pre><span class="line">	 </span></pre></td></tr><tr><td class="code"><pre><span class="line">         9: iconst_2  &#x2F;&#x2F; 将int型2压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 操作数栈(自底向上)：1,2</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,1,e  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        10: istore_1  &#x2F;&#x2F; 将栈顶int型数值弹出并存入局部变量表1号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 操作数栈(自底向上)：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,2,e    </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        11: iload_1   &#x2F;&#x2F; 将局部变量表1号索引位置的int型数值压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 操作数栈(自底向上)：1,2</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,2,e     </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        12: istore_3  &#x2F;&#x2F; 将栈顶int型数值弹出并存入局部变量表3号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 操作数栈(自底向上)：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,2,e,2   </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        13: iconst_3  &#x2F;&#x2F; 将int型3压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：1,3</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,2,e,2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        14: istore_1  &#x2F;&#x2F; 将栈顶int型数值弹出并存入局部变量表1号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：1</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,3,e,2  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        15: iload_3   &#x2F;&#x2F; 将局部变量表3号索引位置的int型数值压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	              &#x2F;&#x2F; 操作数栈(自底向上)：1,2</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,3,e,2    </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        16: ireturn   &#x2F;&#x2F; 返回操作数栈栈顶的int类型数值</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        17: astore        4  &#x2F;&#x2F; [0,3]或[8,12]产生异常跳入本行，跳入时默认会将异常对象压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">                             &#x2F;&#x2F; 假设压入异常对象之前的操作数栈及局部变量表保持指令11结束时的样子。</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     &#x2F;&#x2F; 本指令为：将栈顶引用型值弹出并存入局部变量表4号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     &#x2F;&#x2F; 操作数栈(自底向上)：1,2</span></pre></td></tr><tr><td class="code"><pre><span class="line">		             &#x2F;&#x2F; 局部变量表：this,2,e,空,e2</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     &#x2F;&#x2F; 其中e为try中抛出的异常，e2为catch中抛出的异常</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        19: iconst_3  &#x2F;&#x2F; 将int型3压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 操作数栈(自底向上)：1,2,3</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,2,e,空,e2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        20: istore_1  &#x2F;&#x2F; 将栈顶int型数值弹出并存入局部变量表1号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 操作数栈(自底向上)：1,2</span></pre></td></tr><tr><td class="code"><pre><span class="line">		      &#x2F;&#x2F; 局部变量表：this,3,e,空,e2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        21: aload         4  &#x2F;&#x2F; 将局部变量表4号索引位置的引用型值压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">			     &#x2F;&#x2F; 操作数栈(自底向上)：1,2,e2</span></pre></td></tr><tr><td class="code"><pre><span class="line">		             &#x2F;&#x2F; 局部变量表：this,3,e,空,e2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        23: athrow  &#x2F;&#x2F; 将操作数栈栈顶的异常抛出</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Exception table:</span></pre></td></tr><tr><td class="code"><pre><span class="line">         from    to  target type</span></pre></td></tr><tr><td class="code"><pre><span class="line">             0     4     8   Class java&#x2F;lang&#x2F;Exception</span></pre></td></tr><tr><td class="code"><pre><span class="line">             0     4    17   any</span></pre></td></tr><tr><td class="code"><pre><span class="line">             8    13    17   any</span></pre></td></tr><tr><td class="code"><pre><span class="line">            17    19    17   any</span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 6: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 7: 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 12: 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 8: 8</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 9: 9</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 10: 11</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 12: 13</span></pre></td></tr><tr><td class="code"><pre><span class="line">      StackMapTable: number_of_entries &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">           frame_type &#x3D; 72 &#x2F;* same_locals_1_stack_item *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          stack &#x3D; [ class java&#x2F;lang&#x2F;Exception ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">           frame_type &#x3D; 72 &#x2F;* same_locals_1_stack_item *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          stack &#x3D; [ class java&#x2F;lang&#x2F;Throwable ]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>程序可能的执行流程及返回结果有如下4种：</p>
<p>try中未产生异常，则流程为try-finally。返回1。即：</p>
<ul>
<li><p>[0,3]:try</p>
</li>
<li><p>[4,5]:finally</p>
</li>
<li><p>[6,7]:try返回1。</p>
</li>
</ul>
<p>try中产生Exception及其子类的异常则进入catch，若catch未产生异常，则进入finally，返回2。</p>
<ul>
<li><p>[0,x]:try,x取值范围为[0,3]</p>
</li>
<li><p>[8,12]:catch</p>
</li>
<li><p>[13,14]:finally</p>
</li>
<li><p>[15,16]:catch返回2。</p>
</li>
</ul>
<p>try中产生Exception及其子类的异常则进入catch，若catch产生异常，则进入finally，而后抛出该异常，无返回值。</p>
<ul>
<li><p>[0,x]:try,x取值范围为[0,3]</p>
</li>
<li><p>[8,y]:catch，y取值范围为[8,12]</p>
</li>
<li><p>[17]:记录异常</p>
</li>
<li><p>[19,20]:finally</p>
</li>
<li><p>21,23:抛出异常，无返回值</p>
</li>
</ul>
<p>try中产生不属于Exception及其子类的异常，则进入finally，而后抛出该异常，无返回值。</p>
<ul>
<li><p>[0,x]:try,x取值范围为[0,3]</p>
</li>
<li><p>[17]:记录异常</p>
</li>
<li><p>[19,20]:finally</p>
</li>
<li><p>21,23:抛出异常，无返回值</p>
</li>
</ul>
<p>在JDK1.4.2之前JVM采用jsr及ret指令来实现finally。JDK1.4.2中虽然jsr及ret仍有效，但javac编译器已经不再生成了这两个指令了，它会在finally可能出现的所有路径上冗余添加finally代码。而到了JDk1.7，jsr及ret已被完全禁用，若class文件中出现了这两个指令，JVM会在类加载-连接-验证-字节码校验阶段抛出异常。</p>
<p>实例代码的执行流程分析也证明了这一点。[4,5]，[13,14]，[19,20]就是冗余存储的finally逻辑。</p>
<p>这样我们便从字节码的层面上验证了最开始描述的执行顺序，同时还知道了不仅try到finally对于return值会采取值传递的方式，catch到finally时也一样。</p>
<p>因为finally会被无条件执行，所以最好不要在finally中使用return语句：虽然语法上没什么问题，却会造成逻辑混乱，不利于代码的维护。</p>
<hr>
<p>最后我们可以再一起来做一个小练习：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ESon();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ESon e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;ESon&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (EFather e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;EFather&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class EFather extends Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 6536621933798974349L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ESon extends EFather &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 6091571391764298719L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时Eclipse下程序会报警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unreachable catch block for EFather. Only more specific exceptions are thrown and they are handled by previous catch block(s).</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ESon</span></pre></td></tr></table></figure>

<p>若将catch的顺序交换，即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ESon();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (EFather e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;EFather&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ESon e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;ESon&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class EFather extends Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 6536621933798974349L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ESon extends EFather &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 6091571391764298719L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>程序将无法通过编译，Eclipse下报：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unreachable catch block for ESon. It is already handled by the catch block for EFather。</span></pre></td></tr></table></figure>

<p>若按如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ESon();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (EFather f) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;Caught Father&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw f;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ESon s) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;Caught Son&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;Hello World!&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class EFather extends Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 6536621933798974349L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class ESon extends EFather &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 6091571391764298719L;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Caught Father</span></pre></td></tr><tr><td class="code"><pre><span class="line">Caught Son</span></pre></td></tr><tr><td class="code"><pre><span class="line">Hello World!</span></pre></td></tr></table></figure>

<h1 id="try-catch-finally常用情景：文件读写"><a href="#try-catch-finally常用情景：文件读写" class="headerlink" title="try-catch-finally常用情景：文件读写"></a>try-catch-finally常用情景：文件读写</h1><p>按照上文讨论的结果，Throwable是由代码的设计者抛出的。其中一个很常见的应用场景就是文件的读写。</p>
<p>之所以这么说，是因为文件读写的程序出了错，很多时候锅往往不会在代码本身：比如要操作的文件没有读写权限，或者干脆就没有。对于设定好要读写文件的代码而言，这确实是异常情况，而且无论代码写得多么健壮都无法避免。</p>
<p>下面我们来看一个简单的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileNotFoundException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileReader fileReader &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fileReader &#x3D; new FileReader(&quot;d:&#x2F;a.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;异常点1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 方法返回int，强转为char</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println((char)fileReader.read());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;异常点2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if(null !&#x3D; fileReader) fileReader.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;异常点3&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>然后我们创建d:/a.txt，并在其中写入内容”博丽灵梦”。然后运行程序，输出为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">博</span></pre></td></tr></table></figure>

<p>这是符合预期的正常情况，没毛病。不过，如果我们删掉d盘下的a.txt，再运行程序，将输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">异常点1</span></pre></td></tr><tr><td class="code"><pre><span class="line">java.io.FileNotFoundException: d:\a.txt (系统找不到指定的文件。)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.FileInputStream.open(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:146)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.FileInputStream.&lt;init&gt;(FileInputStream.java:101)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.FileReader.&lt;init&gt;(FileReader.java:58)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.test.Test.main(Test.java:12)</span></pre></td></tr></table></figure>

<p>上述代码已可以健壮的实现所需功能了，不过还有可以改进的地方：文件的关闭被独立出去了，如果分支处理不当可能会有漏关的风险。而实际上它与创建应是一一对应的关系。我们可以使用finally的特性来确保这一点：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        FileReader fileReader &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fileReader &#x3D; new FileReader(&quot;d:&#x2F;a.txt&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#x2F;&#x2F; 方法返回int，强转为char</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println((char)fileReader.read());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; FileNotFoundException是IOException的子类，因此合并了</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;异常点1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if(null !&#x3D; fileReader) fileReader.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;异常点2&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>看起来好多了。不过我们仍然可以让它更为简洁。因为对于文件操作这一类的资源读取而言，关闭读入源是如此的常见，因此语言的API中往往会提供对应的快捷方式。比如Python中就有对应的try-with，可以在资源使用完毕后(代码执行出try的范围)由系统自动关闭资源，而无需程序员显式设置。在JDK1.7中，Java终于也提供了类似的功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileReader;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try (FileReader fileReader &#x3D; new FileReader(&quot;d:&#x2F;a.txt&quot;);) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">           &#x2F;&#x2F; 方法返回int，强转为char</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println((char)fileReader.read());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (IOException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; FileNotFoundException是IOException的子类，因此合并了</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;异常点1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-断言</title>
    <url>/2017/09/29/Java%E5%9F%BA%E7%A1%80-%E6%96%AD%E8%A8%80/</url>
    <content><![CDATA[<p>断言是一种常见的调试方式，很多语言(C,C++,Python,Java)都支持这种机制。因为是调试机制，因此断言默认是不开启的。若要开启断言，则需在启动参数中添加-enableassertions，或简写为-ea。</p>
<p>Java中的断言可有如下两种形式：</p>
<a id="more"></a>

<p>第一种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assert a &gt; 0;</span></pre></td></tr></table></figure>

<p>失败时输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.AssertionError</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at test.Test.main(Test.java:7)</span></pre></td></tr></table></figure>

<p>第二种：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assert a &gt;&#x3D; 0 : &quot;a小于0&quot;;</span></pre></td></tr></table></figure>

<p>失败时输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.AssertionError: a小于0</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at test.Test.main(Test.java:8)</span></pre></td></tr></table></figure>

<p>断言失败后，JVM会抛出一个AssertionError错误，它继承自Error。注意，这是一个错误，是不可恢复的。也就表示这是一个严重的问题，开发者必须予以关注并解决之。</p>
<p>断言的设计初衷为辅助调试，因此断言不应影响代码的执行结果。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>断言</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-日期和时间</title>
    <url>/2017/09/29/Java%E5%9F%BA%E7%A1%80-%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/</url>
    <content><![CDATA[<p>简单来说，Java的时间API可归结为以下3个类：</p>
<ul>
<li><p>Date:时间API的核心类。最初很强大，几乎包含了时间API的所有功能。后来被拆分，只保留与核心long类型毫秒数相关的功能，其余功能均已标记为废弃方法。</p>
</li>
<li><p>DateFormat:负责进行Date与格式化字符串之间的转换。主要用于将Date展示为各种人类易于阅读的格式，基本不承载具体的功能。</p>
</li>
<li><p>Calendar:字面含义是日历类。是Java时间API中功能最强大的类。可以这么理解，除了Date及DateFormat所实现的那一点功能之外，其余的功能都在Calendar中。</p>
</li>
</ul>
<h1 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h1><p>一个java.util.Date类的实例表示一个精确的时刻，单位为毫秒。核心字段用long类型存储，记录自标准纪元1970年1月1日0时0分0秒起到该特定时刻的毫秒数。</p>
<p>若有如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date date &#x3D; new Date();</span></pre></td></tr></table></figure>

<a id="more"></a>

<p>该无参构造函数的源码为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public Date() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this(System.currentTimeMillis());</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>即默认以当前时刻创建了Date实例。当然我们也可以指定时刻：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date date &#x3D; new Date(666);</span></pre></td></tr><tr><td class="code"><pre><span class="line">date.setTime(1000);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date.getTime());</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date.toString());    &#x2F;&#x2F; 当前系统环境(中国)时区</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date.toGMTString());    &#x2F;&#x2F; 默认时区(仅用于举例，已废弃，不推荐使用)</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1000</span></pre></td></tr><tr><td class="code"><pre><span class="line">Thu Jan 01 08:00:01 CST 1970</span></pre></td></tr><tr><td class="code"><pre><span class="line">1 Jan 1970 00:00:01 GMT</span></pre></td></tr></table></figure>

<p>时刻前后比较：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date date1 &#x3D; new Date(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Date date2 &#x3D; new Date(2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date1.before(date2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date1.after(date2));</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">true</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr></table></figure>

<p>比较2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date date1 &#x3D; new Date(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Date date2 &#x3D; new Date(1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date1.before(date2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date1.after(date2));</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(date1.equals(date2));</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">false</span></pre></td></tr><tr><td class="code"><pre><span class="line">false</span></pre></td></tr><tr><td class="code"><pre><span class="line">true</span></pre></td></tr></table></figure>

<p>实际上，Date的比较就是在比其内部的毫秒数的先后。</p>
<h1 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h1><p>利用java.text.DataFormat的子类SimpleDateFormat可将Date与特定格式的字符串进行相互转化：</p>
<ul>
<li><p>Date–&gt;特定格式的字符串：format方法。</p>
</li>
<li><p>特定格式的字符串–&gt;Date：parse方法。</p>
</li>
</ul>
<p><strong>Date转字符串</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String dateFormat &#x3D; new SimpleDateFormat(&quot;yyyy&#x2F;MM&#x2F;dd-HH:mm:ss&quot;).format(new Date());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(dateFormat);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2017&#x2F;09&#x2F;29-15:06:03</span></pre></td></tr></table></figure>

<p>其中”yyyy/MM/dd-HH:mm:ss”被称为格式化字符串，全字符含义如下图所示：</p>
<p><img src="/images/blog_pic/Java%E5%9F%BA%E7%A1%80/%E6%97%A5%E6%9C%9F%E5%92%8C%E6%97%B6%E9%97%B4/0.jpg" alt="0.jpg"></p>
<hr>
<p><strong>字符串转Date</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.DateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.ParseException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws ParseException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String dateStr &#x3D; &quot;1990年06月05日 07:07:07&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        DateFormat dateFormat1 &#x3D; new SimpleDateFormat(&quot;yyyy年MM月dd日 HH:mm:ss&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Date date &#x3D; dateFormat1.parse(dateStr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(date);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tue Jun 05 07:07:07 CDT 1990</span></pre></td></tr></table></figure>

<h1 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h1><p>在上文已叙述的两个类中，DateFormat只用于格式转换，不承载实际的逻辑。Date中的时间是以1个long类型的整数存储的。这种存储格式是给计算机看的，更关心时间流逝的本质，因此基本计数单位也仅采用毫秒一种，人类几乎无法理解。</p>
<p>为扩展时间API的功能，设计者又添加了日历类Calendar，表示日期的概念(其实也能精确到时分秒)，较之Date类，其更关心人类在历法上的逻辑。功能为进行某一特定时刻与各种日期(年月周日时分秒)之间的转化。</p>
<p>需要注意的是，Calendar这一族的类中的月份是从0开始的，即月份的取值范围为0~11(欧美国家是不采用数字表示月份的，因此从0开始他们并不在乎。中国人用数字表示月份，因此从0开始看着会比较别扭)。而星期则是从1开始的，即周日是1，周一是2…周六是7。为了避免开发人员记忆过多这种纯规则性的东西，Calendar内部以不可变int型类变量的方式提供了全部日期类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final static int YEAR &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final static int SUNDAY &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public final static int FEBRUARY &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">...</span></pre></td></tr></table></figure>

<p>这里我故意抽取了3个值一样的类变量。这是不会产生歧义的，因为它们3个的使用场景不同。</p>
<p>Calendar本身是抽象类，GregorianCalendar是Calendar的一个子类，表示世界上大部分国家及地区均采用的标准日历系统(即所谓的公历)。我们在日常开发中用到的也就是这个类。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Calendar;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Date;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.GregorianCalendar;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Calendar calendar &#x3D; new GregorianCalendar();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(1990, Calendar.JUNE, 5, 7, 7, 7);    &#x2F;&#x2F; 1990年6月5日 07:07:07</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(calendar.getTimeInMillis());    &#x2F;&#x2F; 1970年1月1日0时0分0秒到calendar对应时刻的毫秒数</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Date date &#x3D; calendar.getTime();    &#x2F;&#x2F; Date类是时间API中各组件间的桥梁</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(date);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">644537227223</span></pre></td></tr><tr><td class="code"><pre><span class="line">Tue Jun 05 07:07:07 CDT 1990</span></pre></td></tr></table></figure>

<p>除此之外，也常采用以下方法设置Calendar：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Calendar;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.GregorianCalendar;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Calendar calendar &#x3D; new GregorianCalendar();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.YEAR, 1990);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(calendar.get(Calendar.YEAR));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(calendar.getTime());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1990</span></pre></td></tr><tr><td class="code"><pre><span class="line">Wed Dec 05 23:07:25 CST 1990</span></pre></td></tr></table></figure>

<p>这种设置方式便于只设置某几种时间类型。上例中我只设置了年。其余的时间类型均与构建时的当前时间相同(由此也可见在新建GregorianCalendar类时，类似于Date类，无参构造函数默认取当前时刻)。</p>
<p>最后一种常用的设值方式就是直接注入Date对象或毫秒数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calendar.setTime(new Date());    &#x2F;&#x2F; Date类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">calendar.setTimeInMillis(1000L);    &#x2F;&#x2F; 毫秒数</span></pre></td></tr></table></figure>

<p>因日常开发所用的大多也就是GregorianCalendar类，因此设计者在Calendar中为我们添加了一个快捷方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Calendar calendar &#x3D; Calendar.getInstance();</span></pre></td></tr></table></figure>

<p>这种方式得到的同样是GregorianCalendar类的实例。也就是说等价于：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Calendar calendar &#x3D; new GregorianCalendar();</span></pre></td></tr></table></figure>

<p><strong>add方法</strong></p>
<p>第一个参数是待修改的类型，第二个参数是较之calendar的值加减的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calendar.add(Calendar.YEAR, 10);    &#x2F;&#x2F; calendar中的值加10年</span></pre></td></tr><tr><td class="code"><pre><span class="line">calendar.add(Calendar.YEAR, -10);    &#x2F;&#x2F; calendar中的值减10年</span></pre></td></tr><tr><td class="code"><pre><span class="line">calendar.add(Calendar.DATE, 10);    &#x2F;&#x2F; calendar中的值加10天</span></pre></td></tr></table></figure>

<p><strong>getActualMinimum与getActualMaximum方法</strong></p>
<p>calendar的值对应所属传入类型的最小/最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">calendar.getActualMinimum(Calendar.DAY_OF_MONTH)    &#x2F;&#x2F; calendar中的值所属月份中的日期的最小值</span></pre></td></tr><tr><td class="code"><pre><span class="line">calendar.getActualMaximum(Calendar.DAY_OF_MONTH)    &#x2F;&#x2F; calendar中的值所属月份中的日期的最大值(例如11月为30,12月为31)</span></pre></td></tr><tr><td class="code"><pre><span class="line">calendar.getActualMaximum(Calendar.DAY_OF_WEEK)    &#x2F;&#x2F; calendar中的值所属星期中的日期的最大值(默认为7)</span></pre></td></tr></table></figure>

<h1 id="小例子：输出特定日期当月日历"><a href="#小例子：输出特定日期当月日历" class="headerlink" title="小例子：输出特定日期当月日历"></a>小例子：输出特定日期当月日历</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.text.SimpleDateFormat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Calendar;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Calendar calendar &#x3D; Calendar.getInstance();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.setTime(new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).parse(&quot;1990-06-05&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int day &#x3D; calendar.get(Calendar.DATE);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int month &#x3D; calendar.get(Calendar.MONTH);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        calendar.set(Calendar.DATE, calendar.getActualMinimum(Calendar.DAY_OF_MONTH));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;日\t一\t二\t三\t四\t五\t六&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 1; i &lt;&#x3D; calendar.get(Calendar.DAY_OF_WEEK) - 1; i++) System.out.print(&quot; \t&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (calendar.get(Calendar.MONTH) &#x3D;&#x3D; month) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.print(calendar.get(Calendar.DATE) + (calendar.get(Calendar.DATE) &#x3D;&#x3D; day ? &quot;*\t&quot; : &quot;\t&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (calendar.get(Calendar.DAY_OF_WEEK) &#x3D;&#x3D; Calendar.SATURDAY) System.out.println();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            calendar.add(Calendar.DATE, 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">日	一	二	三	四	五	六</span></pre></td></tr><tr><td class="code"><pre><span class="line"> 	 	 	 	 	1	2	</span></pre></td></tr><tr><td class="code"><pre><span class="line">3	4	5*	6	7	8	9	</span></pre></td></tr><tr><td class="code"><pre><span class="line">10	11	12	13	14	15	16	</span></pre></td></tr><tr><td class="code"><pre><span class="line">17	18	19	20	21	22	23	</span></pre></td></tr><tr><td class="code"><pre><span class="line">24	25	26	27	28	29	30</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>日期</tag>
        <tag>时间</tag>
      </tags>
  </entry>
  <entry>
    <title>Eclipse-安装及配置</title>
    <url>/2017/09/29/Eclipse-%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h1><a id="more"></a>

<ul>
<li><a href="https://www.eclipse.org/downloads/eclipse-packages/" target="_blank" rel="noopener">Eclipse官网下载地址</a></li>
<li><a href="https://pan.baidu.com/s/1o39mYkKkb74JfndH84VmnQ" target="_blank" rel="noopener">Windows 64位安装包个人存档</a></li>
</ul>
<p>解压即可完成安装。</p>
<h1 id="设置workspace"><a href="#设置workspace" class="headerlink" title="设置workspace"></a>设置workspace</h1><p>第一次运行时会提示指定workspace，若此后需要再次修改，则配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;General—&gt;Startup and Shutdown—&gt;Workspaces—&gt;选中Prompt for workspace on startup</span></pre></td></tr></table></figure>

<p>删除已有workspace后，重启Eclipse即可重新选workspace。</p>
<h1 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;General—&gt;workspace</span></pre></td></tr></table></figure>

<p>将Text file encoding设置为utf-8。</p>
<h1 id="设置Java版本"><a href="#设置Java版本" class="headerlink" title="设置Java版本"></a>设置Java版本</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;java—&gt;Compiler 将编译器版本设定为所需版本</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;java—&gt;Installed JREs 指向对应版本的JDK目录</span></pre></td></tr></table></figure>

<h1 id="设置Maven"><a href="#设置Maven" class="headerlink" title="设置Maven"></a>设置Maven</h1><p>见<a href="/2017/04/23/Maven-安装/">Maven-安装</a>。</p>
<h1 id="设置缩进为4个空格"><a href="#设置缩进为4个空格" class="headerlink" title="设置缩进为4个空格"></a>设置缩进为4个空格</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;General—&gt;Editors—&gt;Text Editors，选中右侧的insert space for tabs并保存</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;java—&gt;code style—&gt;formatter 设置缩进为4个空格</span></pre></td></tr></table></figure>

<h1 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;General—&gt;Appearance—&gt;Colors and Fonts 修改Basic下的Text Font</span></pre></td></tr></table></figure>

<h1 id="设置主题"><a href="#设置主题" class="headerlink" title="设置主题"></a>设置主题</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window—&gt;Preferences—&gt;General—&gt;Appearance—&gt;Color Theme 选择主题，个人推荐NightLion Aptana Theme</span></pre></td></tr></table></figure>

<p>若没有这个选项，则需要先下载插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Help—&gt;Eclipse Marketplace 搜索并安装Eclipse Color Theme</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Eclipse</category>
      </categories>
      <tags>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-翻转字符串中的单词</title>
    <url>/2017/09/28/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String reverse(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if(null &#x3D;&#x3D; str || str.length() &lt;&#x3D; 1) return str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    char[] strArr &#x3D; str.toCharArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    reverse(strArr, 0, strArr.length - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int begin &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (int i &#x3D; 1; i &lt; strArr.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (strArr[i] &#x3D;&#x3D; &#39; &#39;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            reverse(strArr, begin, i - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            begin &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new String(strArr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">private static void reverse(char[] strArr, int begin, int end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    while(begin &lt; end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        char temp &#x3D; strArr[begin];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        strArr[begin] &#x3D; strArr[end];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        strArr[end] &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        begin++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        end--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-翻转字符串</title>
    <url>/2017/09/28/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="使用系统方法"><a href="#使用系统方法" class="headerlink" title="使用系统方法"></a>使用系统方法</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String reverse(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if(null &#x3D;&#x3D; str || str.length() &lt;&#x3D; 1) return str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new StringBuilder(str).reverse().toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String reverse(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if(null &#x3D;&#x3D; str || str.length() &lt;&#x3D; 1) return str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return reverse(str.substring(1)) + str.charAt(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="转为char数组"><a href="#转为char数组" class="headerlink" title="转为char数组"></a>转为char数组</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String reverse(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (null &#x3D;&#x3D; str || str.length() &lt;&#x3D; 1) return str;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    char[] strArr &#x3D; str.toCharArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int begin &#x3D; 0, end &#x3D; strArr.length - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    while (begin &lt; end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        char temp &#x3D; strArr[begin];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        strArr[begin] &#x3D; strArr[end];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        strArr[end] &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        begin++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        end--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new String(strArr);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-序列化</title>
    <url>/2017/09/28/Java%E5%9F%BA%E7%A1%80-%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="如何实现对象克隆？"><a href="#如何实现对象克隆？" class="headerlink" title="如何实现对象克隆？"></a>如何实现对象克隆？</h1><a id="more"></a>

<p>有两种方式：</p>
<ul>
<li><p>实现Cloneable接口并重写Object类中的clone()。Object类中的clone()是浅克隆。</p>
</li>
<li><p>实现Serializable接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.ByteArrayInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ByteArrayOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> </span></pre></td></tr><tr><td class="code"><pre><span class="line">public class CloneBySerializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static &lt;T&gt; T clone(T object) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; object) return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 调用ByteArrayInputStream或ByteArrayOutputStream对象的close方法没有任何意义</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 这两个基于内存的流只要垃圾回收器清理对象就能够释放资源，这一点不同于对外部资源(如文件流)的释放</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ByteArrayOutputStream byteArrayOutputStream &#x3D; new ByteArrayOutputStream();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            new ObjectOutputStream(byteArrayOutputStream).writeObject(object);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     </span></pre></td></tr><tr><td class="code"><pre><span class="line">            ByteArrayInputStream byteArrayInputStream &#x3D; new ByteArrayInputStream(byteArrayOutputStream.toByteArray());</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (T) new ObjectInputStream(byteArrayInputStream).readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (Exception e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person person &#x3D; new Person(&quot;八云紫&quot;, new Book(&quot;永远的17岁&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;原始：&quot; + person);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Person personCopy &#x3D; CloneBySerializable.clone(person);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;copy：&quot; + personCopy);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        personCopy.name &#x3D; &quot;八云紫（笑）&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        personCopy.book.name &#x3D; &quot;其实是个老婆婆&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;copy改变后-原始：&quot; + person);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;copy改变后-copy：&quot; + personCopy);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Person implements Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; -9198259586220345266L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Book book;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Person(String name, Book book) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.book &#x3D; book;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Person [name&#x3D;&quot; + name + &quot;, book&#x3D;&quot; + book + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Book implements Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; -8536837238716978714L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String name;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Book(String name) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.name &#x3D; name;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Book [name&#x3D;&quot; + name + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">原始：Person [name&#x3D;八云紫, book&#x3D;Book [name&#x3D;永远的17岁]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">copy：Person [name&#x3D;八云紫, book&#x3D;Book [name&#x3D;永远的17岁]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">copy改变后-原始：Person [name&#x3D;八云紫, book&#x3D;Book [name&#x3D;永远的17岁]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">copy改变后-copy：Person [name&#x3D;八云紫（笑）, book&#x3D;Book [name&#x3D;其实是个老婆婆]]</span></pre></td></tr></table></figure>

<p>基于序列化和反序列化实现的克隆不仅仅是深度克隆，更重要的是通过泛型限定，可以检查出要克隆的对象是否支持序列化，这项检查是编译器完成的，不是在运行时抛出异常，这种方案明显优于使用Object类的clone方法克隆对象。让问题在编译的时候暴露出来总是优于把问题留到运行时。</p>
<h1 id="Java中如何实现序列化，有什么意义？"><a href="#Java中如何实现序列化，有什么意义？" class="headerlink" title="Java中如何实现序列化，有什么意义？"></a>Java中如何实现序列化，有什么意义？</h1><p>序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题(如果不进行序列化可能会存在数据乱序的问题)。</p>
<p>要实现序列化，需要让一个类实现Serializable接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过writeObject(Object)方法就可以将实现对象写出(即保存其状态)；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-内部类</title>
    <url>/2017/09/28/Java%E5%9F%BA%E7%A1%80-%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    <content><![CDATA[<p>内部类可分为如下3类：成员内部类，局部内部类，匿名内部类。而成员内部类又可分为实例成员内部类及静态成员内部类。</p>
<a id="more"></a>

<h1 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h1><p><strong>实例成员内部类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Out().new In();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>实例成员内部类中是无法定义类变量的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static int V &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这段代码无法通过编译，提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The field V cannot be declared static in a non-static inner type, unless initialized with a constant </span></pre></td></tr><tr><td class="code"><pre><span class="line">expression。</span></pre></td></tr></table></figure>

<p><strong>静态成员内部类</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Out.In();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>成员内部类的访问权限</strong></p>
<p>成员内部类，顾名思义，首先是个成员(即实例变量或类变量)，其次才是类。从更大的视角上看，成员内部类就是其外部类的一个成员。因此二者其实是同一个类。进而二者均有权限访问对方内部被private修饰的字段或方法。</p>
<p>下面以外部类访问静态成员内部类中的私有变量为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private String v0 &#x3D; &quot;实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static String V_1 &#x3D; &quot;静态&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Out.In.V_1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(new Out.In().v0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">静态</span></pre></td></tr><tr><td class="code"><pre><span class="line">实例</span></pre></td></tr></table></figure>

<p>外部类(其实也就是普通的Java类)的修饰符只能为public或无修饰符。而成员内部类本质上是成员，因此同其他变量一样，可被private,protected,无修饰符,public修饰，并且访问权限也与一般变量一般无二。</p>
<p><strong>内部类与外部类之间同名字段问题</strong></p>
<p>在叙述具体的解决策略之前，我想先表达一下个人看法。如果我是Java语法的设计者，那么我可能会禁止内部类与外部类之间存在同名字段。因为这与因继承导致的重复不同：继承牵扯到复数个类，同时父类与子类之间又有明确的ISA关系，因此允许字段重名是合理的。而内部类与外部类之间则是HASA的关系，二者并没有什么血缘关系，从逻辑上无需重名。同时内部类与外部类共存于一个Java源文件中，也基本不会造成因需要兼顾的代码量太大而漏掉字段的可能，毕竟需要检查的代码范围也就是一个Java源文件那么大，综上，我认为允许内部类与外部类的字段重名稍稍有些灵活过了(通常Java在和C++做比较时，没那么灵活往往是Java的优势，可以让程序员节约很多学习成本)。同时，我也建议大家在编码时，即便没有编译器的强制规范，也不要编写出重名的字段。</p>
<p>若发生了重名，如果什么都不处理的话，则会默认调用当前代码所在类的字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String v0 &#x3D; &quot;外部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static String V_1 &#x3D; &quot;外部静态&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private String v0 &#x3D; &quot;内部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static String V_1 &#x3D; &quot;内部静态&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private void m0() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(v0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static void m1() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(V_1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;外部类中调用情况&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(new Out().v0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(V_1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;内部类中调用情况&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Out.In().m0();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Out.In.m1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外部类中调用情况</span></pre></td></tr><tr><td class="code"><pre><span class="line">外部实例</span></pre></td></tr><tr><td class="code"><pre><span class="line">外部静态</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">内部类中调用情况</span></pre></td></tr><tr><td class="code"><pre><span class="line">内部实例</span></pre></td></tr><tr><td class="code"><pre><span class="line">内部静态</span></pre></td></tr></table></figure>

<p>如果我就是想在外部类中调内部类的字段，内部类中调外部类的字段呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String v0 &#x3D; &quot;外部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static String V_1 &#x3D; &quot;外部静态&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private String v0 &#x3D; &quot;内部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static String V_1 &#x3D; &quot;内部静态&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private static void m1() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Out.V_1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;外部类中调用情况&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(new Out.In().v0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Out.In.V_1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;内部类中调用情况&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Out.In.m1();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时该成员内部类是无法访问到其外部类的实例变量，究其原因，还是因为该成员内部类是静态成员内部类。因此我们略作修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String v0 &#x3D; &quot;外部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private String v0 &#x3D; &quot;内部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private void m0() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(Out.this.v0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Out out &#x3D; new Out();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Out.In in &#x3D; out.new In(); </span></pre></td></tr><tr><td class="code"><pre><span class="line">        in.m0();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外部实例</span></pre></td></tr></table></figure>

<h1 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h1><p>局部内部类是定义在一个方法或者一个作用域里面的类。如果说从宏观上来看成员内部类的本质是字段，那么局部内部类的本质就是局部变量。</p>
<p>因为本质是局部变量，那么对于局部内部类而言，自然不存在访问修饰符的概念。不过，局部内部类中的私有数据与其外部类的私有数据之间依然是相互可见的。</p>
<p>局部内部类中不能定义类变量，即便其所处的外部类方法是静态的也不行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            private static String v_1_I &#x3D; &quot;内部静态&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>无法通过编译，提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The field v_1_I cannot be declared static in a non-static inner type, unless initialized with a constant。</span></pre></td></tr></table></figure>

<p>测试访问权限的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Out &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String vo &#x3D; &quot;外部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static String V &#x3D; &quot;外部静态&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        class In &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            private String vi &#x3D; &quot;内部实例&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void mi(Out out) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(out.vo);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(Out.V);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        In in &#x3D; new In();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;外部类中调用情况&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(in.vi);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;内部类中调用情况&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        in.mi(this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Out().m();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">外部类中调用情况</span></pre></td></tr><tr><td class="code"><pre><span class="line">内部实例</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span></pre></td></tr><tr><td class="code"><pre><span class="line">内部类中调用情况</span></pre></td></tr><tr><td class="code"><pre><span class="line">外部实例</span></pre></td></tr><tr><td class="code"><pre><span class="line">外部静态</span></pre></td></tr></table></figure>

<h1 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h1><p>匿名内部类(Anonymous Inner Class)可以继承其他类或实现其他接口，在Swing编程和Android开发中常用此方式来实现事件监听和回调。</p>
<p>下面是一个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public abstract class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。上例中的匿名内部类在编译的时候由系统自动起名为Test$1.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p>
<h1 id="final修饰符问题"><a href="#final修饰符问题" class="headerlink" title="final修饰符问题"></a>final修饰符问题</h1><p>局部内部类或匿名内部类中只能引用其所在方法中被final修饰的局部变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void test(final int b) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final int a &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread()&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述代码，如果去掉b或a的final修饰符，将无法通过编译，并提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot refer to the non-final local variable a defined in an enclosing scope。</span></pre></td></tr></table></figure>

<p>究其原因，匿名内部类或局部内部类在使用外部局部变量时，依靠的是将其传入自身的实例构造函数方法&lt;init&gt;。我们知道Java在进行方法传值时使用的是值传递(详见<a href="/2017/10/10/Java基础-方法参数的值传递及引用传递/">Java 基础-方法参数的值传递及引用传递</a>)，这样可以保证即便是在本例这样的并发环境下，test方法可能已执行完成，局部变量a或b已被销毁，匿名内部类所起的线程中的a或b依然可用：因为这已然是个全新的复制值了。</p>
<p>但是这样便引入了新的问题：即若a或b在复制了一份传入匿名内部类或局部内部类后发生了改变怎么办？为了保证线程安全，才强制规定局部内部类或匿名内部类中只能引用其所在方法中被final修饰的局部变量。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础-基本数据类型</title>
    <url>/2017/09/27/Java%E5%9F%BA%E7%A1%80-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<a id="more"></a>

<h1 id="4类8种基本数据类型"><a href="#4类8种基本数据类型" class="headerlink" title="4类8种基本数据类型"></a>4类8种基本数据类型</h1><p>除此之外，特别的，Java中存在一种基本数据类型void，它所对应的包装类为java.lang.Void。不过我们无法直接对它进行操作。</p>
<p><strong>四种整数类型</strong></p>
<ul>
<li>byte：8位有符号 [-2^7 , 2^7-1] –&gt; [-128 , 127]</li>
<li>short：16位有符号 [-2^15 , 2^15-1] –&gt; [-32768 , 32767]</li>
<li>int：32位有符号 [-2^31 , 2^31-1] –&gt; [-2,147,483,648 , 2,147,485,647]。默认整数型</li>
<li>long：64位有符号 [-2^63 , 2^63-1] –&gt; [-9,223,372,036,854,775,808 , 9,223,372,036,854,775,807]。可用L或l显式声明</li>
</ul>
<p>若需要表示long范围之外的数字，可使用java.math.BigInteger，其可表示任意长度的整数。</p>
<p>默认采用十进制计数。0开头为八进制。0x或0X开头为16进制。进制间转换示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int a &#x3D; 17;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;2进制&#x3D;&quot; + Integer.toBinaryString(a));    &#x2F;&#x2F; 转为2进制字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;8进制&#x3D;&quot; + Integer.toOctalString(a));    &#x2F;&#x2F; 转为8进制字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;16进制&#x3D;&quot; + Integer.toHexString(a));    &#x2F;&#x2F; 转为16进制字符串</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2进制&#x3D;10001</span></pre></td></tr><tr><td class="code"><pre><span class="line">8进制&#x3D;21</span></pre></td></tr><tr><td class="code"><pre><span class="line">16进制&#x3D;11</span></pre></td></tr></table></figure>

<p>JDK1.7中新增0b/0B开头表示二进制数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(0b10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span></pre></td></tr></table></figure>

<p>JDK1.7中新增数字分割符，可用下划线按照自己的习惯随意分割一个数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a &#x3D; 111_222_333;</span></pre></td></tr><tr><td class="code"><pre><span class="line">double b &#x3D; 123_456.123_45;</span></pre></td></tr></table></figure>

<p><strong>两种浮点数类型</strong></p>
<ul>
<li>float：32位有符号单精度。[1.4E-45 , 3.4028235E38]。又被称为单精度类型，尾数可以精确到7位有效数字。可用F或f显式声明</li>
<li>double：64位有符号双精度。[4.9E-324 , 1.7976931348623157E308]。又被称为双精度类型，尾数可以精确到14位有效数字。默认浮点型。可用D或d显式声明</li>
</ul>
<p>浮点型存在舍入误差(例如，无法精确表示0.1，0.01这种10的负数次方幂)，因此应尽量避免用于比较，若实在需比较浮点数，可使用java.math.BigDecimal，其可精确表示任意精度的浮点数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        double d &#x3D; 1.0 &#x2F; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(d &#x3D;&#x3D; 0.1);    &#x2F;&#x2F; true</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(d &#x3D;&#x3D; 0.1F);    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">	System.out.println(0.1 &#x3D;&#x3D; 0.1F);    &#x2F;&#x2F; false</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>可用科学计数法表示浮点型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(3.14e-2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0.0314</span></pre></td></tr></table></figure>

<p><strong>一种字符类型(char)</strong></p>
<p>16位无符号[0 , 2^16-1] –&gt; [0, 65535]。可以当整数来用，它的每一个字符都对应一个数字。换言之也可将[0, 65535]的整数转换为char。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println((int)&#39;a&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&#39;a&#39; + 1);    &#x2F;&#x2F; &#39;a&#39;直接作为一个整数参与四则运算。换句话说，char可自动向上转换为int</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println((char)97);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">97</span></pre></td></tr><tr><td class="code"><pre><span class="line">98</span></pre></td></tr><tr><td class="code"><pre><span class="line">a</span></pre></td></tr></table></figure>

<p>char本质上就是个二进制的数，显示的时候处理为字符。char在参与四则运算时会被转换为int型。</p>
<p>char与Java所使用的字符集Unicode同为两字节表示(不考虑扩展集)，一个char对应Unicode的一个字符。</p>
<p>‘A’表示字符，是char类型。”A”表示字符串，是String类型，该字符串由一个字符组成。</p>
<p>String类，其实是字符序列(char sequence)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&#39;&#39;);    &#x2F;&#x2F; 无法通过编译</span></pre></td></tr></table></figure>

<p>\u表示Unicode编码值，以16进制表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&#39;\u0061&#39;);    &#x2F;&#x2F; 输出a</span></pre></td></tr></table></figure>

<p><img src="/images/blog_pic/Java%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/0.jpg" alt="0.jpg"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; char可用于存储换行等转义字符</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&#39;\n&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&#39;\&#39;&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&#39;\\&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">\</span></pre></td></tr></table></figure>

<p><strong>一种布尔类型(boolean)</strong></p>
<p>关于boolean的大小，有以下几种说法：</p>
<ul>
<li>1个bit(1/8个字节)：boolean只有true和false两种逻辑值，在编译后会使用1和0来表示，这两个数在内存中按位算，仅需1bit即可存储，位是计算机最小的存储单位。</li>
<li>1个字节：虽然编译后1和0只需占用1位空间，但计算机处理数据的最小单位是1个字节，1个字节等于8位，实际存储的空间是：用1个字节的最低位存储，其他7位用0填补，如果值是true的话则存储的二进制为：0000 0001，如果是false的话则存储的二进制为：0000 0000。</li>
<li>4个字节：JVM规范中规定：虽然定义了boolean这种数据类型，但是只对它提供了非常有限的支持。在JVM中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用JVM中的int数据类型来代替，而boolean数组将会被编码成JVM的byte数组，每个元素占8位。JVM使用int而非更小的整型代指boolean的原因为：对于当下32位的CPU而言，一次处理的数据为32位(这里的32不是指操作系统的32位与64位，而是指CPU硬件层面)，因此32位最为合理高效，即便使用了更小的位数最终也会被填充为32位。</li>
</ul>
<h1 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h1><p><img src="/images/blog_pic/Java%E5%9F%BA%E7%A1%80/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/1.jpg" alt="1.jpg"></p>
<p>上图中黑色的实线表示不会发生精度丢失的自动转换，红色表示可能会发生精度丢失的自动转换(是否精度丢失主要是看转换双方的相对大小)。</p>
<p><strong>浮点型间的类型转换</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float f &#x3D; 3.4;</span></pre></td></tr></table></figure>

<p>无法通过编译。Eclipse提示：Type mismatch: cannot convert from double to float。</p>
<p>3.4默认是双精度数，将双精度型(double)赋值给浮点型(float)属于下转型(down-casting)，也可称为窄化。该操作会造成精度损失，因此无法通过编译。</p>
<p>解决办法有2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 强制类型转换</span></pre></td></tr><tr><td class="code"><pre><span class="line">float f &#x3D; (float)3.4;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 显式声明类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">float f &#x3D; 3.4F;</span></pre></td></tr></table></figure>

<p><strong>整型间的类型转换</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">short s &#x3D; 1;    &#x2F;&#x2F; 正确。除非涉及四则运算符，否则可自动关联关键字类型。这与float不同。</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int i &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">short s &#x3D; i;    &#x2F;&#x2F; 错误，无法通过编译</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 错误</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 1是int型，s + 1的运算结果为int型，需要强制类型转换才能赋值给short型。</span></pre></td></tr><tr><td class="code"><pre><span class="line">s &#x3D; s + 1;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 本句等价于s &#x3D; (short)(s + 1);其中有隐含的强制类型转换。</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; s++;同理也是正确的。</span></pre></td></tr><tr><td class="code"><pre><span class="line">s +&#x3D; 1;</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">short s1 &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">short s2 &#x3D; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 无法通过编译</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Type mismatch: cannot convert from int to short</span></pre></td></tr><tr><td class="code"><pre><span class="line">short s3 &#x3D; s1 + s2;</span></pre></td></tr></table></figure>

<p>同理，上例中的short换成byte后相关结果依然成立。</p>
<h1 id="基本数据类型与其包装类型"><a href="#基本数据类型与其包装类型" class="headerlink" title="基本数据类型与其包装类型"></a>基本数据类型与其包装类型</h1><p>Java并非纯粹的面向对象语言，因此类似于”Java中一切都是对象，对象就是一切”这样的言论更像是宣传口号，实际上是有些绝对了。</p>
<p>比如，Java中的基本数据类型就不是面向对象的(这样的好处是在处理一些涉及基本数据类型的操作时效率更高)，但是有时(比如基本数据类型作为集合类的元素)，我们又希望能够像操作对象那样操作它们。因此，Java为每一个基本数据类型都提供了对应的包装类型(wrapper class)，从JDK1.5开始又引入了自动装箱/拆箱机制，使得二者可以相互转换。</p>
<p>这些包装类型都位于java.lang包中：</p>
<ul>
<li>boolean - Boolean</li>
<li>char - Character</li>
<li>byte - Byte</li>
<li>short - Short</li>
<li>int - Integer</li>
<li>long - Long</li>
<li>float - Float</li>
<li>double - Double</li>
</ul>
<h1 id="自动装箱-拆箱机制"><a href="#自动装箱-拆箱机制" class="headerlink" title="自动装箱/拆箱机制"></a>自动装箱/拆箱机制</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer a &#x3D; new Integer(3);</span></pre></td></tr><tr><td class="code"><pre><span class="line">Integer b &#x3D; 3;    &#x2F;&#x2F; 将3自动装箱成Integer类型</span></pre></td></tr><tr><td class="code"><pre><span class="line">int c &#x3D; 3;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(a &#x3D;&#x3D; b);    &#x2F;&#x2F; false 两个引用没有引用同一对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(a &#x3D;&#x3D; c);    &#x2F;&#x2F; true Integer与int比较时，a自动拆箱(调用a.intValue())成int类型再和c比较(实际上是两个int在比)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                               &#x2F;&#x2F; 此处将3换为一个大于127的数结果不变。</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Integer f1 &#x3D; 100, f2 &#x3D; 100, f3 &#x3D; 150, f4 &#x3D; 150;</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(f1 &#x3D;&#x3D; f2);    &#x2F;&#x2F; true 取常量池中的结果</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(f3 &#x3D;&#x3D; f4);    &#x2F;&#x2F; false new新对象</span></pre></td></tr></table></figure>

<p>装箱的本质是什么呢？当我们给一个Integer对象赋一个int值的时候，javac编译器会调用Integer类的静态方法valueOf，如果整型字面量的值在[-128,127]之间，那么不会new新的Integer对象，而是直接引用常量池中的Integer对象，所以f1==f2的结果是true，而f3==f4的结果是false。</p>
<h1 id="char-型变量中能不能存贮一个中文汉字，为什么？"><a href="#char-型变量中能不能存贮一个中文汉字，为什么？" class="headerlink" title="char 型变量中能不能存贮一个中文汉字，为什么？"></a>char 型变量中能不能存贮一个中文汉字，为什么？</h1><p>char类型可以存储一个中文汉字，因为Java中使用的编码是Unicode(不选择任何特定的编码，直接使用字符在字符集中的编号，这是统一的唯一方法)，一个char类型占2个字节(16比特)，所以放一个中文是没问题的。</p>
<p>使用Unicode意味着字符在JVM内部和外部有不同的表现形式，在JVM内部都是Unicode，当这个字符被从JVM内部转移到外部时(例如存入文件系统中)，需要进行编码转换。所以Java中有字节流和字符流，以及在字符流和字节流之间进行转换的转换流，如InputStreamReader和OutputStreamReader，这两个类是字节流和字符流之间的适配器类，承担了编码转换的任务。</p>
<h1 id="例题-long"><a href="#例题-long" class="headerlink" title="例题:long"></a>例题:long</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long a &#x3D; 10000000000;    &#x2F;&#x2F; 错误，超过了int类型长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">long b &#x3D; 10000000000L;    &#x2F;&#x2F; 正确</span></pre></td></tr></table></figure>

<h1 id="取余操作"><a href="#取余操作" class="headerlink" title="取余操作"></a>取余操作</h1><p>浮点型也可取余，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(10.5 % 3);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(10.2 % 3);    &#x2F;&#x2F; 精度丢失</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.5</span></pre></td></tr><tr><td class="code"><pre><span class="line">1.1999999999999993</span></pre></td></tr></table></figure>

<p>Java中余数的计算公式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a%b&#x3D;a-(a&#x2F;b)*b</span></pre></td></tr></table></figure>

<p>正数易于理解。举几个负数参与运算的小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(-5 % 3);    &#x2F;&#x2F; -2</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(5 % -3);    &#x2F;&#x2F; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">System.out.println(-5 % -3);    &#x2F;&#x2F; -2</span></pre></td></tr></table></figure>

<p>小技巧：取余计算的结果的符号总与被除数相同，可以此验证计算结果的准确性。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基本数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 基础-碎片</title>
    <url>/2017/09/27/Java%E5%9F%BA%E7%A1%80-%E7%A2%8E%E7%89%87/</url>
    <content><![CDATA[<h1 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h1><a id="more"></a>

<p>面向过程的程序是由事件驱动的。即先发生事件1，再发生事件2，然后是事件3…直至程序结束。面向过程中的过程即为事件依序执行的过程。定义每一个事件执行行为的规则称为”算法”，事件的核心意义在于对”数据”的处理：事件导致数据的值发生了变化。</p>
<p>面向对象的程序的核心为对象。面向过程中的”数据”变成了对象的”属性”，面向过程中的”算法”变成了对象的”行为”。即对象1做出了行为1，对象2做出了行为2…各对象的行为影响了自己或他人的属性，直至程序结束。</p>
<p>举个小例子：小王打了小李。面向过程关注的是”打人”这件事，具体到事件内部，打人者为小王，被打者为小李。面向对象关注的是小王和小李这两个人，小王做出了打小李的行为。很显然，面向过程及面向对象都能准确的描述这件事，只是思考的角度不同。</p>
<p><strong>封装</strong></p>
<ul>
<li>面向过程的核心为”算法处理数据”，算法与数据均为最顶级的概念，即没有一个概念能让这二者从属于它。面向对象的核心为”对象”。一切都是对象，对象就是一切。对象是最顶级的概念，属性及行为均从属于对象。换句话说，对象封装了属性及行为。</li>
<li>对象就像一个黑盒。优秀的代码会隐藏一切可隐藏的属性或行为而只暴露必要的对外可见的部分。</li>
</ul>
<p><strong>继承</strong></p>
<p>类似于生物学分类中的”界门纲目科属种”， 子类/派生类 继承 父类/超类/基类 ，表明子类默认拥有父类的属性及行为。同时如果有必要，子类也可以通过重写父类的属性及行为的方式展现自身不同于父类的个性。</p>
<p><strong>多态</strong></p>
<p>多态是指同样的静态类型因实际类型的不同在调用同一个方法时做出了不同的行为。实质上，多态是动态单分派的体现，其核心为重写。关于重写，详见<a href="/2017/10/10/Java基础-重载与重写/">Java基础-重载与重写</a>。</p>
<p><strong>抽象</strong></p>
<p>面向对象的核心特征只有封装继承多态，抽象是一个不那么”特”的特征。因此有时并不会算上抽象。</p>
<p>抽取各具特色的对象之间的共性形成类这一模版的过程称为抽象。因为对象内封装了属性及行为，因此抽象也可细分为数据抽象及行为抽象。</p>
<h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><p><img src="/images/blog_pic/Java%E5%9F%BA%E7%A1%80/%E7%A2%8E%E7%89%87/0.jpg" alt="0.jpg"></p>
<p>无访问修饰符的情况也称其修饰符为 default/friendly 。</p>
<h1 id="Math-round-double-a-的原理"><a href="#Math-round-double-a-的原理" class="headerlink" title="Math.round(double a)的原理"></a>Math.round(double a)的原理</h1><p>round表示就近取整。实现原理为a加上0.5后再下取整(不大于传入值的最大整数)。</p>
<p>Math.round(-11.7)：-11.2下取整，返回-12。</p>
<p>Math.round(-11.2)：-10.7下取整，返回-11。</p>
<p>Math.round(11.7)：12.2下取整，返回12。</p>
<p>Math.round(11.2)：11.7下取整，返回11。</p>
<h1 id="switch的可作用类型"><a href="#switch的可作用类型" class="headerlink" title="switch的可作用类型"></a>switch的可作用类型</h1><p>[JDK1.1,JDK1.5)时，switch(expr)的expr只能是char,byte,short,int。其实对于switch而言，能接收的仅仅就只有int。char,byte,short在传入时会发生自动类型转换被转为int。</p>
<p>JDK1.5新定义了枚举类型。从JDK1.5开始，expr也可以是enum类型。</p>
<p>从JDK1.7开始，expr还可以是字符串。</p>
<p>小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String str &#x3D; &quot;八云紫&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        switch (str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &quot;雾雨魔理沙&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;此为少女&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &quot;八云紫&quot;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;此为大妈&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            default:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;就当是少女吧&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">此为大妈</span></pre></td></tr></table></figure>

<p>到JDK1.7为止，long始终不可用于switch。</p>
<h1 id="利用switch-case穿透的小技巧"><a href="#利用switch-case穿透的小技巧" class="headerlink" title="利用switch case穿透的小技巧"></a>利用switch case穿透的小技巧</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        char c &#x3D; (char)(&#39;a&#39; + (int)(26 * Math.random()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.print(c + &quot;是&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        switch (c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &#39;a&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &#39;e&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &#39;i&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &#39;o&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &#39;u&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;元音&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &#39;y&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            case &#39;w&#39;:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;半元音&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            default:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;辅音&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="Java有哪些数据类型？"><a href="#Java有哪些数据类型？" class="headerlink" title="Java有哪些数据类型？"></a>Java有哪些数据类型？</h1><ul>
<li>基本数据类型(primitive type) –&gt; 详见<a href="/2017/09/27/Java基础-基本数据类型/">Java 基础-基本数据类型</a></li>
<li>引用类型(reference type)</li>
<li>枚举类型(enumeration type)</li>
</ul>
<h1 id="行内注释"><a href="#行内注释" class="headerlink" title="行内注释"></a>行内注释</h1><p>可在行内只修饰一个变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String &#x2F;*其实是老婆婆*&#x2F;bayun &#x3D; &quot;17岁的美少女&quot;;</span></pre></td></tr></table></figure>

<h1 id="Java中的保留字"><a href="#Java中的保留字" class="headerlink" title="Java中的保留字"></a>Java中的保留字</h1><p>Java之父James Gosling编写的《The Java Programming Language》一书的附录中给出了一个Java的关键字列表。其中包含的一些关键字，例如goto及const，直至今日也并没有真正被Java使用。有人将其称之为Java的保留字。</p>
<p>广义的讲，保留字这个词应有更广泛的含义：在系统类库中使用过的有特殊意义的单词或单词的组合都被视为保留字。</p>
<p><img src="/images/blog_pic/Java%E5%9F%BA%E7%A1%80/%E7%A2%8E%E7%89%87/1.jpg" alt="1.jpg"></p>
<h1 id="标识符-Identifier"><a href="#标识符-Identifier" class="headerlink" title="标识符(Identifier)"></a>标识符(Identifier)</h1><p>必须以字母|下划线|美元符开头。其他部分可以是字母|下划线|美元符|数字的任意组合。标识符大小写敏感，长度无限。不可为Java的关键字(保留字)。</p>
<p>这里所说的字母，并不仅仅是指针对英语语系的ASCII编码而言。因为实际上Java采用Unicode字符集，因此汉字及其他非英语国家的文字也可出现在标识符中。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String 八云紫 &#x3D; &quot;我今年17岁&quot;;    &#x2F;&#x2F; 正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">String $ &#x3D; &quot;想钱想疯了&quot;;    &#x2F;&#x2F; 正确</span></pre></td></tr><tr><td class="code"><pre><span class="line">int 2a &#x3D; 5;    &#x2F;&#x2F; 错误，不能以数字开头</span></pre></td></tr><tr><td class="code"><pre><span class="line">int a# &#x3D; 5;    &#x2F;&#x2F; 错误，只能包含字母|下划线|美元符|数字，不能包含#这种特殊字符</span></pre></td></tr></table></figure>

<h1 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(4 + 5 + &quot;2&quot;);    &#x2F;&#x2F; 92</span></pre></td></tr></table></figure>

<h1 id="带标签的break和continue"><a href="#带标签的break和continue" class="headerlink" title="带标签的break和continue"></a>带标签的break和continue</h1><p>Java中goto是保留字，但却没有相关的跳转的功能。可通过带标签的break和continue实现goto的弱化版功能。不过正如不推荐使用goto那样，自然也不推荐使用带标签的break和continue。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 打印[101,150]所有质数</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mark: for (int i &#x3D; 101; i &lt;&#x3D; 150; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int j &#x3D; 2; j &lt;&#x3D; Math.sqrt(i); j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (i % j &#x3D;&#x3D; 0) continue mark;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="包关系"><a href="#包关系" class="headerlink" title="包关系"></a>包关系</h1><p>com.p1与com.p1.p2并没有从属关系，不过我们通常会从逻辑上认为后者从属于前者。 </p>
<h1 id="子类包含的父类中的this指向子类"><a href="#子类包含的父类中的this指向子类" class="headerlink" title="子类包含的父类中的this指向子类"></a>子类包含的父类中的this指向子类</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Son().show();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;parent m&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void show() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.m();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Son extends Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;son m&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">son m</span></pre></td></tr></table></figure>

<p>做如下修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Son().show();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;parent m&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void show() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.m();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Son extends Parent &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void m() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(&quot;son m&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void show() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super.show();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出依然为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">son m</span></pre></td></tr></table></figure>

<p>可见，无论如何，子类包含的父类中的this总是指向子类。</p>
<h1 id="方法链"><a href="#方法链" class="headerlink" title="方法链"></a>方法链</h1><p>以StringBuilder为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(&quot;八云紫&quot;).append(&quot;是老婆婆&quot;).append(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(sb.toString());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行后输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">八云紫是老婆婆true</span></pre></td></tr></table></figure>

<p>这里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sb.append(&quot;八云紫&quot;).append(&quot;是老婆婆&quot;).append(true);</span></pre></td></tr></table></figure>

<p>就是一个方法链，其原理为StringBuilder的append方法都实现了类似的结构，我们来随便看一个StringBuilder的append方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public StringBuilder append(String str) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    super.append(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return this;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>方法的最后返回了this引用，因此可以像一个链条一样在一行代码中一直点出append方法。</p>
]]></content>
      <categories>
        <category>Java 基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Enumeration&amp;lt;E&amp;gt;</title>
    <url>/2017/09/05/JavaJDK7%E6%BA%90%E7%A0%81-javautilEnumerationE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Vector&amp;lt;E&amp;gt;</title>
    <url>/2017/09/05/JavaJDK7%E6%BA%90%E7%A0%81-javautilVectorE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Vector&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    extends AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * vector用于存储元素的数组缓冲区</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * vector的容量(capacity)为该数组的长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 其大小至少会满足能容纳vector的所有元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该数组中未存储元素的空间以null填充</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected Object[] elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * vector中实际存储元素的个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此数组elementData中索引在</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * [0,elementCount-1]</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 之间的元素为vector实际存储的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int elementCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当vector容量不足时自动扩展的容量值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若capacityIncrement&lt;&#x3D;0，则vector每次自动扩展时容量翻倍</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected int capacityIncrement;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; -2767605614048989439L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException initialCapacity&lt;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Vector(int initialCapacity, int capacityIncrement) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (initialCapacity &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               initialCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.elementData &#x3D; new Object[initialCapacity];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.capacityIncrement &#x3D; capacityIncrement;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException initialCapacity&lt;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Vector(int initialCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this(initialCapacity, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Vector() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this(10);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 以c为基础构造vector，vector中元素的顺序为c迭代器返回的顺序</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Vector(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; c.toArray()可能不返回Object[](见6260652)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 说明：</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 因为c可以是任意的Collection实现</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 而Collection对toArray()的返回值仅仅是要求Object[]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 即实际的返回可以是任意Object的子类</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData &#x3D; c.toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementCount &#x3D; elementData.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (elementData.getClass() !&#x3D; Object[].class)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 注1:Arrays.copyOf(r, i, newType)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData &#x3D; Arrays.copyOf(elementData, elementCount, Object[].class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将vector中的元素copy至anArray中</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * vector中索引位置为k的元素会被copy至anArray的索引k处</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException anArray&#x3D;&#x3D;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException anArray.length&lt;vector.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArrayStoreException vector中至少有一个元素因类型不符无法被存入anArray</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void copyInto(Object[] anArray) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(elementData, 0, anArray, 0, elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 裁剪vector的容量为list当前的实际长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 应用可以使用本方法达到vector的存储空间占用最小化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void trimToSize() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注3:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int oldCapacity &#x3D; elementData.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (elementCount &lt; oldCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 注4:Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData &#x3D; Arrays.copyOf(elementData, elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 保证vector的容量足以容纳最少minCapacity个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 如果有必要(即vector的容量不足以容纳最少minCapacity个元素)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则增大vector的容量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若vector的当前容量不足以容纳minCapacity个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则替换vector的内部数据数组elementData为一个更大的数组：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * if (capacityIncrement&lt;&#x3D;0) 新数组的容量较之老数组翻倍</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * if (capacityIncrement&gt;0) 新数组的容量为老数组的容量加上capacityIncrement</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若如此扩展后的新数组容量仍无法容纳minCapacity个元素，则新数组的长度将被设置为minCapacity</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void ensureCapacity(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (minCapacity &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 注3:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">            modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ensureCapacityHelper(minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法不是线程安全的</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本类中线程安全的方法可以在内部调用本方法以确保vector的容量满足需求</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同时不会导致额外的并发开销</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void ensureCapacityHelper(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (minCapacity - elementData.length &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            grow(minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 数组可申请的最大容量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 某些JVM会在数组中保存一些头信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 试图申请一个大容量的数组可能会导致OutOfMemoryError：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即需要的数组容量超出JVM的限制</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int MAX_ARRAY_SIZE &#x3D; Integer.MAX_VALUE - 8;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void grow(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int oldCapacity &#x3D; elementData.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int newCapacity &#x3D; oldCapacity + ((capacityIncrement &gt; 0) ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                         capacityIncrement : oldCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (newCapacity - minCapacity &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newCapacity &#x3D; minCapacity;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newCapacity &#x3D; hugeCapacity(minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注4:Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData &#x3D; Arrays.copyOf(elementData, newCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int hugeCapacity(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (minCapacity &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new OutOfMemoryError();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Integer.MAX_VALUE :</span></pre></td></tr><tr><td class="code"><pre><span class="line">            MAX_ARRAY_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 设置vector的有效长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若newSize大于当前有效长度，则确保vector能容纳newSize个元素(不一定需要扩容)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若newSize小于当前有效长度，所有索引大于等于newSize的元素都被置为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArrayIndexOutOfBoundsException newSize&lt;0</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void setSize(int newSize) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注3:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (newSize &gt; elementCount) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ensureCapacityHelper(newSize);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; newSize ; i &lt; elementCount ; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                elementData[i] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementCount &#x3D; newSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回vector的容量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即为vector内部存储数据的数组的长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 不是vector的有效长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized int capacity() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementData.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回vector的有效长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若vector的有效长度为0则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementCount &#x3D;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Enumeration&lt;E&gt; elements() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Enumeration&lt;E&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int count &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public boolean hasMoreElements() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return count &lt; elementCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public E nextElement() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (Vector.this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (count &lt; elementCount) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        return elementData(count++);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new NoSuchElementException(&quot;Vector Enumeration&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean contains(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return indexOf(o, 0) &gt;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int indexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return indexOf(o, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized int indexOf(Object o, int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; index ; i &lt; elementCount ; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (elementData[i]&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; index ; i &lt; elementCount ; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(elementData[i]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized int lastIndexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return lastIndexOf(o, elementCount-1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized int lastIndexOf(Object o, int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(index + &quot; &gt;&#x3D; &quot;+ elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; index; i &gt;&#x3D; 0; i--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (elementData[i]&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; index; i &gt;&#x3D; 0; i--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(elementData[i]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized E elementAt(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; elementCount) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index + &quot; &gt;&#x3D; &quot; + elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementData(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized E firstElement() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (elementCount &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementData(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized E lastElement() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (elementCount &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementData(elementCount - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void setElementAt(E obj, int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; elementCount) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index + &quot; &gt;&#x3D; &quot; +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                     elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[index] &#x3D; obj;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void removeElementAt(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; elementCount) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index + &quot; &gt;&#x3D; &quot; +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                     elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else if (index &lt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int j &#x3D; elementCount - index - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (j &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.arraycopy(elementData, index + 1, elementData, index, j);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementCount--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[elementCount] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void insertElementAt(E obj, int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt; elementCount) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                     + &quot; &gt; &quot; + elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityHelper(elementCount + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(elementData, index, elementData, index + 1, elementCount - index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[index] &#x3D; obj;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void addElement(E obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityHelper(elementCount + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[elementCount++] &#x3D; obj;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean removeElement(Object obj) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; indexOf(obj);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (i &gt;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            removeElementAt(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized void removeAllElements() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; elementCount; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData[i] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementCount &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized Object clone() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Vector&lt;E&gt; v &#x3D; (Vector&lt;E&gt;) super.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            v.elementData &#x3D; Arrays.copyOf(elementData, elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            v.modCount &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (CloneNotSupportedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new InternalError();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized Object[] toArray() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return Arrays.copyOf(elementData, elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized &lt;T&gt; T[] toArray(T[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (a.length &lt; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (T[]) Arrays.copyOf(elementData, elementCount, a.getClass());</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(elementData, 0, a, 0, elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (a.length &gt; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            a[elementCount] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E elementData(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (E) elementData[index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementData(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized E set(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        E oldValue &#x3D; elementData(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[index] &#x3D; element;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityHelper(elementCount + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[elementCount++] &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean remove(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return removeElement(o);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        insertElementAt(element, index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        E oldValue &#x3D; elementData(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numMoved &#x3D; elementCount - index - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (numMoved &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.arraycopy(elementData, index+1, elementData, index,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                             numMoved);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[--elementCount] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        removeAllElements();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean containsAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.containsAll(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object[] a &#x3D; c.toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numNew &#x3D; a.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityHelper(elementCount + numNew);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(a, 0, elementData, elementCount, numNew);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementCount +&#x3D; numNew;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return numNew !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean removeAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.removeAll(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean retainAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.retainAll(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ArrayIndexOutOfBoundsException(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object[] a &#x3D; c.toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numNew &#x3D; a.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityHelper(elementCount + numNew);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numMoved &#x3D; elementCount - index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (numMoved &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                             numMoved);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(a, 0, elementData, index, numNew);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementCount +&#x3D; numNew;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return numNew !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.equals(o);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return super.toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return Collections.synchronizedList(super.subList(fromIndex, toIndex),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                            this);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected synchronized void removeRange(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numMoved &#x3D; elementCount - toIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                         numMoved);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        int newElementCount &#x3D; elementCount - (toIndex-fromIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (elementCount !&#x3D; newElementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData[--elementCount] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void writeObject(java.io.ObjectOutputStream s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throws java.io.IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final java.io.ObjectOutputStream.PutField fields &#x3D; s.putFields();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final Object[] data;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fields.put(&quot;capacityIncrement&quot;, capacityIncrement);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fields.put(&quot;elementCount&quot;, elementCount);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data &#x3D; elementData.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        fields.put(&quot;elementData&quot;, data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.writeFields();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized ListIterator&lt;E&gt; listIterator(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(&quot;Index: &quot;+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListItr(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized ListIterator&lt;E&gt; listIterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListItr(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public synchronized Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Itr();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class Itr implements Iterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor !&#x3D; elementCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Vector.this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (i &gt;&#x3D; elementCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return elementData(lastRet &#x3D; i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (lastRet &#x3D;&#x3D; -1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Vector.this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Vector.this.remove(lastRet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor &#x3D; lastRet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        final void checkForComodification() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (modCount !&#x3D; expectedModCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    final class ListItr extends Itr implements ListIterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListItr(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor &#x3D; index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean hasPrevious() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int nextIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int previousIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E previous() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Vector.this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int i &#x3D; cursor - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (i &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cursor &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return elementData(lastRet &#x3D; i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void set(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (lastRet &#x3D;&#x3D; -1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Vector.this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Vector.this.set(lastRet, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Vector.this) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Vector.this.add(i, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>本类直接继承的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractListE/">java.util.AbstractList&lt;E&gt;</a></li>
</ul>
<p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2017/05/25/JavaJDK7源码-javautilListE/">java.util.List&lt;E&gt;</a></li>
<li><a href="/2017/06/22/JavaJDK7源码-javautilRandomAccess/">java.util.RandomAccess</a></li>
<li><a href="/2017/07/04/JavaJDK7源码-javalangCloneable/">java.lang.Cloneable</a></li>
<li><a href="/2017/07/04/JavaJDK7源码-javaioSerializable/">java.io.Serializable</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>Vector实现了一个可增长的数组对象。像数组一样，Vector可使用索引进行随机访问。但是Vector在创建后，其长度可随着添加或移除元素而增长或收缩。</p>
<p>vector试图通过维护capacity及capacityIncrement以达到存储管理的最优化。capacity总是至少和vector的长度一样大；capacity通常都会比vector的长度大一些，因为随着元素的添加vector是以capacityIncrement为基数成块增长。为减少空间重分配的次数，应用可以在添加大量元素前增大vector的capacity至一个合理的值。</p>
<p>vector返回的iterator：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iterator() : iterator</span></pre></td></tr><tr><td class="code"><pre><span class="line">listIterator(int) : listIterator</span></pre></td></tr></table></figure>

<p>遵循fail-fast原则：在iterator创建后，若vector因非该iterator的原因，即不是该iterator的以下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ListIterator#remove() remove</span></pre></td></tr><tr><td class="code"><pre><span class="line">ListIterator#add(Object) add</span></pre></td></tr></table></figure>

<p>而发生了结构性变化，该iterator会抛出ConcurrentModificationException。因此，面对并发性修改，iterator放弃的快速而彻底，并不会去仔细考察该并发性修改是否真的会对自身即将进行的操作造成不利影响。vector的elements()返回的Enumeration对象不遵循fail-fast原则。</p>
<p>注意iterator遵循的fail-fast原则并不能从根本上解决并发问题，它仅仅只是尽力而为，若要避免并发问题，还需结构本身提供线程安全保护。因此因fail-fast原则抛出的ConcurrentModificationException仅应被用于检测bug，而非以其为依据进行并发保护。</p>
<p>在JDK1.2版本中，Vector被重写，重写后的Vector实现了List接口，因此其成为了Java集合框架中的一员。和新的集合实现类不同，Vector是线程安全的。若应用不需要线程安全的实现，推荐使用ArrayList替代本类。</p>
<h1 id="注1-Arrays-copyOf-r-i-newType"><a href="#注1-Arrays-copyOf-r-i-newType" class="headerlink" title="注1:Arrays.copyOf(r, i, newType)"></a>注1:Arrays.copyOf(r, i, newType)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arrays.copyOf(U[] r, int i, Class&lt;? extends T[]&gt; newType)</span></pre></td></tr></table></figure>

<p>以r为基础返回一个长度为i的数组，返回数组的类型为newType。</p>
<ul>
<li><p>若i&lt;r.length则r发生截断。实际返回的数组为r中索引为[0,i-1]的元素。</p>
</li>
<li><p>若i==r.length，则返回的数组与r相等。</p>
</li>
<li><p>若i&gt;r.length，返回的数组中索引为[0, r.length-1]的元素为r中对应位置的元素，索引为[r.length, i-1]的元素以null填充。</p>
</li>
</ul>
<p>无论如何，返回的数组都是新生成的，与r不存在引用关系。返回的数组中的元素是r中元素的浅拷贝。</p>
<h1 id="注2-System-arraycopy-r-0-a-0-i"><a href="#注2-System-arraycopy-r-0-a-0-i" class="headerlink" title="注2:System.arraycopy(r, 0, a, 0, i)"></a>注2:System.arraycopy(r, 0, a, 0, i)</h1><p>参数含义依次为：</p>
<ol>
<li>r: 待复制的源数组。</li>
<li>0: 源数组中开始复制的索引。</li>
<li>a: 复制目标数组。</li>
<li>0: 目标数组中接收元素的起始索引。</li>
<li>i: 复制的元素个数。</li>
</ol>
<p>目标数组中其他位置的元素不受影响。</p>
<h1 id="注3-modCount"><a href="#注3-modCount" class="headerlink" title="注3:modCount"></a>注3:modCount</h1><p>modCount字段继承自超类AbstractList：</p>
<p>list发生结构性变化的次数。结构性变化是指改变list的长度，或是其他会使迭代器结果混乱的变化。</p>
<p>本字段将被iterator()返回的iterator及listIterator()返回的listIterator使用。若本字段发生了 iterator/listIterator 所没有预期到的变化，则在调用 iterator/listIterator 的next()，remove()，previous()，set(E e)，add(E e)出现fail-fast时抛出ConcurrentModificationException。</p>
<p>在迭代过程中，若检测到并发性变化，则直接判定为失败并抛出异常(fail-fast)，而不会去进一步检测所发生的并发性变化是否真的会对迭代造成影响(non-deterministic)。</p>
<p>子类可自行选择是否使用本字段。若子类决定继承本类的fail-fast判定，则只需要在会引发结构性变化的方法中增加本字段的值。本类中已实现的引发结构性变化的方法有add(int index, E element)及remove(int index)。调用一次add(int index, E element)或remove(int index)只需将本字段自增1，表示发生了一次结构性变化，否则 iterator/listIterator 会抛出错误的ConcurrentModificationException。</p>
<p>若子类不想遵循fail-fast，忽略本字段即可。</p>
<h1 id="注4-Arrays-copyOf-r-i"><a href="#注4-Arrays-copyOf-r-i" class="headerlink" title="注4:Arrays.copyOf(r, i)"></a>注4:Arrays.copyOf(r, i)</h1><p>以r为基础返回一个长度为i的数组。</p>
<ul>
<li><p>若i&lt;r.length则r发生截断。实际返回的数组为r中索引为[0,i-1]的元素。</p>
</li>
<li><p>若i==r.length，则返回的数组与r相等。</p>
</li>
<li><p>若i&gt;r.length，返回的数组中索引为[0, r.length-1]的元素为r中对应位置的元素，索引为[r.length, i-1]的元素以null填充。</p>
</li>
</ul>
<p>无论如何，返回的数组都是新生成的，与r不存在引用关系。返回的数组中的元素是r中元素的浅拷贝。</p>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-synchronized</title>
    <url>/2017/07/13/Java%E5%B9%B6%E5%8F%91-synchronized/</url>
    <content><![CDATA[<p>在synchronized标记范围内的同步块同时只能被一个线程进入并执行操作，所有其他等待进入该同步块的线程将被阻塞，直到该同步块中的线程退出。</p>
<a id="more"></a>

<p>synchronized的含义为同步。在表现上，synchronized实现了监视器机制。</p>
<p>被阻塞的是尝试进入synchronized同步块的线程，如果说线程被阻塞相当于在前行的路上被一道门挡住了，则synchronized所修饰的对象(称为监视器对象)则相当于加于这道门上的监视器。在这里被当做监视器的对象仅仅相当于一个记号，所有对象都可被用作监视器，而被作为监视器对对象而言也没什么影响，受影响的仅仅是被阻塞了的线程。</p>
<p>synchronized相当于在线程前进的路上设置了两道门。进第一道门时需要获得监视器对象的认可，同一时间点最多只能有一个线程可以得到这个认可。若线程获得认可进入第一道门后，则可继续前行直至第二道门，第二道门没有监视器，其只相当于一个线程的退出标记，当线程离开第二道门后第一道门上的监视器对象将收回对该线程的认可，并可将该认可再次发给其他线程(当然只要刚离开第二道门的线程愿意，它也可以马上再次申请该认可)。</p>
<p>本质上，synchronized只能修饰对象，synchronized有如下具体的使用方式：</p>
<p>修饰实例方法。实际是修饰该实例方法所属的对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public synchronized void m() &#123;&#125;</span></pre></td></tr></table></figure>

<p>修饰静态方法。实际是修饰该静态方法所属类的类对象(即Class对象)。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static synchronized void m() &#123;&#125;</span></pre></td></tr></table></figure>

<p>实例/静态 方法中的同步块。此时synchronized会显示指明监视器对象。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">synchronized(o) &#123;&#125;</span></pre></td></tr></table></figure>

<p>如果一个线程在等待监视器对象的认可，那么等待的结果只有两种：要么获得认可结束等待；要么无限期的等下去。换句话说，等待监视器对象认可是没有中断机制的。</p>
<p>synchronized同步块中的变量具有可见性。且并发线程执行到synchronized同步块时相当于变回了串行执行，因此synchronized天然具有有序性。由此synchronized可实现volatile的所有功能，只是付出的代价要大一些。</p>
<h1 id="通信：wait-wait-long-timeout-，notify-notifyAll-。"><a href="#通信：wait-wait-long-timeout-，notify-notifyAll-。" class="headerlink" title="通信：wait()/wait(long timeout)，notify()/notifyAll()。"></a>通信：wait()/wait(long timeout)，notify()/notifyAll()。</h1><p>这几个方法都出自Object类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void wait() throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wait(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public final native void wait(long timeout) throws InterruptedException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public final native void notify();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public final native void notifyAll();</span></pre></td></tr></table></figure>

<p>wait()内部实际上就是调用wait(long timeout)，0表示无限期等待：</p>
<p>因此本质上二者的实现机制是一致的，wait()表示无限等待，只要没有接到唤醒信号就会一直等下去。wait(long timeout)除了会在接到唤醒信号时结束等待之外，也会在设置的限定时间到期后自动结束等待。除此之外二者没有其他差异。为了论述方便，下文仅以wait()来代指 wait()/wait(long timeout) 。</p>
<p>关于wait()，notify()和notifyAll()与Java线程状态转换的关系，详见<a href="/2017/07/12/Java并发-线程状态转换/">Java 并发-线程状态转换</a>。</p>
<p>为了进行线程间的通信，可采用”自定义通信对象+忙等待查询”的方式，详见<a href="/2017/07/13/Java并发-线程通信/">Java 并发-线程通信</a>。</p>
<p>忙等待的缺陷：从JVM的角度来看，JVM并不知道进行忙等待的线程是在做无法产生有效结果的等待操作，在它看来，该线程依然在正常的运行着并在切实执行用户程序。此时该线程并没有让出它已获得的所有资源。用户程序人为的让该线程在等待时适当的进行睡眠可以在一定程度上缓解这个问题，但是睡眠频度及睡眠时间的长短很难根据系统当前情况调整为一个最优值。</p>
<p>因此，Java提供了一个内建机制以从根本上解决这个问题，将用户程序从复杂的通信问题中解放出来。</p>
<p>java.lang.Object类定义了三个实例方法：wait()，notify()和notifyAll()来实现这个等待机制。注意该机制必须配合synchronized关键字使用，即这3个实例方法必须存在于synchronized标记范围内的同步块中，且该synchronized所监视的监视器对象即为这3个实例方法所属的对象(若不是，可通过编译，运行时抛出运行时异常IllegalMonitorStateException)。换句话说，要想使用某监视器对象的通信机制，必须要先获得该监视器对象的认可。因为同一时间点最多只能有一个线程可以得到这个认可，所以在同一时间点，对于某特定监视器对象而言，最多只有一个线程能调用这3个方法中的任意一个。</p>
<p>wait()：让出监视器对象的认可及CPU。因为唯有这样其他线程才有机会获得这个认可从而调用notify()或notifyAll()正常结束该线程的等待状态。该方法会throws受检查异常：InterruptedException。</p>
<p>notify()：随机唤醒监视器对象等待池中的一个线程。</p>
<p>notifyAll()：唤醒监视器对象等待池中的所有线程。</p>
<p>因为监视器对象的认可只有一个，因此notify()及notifyAll()只负责通知被唤醒的线程：你被唤醒了，可以不用等了。至于被唤醒的线程能否获得监视器对象的认可。这两个方法就不管了。具体来说，需要关注的问题有两个：</p>
<ol>
<li><p>和wait()不同，线程调用notify()或notifyAll()相当于只发出了一个通知，notify()或notifyAll()对其而言只是一个普通的方法，调用完成后线程不会让出任何资源，并且会继续向下执行。因为不让出任何资源，自然也不会让出其已获得的监视器对象的认可。因此不是调用notify()或notifyAll()后被唤醒线程立刻就能获得监视器对象的认可了，起码也要等调用线程让出该认可后才有可能。而只有重新获得了监视器对象的认可，被阻塞的线程才能够从等锁池中解放出来从而继续向下执行。</p>
</li>
<li><p>基于同样的原理，notifyAll()虽然唤醒了所有线程，但是哪个线程能先得到监视器对象的认可，则要靠真本事去竞争了。不过这也只是先后问题，除非死锁或饿死，所有被唤醒的线程总有机会执行完成。</p>
</li>
</ol>
<p>该通信机制有一个问题：notify()及notifyAll()是非常不负责任的方法，它们只是姑且通知一下，如果在通知的时候监视器对象的等待池中并没有在等待的线程。那么没有也就没有了，本次通知相当于作废。因此如果程序流程不当，导致notify()或notifyAll()调用在了其对应的wait()之前，这就会导致wait()永远无法再次接到唤醒信号了。</p>
<p>如下所示，该程序运行后无法结束。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable wait &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000L);    &#x2F;&#x2F; 设置情境：保证notify信号先发出</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;    </span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable notify &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.class.notify();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(wait).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(notify).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>为解决该问题，可配合自定义通信对象一起使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static boolean NOTIFY_FLAG &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final synchronized void setNOTIFY_FLAG(boolean nOTIFY_FLAG) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        NOTIFY_FLAG &#x3D; nOTIFY_FLAG;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable wait &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(1000L);    &#x2F;&#x2F; 设置情境：保证notify信号先发出</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (!Test.NOTIFY_FLAG) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            Test.class.wait();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.setNOTIFY_FLAG(false);    &#x2F;&#x2F; 保证一个notify只为一个wait所用</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable notify &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.setNOTIFY_FLAG(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Test.class.notify();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(wait).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(notify).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>改造后，程序可执行完成。</p>
<h1 id="JVM中synchronized的实现方式"><a href="#JVM中synchronized的实现方式" class="headerlink" title="JVM中synchronized的实现方式"></a>JVM中synchronized的实现方式</h1><p>synchronized可以支持方法级的同步及方法内部一段指令序列的同步，在底层是通过管程(Monitor)来支持的。</p>
<p>方法级的同步是隐式的，即无需通过字节码指令来控制，它实现在方法调用和返回操作之中。JVM可通过判断class文件-&gt;方法表集合-&gt;方法表-&gt;access_flags中标记同步的标志ACC_SYNCHRONIZED是否为1来判断该方法是否是同步方法。若被设置为同步方法，执行线程需要先成功持有管程(即上文中的监视器许可)，然后才能执行方法，最后当执行完成(无论是正常完成还是非正常完成，即若一个同步方法在执行期间抛出了异常，且该方法无法处理这个异常，则执行线程将在该异常被抛出到同步方法之外时自动释放其所持有的管程)，都会释放管程。在其释放管程之前，其他任何线程都无法再取得这个管程。</p>
<p>而对于方法内部一段指令序列的同步，JVM提供了monitorenter及monitorexit指令标记同步区域。因此欲正确实现synchronized对方法内部一段指令序列的同步需javac编译器(将源码中被synchronized关键字修饰的代码块替换为对应的被monitorenter及monitorexit标记的字节码指令区域)及解释器(正确读取并执行monitorenter及monitorexit指令)二者共同支持。</p>
<p>例如有如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void m(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        synchronized (o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.out.println(&quot;in synchronized...&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>使用javap反编译其class文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Classfile &#x2F;E:&#x2F;Test.class</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Last modified 2017-11-22; size 531 bytes</span></pre></td></tr><tr><td class="code"><pre><span class="line">  MD5 checksum e7d825a53a74620971ce4799ed6aad4a</span></pre></td></tr><tr><td class="code"><pre><span class="line">  Compiled from &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  SourceFile: &quot;Test.java&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  minor version: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">  major version: 51</span></pre></td></tr><tr><td class="code"><pre><span class="line">  flags: ACC_PUBLIC, ACC_SUPER</span></pre></td></tr><tr><td class="code"><pre><span class="line">Constant pool:</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #1 &#x3D; Methodref          #6.#19         &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #2 &#x3D; Fieldref           #20.#21        &#x2F;&#x2F;  java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #3 &#x3D; String             #22            &#x2F;&#x2F;  in synchronized...</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #4 &#x3D; Methodref          #23.#24        &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #5 &#x3D; Class              #25            &#x2F;&#x2F;  Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #6 &#x3D; Class              #26            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #7 &#x3D; Utf8               &lt;init&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #8 &#x3D; Utf8               ()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">   #9 &#x3D; Utf8               Code</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #10 &#x3D; Utf8               LineNumberTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #11 &#x3D; Utf8               m</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #12 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;Object;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #13 &#x3D; Utf8               StackMapTable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #14 &#x3D; Class              #25            &#x2F;&#x2F;  Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #15 &#x3D; Class              #26            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #16 &#x3D; Class              #27            &#x2F;&#x2F;  java&#x2F;lang&#x2F;Throwable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #17 &#x3D; Utf8               SourceFile</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #18 &#x3D; Utf8               Test.java</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #19 &#x3D; NameAndType        #7:#8          &#x2F;&#x2F;  &quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #20 &#x3D; Class              #28            &#x2F;&#x2F;  java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #21 &#x3D; NameAndType        #29:#30        &#x2F;&#x2F;  out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #22 &#x3D; Utf8               in synchronized...</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #23 &#x3D; Class              #31            &#x2F;&#x2F;  java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #24 &#x3D; NameAndType        #32:#33        &#x2F;&#x2F;  println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #25 &#x3D; Utf8               Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #26 &#x3D; Utf8               java&#x2F;lang&#x2F;Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #27 &#x3D; Utf8               java&#x2F;lang&#x2F;Throwable</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #28 &#x3D; Utf8               java&#x2F;lang&#x2F;System</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #29 &#x3D; Utf8               out</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #30 &#x3D; Utf8               Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #31 &#x3D; Utf8               java&#x2F;io&#x2F;PrintStream</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #32 &#x3D; Utf8               println</span></pre></td></tr><tr><td class="code"><pre><span class="line">  #33 &#x3D; Utf8               (Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  public Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;1, locals&#x3D;1, args_size&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_0       </span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: invokespecial #1                  &#x2F;&#x2F; Method java&#x2F;lang&#x2F;Object.&quot;&lt;init&gt;&quot;:()V</span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: return        </span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 1: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">  public void m(java.lang.Object);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    flags: ACC_PUBLIC</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Code:</span></pre></td></tr><tr><td class="code"><pre><span class="line">      stack&#x3D;2, locals&#x3D;4, args_size&#x3D;2    &#x2F;&#x2F; 操作数栈最大深度为2</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                        &#x2F;&#x2F; 局部变量表长度为4Slot，即支持的索引为[0,3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#x2F;&#x2F; 方法传入参数为2：this,java.lang.Object(后文记为o)</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#x2F;&#x2F; 初始时：</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#x2F;&#x2F; 局部变量表：this,o,无,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">					&#x2F;&#x2F; 操作数栈(自栈底至栈顶)：无,无</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         0: aload_1    &#x2F;&#x2F; 将局部变量表1号Slot中的引用类型压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	               &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       &#x2F;&#x2F; 局部变量表：this,o,无,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">	               &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o,无</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         1: dup    &#x2F;&#x2F; 弹出操作数栈栈顶数值，复制该值并将原值及复制值压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">	           &#x2F;&#x2F; 该复制值后文记为o_c</span></pre></td></tr><tr><td class="code"><pre><span class="line">	           &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">	           &#x2F;&#x2F; 局部变量表：this,o,无,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">                   &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o,o_c</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         2: astore_2    &#x2F;&#x2F; 将栈顶引用类型弹出并存入局部变量表2号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F; 局部变量表：this,o,o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">		        &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o,无    </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         3: monitorenter    &#x2F;&#x2F; 弹出并获得操作数栈栈顶对象的管程，用于被synchronized关键字修饰的同步块</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                    &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">			    &#x2F;&#x2F; 局部变量表：this,o,o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">			    &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：无,无</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         4: getstatic     #2    &#x2F;&#x2F; Field java&#x2F;lang&#x2F;System.out:Ljava&#x2F;io&#x2F;PrintStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                        &#x2F;&#x2F; 获取指定类的指定类变量，并将其值压入操作数栈。该指令的操作码之后会紧跟一个u2的操作数说明具体需要的是哪个类变量，该参数指向常量池集合中的一个CONSTANT_UTF8_info类型的索引项，也就是该字段的字段符号引用</span></pre></td></tr><tr><td class="code"><pre><span class="line">			        &#x2F;&#x2F; 本指令取得的类变量后文将记为out</span></pre></td></tr><tr><td class="code"><pre><span class="line">			        &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#x2F;&#x2F; 局部变量表：this,o,o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">		                &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：out,无  </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         7: ldc           #3    &#x2F;&#x2F; String in synchronized...</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                        &#x2F;&#x2F; 将int,float或String型常量值从常量池中推送至操作数栈栈顶。该指令的操作码之后会紧跟一个u2的操作数作为具体的值，该参数指向常量池集合中的一个对应类型的索引项</span></pre></td></tr><tr><td class="code"><pre><span class="line">			        &#x2F;&#x2F; 本指令对应的字符串后文中记为s</span></pre></td></tr><tr><td class="code"><pre><span class="line">			        &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#x2F;&#x2F; 局部变量表：this,o,o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#x2F;&#x2F; 操作数栈(自栈底至栈顶)：out,s</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">         9: invokevirtual #4    &#x2F;&#x2F; Method java&#x2F;io&#x2F;PrintStream.println:(Ljava&#x2F;lang&#x2F;String;)V</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                        &#x2F;&#x2F; 调用实例方法。会根据对象的实际类型进行动态单分派(虚方法分派)</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#x2F;&#x2F; 弹出操作数栈中的out及s，out作为被调用方法的对象，s为方法所需的参数</span></pre></td></tr><tr><td class="code"><pre><span class="line">			        &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#x2F;&#x2F; 局部变量表：this,o,o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">				&#x2F;&#x2F; 操作数栈(自栈底至栈顶)：无,无</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        12: aload_2    &#x2F;&#x2F; 将局部变量表2号Slot中的引用类型压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 局部变量表：this,o,o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        13: monitorexit    &#x2F;&#x2F; 弹出并释放操作数栈栈顶对象的管程，用于被synchronized关键字修饰的同步块</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &#x2F;&#x2F; 之所以用o_c而非o是为防止o被改变</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">		           &#x2F;&#x2F; 局部变量表：this,o,o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：无,无</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        14: goto          22    &#x2F;&#x2F; 无条件跳转至指令22</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        17: astore_3    &#x2F;&#x2F; 将栈顶引用类型弹出并存入局部变量表3号索引处</span></pre></td></tr><tr><td class="code"><pre><span class="line">	                &#x2F;&#x2F; [4,13]发生异常后会跳转至本指令，不妨设12结束后发生异常。则操作数栈栈顶会被压入抛出的异常e</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F; 局部变量表：this,o,o_c,e</span></pre></td></tr><tr><td class="code"><pre><span class="line">			&#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">        18: aload_2    &#x2F;&#x2F; 将局部变量表2号Slot中的引用类型压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 局部变量表：this,o,o_c,e</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o_c,o_c</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">        19: monitorexit    &#x2F;&#x2F; 弹出并释放操作数栈栈顶对象的管程，用于被synchronized关键字修饰的同步块</span></pre></td></tr><tr><td class="code"><pre><span class="line">                           &#x2F;&#x2F; 之所以用o_c而非o是为防止o被改变</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">		           &#x2F;&#x2F; 局部变量表：this,o,o_c,e</span></pre></td></tr><tr><td class="code"><pre><span class="line">			   &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o_c,无</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        20: aload_3    &#x2F;&#x2F; 将局部变量表3号Slot中的引用类型压入操作数栈</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 本指令完成后：</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 局部变量表：this,o,o_c,e</span></pre></td></tr><tr><td class="code"><pre><span class="line">		       &#x2F;&#x2F; 操作数栈(自栈底至栈顶)：o_c,e</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        21: athrow    &#x2F;&#x2F; 弹出操作数栈栈顶的异常并将其抛出</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">        22: return    &#x2F;&#x2F; 从当前方法返回void，本方法结束</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">      Exception table:</span></pre></td></tr><tr><td class="code"><pre><span class="line">         from    to  target type</span></pre></td></tr><tr><td class="code"><pre><span class="line">             4    14    17   any</span></pre></td></tr><tr><td class="code"><pre><span class="line">            17    20    17   any</span></pre></td></tr><tr><td class="code"><pre><span class="line">      LineNumberTable:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 4: 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 5: 4</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 6: 12</span></pre></td></tr><tr><td class="code"><pre><span class="line">        line 7: 22</span></pre></td></tr><tr><td class="code"><pre><span class="line">      StackMapTable: number_of_entries &#x3D; 2</span></pre></td></tr><tr><td class="code"><pre><span class="line">           frame_type &#x3D; 255 &#x2F;* full_frame *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          offset_delta &#x3D; 17</span></pre></td></tr><tr><td class="code"><pre><span class="line">          locals &#x3D; [ class Test, class java&#x2F;lang&#x2F;Object, class java&#x2F;lang&#x2F;Object ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">          stack &#x3D; [ class java&#x2F;lang&#x2F;Throwable ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">           frame_type &#x3D; 250 &#x2F;* chop *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">          offset_delta &#x3D; 4</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>由上述反编译文件可证实，无论方法是否正常退出，只要执行了monitorenter(3)，就会执行对应的monitorexit(13,19，各可能的分支上都会冗余存储一份)。</p>
<h1 id="一个隐蔽的错误加锁的示例"><a href="#一个隐蔽的错误加锁的示例" class="headerlink" title="一个隐蔽的错误加锁的示例"></a>一个隐蔽的错误加锁的示例</h1><p>现有如下程序：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Integer I &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int j &#x3D; 0; j &lt; 1000_0000; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Test.I) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                I++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test r &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Test.I);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>该程序实现了一个简单的计算器，乍看之下没有任何问题，预期运行结果为2000_0000。然而实际的运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15429002</span></pre></td></tr></table></figure>

<p>这比预期的结果小了很多，那么问题出在哪里呢？</p>
<p>在<a href="/2017/10/05/Java并发-Thread类/">Java 并发-Thread类</a>中，我们得出了这样一个结论：以Thread类的实例为监视器对象可能会引起未知的并发错误。可见监视器对象的错误选择是引起并发错误的一个重要原因，那么本例的错误是否也是由监视器对象I的选择错误引起的呢？</p>
<p>正是这样！I的类型为Integer:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final class Integer extends Number implements Comparable&lt;Integer&gt;</span></pre></td></tr></table></figure>

<p>这是一个被final修饰的不可变的类。也就是说一旦Integer的实例被创建，比如我们将其赋值为1，那么它终其一生就只能是1，不能变成其他值。而我们在程序中为什么又可以使用诸如I++来改变I的值呢？这其实是Java的一个小戏法：改变I的值相当于新建了一个Integer实例。</p>
<p>更具体的说，I++其实是这样实现的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I &#x3D; Integer.valueOf(I.intValue() + 1);</span></pre></td></tr></table></figure>

<p>然后我们再来看valueOf()这个方法的源码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static Integer valueOf(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    assert IntegerCache.high &gt;&#x3D; 127;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    if (i &gt;&#x3D; IntegerCache.low &amp;&amp; i &lt;&#x3D; IntegerCache.high)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return IntegerCache.cache[i + (-IntegerCache.low)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    return new Integer(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>这样原因就明确了：监视器对象I所指向的实例相当于始终处于变化中，自然无法保证同步。由此看来，尽量不要选择不可变对象为监视器才好。</p>
<p>修改本例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Test implements Runnable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Integer I &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int j &#x3D; 0; j &lt; 1000_0000; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            synchronized (Test.class) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                I++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Test r &#x3D; new Test();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t1 &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Thread t2 &#x3D; new Thread(r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t1.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        t2.join();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(Test.I);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20000000</span></pre></td></tr></table></figure>

<p>符合预期，没有发生并发问题。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
        <tag>synchronized</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程通信</title>
    <url>/2017/07/13/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h1 id="自定义通信对象"><a href="#自定义通信对象" class="headerlink" title="自定义通信对象"></a>自定义通信对象</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final Signal SIGNAL &#x3D; new Signal();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 写入线程：只写入一次。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 读取线程：直到有数据前等待，只读取一次。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable write &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Thread.sleep(2000L);    &#x2F;&#x2F; 模拟写入耗时</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;写入数据完成&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                Test.SIGNAL.setHaveData(true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Runnable read &#x3D; new Runnable() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void run() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while (!Test.SIGNAL.haveData) &#123;    &#x2F;&#x2F; 忙等待</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        System.out.println(&quot;数据未准备好&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        Thread.sleep(1000L);    &#x2F;&#x2F; 防止空转次数过多</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (InterruptedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        e.printStackTrace();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.out.println(&quot;数据已准备好&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(write).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new Thread(read).start();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">final class Signal &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean haveData &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    synchronized void setHaveData(boolean haveData) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.haveData &#x3D; haveData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据未准备好</span></pre></td></tr><tr><td class="code"><pre><span class="line">数据未准备好</span></pre></td></tr><tr><td class="code"><pre><span class="line">写入数据完成</span></pre></td></tr><tr><td class="code"><pre><span class="line">数据已准备好</span></pre></td></tr></table></figure>

<h1 id="wait-notify-和notifyAll"><a href="#wait-notify-和notifyAll" class="headerlink" title="wait(),notify()和notifyAll()"></a>wait(),notify()和notifyAll()</h1><p>详见<a href="/2017/07/13/Java并发-synchronized/">Java 并发-synchronized</a>。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-线程状态转换</title>
    <url>/2017/07/12/Java%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>进程(Process)是具有一定独立功能的程序在某个数据集合上的一次运行活动，是操作系统进行资源分配和调度的基本单位。</p>
<p>线程可以看作是轻量级的进程，是CPU调度和分派,比进程更小的能独立运行的基本单位。</p>
<p>进程在执行时通常拥有独立的内存单元，而线程之间可以共享内存。</p>
<p>简单来说，可以认为进程是线程的容器。举一个生活中的小例子：一家3口生活在他们的屋子里。在这里屋子就可以看作是进程。而在其中生活的一家3口就是线程。屋子为一家3口提供了电视，厨房，厕所等人类生活所需要的资源。因为有些资源是有限的，所以有时会产生冲突，例如电视只有一个，当孩子想看动画片时父亲就看不了体育比赛了。当然一个健康的家庭更多的时候还是在体现着协作(总冲突这个家也算是完了)，例如妈妈在厨房做饭，爸爸在书房工作，孩子在客厅玩耍，这样才能保证这个家庭平稳的生活下去。</p>
<a id="more"></a>

<h1 id="Java线程状态转换"><a href="#Java线程状态转换" class="headerlink" title="Java线程状态转换"></a>Java线程状态转换</h1><p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/0.jpg" alt="0.jpg"></p>
<p>图中的6个状态定义在Thread类的State枚举中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public enum State &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    NEW,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    RUNNABLE,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    BLOCKED,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    WAITING,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TIMED_WAITING,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    TERMINATED;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>Java语言定义了6种线程状态：</p>
<ul>
<li><p>新建(NEW)：创建但尚未运行。即已调用new生成了线程对象，但是尚未调用start()启动。</p>
</li>
<li><p>可运行(RUNNABLE)：RUNNABLE状态的线程一定已获得了除CPU以外运行所需的所有资源，依是否正获得着CPU又可细分为两类：就绪(READY)及运行(RUNNING)(分别对应操作系统线程状态中的READY及RUNNING)。READY表明目前没有正在占用CPU，但是线程已经准备好了，正所谓万事俱备，只欠CPU，只要CPU为其分配了执行时间立即就可转为RUNNING状态运行。RUNNING表明线程正在占用着CPU。</p>
</li>
<li><p>无限期等待(WAITING)：该状态下的线程会让出CPU，已占用的锁或监视器对象的认可。</p>
</li>
<li><p>限期等待(TIMED_WAITING)：该状态下的线程会让出CPU，已占用的锁或监视器对象的认可。</p>
</li>
<li><p>阻塞(BLOCKED)：无限期等待(WAITING)及限期等待(TIMED_WAITING)代表了线程的意志，即线程本身想停下来等待，也就是所谓的”不想做”。而阻塞(BLOCKED)代表了JVM的意志，属于强制力，无论线程作何打算，JVM目前已没有足够的资源让线程运行下去，也就是所谓的”做不到”。</p>
</li>
<li><p>结束(TERMINATED)：线程已终止。</p>
</li>
</ul>
<p>任意时间点一个线程有且仅有其中的一种状态。不同状态间的转换条件为：</p>
<p>新建(NEW) –&gt; 可运行(RUNNABLE):start()</p>
<p>就绪(READY) –&gt; 运行(RUNNING):CPU调度为线程分配CPU时间。</p>
<p>运行(RUNNING) –&gt; 就绪(READY):CPU调度剥夺线程已得到的CPU，或线程主动调用yield()让出CPU。</p>
<p>可运行(RUNNABLE) –&gt; 结束(TERMINATED):run()执行结束。</p>
<p>可运行(RUNNABLE) –&gt; 阻塞(BLOCKED):申请资源(例如锁，监视器对象的认可，i/o流)而不得。</p>
<p>阻塞(BLOCKED) –&gt; 可运行(RUNNABLE):之前申请不到的资源申请到了。</p>
<p>可运行(RUNNABLE) –&gt; 限期等待(TIMED_WAITING):</p>
<ul>
<li><p>Thread.sleep()。</p>
</li>
<li><p>有TimeOut参数的Object.wait()。</p>
</li>
<li><p>有TimeOut参数的Thread.join()。</p>
</li>
<li><p>LockSupport.parkNanos()。</p>
</li>
<li><p>LockSupport.parkUntil()。</p>
</li>
</ul>
<p>限期等待(TIMED_WAITING) –&gt; 可运行(RUNNABLE):接到唤醒信号，或设定的限期到来时自动转换。如果需要，在苏醒后成功获得所需的锁或监视器对象的认可。</p>
<p>限期等待(TIMED_WAITING) –&gt; 阻塞(BLOCKED):接到唤醒信号，或设定的限期到来时自动转换。在苏醒后未成功获得所需的锁或监视器对象的认可。</p>
<p>可运行(RUNNABLE) –&gt; 无限期等待(WAITING):</p>
<ul>
<li><p>没有TimeOut参数的Object.wait()。</p>
</li>
<li><p>没有TimeOut参数的Thread.join()。</p>
</li>
<li><p>LockSupport.park()。</p>
</li>
</ul>
<p>无限期等待(WAITING) –&gt; 可运行(RUNNABLE):接到唤醒信号。如果需要，在苏醒后成功获得所需的锁或监视器对象的认可。</p>
<p>无限期等待(WAITING) –&gt; 阻塞(BLOCKED):接到唤醒信号。在苏醒后未成功获得所需的锁或监视器对象的认可。</p>
<h1 id="sleep-long-millis"><a href="#sleep-long-millis" class="headerlink" title="sleep(long millis)"></a>sleep(long millis)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static native void sleep(long millis) throws InterruptedException;</span></pre></td></tr></table></figure>

<p>sleep(long millis)会抛出受检查异常InterruptedException，会让出已占有的CPU时间，会让给哪个线程与线程的优先级无关。</p>
<p>sleep(long millis)和锁及监视器对象的许可无关。</p>
<p>处于可运行(RUNNABLE)状态的线程调用sleep(long millis)后进入限期等待(TIMED_WAITING)状态。sleep(long millis)期限到来后恢复为可运行(RUNNABLE)状态。</p>
<h1 id="wait-wait-long-timeout"><a href="#wait-wait-long-timeout" class="headerlink" title="wait()/wait(long timeout)"></a>wait()/wait(long timeout)</h1><p>wait()内部实际上就是调用wait(long timeout)，0表示无限期等待：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public final void wait() throws InterruptedException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    wait(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public final native void wait(long timeout) throws InterruptedException;</span></pre></td></tr></table></figure>

<p>wait()/wait(long timeout) 会抛出受检查异常InterruptedException，会让出已占有的CPU时间。</p>
<p>wait()/wait(long timeout) 必须配合synchronized关键字使用，并会放弃已得到的监视器对象的许可。</p>
<p>处于可运行(RUNNABLE)状态的线程调用wait()后进入无限期等待(WAITING)状态。被唤醒后将重新尝试获取监视器对象的认可，获取成功则恢复为可运行(RUNNABLE)状态，获取失败则进入阻塞(BLOCKED)状态。</p>
<p>处于可运行(RUNNABLE)状态的线程调用wait(long timeout)后进入限期等待(TIMED_WAITING)状态。被唤醒或限期到来后将重新尝试获取监视器对象的认可，获取成功则恢复为可运行(RUNNABLE)状态，获取失败则进入阻塞(BLOCKED)状态。</p>
<h1 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static native void yield();</span></pre></td></tr></table></figure>

<p>yield()只会将CPU让给相同优先级或更高优先级的线程。</p>
<p>处于运行(RUNNING)状态的线程调用yield()后进入就绪(READY)状态。</p>
<h1 id="等锁池与等待池"><a href="#等锁池与等待池" class="headerlink" title="等锁池与等待池"></a>等锁池与等待池</h1><p>等锁池及等待池均属于对象。等锁池(lock pool)是指等待synchronized及Lock的线程所处的队列。等待池(wait pool)是指调用 wait()/wait(long timeout) 后线程所处的队列。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发-Java内存模型</title>
    <url>/2017/07/12/Java%E5%B9%B6%E5%8F%91-Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>若CPU是多核架构的，本文中的1个CPU指CPU的一个核。</p>
<h1 id="硬件内存架构"><a href="#硬件内存架构" class="headerlink" title="硬件内存架构"></a>硬件内存架构</h1><p>现代计算机硬件架构的简单图示：</p>
<p><img src="/images/blog_pic/Java%E5%B9%B6%E5%8F%91/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/0.png" alt="0.png"></p>
<p>绝大多数CPU都有一个缓存层，有些CPU还有多层缓存。</p>
<p>CPU操作数据时的数据流向：主存-&gt;缓存-&gt;寄存器-&gt;CPU读取并处理-&gt;寄存器-&gt;缓存–&gt;主存。</p>
<p>主存&lt;-&gt;缓存的数据：为提高执行频率，不会每有一次CPU对数据的操作就进行一次同步，而是会在某个时间点一次性同步一批。每次同步也不会刷新所有缓存区域，而是以cache lines为基本单位一次同步缓存区域的一部分。</p>
<a id="more"></a>

<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><p>硬件内存架构没有栈和堆的区分。随着与CPU当前执行指令的亲密度的降序排列栈和堆中的信息可能出现在硬件架构中的所有位置：寄存器-&gt;缓存-&gt;主存。</p>
<p>一个CPU同时只能处理一个Java线程。</p>
<p>为建立JVM与硬件架构之间的联系，产生了Java内存模型JMM(Java Memory Model)。JMM的关键技术点都是围绕着多线程的原子性(Atomicity)，可见性(Visibility)及有序性(Ordering)建立的。</p>
<p><strong>原子性(Atomicity)</strong></p>
<p>原子性的操作是指那些最基本的，不可再分的操作，即便是在并发环境中，也不会产生模糊的值。例如两个线程各占用一个CPU同时给一个int型的变量赋值。线程1欲赋值为1，线程2欲赋值为2。那么结果上这个变量的值要么是1，要么是2，而绝不会产生某个其他的中间值。</p>
<p>举一个反例，在32位的JVM上，长度为64位的long型数据的读和写都不是原子操作(仅仅是32位的JVM是这样，64位的JVM对long型的操作也是原子的)。可以理解为都是先操作其前32位，再操作其后32位。每次操作32位的这个操作是原子的，但是两次这样的原子操作所拼接成的64位的long型数据的操作就不是原子的了。这就会带来一系列的并发问题。</p>
<p>具体来说，不妨设有一个long型的变量l，其前32位的值为i1，后32位的值为i2。则有l=i1+i2(此处的+是拼接)。再假设有写入线程1及写入线程2对l做并发修改。若某修改顺序为：线程1修改i1 –&gt; 线程2修改i1 –&gt; 线程2修改i2 –&gt; 线程1修改i2。这样得到的结果l中的i1部分是被线程2修改的，i2部分是被线程1修改的，产生了既不是线程1也不是线程2所期望的一个脏值。</p>
<p><strong>可见性(Visibility)</strong></p>
<p>可见性问题主要包含如下两种：</p>
<ol>
<li><p>自身的修改能否及时被他人所见：CPU经由其缓存对数据做出的修改只要没有同步回主存就无法被其他CPU所见。</p>
</li>
<li><p>能否及时看到他人的修改：缓存只要没有从主存中同步那么CPU就拿不到主存当前的最新值。</p>
</li>
</ol>
<p>解决策略：Java中的volatile关键字可以保证所有被其修饰的变量：</p>
<ol>
<li><p>修改后总可及时同步回主存。</p>
</li>
<li><p>读取时总可读取到主存中的最新值。</p>
</li>
</ol>
<hr>
<p>竞争条件(race conditions)：即便保证了可见性，当多个CPU同时操作某数据时，依然会产生并发问题：</p>
<ol>
<li><p>缓存1读取最新的o，缓存2读取最新的o：此时没有问题。</p>
</li>
<li><p>缓存1处理o，缓存2处理o：此时o的值在缓存1，缓存2，主存中已有差异。</p>
</li>
</ol>
<p>即便是可以及时同步回主存，也是指CPU对o的操作告一段落后，因此这个同步的操作总是能分出先后，后同步回主存的值会把先同步回主存的值覆盖掉。</p>
<p>解决策略：Java synchronized同步，详见<a href="/2017/07/13/Java并发-synchronized/">Java 并发-synchronized</a>。</p>
<p><strong>有序性(Ordering)</strong></p>
<p>为了提高执行效率，保证流水线尽量满载(即尽量少的中断流水线)，有时候可能会进行指令重排(注意仅仅是可能，何时重排，怎样重排，都是应用程序不可控的)。重排后可以保证在线程内部不会因重排而导致结果有变化，但是对于并发环境下其他线程的观测结果重排则不做保证。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int a;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean flag;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void write() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.a &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.flag &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void read() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.flag) System.out.println(this.a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>现让线程1调用write()方法，先执行。线程2调用read()方法，稍晚执行。理论上结果要么是1(read()方法执行时write()方法已执行完成)，要么无输出(read()方法执行时write()方法还未执行到this.flag = true)。但是如果发生了指令重排且指令重排的结果将write()方法改变为如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void write() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.flag &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    this.a &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>对于调用write()方法的线程1而言，这样排列对结果没有任何影响。但是对线程2而言，flag先于a被设置会导致输出的结果可能为0。</p>
<p>解决策略：volatile可阻止被其修饰的变量的上下文中发生指令重排。</p>
<p>指令重排遵循Happen-Before规则，具体来说：</p>
<ul>
<li><p>程序顺序原则：一个线程的内部要保证语义的串行性。</p>
</li>
<li><p>volatile规则：volatile变量的写先发生于读，这保证了volatile变量的可见性。</p>
</li>
<li><p>锁规则：解锁(unlock)必然发生在随后的加锁(lock)前。</p>
</li>
<li><p>传递性：A先于B，B先于C，那么A必然先于C。</p>
</li>
<li><p>线程的start()方法先于它的每一个动作。</p>
</li>
<li><p>线程的所有操作先于线程的终结(thread.join())。</p>
</li>
<li><p>线程的中断(interrupt())先于被中断线程的代码。</p>
</li>
<li><p>对象的构造函数先于其finalize()。</p>
</li>
</ul>
<h1 id="Java内存模型中的变量位置"><a href="#Java内存模型中的变量位置" class="headerlink" title="Java内存模型中的变量位置"></a>Java内存模型中的变量位置</h1><p>方法的局部变量存放在栈上。对象存放在堆上：</p>
<p>属于方法的局部变量：标记变量的空间位于栈上其所属方法的栈帧中。</p>
<p>属于对象的非静态成员变量：标记变量的空间位于堆上其所属的对象中。</p>
<p>属于类的静态成员变量：标记变量的空间位于堆上其所属的类定义对象(即该类的Class对象。该对象的信息来源于方法区)中。</p>
<p>对于 属于方法的局部变量/属于对象的非静态成员变量/属于类的静态成员变量 ，均有：</p>
<p>若为基本数据类型，标记变量的空间中的值即为其本体。</p>
<p>若为非基本数据类型，标记变量的空间中的值为本体的引用，本体为堆上的对象。</p>
]]></content>
      <categories>
        <category>Java 并发</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 算法题-排序</title>
    <url>/2017/07/10/Java%E7%AE%97%E6%B3%95%E9%A2%98-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h1><a id="more"></a>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class BubbleSort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void bubbleSort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; a.length - 1; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int j &#x3D; 0; j &lt; a.length - 1 - i; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (a[j] &gt; a[j + 1]) swap(a, j, j + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void swap(int[] a, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int temp &#x3D; a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[i] &#x3D; a[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[j] &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>第1层：确定每次冒泡的边界，索引依次为a.length - 1, a.length - 2, …, 1。不妨将这个边界设为r。一共需进行a.length - 1次。每一次大轮的排序都会确保边界位置填入正确的值。</p>
<p>第2层：在每个边界内部，通过不断的依序两两交换将索引[0,r]中的最大值沉底入索引r。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">索引： 0    1    2    3    4</span></pre></td></tr><tr><td class="code"><pre><span class="line">数值： 5    4    3    2    1</span></pre></td></tr></table></figure>

<p>第1层，确定每次冒泡的边界，索引依次为4, 3, 2, 1。一共需进行4次。</p>
<p>第2层：</p>
<p>第1次结束：4, 3, 2, 1, 5。</p>
<p>第2次结束：3, 2, 1, 4, 5。</p>
<p>第3次结束：2, 1, 3, 4, 5。</p>
<p>第4次结束：1, 2, 3, 4, 5。</p>
<p>在代码中：</p>
<p>i的取值范围为[0,a.length-2]。代表冒泡需要进行的次数，其作用仅仅是为了计数：共需进行a.length - 1次冒泡。</p>
<p>a.length - 1 - i的取值范围为[a.length - 1, 1]。代表每次冒泡时的边界r。</p>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class QuickSort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void quickSort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        quickSort(a, 0, a.length - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void quickSort(int[] a, int low, int high) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (low &gt;&#x3D; high) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int keyIndex &#x3D; partition(a, low, high);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        quickSort(a, low, keyIndex - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        quickSort(a, keyIndex + 1, high);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int partition(int[] a, int low, int high) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; left的使命是扫描出比轴大的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; right的使命是扫描出比轴小的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int left &#x3D; low, right &#x3D; high;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int keyValue &#x3D; a[low];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (left &lt; right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (right &gt; left &amp;&amp; a[right] &gt;&#x3D; keyValue) right--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (left &lt; right &amp;&amp; a[left] &lt;&#x3D; keyValue) left++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (left &lt; right) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int temp &#x3D; a[left];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[left] &#x3D; a[right];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[right] &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[low] &#x3D; a[left];    &#x2F;&#x2F; 此时必有left &#x3D;&#x3D; right</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[left] &#x3D; keyValue;    &#x2F;&#x2F; 轴元素放到了其该在的位置</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return left;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>在选定最左侧low为轴的前提下，若欲升序排列则应right指针先向左动，若欲降序排列则应left指针先向右动。其原因在于while结束后将进行哨兵(即left与right交汇的那个位置)与low的交换，若欲升序排列，则必须保证哨兵要不大于keyValue才行，而欲保证这一点，则只能在每次循环的内部，均先移动right，反之同理。</p>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DirectInsertSort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void directInsertSort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int keyIndex &#x3D; 1; keyIndex &lt; a.length; keyIndex++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int keyValue &#x3D; a[keyIndex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int preIndex &#x3D; keyIndex - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (preIndex &gt;&#x3D; 0 &amp;&amp; a[preIndex] &gt; keyValue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[preIndex + 1] &#x3D; a[preIndex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                preIndex--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            a[preIndex + 1] &#x3D; keyValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ShellSort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void shellSort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int base &#x3D; 3;    &#x2F;&#x2F; base &gt; 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int gap &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 必须保证最后一轮排序的步长&#x3D;1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (gap &lt; a.length &#x2F; base) gap &#x3D; base * gap + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (gap &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int keyIndex &#x3D; gap; keyIndex &lt; a.length; keyIndex++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int keyValue &#x3D; a[keyIndex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int preIndex &#x3D; keyIndex - gap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                while (preIndex &gt;&#x3D; 0 &amp;&amp; a[preIndex] &gt; keyValue) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    a[preIndex + gap] &#x3D; a[preIndex];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    preIndex -&#x3D; gap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[preIndex + gap] &#x3D; keyValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            gap &#x2F;&#x3D; base;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class SimpleChooseSort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void simpleChooseSort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; a.length - 1; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int minIndex &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int j &#x3D; i + 1; j &lt; a.length; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (a[j] &lt; a[minIndex]) minIndex &#x3D; j;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (minIndex !&#x3D; i) swap(a, i, minIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void swap(int[] a, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int temp &#x3D; a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[i] &#x3D; a[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[j] &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HeapSort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void heapSort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; getPI(a.length - 1); i &gt;&#x3D; 0; i--) createMaxHeap(a, a.length, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; a.length - 1; i &gt; 0; i--) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            swap(a, 0, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            createMaxHeap(a, i, 0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 创建大根堆</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param a</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param mri 创建大根堆的元素范围：i &lt; mri</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @param ri 需创建大根堆的根</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void createMaxHeap(int[] a, int mri, int ri) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int lci &#x3D; getLCI(ri);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int rci &#x3D; getRCI(ri);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int li &#x3D; ri;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (lci &lt; mri &amp;&amp; a[lci] &gt; a[li]) li &#x3D; lci;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (rci &lt; mri &amp;&amp; a[rci] &gt; a[li]) li &#x3D; rci;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (li !&#x3D; ri) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            swap(a, ri, li);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            createMaxHeap(a, mri, li);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void swap(int[] a, int i, int j) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int temp &#x3D; a[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[i] &#x3D; a[j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        a[j] &#x3D; temp;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int getPI(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (i - 1) &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int getLCI(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 2 * i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int getRCI(int i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return 2 * i + 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MergeSort &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void mergeSort(int[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; a)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;a is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mergeSort(a, new int[a.length], 0, a.length - 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void mergeSort(int[] a, int[] temp, int begin, int end) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (begin &gt;&#x3D; end) return;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	int mid &#x3D; begin + (end - begin) &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int b1 &#x3D; begin, e1 &#x3D; mid;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int b2 &#x3D; mid + 1, e2 &#x3D; end;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mergeSort(a, temp, b1, e1);    &#x2F;&#x2F; 保证左面一半有序</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mergeSort(a, temp, b2, e2);    &#x2F;&#x2F; 保证右面一半有序</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; begin;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (b1 &lt;&#x3D; e1 &amp;&amp; b2 &lt;&#x3D; e2) temp[i++] &#x3D; a[b1] &lt;&#x3D; a[b2] ? a[b1++] : a[b2++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (b1 &lt;&#x3D; e1) temp[i++] &#x3D; a[b1++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (b2 &lt;&#x3D; e2) temp[i++] &#x3D; a[b2++];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (i &#x3D; begin; i &lt;&#x3D; end; i++) a[i] &#x3D; temp[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java 算法题</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.ArrayList&amp;lt;E&amp;gt;</title>
    <url>/2017/07/06/JavaJDK7%E6%BA%90%E7%A0%81-javautilArrayListE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 8683452581122892189L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 底层数组默认的初始化容量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int DEFAULT_CAPACITY &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 供本类空实例使用的空数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final Object[] EMPTY_ELEMENTDATA &#x3D; &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 用于存储arrayList中的元素的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * arrayList的容量即为本数组的长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * new ArrayList&lt;&gt;()声明的arrayList其内部均有：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * elementData &#x3D;&#x3D; EMPTY_ELEMENTDATA</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在插入第一个元素时elementData会被扩展为DEFAULT_CAPACITY</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private transient Object[] elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * arrayList的长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注意，本字段不是arrayList的容量，而是arrayList包含的元素个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 以initialCapacity为初始化容量构建一个空arrayList</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException：initialCapacity &lt; 0。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ArrayList(int initialCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (initialCapacity &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               initialCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.elementData &#x3D; new Object[initialCapacity];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 以默认容量10构造一个空arrayList</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 刚构造完成时数组依然是EMPTY_ELEMENTDATA，即空数组。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 需要第一个元素插入进来后才会自动扩展为长度为10的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ArrayList() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.elementData &#x3D; EMPTY_ELEMENTDATA;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ArrayList(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData &#x3D; c.toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size &#x3D; elementData.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; c.toArray()可能不返回Object[](见6260652)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 说明：</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 因为c可以是任意的Collection实现</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 而Collection对toArray()的返回值仅仅是要求Object[]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 即实际的返回可以是任意Object的子类</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (elementData.getClass() !&#x3D; Object[].class)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 注1:Arrays.copyOf(r, i, newType)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData &#x3D; Arrays.copyOf(elementData, size, Object[].class);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 裁剪arrayList的容量为arrayList当前的实际长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 可以使用本方法达到arrayList的存储空间占用最小化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void trimToSize() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size &lt; elementData.length) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 注3：Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData &#x3D; Arrays.copyOf(elementData, size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 公开出去的API方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用本方法时并不知道当前容量是否能满足minCapacity的需求</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法会确保当前容量能满足minCapacity的需求(即如果不够用的话则需要扩容)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void ensureCapacity(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int minExpand &#x3D; (elementData !&#x3D; EMPTY_ELEMENTDATA)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ? 0</span></pre></td></tr><tr><td class="code"><pre><span class="line">            : DEFAULT_CAPACITY;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (minCapacity &gt; minExpand) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ensureExplicitCapacity(minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 供ArrayList类内部调用</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用本方法时并不知道当前容量是否能满足minCapacity的需求</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法会确保当前容量能满足minCapacity的需求(即如果不够用的话则需要扩容)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void ensureCapacityInternal(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (elementData &#x3D;&#x3D; EMPTY_ELEMENTDATA) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            minCapacity &#x3D; Math.max(DEFAULT_CAPACITY, minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureExplicitCapacity(minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用本方法时并不知道当前容量是否能满足minCapacity的需求</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法会确保当前容量能满足minCapacity的需求(即如果不够用的话则需要扩容)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void ensureExplicitCapacity(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 内存溢出保护代码</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (minCapacity - elementData.length &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            grow(minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 数组能申请的最大长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 某些JVM会在数组中存储一些头信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 试图申请过大长度的数组可能会导致OutOfMemoryError：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 所需数组长度超过JVM限制</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int MAX_ARRAY_SIZE &#x3D; Integer.MAX_VALUE - 8;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法被调用说明当前数组的容量确实是不够minCapacity的需求用了</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 扩充数组容量以满足其至少能容纳minCapacity个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void grow(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int oldCapacity &#x3D; elementData.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int newCapacity &#x3D; oldCapacity + (oldCapacity &gt;&gt; 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (newCapacity - minCapacity &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newCapacity &#x3D; minCapacity;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            newCapacity &#x3D; hugeCapacity(minCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注3：Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData &#x3D; Arrays.copyOf(elementData, newCapacity);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int hugeCapacity(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (minCapacity &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new OutOfMemoryError();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Integer.MAX_VALUE :</span></pre></td></tr><tr><td class="code"><pre><span class="line">            MAX_ARRAY_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回arrayList的元素个数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList不包含元素则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return size &#x3D;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList包含o则返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的来说，当且仅当arrayList至少包含一个满足如下条件的元素e时返回true：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean contains(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return indexOf(o) &gt;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回o在arrayList中第一次出现时的索引</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList中不包含o则返回-1</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的来说，返回满足如下条件的i的最小值：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若无法找到满足条件的i则返回-1</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int indexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; 0; i &lt; size; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (elementData[i]&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; 0; i &lt; size; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(elementData[i]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回o在arrayList中最后一次出现时的索引</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList中不包含o则返回-1</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的来说，返回满足如下条件的i的最大值：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若无法找到满足条件的i则返回-1</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int lastIndexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; size-1; i &gt;&#x3D; 0; i--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (elementData[i]&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; size-1; i &gt;&#x3D; 0; i--)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(elementData[i]))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回arrayList的一个浅拷贝(其所包含的元素本身并未被复制)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object clone() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ArrayList&lt;E&gt; v &#x3D; (ArrayList&lt;E&gt;) super.clone();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 注3：Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            v.elementData &#x3D; Arrays.copyOf(elementData, size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; # 注2:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">            v.modCount &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return v;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (CloneNotSupportedException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 因ArrayList是可克隆的，因此该错误不会发生</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new InternalError();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接数组与集合的桥梁</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个包含arrayList所有元素并有arrayList有相同顺序的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组是&quot;安全的&quot;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 其与arrayList之间不存在引用关系(换句话说，本方法必须声明一个新的数组)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此调用者可以自由的修改返回的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object[] toArray() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注3：Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return Arrays.copyOf(elementData, size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含列表所有元素的数组。该数组的顺序与列表的固有顺序相同。返回数组的类型即为a的类型。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体规则的伪代码为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * if (a.length &lt; list.size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     不修改a，而是以a的类型新建长度为list.size()的数组并填入列表中的值，随后返回这个新生成的数组。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else if (a.length &#x3D;&#x3D; list.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     将返回的结果直接填入a后返回a(若a中已有值，则a中的原值会被覆盖)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引在[0, list.size() -1]的元素会被列表对应位置的元素覆盖。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引 &#x3D;&#x3D; list.size()的元素会被置为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组中后续元素(如果有的话)不变。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表不允许包含空元素，则本方法此时可用来计算列表的长度：返回的数组第一次出现null的索引即为列表的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与列表之间不存在引用关系(即使列表的底层就是基于数组实现的)，数组中的元素是列表中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 小例子：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * String[] y &#x3D; x.toArray(new String[0]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * x是一个元素类型为String的列表，则上述语句会将x中的元素依序复制一份浅拷贝到数组y。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关于本方法与前文介绍的toArray()方法，需明确：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.toArray()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.toArray(new Object[s])</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当s &lt; list.size()时，上述两行代码的效果等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的toArray()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArrayStoreException a的类型列表不支持。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException null&#x3D;&#x3D;a。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (a.length &lt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; # 注1:Arrays.copyOf(r, i, newType)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (T[]) Arrays.copyOf(elementData, size, a.getClass());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(elementData, 0, a, 0, size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (a.length &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            a[size] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 位置访问操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E elementData(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (E) elementData[index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 位置访问操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回arrayList中索引位置为index的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return elementData(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 以element替换arrayList中索引为index的元素。方法返回被替换的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E set(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        E oldValue &#x3D; elementData(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[index] &#x3D; element;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将e添加至arrayList末尾</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 该方法内部会增加modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityInternal(size + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[size++] &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将element插入arrayList的index下标处</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 原来处于index下标及以后的元素均向后移动一个位置</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 该方法内部会增加modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityInternal(size + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(elementData, index, elementData, index + 1,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                         size - index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[index] &#x3D; element;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除arrayList中索引值为index的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后续元素左移一个位置</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回被移除的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注2:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        E oldValue &#x3D; elementData(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numMoved &#x3D; size - index - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (numMoved &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.arraycopy(elementData, index+1, elementData, index,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                             numMoved);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[--size] &#x3D; null;    &#x2F;&#x2F; 便于GC回收</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除o在arrayList中第一次出现的位置的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 如果arrayList中不包含o则arrayList将不会被本方法改变</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的来说，移除如下元素：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 其中为i满足相等条件的最小索引值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若本方法改变了arrayList则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean remove(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int index &#x3D; 0; index &lt; size; index++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (elementData[index] &#x3D;&#x3D; null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    fastRemove(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int index &#x3D; 0; index &lt; size; index++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(elementData[index])) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    fastRemove(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void fastRemove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注2:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numMoved &#x3D; size - index - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (numMoved &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.arraycopy(elementData, index+1, elementData, index,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                             numMoved);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData[--size] &#x3D; null;    &#x2F;&#x2F; 便于GC回收</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除arrayList中的所有元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用本方法后arrayList将变为空arrayList</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注2:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 之所以不直接将elementData置为空</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 是为了保持容积不变，同时便于GC回收</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; size; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData[i] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        size &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入arrayList的末尾，插入顺序为c的迭代器取出的顺序</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法并未定义如下事件发生时的解决策略：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在将c中的元素添加至arrayList的过程中c发生变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这也意味着如下事件的解决策略同样未定义：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将一个非空arrayList添加至自身</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList因本方法发生变化则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object[] a &#x3D; c.toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numNew &#x3D; a.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityInternal(size + numNew);    &#x2F;&#x2F; 增加modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(a, 0, elementData, size, numNew);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size +&#x3D; numNew;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return numNew !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入arrayList的指定位置(index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 插入顺序为c的迭代器取出的顺序</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 原index位置及以后位置的元素顺次向后移动，空出装载c的位置</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList因本方法发生变化则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object[] a &#x3D; c.toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numNew &#x3D; a.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ensureCapacityInternal(size + numNew);    &#x2F;&#x2F; 增加modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numMoved &#x3D; size - index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (numMoved &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                             numMoved);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(a, 0, elementData, index, numNew);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size +&#x3D; numNew;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return numNew !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 从arrayList中移除索引为[fromIndex,toIndex)的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并将后续元素左移</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法减少了arrayList (toIndex - fromIndex)个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若toIndex&#x3D;&#x3D;fromIndex，本方法不产生实际效果</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(fromIndex &lt; 0 || fromIndex &gt;&#x3D; size() || toIndex &gt; size() || toIndex &lt; fromIndex)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void removeRange(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int numMoved &#x3D; size - toIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                         numMoved);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        int newSize &#x3D; size - (toIndex-fromIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 便于GC回收</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; newSize; i &lt; size; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elementData[i] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size &#x3D; newSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 检查index是否在边界之内</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不在，则抛出一个适当的运行时异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法不会检查index&lt;0的情况：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因为访问数组时索引&gt;&#x3D;0是前提条件</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若index&lt;0，则数组会自行抛出ArrayIndexOutOfBoundsException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void rangeCheck(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt;&#x3D; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * add及addAll方法所使用的边界检查方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void rangeCheckForAdd(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &gt; size || index &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 构建一个IndexOutOfBoundsException的详细信息</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在众多可能的错误处理代码中</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这种&quot;溢出&quot;的处理代码在server及client JVM中均有最佳的性能</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String outOfBoundsMsg(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 从arrayList中移除所有与c的交集元素(求差集)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList因本方法发生变化则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException arrayList中至少有一个元素的类型与c不相容</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException arrayList中至少有一个元素为null且c不允许null存在；或c&#x3D;&#x3D;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean removeAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注5:batchRemove(c, b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return batchRemove(c, false);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 保留arrayList与c的交集元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若arrayList因本方法发生变化则返回true，反之返回false</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException arrayList中至少有一个元素的类型与c不相容</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException arrayList中至少有一个元素为null且c不允许null存在；或c&#x3D;&#x3D;null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean retainAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注5:batchRemove(c, b)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return batchRemove(c, true);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private boolean batchRemove(Collection&lt;?&gt; c, boolean complement) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final Object[] elementData &#x3D; this.elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int r &#x3D; 0, w &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (; r &lt; size; r++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (c.contains(elementData[r]) &#x3D;&#x3D; complement)    &#x2F;&#x2F; complement &#x3D;&#x3D; true：移除arrayList中与c不同的元素，retainAll调用。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                                 &#x2F;&#x2F; complement &#x3D;&#x3D; false：移除arrayList中与c相同的元素，removeAll调用。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    elementData[w++] &#x3D; elementData[r];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; finally &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 在c.contains()抛出异常时兼容AbstractCollection的保护性行为</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (r !&#x3D; size) &#123;    &#x2F;&#x2F; 进入此if说明try中的for循环未完成，即c.contains()在循环过程中抛出了异常</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                &#x2F;&#x2F; 此时从抛出异常的索引值r起的后续元素均不应再参与remove行为了，即索引在[r,size-1]之间的元素原样保留。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; # 注4:System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                System.arraycopy(elementData, r,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                 elementData, w,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                 size - r);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                w +&#x3D; size - r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (w !&#x3D; size) &#123;    &#x2F;&#x2F; 进入此if说明确实成功移除了元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                &#x2F;&#x2F; 则应标明已移除并修改size等属性。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                for (int i &#x3D; w; i &lt; size; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    elementData[i] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modCount +&#x3D; size - w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                size &#x3D; w;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将arrayList的状态保存至流中(序列化时使用)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 流中存储的信息为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 1. arrayList本身的信息。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 2. arrayList的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 3. arrayList中的元素按序排列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws java.io.IOException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void writeObject(java.io.ObjectOutputStream s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws java.io.IOException&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; # 注2:modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.defaultWriteObject();    &#x2F;&#x2F; arrayList本身的信息</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.writeInt(size);    &#x2F;&#x2F; 长度</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i&#x3D;0; i&lt;size; i++) &#123;    &#x2F;&#x2F; arrayList中的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">            s.writeObject(elementData[i]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (modCount !&#x3D; expectedModCount) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 反序列化时从流中恢复arrayList</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws java.io.IOException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassNotFoundException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void readObject(java.io.ObjectInputStream s)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throws java.io.IOException, ClassNotFoundException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elementData &#x3D; EMPTY_ELEMENTDATA;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.defaultReadObject();    &#x2F;&#x2F; arrayList本身的信息</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        s.readInt();    &#x2F;&#x2F; 长度</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size &gt; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 类似于clone()，声明所需大小的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ensureCapacityInternal(size);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object[] a &#x3D; elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i&#x3D;0; i&lt;size; i++) &#123;    &#x2F;&#x2F; 依次读入流中所有元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">                a[i] &#x3D; s.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个arrayList按固有顺序迭代的listIterator</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 迭代开始时游标位于索引[index-1,index]之间</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即使用本方法得到listIterator后</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若第一次调用的是listIterator.next()，返回的元素的索引是index；</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同理，若第一次调用的是listIterator.previous()，返回的是索引为index-1的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的listIterator遵循fail-fast原则</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListIterator&lt;E&gt; listIterator(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(&quot;Index: &quot;+index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListItr(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个arrayList按固有顺序迭代的listIterator</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的listIterator遵循fail-fast原则</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListIterator&lt;E&gt; listIterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListItr(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个arrayList按固有顺序迭代的iterator</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的iterator遵循fail-fast原则</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Itr();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Iterator在ArrayList的最优实现</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class Itr implements Iterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 游标位于元素[cursor-1,cursor]之间</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 上一次操作的元素的索引</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 即调用next()或previous()后赋以对应的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 初始时或调用remove()或add(E e)后置为-1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * iterator认为的arrayList发生的结构性变化的次数</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 初始时同步自其所属的arrayList</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor !&#x3D; size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &gt;&#x3D; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object[] elementData &#x3D; ArrayList.this.elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &gt;&#x3D; elementData.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (E) elementData[lastRet &#x3D; i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (lastRet &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ArrayList.this.remove(lastRet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cursor &#x3D; lastRet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        final void checkForComodification() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (modCount !&#x3D; expectedModCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * ListIterator在arrayList的最优实现</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class ListItr extends Itr implements ListIterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListItr(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            super();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor &#x3D; index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean hasPrevious() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int nextIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int previousIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E previous() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int i &#x3D; cursor - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object[] elementData &#x3D; ArrayList.this.elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &gt;&#x3D; elementData.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return (E) elementData[lastRet &#x3D; i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void set(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (lastRet &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ArrayList.this.set(lastRet, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ArrayList.this.add(i, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回arrayList的一部分，索引值区间：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * [fromIndex,toIndex)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 特别的，若fromIndex&#x3D;&#x3D;toIndex，则返回空arrayList(不是null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的arrayList是原arrayList的一个视图</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 前者是后者的一部分，并未从后者中分离出去</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此作用在前者之上的修改会反映在后者上，反之亦然</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用本方法的好处在于</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当我们操作arrayList的一部分时</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 可以直接在这一部分内部操作(仿佛这就是一个新的arrayList)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 而无需被各种索引的边界分散过多的注意</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 例如，如果想批量移除arrayList中的一部分，可按如下操作:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * arrayList.subList(from, to).clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同理，所有本类的方法及所有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * java.util.Collections类</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 提供的静态方法均支持subList取得的视图作为一个独立的arrayList调用</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 例如:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * arrayList2 &#x3D; arrayList.subList(1, 2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * arrayList2.get(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 此时取得的元素即为arrayList.get(1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若在生成视图后原arrayList发生了结构性的变化(例如长度发生了变化)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则已生成的视图将被重置为未定义的状态</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(fromIndex &lt; 0 || toIndex &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException fromIndex &gt; toIndex</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new SubList(this, 0, fromIndex, toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    static void subListRangeCheck(int fromIndex, int toIndex, int size) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (fromIndex &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(&quot;fromIndex &#x3D; &quot; + fromIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (toIndex &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(&quot;toIndex &#x3D; &quot; + toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (fromIndex &gt; toIndex)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class SubList extends AbstractList&lt;E&gt; implements RandomAccess &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本视图的父亲list</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注意:</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * parent代表的是近亲父亲，也就是说依然可能是个视图，而非始祖</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 例如始祖list生成了视图sublist1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * sublist1生成了视图sublist2</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * sublist1的parent为list</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * sublist2的parent为sublist1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        private final AbstractList&lt;E&gt; parent;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本视图相对于父亲list的位移量</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 例如有始祖list</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * list使用subList(f, t)得到了subList1</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 则subList1的parent为list，parentOffset&#x3D;f</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        private final int parentOffset;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本视图相对于始祖的位移量</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        private final int offset;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本视图长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @param parent AbstractList&lt;E&gt;, 父亲list</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @param offset int, 父亲list相对于始祖的位移</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @param fromIndex int, 本视图相对于父亲list的位移</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @param toIndex int, 本视图相对于父亲list的位移结束量。实际本视图包含的元素为父亲list中的[fromIndex,toIndex)</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SubList(AbstractList&lt;E&gt; parent,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int offset, int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.parent &#x3D; parent;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.parentOffset &#x3D; fromIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.offset &#x3D; offset + fromIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.size &#x3D; toIndex - fromIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.modCount &#x3D; ArrayList.this.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E set(int index, E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            E oldValue &#x3D; ArrayList.this.elementData(offset + index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ArrayList.this.elementData[offset + index] &#x3D; e;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return oldValue;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return ArrayList.this.elementData(offset + index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return this.size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法之所以使用了parent的add方法而非始祖的add方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 是因为本方法使始祖list发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 这种变化必须通知到本视图的所有前辈</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void add(int index, E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            parent.add(parentOffset + index, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.modCount &#x3D; parent.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法之所以使用了parent的remove方法而非始祖的remove方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 是因为本方法使始祖list发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 这种变化必须通知到本视图的所有前辈</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            E result &#x3D; parent.remove(parentOffset + index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.modCount &#x3D; parent.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法之所以使用了parent的removeRange方法而非始祖的removeRange方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 是因为本方法使始祖list发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 这种变化必须通知到本视图的所有前辈</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        protected void removeRange(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            parent.removeRange(parentOffset + fromIndex,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                               parentOffset + toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.modCount &#x3D; parent.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.size -&#x3D; toIndex - fromIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return addAll(this.size, c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法之所以使用了parent的addAll方法而非始祖的addAll方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 是因为本方法使始祖list发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 这种变化必须通知到本视图的所有前辈</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int cSize &#x3D; c.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (cSize&#x3D;&#x3D;0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            parent.addAll(parentOffset + index, c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.modCount &#x3D; parent.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            this.size +&#x3D; cSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 本类并未重写listIterator()方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 因此这里调用的是父类AbstractList的listIterator()方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 父类AbstractList的listIterator()方法实际调用的是listIterator(0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 而本类重写了listIterator(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 故最终实际调用的是本类的listIterator(i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return listIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 入参index是相对本视图内部的索引值</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public ListIterator&lt;E&gt; listIterator(final int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            final int offset &#x3D; this.offset;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            return new ListIterator&lt;E&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int cursor &#x3D; index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int expectedModCount &#x3D; ArrayList.this.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return cursor !&#x3D; SubList.this.size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public E next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (i &gt;&#x3D; SubList.this.size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Object[] elementData &#x3D; ArrayList.this.elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (offset + i &gt;&#x3D; elementData.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return (E) elementData[offset + (lastRet &#x3D; i)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public boolean hasPrevious() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return cursor !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                public E previous() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    int i &#x3D; cursor - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (i &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    Object[] elementData &#x3D; ArrayList.this.elementData;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (offset + i &gt;&#x3D; elementData.length)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    cursor &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return (E) elementData[offset + (lastRet &#x3D; i)];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public int nextIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public int previousIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return cursor - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (lastRet &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        SubList.this.remove(lastRet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        cursor &#x3D; lastRet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        expectedModCount &#x3D; ArrayList.this.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void set(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (lastRet &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        ArrayList.this.set(offset + lastRet, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                public void add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        SubList.this.add(i, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        expectedModCount &#x3D; ArrayList.this.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                final void checkForComodification() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (expectedModCount !&#x3D; ArrayList.this.modCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            subListRangeCheck(fromIndex, toIndex, size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return new SubList(this, offset, fromIndex, toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private void rangeCheck(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (index &lt; 0 || index &gt;&#x3D; this.size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private void rangeCheckForAdd(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (index &lt; 0 || index &gt; this.size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private String outOfBoundsMsg(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return &quot;Index: &quot;+index+&quot;, Size: &quot;+this.size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        private void checkForComodification() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (ArrayList.this.modCount !&#x3D; this.modCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>本类直接继承的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractListE/">java.util.AbstractList&lt;E&gt;</a></li>
</ul>
<p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2017/05/25/JavaJDK7源码-javautilListE/">java.util.List&lt;E&gt;</a></li>
<li><a href="/2017/06/22/JavaJDK7源码-javautilRandomAccess/">java.util.RandomAccess</a></li>
<li><a href="/2017/07/04/JavaJDK7源码-javalangCloneable/">java.lang.Cloneable</a></li>
<li><a href="/2017/07/04/JavaJDK7源码-javaioSerializable/">java.io.Serializable</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本类是Java集合框架中的一员，底层基于数组实现了List接口。</p>
<p>本类实现了List接口所有可选的操作，允许包含null在内的所有元素。除了实现List接口外，本类还提供调整本类内部用于存储arrayList的数组的长度的方法。</p>
<p>除了Vector不具备序列化能力及本类不具备线程安全的能力外，粗略的讲，可以认为本类与Vector等价。</p>
<p>size()，isEmpty()，get(int index)，set(int index, E element)，iterator()，listIterator()时间复杂度为O(1)。add(E e)的时间复杂度为常数恒定分摊时间(添加一个元素为O(1)，若需扩容则需大于O(1)的时间)，即：添加n个元素需要O(n)的时间。所有其他的操作花费线性阶的时间(粗略的讲)。总体来说，时间复杂度较之LinkedList要低。</p>
<hr>
<p><strong>capacity</strong></p>
<p>每一个本类的实例都有一个容量，容量是指被用于存储arrayList中的元素的数组的长度。它的长度总是至少等于arrayList的长度。随着元素被插入arrayList，该数组的长度会自动增长。只要满足添加一个元素的时间复杂度为常数恒定分摊时间即可，对于扩容策略的细节并未有强制规定。</p>
<p>使用时，可以在向list中添加大量元素前使用ensureCapacity(int minCapacity)对arrayList进行扩容。这样可以减少重新分配增量空间的次数。</p>
<p><strong>synchronized</strong></p>
<p>注意，本实现是线程不安全的。如果复数个线程同时访问一个arrayList实例，并且至少一个线程对arrayList做出了结构性修改(结构性操作是指任何添加或删除一个或一个以上元素的操作，或者更确切的说，改变了内部数组的大小。仅仅只是设置一个元素的值不是结构性变化)，则必须要在调用外部保证线程安全。通常来说，这种线程安全性需要容器本身来确保(例如Vector)，不过，如果实在是需要在并发环境下使用线程不安全的list，例如本类，则可用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Collections.synchronizedList(List&lt;T&gt; list)</span></pre></td></tr></table></figure>

<p>封装。即：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List list &#x3D; Collections.synchronizedList(new ArrayList(...));</span></pre></td></tr></table></figure>

<p>该操作最好在声明arrayList时即进行，以避免意外情况下会有线程不安全的访问请求arrayList。</p>
<p><strong>fail-fast</strong></p>
<p>本类iterator()及listIterator()返回的迭代器采用快速失败模式：在迭代器创建后，若arrayList在任何时候以任何方式发生了结构性变化，除非原因是因为迭代器本身触发(具体来说：ListIterator.remove()及ListIterator.add(E e))，否则迭代器会抛出ConcurrentModificationException。因此，在面对并发性修改时，迭代器会简单明了的失败，而非依据实际的改变情况，在未来采取不确定的行为。</p>
<p>事实上，fail-fast模式并不能完全根除线程不安全的并发修改。它只是尽力而为：若实在力有不逮则迭代器会抛出ConcurrentModificationException。因此在程序中完全依靠fail-fast避免线程安全问题是错误的：fail-fast模式应该只被用于检测bug。</p>
<h1 id="注1-Arrays-copyOf-r-i-newType"><a href="#注1-Arrays-copyOf-r-i-newType" class="headerlink" title="注1:Arrays.copyOf(r, i, newType)"></a>注1:Arrays.copyOf(r, i, newType)</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Arrays.copyOf(U[] r, int i, Class&lt;? extends T[]&gt; newType)</span></pre></td></tr></table></figure>

<p>以r为基础返回一个长度为i的数组，返回数组的类型为newType。</p>
<ul>
<li>若i&lt;r.length则r发生截断。实际返回的数组为r中索引为[0,i-1]的元素。</li>
<li>若i==r.length，则返回的数组与r相等。</li>
<li>若i&gt;r.length，返回的数组中索引为[0, r.length-1]的元素为r中对应位置的元素，索引为[r.length, i-1]的元素以null填充。</li>
</ul>
<p>无论如何，返回的数组都是新生成的，与r不存在引用关系。返回的数组中的元素是r中元素的浅拷贝。</p>
<h1 id="注2-modCount"><a href="#注2-modCount" class="headerlink" title="注2:modCount"></a>注2:modCount</h1><p>modCount字段继承自超类AbstractList：</p>
<p>list发生结构性变化的次数。结构性变化是指改变list的长度，或是其他会使迭代器结果混乱的变化。</p>
<p>本字段将被iterator()返回的iterator及listIterator()返回的listIterator使用。若本字段发生了 iterator/listIterator 所没有预期到的变化，则在调用 iterator/listIterator 的next()，remove()，previous()，set(E e)，add(E e)出现fail-fast时抛出ConcurrentModificationException。</p>
<p>在迭代过程中，若检测到并发性变化，则直接判定为失败并抛出异常(fail-fast)，而不会去进一步检测所发生的并发性变化是否真的会对迭代造成影响(non-deterministic)。</p>
<p>子类可自行选择是否使用本字段。若子类决定继承本类的fail-fast判定，则只需要在会引发结构性变化的方法中增加本字段的值。本类中已实现的引发结构性变化的方法有add(int index, E element)及remove(int index)。调用一次add(int index, E element)或remove(int index)只需将本字段自增1，表示发生了一次结构性变化，否则 iterator/listIterator 会抛出错误的ConcurrentModificationException。</p>
<p>若子类不想遵循fail-fast，忽略本字段即可。</p>
<h1 id="注3-Arrays-copyOf-r-i"><a href="#注3-Arrays-copyOf-r-i" class="headerlink" title="注3:Arrays.copyOf(r, i)"></a>注3:Arrays.copyOf(r, i)</h1><p>以r为基础返回一个长度为i的数组。</p>
<ul>
<li>若i&lt;r.length则r发生截断。实际返回的数组为r中索引为[0,i-1]的元素。</li>
<li>若i==r.length，则返回的数组与r相等。</li>
<li>若i&gt;r.length，返回的数组中索引为[0, r.length-1]的元素为r中对应位置的元素，索引为[r.length, i-1]的元素以null填充。</li>
</ul>
<p>无论如何，返回的数组都是新生成的，与r不存在引用关系。返回的数组中的元素是r中元素的浅拷贝。</p>
<h1 id="注4-System-arraycopy-r-0-a-0-i"><a href="#注4-System-arraycopy-r-0-a-0-i" class="headerlink" title="注4:System.arraycopy(r, 0, a, 0, i)"></a>注4:System.arraycopy(r, 0, a, 0, i)</h1><p>参数含义依次为：</p>
<ol>
<li>r: 待复制的源数组。</li>
<li>0: 源数组中开始复制的索引。</li>
<li>a: 复制目标数组。</li>
<li>0: 目标数组中接收元素的起始索引。</li>
<li>i: 复制的元素个数。</li>
</ol>
<p>目标数组中其他位置的元素不受影响。</p>
<h1 id="注5-batchRemove-c-b"><a href="#注5-batchRemove-c-b" class="headerlink" title="注5:batchRemove(c, b)"></a>注5:batchRemove(c, b)</h1><p>第二个参数的类型为boolean，其含义为：</p>
<ul>
<li>true：移除arrayList中与c不同的元素。</li>
<li>false：移除arrayList中与c相同的元素。</li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.io.Serializable</title>
    <url>/2017/07/04/JavaJDK7%E6%BA%90%E7%A0%81-javaioSerializable/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.io;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="/2017/07/06/JavaJDK7源码-javautilArrayListE/">java.util.ArrayList&lt;E&gt;</a></li>
<li><a href="/2018/11/09/JavaJDK7源码-javautilHashMapKV/">java.util.HashMap&lt;K,V&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>实现本接口的类具备可序列化的能力。未实现本接口的类则不能进行序列化及反序列化。所有可序列化的类的子类都自动具备序列化的能力而无需在类定义中声明。本接口中没有任何方法或字段，它只是一个标志，标识实现本接口的类具备可序列化的能力。</p>
<p>为使非序列化的类具备序列化的能力，通常的做法为声明一个具备序列化能力的子类，子类必须承担起保存及恢复子类的public，protected，以及(如果可访问的话)封装字段的状态的责任。子类只在如下条件下才能承担起该责任：该子类的超类中有一个可访问的无参构造函数用以帮助子类初始化自身的状态，若不满足该条件则可通过编译，但在运行时会抛出异常。</p>
<p>在反序列化的过程中，非序列化类的字段将被该类的public或protected的无参构造函数初始化。该无参构造函数必须要能够被已实现序列化的子类访问。已实现序列化的子类的字段将从流中恢复。</p>
<p>在传输图结构时，可能会遇到不支持本接口的情况。此时会抛出NotSerializableException并定位到未序列化的类。</p>
<h1 id="writeObject-readObject-readObjectNoData"><a href="#writeObject-readObject-readObjectNoData" class="headerlink" title="writeObject,readObject,readObjectNoData"></a>writeObject,readObject,readObjectNoData</h1><p>在序列化及反序列化时需要进行特殊操作的类必须实现如下特定的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void writeObject(java.io.ObjectOutputStream out)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throws IOException</span></pre></td></tr><tr><td class="code"><pre><span class="line">private void readObject(java.io.ObjectInputStream in)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throws IOException, ClassNotFoundException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">private void readObjectNoData()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    throws ObjectStreamException;</span></pre></td></tr></table></figure>

<p>writeObject负责写特定的类的对象的状态以便于对应的readObject可以恢复它。默认情况下是通过调用out.defaultWriteObject()保存对象的状态。本方法不需要关心其所属超类或子类的状态。状态会以独立字段的形式被本方法或out.defaultWriteObject()存入ObjectOutputStream。默认写入的内容为调用对象的toString()的返回值。测试如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class STest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String PATH_F &#x3D; &quot;D:&#x2F;&#x2F;data.f&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void writeByFOS(Data data, String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Data readByFIS(String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Data result &#x3D; (Data)objectInputStream.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String args[]) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        STest.writeByFOS(new Data(0, &quot;灵梦&quot;), STest.PATH_F);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(STest.readByFIS(STest.PATH_F));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Data implements Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 615562960517507579L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Data(int id, String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getId() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setId(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setValue(String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Data [id&#x3D;&quot; + (id + 1) + &quot;, value&#x3D;&quot; + value + value + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Data [id&#x3D;1, value&#x3D;灵梦灵梦]</span></pre></td></tr></table></figure>

<p>readObject方法负责从流中读取数据并恢复类字段。本方法可以调用in.defaultReadObject()以采用默认的机制恢复对象的non-static及non-transient字段。defaultReadObject()将流中存储的对象的字段存入当前对象的对应位置。本方法处理类需要加字段的情况。本方法不需要关心其所属超类或子类的状态。状态会以独立字段的形式被writeObject方法或out.defaultWriteObject()存入ObjectOutputStream。</p>
<p>writeObject及readObject示例如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.IOException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class STest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String PATH_F &#x3D; &quot;D:&#x2F;&#x2F;data.f&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void writeByFOS(Data data, String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Data readByFIS(String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Data result &#x3D; (Data)objectInputStream.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String args[]) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        STest.writeByFOS(new Data(0, &quot;灵梦&quot;), STest.PATH_F);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(STest.readByFIS(STest.PATH_F));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Data implements Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 615562960517507579L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Data(int id, String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void writeObject(ObjectOutputStream out) throws IOException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        out.defaultWriteObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        in.defaultReadObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getId() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setId(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setValue(String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Data [id&#x3D;&quot; + id + &quot;, value&#x3D;&quot; + value + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>此时内部均仍采用默认机制。结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Data [id&#x3D;0, value&#x3D;灵梦]</span></pre></td></tr></table></figure>

<p>若将writeObject方法体置为空，则抛出异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.io.EOFException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream$BlockDataInputStream.readFully(ObjectInputStream.java:2744)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1979)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.defaultReadObject(ObjectInputStream.java:500)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at stest.Data.readObject(STest.java:51)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.reflect.Method.invoke(Method.java:606)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1017)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1893)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at stest.STest.readByFIS(STest.java:22)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at stest.STest.main(STest.java:29)</span></pre></td></tr></table></figure>

<p>若将readObject置为空，则抛出异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.io.StreamCorruptedException: invalid type code: 00</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream$BlockDataInputStream.readBlockHeader(ObjectInputStream.java:2508)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream$BlockDataInputStream.refill(ObjectInputStream.java:2543)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream$BlockDataInputStream.skipBlockData(ObjectInputStream.java:2445)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.skipCustomData(ObjectInputStream.java:1941)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1918)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1798)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1350)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:370)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at stest.STest.readByFIS(STest.java:22)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at stest.STest.main(STest.java:29)</span></pre></td></tr></table></figure>

<p>Serializable对象反序列化时，由于序列化与反序列化提供的class版本不同，序列化的class的super class不同于反序列化时的class的super class；或待接收的流受到了干扰；或者收到有敌意的流；或接收不完整；都会对初始化对象字段值时造成影响。如果发生以上情况时，没有定义readObjectNoData方法时，类的字段就会初始化成它们的默认值。当出现上面的情况时，readObjectNoData会取代readObject的调用。</p>
<h1 id="writeReplace-readResolve"><a href="#writeReplace-readResolve" class="headerlink" title="writeReplace,readResolve"></a>writeReplace,readResolve</h1><p>当实现序列化的类需指定一个替代类时，在写入流时需实现以下方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;</span></pre></td></tr></table></figure>

<p>若序列化的类未实现writeReplace方法则会调用writeObject方法写入流。若序列化的类实现了writeReplace方法则会用writeReplace方法替代writeObject方法写入流，测试用例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectStreamException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class STest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String PATH_F &#x3D; &quot;D:&#x2F;&#x2F;data.f&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void writeByFOS(Data data, String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Data readByFIS(String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Data result &#x3D; (Data)objectInputStream.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String args[]) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        STest.writeByFOS(new Data(0, &quot;灵梦&quot;), STest.PATH_F);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(STest.readByFIS(STest.PATH_F));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Data implements Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 615562960517507579L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Data(int id, String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object writeReplace() throws ObjectStreamException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Data(1, this.value + this.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getId() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setId(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setValue(String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Data [id&#x3D;&quot; + id + &quot;, value&#x3D;&quot; + value + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Data [id&#x3D;1, value&#x3D;灵梦灵梦]</span></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;</span></pre></td></tr></table></figure>

<p>同理，当反序列化时，要将一个对象从流中读出来，我们如果想将读出来的对象用另一个对象实例替换，则需实现readResolve方法。测试用例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectStreamException;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class STest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String PATH_F &#x3D; &quot;D:&#x2F;&#x2F;data.f&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void writeByFOS(Data data, String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static Data readByFIS(String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Data result &#x3D; (Data)objectInputStream.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String args[]) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        STest.writeByFOS(new Data(0, &quot;灵梦&quot;), STest.PATH_F);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(STest.readByFIS(STest.PATH_F));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Data implements Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 615562960517507579L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Data(int id, String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object readResolve() throws ObjectStreamException &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Data(1, this.value + this.value);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getId() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setId(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setValue(String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Data [id&#x3D;&quot; + id + &quot;, value&#x3D;&quot; + value + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Data [id&#x3D;1, value&#x3D;灵梦灵梦]</span></pre></td></tr></table></figure>

<h1 id="serialVersionUID"><a href="#serialVersionUID" class="headerlink" title="serialVersionUID"></a>serialVersionUID</h1><p>序列化运行时会将每一个实现序列化的类与一个版本号关联起来，称为serialVersionUID。该版本号被用于比对发送方及接受方所用的类是否是同一个版本。若接收方与发送方版本号不一致，则会抛出InvalidClassException。</p>
<p>实现序列化的类可指定serialVersionUID的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ANY-ACCESS-MODIFIER static final long serialVersionUID &#x3D; xxxL;</span></pre></td></tr></table></figure>

<p>若实现序列化的类未明确指定serialVersionUID，则序列化会在运行时依据待序列化类的各个方面计算一个默认的serialVersionUID值。然而Java强烈推荐每一个可序列化的类都明确指定自己的serialVersionUID，因为默认serialVersionUID的计算结果对类的编译结果异常敏感，因此若发送方及接收方的编译器有所差异则可能会在反序列化时抛出InvalidClassException。因此，为保证有一个无关Java编译实现的常量serialVersionUID值，序列化的类必须明确指定serialVersionUID。同时也强烈建议如果可能的话将serialVersionUID的访问权限设为private，因为serialVersionUID仅仅对其所属的类本身有用，换句话说，serialVersionUID并不是一个需继承的字段。数组类无法声明一个特定的serialVersionUID，所以它们总是使用默认的计算值，但是数组类并不需要与serialVersionUID建立起匹配关系。</p>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.ByteArrayInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ByteArrayOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.FileOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectInputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.ObjectOutputStream;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.io.Serializable;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class STest &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final String PATH_F &#x3D; &quot;D:&#x2F;&#x2F;data.f&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static void writeByFOS(List&lt;Data&gt; list, String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(&quot;使用FOS:&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(list);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static List&lt;Data&gt; readByFIS(String path) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(path));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println((String)objectInputStream.readObject());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Data&gt; result &#x3D; (ArrayList&lt;Data&gt;)objectInputStream.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static ByteArrayOutputStream writeByBAOS(List&lt;Data&gt; list) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ByteArrayOutputStream result &#x3D; new ByteArrayOutputStream();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(&quot;使用BAOS:&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.writeObject(list);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectOutputStream.flush();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static List&lt;Data&gt; readByBAIS(ByteArrayOutputStream baos) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println((String)objectInputStream.readObject());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Data&gt; result &#x3D; (ArrayList&lt;Data&gt;)objectInputStream.readObject();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        objectInputStream.close();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String args[]) throws Exception &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        List&lt;Data&gt; list &#x3D; new ArrayList&lt;Data&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Data(0, &quot;灵梦&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Data(1, &quot;v2&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Data(2, &quot;v3&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line">        list.add(new Data(3, &quot;v4&quot;));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        STest.writeByFOS(list, STest.PATH_F);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(STest.readByFIS(STest.PATH_F));</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ByteArrayOutputStream baos &#x3D; STest.writeByBAOS(list);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(STest.readByBAIS(baos));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class Data implements Serializable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final long serialVersionUID &#x3D; 615562960517507579L;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int id;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String value;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Data(int id, String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int getId() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setId(int id) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.id &#x3D; id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String getValue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void setValue(String value) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.value &#x3D; value;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Data [id&#x3D;&quot; + id + &quot;, value&#x3D;&quot; + value + &quot;]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p><strong>测试结果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用FOS:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Data [id&#x3D;0, value&#x3D;灵梦], Data [id&#x3D;1, value&#x3D;v2], Data [id&#x3D;2, value&#x3D;v3], Data [id&#x3D;3, value&#x3D;v4]]</span></pre></td></tr><tr><td class="code"><pre><span class="line">使用BAOS:</span></pre></td></tr><tr><td class="code"><pre><span class="line">[Data [id&#x3D;0, value&#x3D;灵梦], Data [id&#x3D;1, value&#x3D;v2], Data [id&#x3D;2, value&#x3D;v3], Data [id&#x3D;3, value&#x3D;v4]]</span></pre></td></tr></table></figure>

<p><strong>备注</strong></p>
<p>若Data类不实现Serializable接口，则可通过编译，但运行时会报如下异常：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.io.NotSerializableException: stest.Data</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1183)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.ArrayList.writeObject(ArrayList.java:742)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.lang.reflect.Method.invoke(Method.java:606)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:988)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1495)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1431)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1177)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at stest.STest.writeByFOS(STest.java:19)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at stest.STest.main(STest.java:57)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.lang.Cloneable</title>
    <url>/2017/07/04/JavaJDK7%E6%BA%90%E7%A0%81-javalangCloneable/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.lang;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Cloneable &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="/2017/07/06/JavaJDK7源码-javautilArrayListE/">java.util.ArrayList&lt;E&gt;</a></li>
<li><a href="/2018/11/09/JavaJDK7源码-javautilHashMapKV/">java.util.HashMap&lt;K,V&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>一个类如果想进行克隆操作则必须实现本接口(若未实现本接口又强行调用clone()，则可通过编译，但是运行时会抛出CloneNotSupportedException)。</p>
<p>通常来说，实现本接口的类需要重写Object的clone()方法。Object.clone()为protected方法，重写后的方法为public方法。当然，也可以选择不重写，但此时clone()仅有protected权限。</p>
<p>默认o.clone()方法采用浅拷贝，会将o copy一份并赋予新的引用。o中的成员变量若为基本数据类型，无论是浅拷贝还是深拷贝，都会进行原值克隆。毕竟他们都不是对象，不是存储在堆中。注意：基本数据类型并不包括他们对应的包装类。但是若o中的成员变量是一个对象，则浅拷贝不会拷贝该对象，即新拷贝出的o的克隆体中的对象仍为原对象。而深拷贝则会有N层拷贝的概念，即控制实际拷贝到第几层级。</p>
<p>注意本接口未包含clone()。因此仅仅是继承本接口是无法拷贝对象的。即使clone()被反射调用，也无法保证它会成功。</p>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.AbstractQueue&amp;lt;E&amp;gt;</title>
    <url>/2017/06/30/JavaJDK7%E6%BA%90%E7%A0%81-javautilAbstractQueueE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class AbstractQueue&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    extends AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    implements Queue&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected AbstractQueue() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Queue&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在不超出容量限制的前提下</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将e插入到queue中并返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若已超出容量限制无法插入</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则抛出IllegalStateException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法通过调用offer(E e)实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若offer(E e)返回true则本方法返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若offer(E e)返回false则本方法抛出IllegalStateException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 因容量限制e此时无法被插入queue。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因其所属的类禁止被插入queue。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且queue禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入queue。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (offer(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalStateException(&quot;Queue full&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Queue&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 检索，移除并返回queue的头元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与poll()的区别仅仅在于：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若queue为空队列，poll()返回null，本方法抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此，除非queue为空，否则本方法返回poll()的结果。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException queue为空。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        E x &#x3D; poll();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (x !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Queue&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 检索并返回但不移除queue的头元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与peek()的区别仅仅在于：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若queue为空队列，peek()返回null，本方法抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此，除非queue为空，否则本方法返回peek()的结果。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException queue为空。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E element() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        E x &#x3D; peek();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (x !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除queue中的所有元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用本方法后，queue将为空队列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法重复调用poll()直到其返回null为止。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (poll() !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素加入queue。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若c为queue自身则抛出IllegalArgumentException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的说，本方法并未定义如下行为的解决策略：c在本方法操作过程中发生变化。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法迭代c同时将迭代得到的每个元素插入queue。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在插入某个元素(特别的，这个某个元素也包含null)时若因相关异常导致插入失败</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 结果只有部分元素能成功插入queue，此时会抛出运行时异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * queue因本方法发生改变则返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因为其所属的类禁止被插入queue。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c中任意一个元素为null且queue禁止包含空元素；或c&#x3D;&#x3D;null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入queue；或c是queue自身。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 因插入限制，此时并非c中所有元素都能被插入queue。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (c &#x3D;&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (c &#x3D;&#x3D; this)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (E e : c)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (add(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>本类直接继承的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractCollectionE/">java.util.AbstractCollection&lt;E&gt;</a></li>
</ul>
<p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2017/06/16/JavaJDK7源码-javautilQueueE/">java.util.Queue&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本类是Java集合框架中的一员。E为AbstractQueue所包含的元素类型。</p>
<p>本类提供Queue接口的基本实现。若基本实现要求不得包含空元素，本类方法会对此作出调整。add(E e)，remove()，element()分别基于offer(E e)，poll()，peek()。不同的是当操作失败时前者抛出异常，后者会返回失败标志(false或null)。</p>
<p>若要以最小化的方式实现本类，程序员必须实现Queue.offer(E e)(禁止插入空元素)，Queue.peek()，Queue.poll()，Collection.size()，Collection.iterator()。若实现类无法满足Queue的规范，则应考虑使用AbstractCollection或其其他子类。</p>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接继承本类的类</em></strong></p>
<ul>
<li><a href="">java.util.concurrent.ArrayBlockingQueue&lt;E&gt;</a></li>
<li><a href="">java.util.concurrent.LinkedBlockingDeque&lt;E&gt;</a></li>
<li><a href="">java.util.concurrent.ConcurrentLinkedQueue&lt;E&gt;</a></li>
<li><a href="">java.util.concurrent.DelayQueue&lt;E extends Delayed&gt;</a></li>
<li><a href="">java.util.PriorityQueue&lt;E&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.AbstractSet&amp;lt;E&amp;gt;</title>
    <url>/2017/06/28/JavaJDK7%E6%BA%90%E7%A0%81-javautilAbstractSetE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class AbstractSet&lt;E&gt; extends AbstractCollection&lt;E&gt; implements Set&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected AbstractSet() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Set&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较o与set的相等性。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 满足如下条件返回true：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o同样是一个Set</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o与set长度相同</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o中的每个元素都在set中存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 只要满足这些条件，即便是Set接口的不同实现之间也可判定为相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法首先检查o是否是set本身，如果是则返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 然后检查o是否是一个Set及长度是否与set相同，如果有一个为否则返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 如果均为true，则返回containsAll((Collection) o)的结果。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; this)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!(o instanceof Set))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection c &#x3D; (Collection) o;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (c.size() !&#x3D; size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return containsAll(c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (ClassCastException unused)   &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; catch (NullPointerException unused) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Set&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回set的hash code值。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 一个set的hash code值为其组成元素的hash code值之和</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 等于null的元素的hash code值被定义为0</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这样可以保证对于任意两个set，s1及s2</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 只要有s1.equals(s2)，即有s1.hashCode()&#x3D;&#x3D;s2.hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 满足Java规范对于hashCode()及equals(Object obj)返回关系的要求</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法迭代set</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用set中每个元素的hashCode()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 求和作为本方法的结果返回</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int h &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; i &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (i.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            E obj &#x3D; i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (obj !&#x3D; null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                h +&#x3D; obj.hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return h;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Set&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除set中所有被c所包含的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若c同样是一个Set，本操作实际为求差集</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法通过调用set及c的size()确定哪一个的长度更小:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set长度更小，则迭代set</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 检查迭代出的元素是否被c所包含</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若包含，则调用迭代器的remove()将其从set中移除。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若c的长度更小，则迭代c</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用set的remove(Object o)从set中移除所有被迭代器返回的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注意，若set返回的iterator未实现remove()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则会抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set因本方法发生了改变则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法所重写的AbstractCollection类下的方法为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * public boolean removeAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     Iterator&lt;?&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     while (it.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         if (c.contains(it.next())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *             it.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *             modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *         &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因为Set不允许包含重复元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法重写后增加了基于长度的判断以提高算法性能。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException 集合中至少有一个元素的类型与c不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              集合中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean removeAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (size() &gt; c.size()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (Iterator&lt;?&gt; i &#x3D; c.iterator(); i.hasNext(); )</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 因Set不允许包含重复元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 故调用1次remove后即可保证set中不再包含被移除的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modified |&#x3D; remove(i.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (Iterator&lt;?&gt; i &#x3D; iterator(); i.hasNext(); ) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (c.contains(i.next())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    i.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>本类直接继承的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractCollectionE/">java.util.AbstractCollection&lt;E&gt;</a></li>
</ul>
<p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2017/06/13/JavaJDK7源码-javautilSetE/">java.util.Set&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本类是Java集合框架中的一员。提供了Set接口的最小化实现。E表示被Set所持有的元素类型。</p>
<p>在遵循Set接口的额外约束(例如不允许存在重复元素)的前提下，继承本类实现Set与继承AbstractCollection实现Collection所需做的工作是相同的。</p>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接继承本类的类</em></strong></p>
<ul>
<li><a href="">java.util.HashSet<E></a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.RandomAccess</title>
    <url>/2017/06/22/JavaJDK7%E6%BA%90%E7%A0%81-javautilRandomAccess/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface RandomAccess &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员，是被List所使用的标记接口，实现该接口表明List支持快速(通常是指常数时间)随机访问。</p>
<p>本接口的主要目的为在随机或顺序访问list时允许通用算法修改其行为以提供更好的性能。</p>
<p>当把基于随机访问list(例如ArrayList)的最佳算法用于顺序访问list(例如LinkedList)时，算法在用时上会呈平方阶增长。因此在设计list访问的通用算法时，最好先看一下传入的list是否实现了本接口，若未实现本接口，则说明传入list天然不支持随机访问，在设计算法时必须特殊考虑以保证访问的性能在可接受的范围内。</p>
<p>随机访问与顺序访问的界限通常是模糊的。例如，一些List在长度巨大时的访问时间复杂度接近于线性阶，但是在实际使用中，长度一般时的时间复杂度为常数阶。这样的List通常也会实现本接口。</p>
<p>一般来说，当某个list执行循环1的效率高于循环2时，即认为应该实现本接口。</p>
<p>循环1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (int i&#x3D;0, n&#x3D;list.size(); i &lt; n; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    list.get(i);</span></pre></td></tr></table></figure>

<p>循环2：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for (Iterator i&#x3D;list.iterator(); i.hasNext(); )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    i.next();</span></pre></td></tr></table></figure>

<p>换句话说，在欲迭代一个list之前，最好先判断其是否已实现了本接口。然后采取不同的调用方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (list instance of RandomAccess) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    for (int i &#x3D; 0; i &lt; list.size(); i++)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; TODO</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator iterator &#x3D; list.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    while (iterator.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; TODO</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>以下类是对性能的测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.LinkedList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import org.junit.Test;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class TestRandomAccess &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final static int LIST_SIZE &#x3D; 1000;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final static int TEST_COUNT &#x3D; 1000; </span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Test</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void testRandomAccess() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      List&lt;Integer&gt; arraylist &#x3D; new ArrayList&lt;Integer&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      for (int i &#x3D; 0; i &lt; TestRandomAccess.LIST_SIZE; i++)  arraylist.add(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      List&lt;Integer&gt; linkedList &#x3D; new LinkedList&lt;Integer&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">      for (int i &#x3D; 0; i &lt; TestRandomAccess.LIST_SIZE; i++)  linkedList.add(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(&quot;size&#x3D;&quot; + TestRandomAccess.LIST_SIZE + &quot;,test count&#x3D;&quot; + TestRandomAccess.TEST_COUNT + &quot;\n&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(&quot;ArrayList for time&#x3D;&quot; + this.forTime(arraylist));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(&quot;ArrayList iterator time&#x3D;&quot; + this.iteratorTime(arraylist));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(&quot;LinkedList for time&#x3D;&quot; + this.forTime(linkedList));</span></pre></td></tr><tr><td class="code"><pre><span class="line">      System.out.println(&quot;LinkedList iterator time&#x3D;&quot; + this.iteratorTime(linkedList));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private long forTime(List&lt;Integer&gt; list) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long beginTime &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int count &#x3D; 0; count &lt; TestRandomAccess.TEST_COUNT; count++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for (int i &#x3D; 0; i &lt; list.size(); i++) list.get(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return System.currentTimeMillis() - beginTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private long iteratorTime(List&lt;Integer&gt; list) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long beginTime &#x3D; System.currentTimeMillis();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int count &#x3D; 0; count &lt; TestRandomAccess.TEST_COUNT; count++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Iterator&lt;Integer&gt; iterator &#x3D; list.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (iterator.hasNext()) iterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return System.currentTimeMillis() - beginTime;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>运行结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">size&#x3D;1000,test count&#x3D;1000</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">ArrayList for time&#x3D;7</span></pre></td></tr><tr><td class="code"><pre><span class="line">ArrayList iterator time&#x3D;12</span></pre></td></tr><tr><td class="code"><pre><span class="line">LinkedList for time&#x3D;466</span></pre></td></tr><tr><td class="code"><pre><span class="line">LinkedList iterator time&#x3D;15</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.AbstractList&amp;lt;E&amp;gt;</title>
    <url>/2017/06/19/JavaJDK7%E6%BA%90%E7%A0%81-javautilAbstractListE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class AbstractList&lt;E&gt; extends AbstractCollection&lt;E&gt; implements List&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected AbstractList() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将特定元素添加至list结尾。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 支持本方法的list可能会对可添加至list的元素有所限制。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体来说，某些实现拒绝添加空元素；某些实现会限制可添加元素的类型。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 程序员在继承本类时需在实现类中明确指明这些限制。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法通过调用add(int index, E element)以实现自身功能。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因add(int index, E element)默认抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此除非实现类重写了add(int index, E element)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 否则调用本方法时会抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且list禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        add(size(), e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回list中索引位置为index的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    abstract public E get(int index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 用element替换list索引值为index的元素。方法返回被替换的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法总是抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException element因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException element&#x3D;&#x3D;null且list禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException element因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E set(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将element插入list的index下标处。原来处于index下标及以后的元素均向后移动一个位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.add(&quot;1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.add(list.size(), &quot;1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 二者等效。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法总是抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException element因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException element&#x3D;&#x3D;null且list禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException element因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除list中索引值为index的元素。后续元素左移一个位置。返回被移除的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法总是抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 搜索操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回o在list中第一次出现的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若list不包含o则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的来说，返回满足如下条件索引值最小的元素的索引：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i)))。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不存在这样的元素则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法首先使用listIterator()获得一个list iterator。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 随后，向后迭代list直到找到o或迭代结束。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o所属的类与list不相容(依实现可选)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且list禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int indexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListIterator&lt;E&gt; it &#x3D; listIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (it.next()&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return it.previousIndex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(it.next()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return it.previousIndex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 搜索操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回o在list中最后一次出现的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若list不包含o则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的来说，返回满足如下条件索引值最大的元素的索引：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i)))。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不存在这样的元素则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法首先使用listIterator(final int index)获得一个指向</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * [list.size()-1,list.size()]</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 的list iterator。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 随后，向前迭代list直到找到o或迭代结束。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o所属的类与list不相容(依实现可选)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且list禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int lastIndexOf(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListIterator&lt;E&gt; it &#x3D; listIterator(size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasPrevious())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (it.previous()&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return it.nextIndex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasPrevious())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(it.previous()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return it.nextIndex();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除list中的所有元素,调用本方法后list将为空。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法通过调用removeRange(int fromIndex, int toIndex)以实现自身功能。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此除非重写removeRange(int fromIndex, int toIndex)或remove(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 否则本方法将抛出UnsupportedOperationException，调用链条如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * clear() -&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * removeRange(int fromIndex, int toIndex) -&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.remove() -&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * remove(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * remove(int index)默认抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; removeRange(int fromIndex, int toIndex)说明:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 移除索引在[fromIndex,toIndex)范围内的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">        removeRange(0, size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入list的指定位置(index)，插入顺序为c的迭代器取出的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 原index位置及以后位置的元素顺次向后移动，空出装载c的位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法并未定义如下事件发生时的解决策略：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在将c中的元素添加至list的过程中c发生变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这也意味着如下事件的解决策略同样未定义：将一个非空list添加至自身。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若list因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.addAll(set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.addAll(list.size(), set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 二者等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法首先得到c的迭代器</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 而后遍历c，将遍历得到的c中的元素插入list的索引index处</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体方法为使用add(int index, E element)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因为add(int index, E element)默认抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此如果要实现本方法的功能，则必须重写add(int index, E element)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 基于效率考虑，许多实现会重写本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c中任意一个元素为null且list禁止包含空元素；或c&#x3D;&#x3D;null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注1:rangeCheckForAdd(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (E e : c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            add(index++, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractCollection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个基于list的有序迭代器。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法返回的迭代器是Iterator接口的一个简单实现</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 基于本类的size()，get(int index)，remove(int index)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的iterator的iterator.remove()需调用remove(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 而remove(int index)默认抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此除非重写remove(int index)，否则在调用iterator.remove()时会抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 基于protected字段modCount(list发生结构性变化的次数)的值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法返回的iterator可能会抛出运行时异常(发生结构性变化的次数超过iterator的预期，即发生结构性变化不是由该iterator导致的)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new Itr();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个list按固有顺序迭代的listIterator。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListIterator&lt;E&gt; listIterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return listIterator(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个list按固有顺序迭代的listIterator</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 迭代开始时游标位于索引[index-1,index]之间。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用本方法得到listIterator后</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若第一次调用的是listIterator.next()，返回的元素的索引是index</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同理，若第一次调用的是listIterator.previous()，返回的是索引为index-1的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListIterator&lt;E&gt; listIterator(final int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注1:rangeCheckForAdd(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListItr(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class Itr implements Iterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 当前游标指向的位置的后一个元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 默认游标位于第一个元素之前。因此默认值为0</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int cursor &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 记录最近一次调用next()或previous()返回的元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 若该元素被remove()移除则本值被重置为-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 初始时本值为-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本字段记录了iterator认为的abstractList应有的结构性变化次数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 初始时，本字段等于创建iterator那个时间点的modCount(modCount中记录的是list总的结构性变化次数)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 此后凡是经由iterator导致的list的结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * iterator均会同步修改expectedModCount及modCount，以保证二者始终相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 因此一旦iterator检测到了expectedModCount !&#x3D; modCount</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 则证明list因为本iterator以外的原因发生了结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 进而可认为list存在同步性问题。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 在迭代过程中，若集合还有元素则返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 换句话说，返回ture说明仍然可以通过next()方法取到元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 若在本方法返回false时继续调用next()方法，则next()方法会抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor !&#x3D; size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回iterator游标所指向的元素，同时游标后移一位</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws NoSuchElementException iterator游标所指的位置已无元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                E next &#x3D; get(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lastRet &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return next;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 移除当前游标所指元素的前一个元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 即上一次调用next()所返回的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 因此，调用本方法之前必须调用一次next()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 调用一次next()后多次调用本方法是不允许的。本方法必须与next()一一配对。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法没有定义应对以下事件的对策：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 在迭代过程中，被迭代集合因本方法以外的原因发生了改变。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注3:Itr.remove()测试</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws UnsupportedOperationException iterator不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalStateException 在调用本方法前没有调用与之配对的next()(包含调用一次next()后多次调用本方法的情况)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (lastRet &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                AbstractList.this.remove(lastRet);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 本类Itr中只有hasNext()及next()，因此只会向后迭代</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 如果仅考虑本类的话，是不需要这个if判断的</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 因为必有lastRet &lt; cursor，直接全部调用cursor--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 然后若考虑到后文出现的，本类的子类ListItr的话，其内部有向前移动的hasPrevious()及previous()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 在向前移动的情况下，cursor &lt; lastRet，此时remove()后无需做任何操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 实在是精妙的操作，这样ListItr就无需重写本方法了</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (lastRet &lt; cursor)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    cursor--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        final void checkForComodification() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (modCount !&#x3D; expectedModCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private class ListItr extends Itr implements ListIterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListItr(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cursor &#x3D; index;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 当向前遍历还有元素时返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 换句话说，返回ture说明仍然可以通过previous()取到元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 若在本方法返回false时继续调用previous()，则previous()会抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public boolean hasPrevious() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor !&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回listIterator当前游标前一个元素，同时游标前移一位。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 在迭代list的过程中本方法可能会被反复调用，或者与next()交替被调用。以此控制向前或向后迭代。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 以下语句均会返回当前游标的后一个元素：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * listIterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * listIterator.previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 以下语句均会返回当前游标的前一个元素：</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * listIterator.previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * listIterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws NoSuchElementException 游标所指的位置之前已无元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public E previous() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int i &#x3D; cursor - 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                E previous &#x3D; get(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lastRet &#x3D; cursor &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return previous;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回listIterator当前游标后一个元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本操作不会移动游标。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 即本方法会返回下次调用next()时返回的元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 特别的，当游标位于list末尾时，调用本方法不会抛出异常，而是会返回list的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int nextIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 返回listIterator当前游标前一个元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本操作不会移动游标。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 即本方法会返回下次调用previous()时返回的元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 特别的，当游标位于list最左边时，调用本方法不会抛出异常，而是会返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public int previousIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return cursor-1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 用e覆盖上一次由next()或previous()返回的元素的位置的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法在调用前必须调用一次next()或previous()，否则不知道该覆盖哪个位置的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 且在本方法与最后一次next()或previous()之间不能调用add(E e)或remove()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 本方法不会修改lastRet，因此自然也不会影响add(E e)或remove()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 但由于add(E e)或remove()均会修改lastRet为-1，因此这两个方法会影响本方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws UnsupportedOperationException listIterator不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws ClassCastException e因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalArgumentException e因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalStateException 本方法在调用前没有调用next()或previous()，或在本方法与最后一次next()或previous()之间调用add(E e)或remove()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void set(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (lastRet &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new IllegalStateException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                AbstractList.this.set(lastRet, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 实现接口:java.util.ListIterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 将e插入当前游标所在位置。若list为空，则e将成为list的第一个元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * e插入后，当前游标位于e之后的位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 因此插入后第一次如果调用的是next()将返回插入前游标所指的下一个元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 第一次如果调用的是previous()将返回e。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 调用该方法后，若调用nextIndex()或previousIndex()，和未调用该方法之前相比值均会增加1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * </span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws UnsupportedOperationException listIterator不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws ClassCastException e因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         * @throws IllegalArgumentException e因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">         *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        public void add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            try &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int i &#x3D; cursor;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                AbstractList.this.add(i, e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                lastRet &#x3D; -1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cursor &#x3D; i + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                expectedModCount &#x3D; modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; catch (IndexOutOfBoundsException ex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 视图</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回list的一部分，索引值区间：[fromIndex,toIndex)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 特别的，若fromIndex&#x3D;&#x3D;toIndex，则返回空list(不是null)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的列表是原list的一个视图，前者是后者的一部分，并未从后者中分离出去。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此作用在前者之上的修改会反映在后者上，反之亦然。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用本方法的好处在于：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当我们操作list的一部分时，可以直接在这一部分内部操作(仿佛这就是一个新的list)，</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 而无需被各种索引的边界分散过多的注意。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 例如，如果想批量移除list中的一部分，可按如下操作：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.subList(fromIndex, toIndex).clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同理，所有本接口的方法及所有java.util.Collections类提供的静态方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 均支持本方法返回的视图作为一个独立的list调用。例如：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list2 &#x3D; list.subList(1, 2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list2.get(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 此时取得的元素即为list.get(1)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若在生成视图后原list发生了结构性的变化(例如长度发生了变化)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则已生成的视图将被重置为未定义的状态。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的视图在其私有域中存储了：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 1.相对于原list的偏移量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 2.视图的长度(该长度在视图生命周期中可变)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 3.原list的modCount(即原list发生结构性变化的次数)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 视图有两个变种：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若原list实现了java.util.RandomAccess接口，则返回的视图将基于RandomAccessSubList构造</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 反之，返回的视图将基于SubList构造。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在SubList及RandomAccessSubList中：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在越界检查及偏移量调整后，视图的：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * set(int index, E element)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * get(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * add(int index, E element)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * remove(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * addAll(int index, Collection&lt;? extends E&gt; c)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * removeRange(int fromIndex, int toIndex)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 均基于原list计算。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * addAll(Collection&lt;? extends E&gt; c)是通过addAll(size, c)实现的。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator(final int index)返回一个封装的对象</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该对象基于原list的listIterator，并附加视图的偏移量。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * iterator()是通过调用listIterator()实现的。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * size()是通过调用视图的size字段实现的。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 所有方法都会检查原list当前的modCount值(原list发生结构性变化的次数)是否与视图的预期相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不相等则抛出ConcurrentModificationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(fromIndex &lt; 0 || toIndex &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException fromIndex &gt; toIndex。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (this instanceof RandomAccess ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">                new RandomAccessSubList&lt;&gt;(this, fromIndex, toIndex) :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                new SubList&lt;&gt;(this, fromIndex, toIndex));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较与哈希</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较o与list是否相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当且仅当:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o同样是一个列表</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o与list长度相同</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o与list所有对应位置的元素均相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 时，认为o与list相等</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关于&quot;o与list所有对应位置的元素均相等&quot;，具体来说：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若设e1为o中的某个元素，e2为list中对应相同位置的元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * e1&#x3D;&#x3D;null ? e2&#x3D;&#x3D;null : e1.equals(e2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则有e1与e2相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 换句话说，两个list相等的条件为：在相同的位置包含相同的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法首先检查o是否是list本身，如果是则返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不是则检查o是否是一个list，若不是则返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 如果是则同时迭代o及list，比较对应位置的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若任意某个比较结果返回false，返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若其中一个迭代器先于另一个迭代结束(即o与list长度不同)，返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若迭代正常结束，则返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean equals(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o &#x3D;&#x3D; this)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (!(o instanceof List))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListIterator&lt;E&gt; e1 &#x3D; listIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListIterator e2 &#x3D; ((List) o).listIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (e1.hasNext() &amp;&amp; e2.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            E o1 &#x3D; e1.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Object o2 &#x3D; e2.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!(o1&#x3D;&#x3D;null ? o2&#x3D;&#x3D;null : o1.equals(o2)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return !(e1.hasNext() || e2.hasNext());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写祖先类:java.lang.Object</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.List&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较与哈希</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回list的hash code值。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 计算方式如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * int hashCode &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * for (E e : abstractList)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     hashCode &#x3D; 31 * hashCode + (e &#x3D;&#x3D; null ? 0 : e.hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这种计算方式可以保证:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 任意list1.equals(list2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 有</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list1.hashCode()&#x3D;&#x3D;list2.hashCode()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hashCode() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int hashCode &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (E e : this)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            hashCode &#x3D; 31*hashCode + (e&#x3D;&#x3D;null ? 0 : e.hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return hashCode;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除list索引区间为[fromIndex,toIndex)的全部元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并将后续元素左移补位。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法减少了list中(toIndex - fromIndex)个元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若有toIndex&#x3D;&#x3D;fromIndex，则本方法实际并未对list产生影响。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法会被list及其视图的clear()调用。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写本方法可大幅提高clear()的性能。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法首先得到一个listIterator</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并将初始游标定位于[fromIndex-1,fromIndex]。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 随后反复调用listIterator.next()及listIterator.remove()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 直到指定范围内的元素全部被移除。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注意：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若listIterator.remove()需要线性阶时间</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则本方法需要平方阶时间。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void removeRange(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        ListIterator&lt;E&gt; it &#x3D; listIterator(fromIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i&#x3D;0, n&#x3D;toIndex-fromIndex; i&lt;n; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            it.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            it.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list发生结构性变化的次数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 结构性变化是指改变list的长度，或是其他会使迭代器结果混乱的变化。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本字段将被iterator()返回的iterator及listIterator()返回的listIterator使用。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若本字段发生了 iterator&#x2F;listIterator 所没有预期到的变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则在调用 iterator&#x2F;listIterator 的:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * next()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * remove()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * previous()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * set(E e)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * add(E e)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 出现fail-fast时抛出ConcurrentModificationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在迭代过程中，若检测到并发性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则直接判定为失败并抛出异常(fail-fast)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 而不会去进一步检测所发生的并发性变化是否真的会对迭代造成影响(non-deterministic)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 子类可自行选择是否使用本字段。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若子类决定继承本类的fail-fast判定</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则只需要在会引发结构性变化的方法中增加本字段的值。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本类中已实现的引发结构性变化的方法有:</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * add(int index, E element)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * remove(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用一次add(int index, E element)或remove(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 只需将本字段自增1，表示发生了一次结构性变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 否则 iterator&#x2F;listIterator 会抛出错误的ConcurrentModificationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若子类不想遵循fail-fast，忽略本字段即可。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected transient int modCount &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注1:rangeCheckForAdd(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void rangeCheckForAdd(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt; size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String outOfBoundsMsg(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class SubList&lt;E&gt; extends AbstractList&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 原list</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final AbstractList&lt;E&gt; l;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 生成视图时的偏移量</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即原list.subList(int fromIndex, int toIndex)中的fromIndex。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private final int offset;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 视图包含元素数</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 初始时为原list.subList(int fromIndex, int toIndex)中的toIndex-fromIndex。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private int size;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SubList(AbstractList&lt;E&gt; list, int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (fromIndex &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(&quot;fromIndex &#x3D; &quot; + fromIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (toIndex &gt; list.size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(&quot;toIndex &#x3D; &quot; + toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (fromIndex &gt; toIndex)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;fromIndex(&quot; + fromIndex +</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                               &quot;) &gt; toIndex(&quot; + toIndex + &quot;)&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        l &#x3D; list;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        offset &#x3D; fromIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size &#x3D; toIndex - fromIndex;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount &#x3D; l.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 用element替换视图索引值(视图内部的相对值)为index的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 方法返回被替换的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException element因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException element&#x3D;&#x3D;null且list禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException element因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E set(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注4:rangeCheck(index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return l.set(index+offset, element);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回视图中索引(视图内部的相对值)位置为index的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注4:rangeCheck(index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return l.get(index+offset);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将element插入视图的index(视图内部的相对值)下标处。原来处于index下标及以后的元素均向后移动一个位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 视图.add(&quot;1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 视图.add(视图.size(), &quot;1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 二者等效。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException element因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException element&#x3D;&#x3D;null且list禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException element因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注1:rangeCheckForAdd(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        l.add(index+offset, element);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount &#x3D; l.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除视图中索引值为index(视图内部的相对值)的元素。后续元素左移一个位置。返回被移除的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注4:rangeCheck(index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheck(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        E result &#x3D; l.remove(index+offset);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount &#x3D; l.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后文注释讨论的list均是指视图，其中的index均是视图中的相对值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除list索引区间为[fromIndex,toIndex)的全部元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并将后续元素左移补位。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法减少了list中(toIndex - fromIndex)个元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若有toIndex&#x3D;&#x3D;fromIndex，则本方法实际并未对list产生影响。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected void removeRange(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        l.removeRange(fromIndex+offset, toIndex+offset);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount &#x3D; l.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size -&#x3D; (toIndex-fromIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return addAll(size, c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后文注释讨论的list均是指视图，其中的index均是视图中的相对值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入list的指定位置(index)，插入顺序为c的迭代器取出的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 原index位置及以后位置的元素顺次向后移动，空出装载c的位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法并未定义如下事件发生时的解决策略：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在将c中的元素添加至list的过程中c发生变化</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这也意味着如下事件的解决策略同样未定义：将一个非空list添加至自身。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若list因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.addAll(set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.addAll(list.size(), set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 二者等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException list不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c中任意一个元素为null且list禁止包含空元素；或c&#x3D;&#x3D;null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(int index, Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注1:rangeCheckForAdd(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int cSize &#x3D; c.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (cSize&#x3D;&#x3D;0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        l.addAll(offset+index, c);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount &#x3D; l.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        size +&#x3D; cSize;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 方法的调用链为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * SubList.iterator() -&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * AbstractList.listIterator() -&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * SubList.listIterator(final int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若调用SubList.listIterator()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因SubList未重写该方法，因此依然是调用AbstractList.listIterator()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此，对于SubList</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * iterator()及listIterator()其实是一回事</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 最终都是调用SubList.listIterator(final int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return listIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后文注释讨论的list均是指视图，其中的index均是视图中的相对值</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个list按固有顺序迭代的listIterator</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 迭代开始时游标位于索引[index-1,index]之间。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用本方法得到listIterator后</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若第一次调用的是listIterator.next()，返回的元素的索引是index</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同理，若第一次调用的是listIterator.previous()，返回的是索引为index-1的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public ListIterator&lt;E&gt; listIterator(final int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        checkForComodification();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注1:rangeCheckForAdd(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rangeCheckForAdd(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new ListIterator&lt;E&gt;() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            private final ListIterator&lt;E&gt; i &#x3D; l.listIterator(index+offset);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public boolean hasNext() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return nextIndex() &lt; size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public E next() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public boolean hasPrevious() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return previousIndex() &gt;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public E previous() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (hasPrevious())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return i.previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    throw new NoSuchElementException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public int nextIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return i.nextIndex() - offset;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public int previousIndex() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return i.previousIndex() - offset;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void remove() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                SubList.this.modCount &#x3D; l.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                size--;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void set(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i.set(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">            public void add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                i.add(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                SubList.this.modCount &#x3D; l.modCount;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                size++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.AbstractList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即视图的视图。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 此时视图被看作是原list</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 但无论如何，最终操作的始终都是最原始的那个list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 一切视图都是对偏移量逻辑的封装</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new SubList&lt;&gt;(this, fromIndex, toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注4:rangeCheck(index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void rangeCheck(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt;&#x3D; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注1:rangeCheckForAdd(int index)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void rangeCheckForAdd(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (index &lt; 0 || index &gt; size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IndexOutOfBoundsException(outOfBoundsMsg(index));</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private String outOfBoundsMsg(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return &quot;Index: &quot;+index+&quot;, Size: &quot;+size;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注2:checkForComodification()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private void checkForComodification() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (this.modCount !&#x3D; l.modCount)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new ConcurrentModificationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">class RandomAccessSubList&lt;E&gt; extends SubList&lt;E&gt; implements RandomAccess &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    RandomAccessSubList(AbstractList&lt;E&gt; list, int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        super(list, fromIndex, toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 重写父类:java.util.SubList&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public List&lt;E&gt; subList(int fromIndex, int toIndex) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return new RandomAccessSubList&lt;&gt;(this, fromIndex, toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>本类直接继承的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractCollectionE/">java.util.AbstractCollection&lt;E&gt;</a></li>
</ul>
<p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2017/05/25/JavaJDK7源码-javautilListE/">java.util.List&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接继承本类的类</em></strong></p>
<ul>
<li><a href="/2017/07/06/JavaJDK7源码-javautilArrayListE/">java.util.ArrayList&lt;E&gt;</a></li>
<li><a href="/2017/09/05/JavaJDK7源码-javautilVectorE/">java.util.Vector&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本类是Java集合框架中的一员，提供了基于支持随机访问的存储结构(形如数组)的List接口的基本实现。</p>
<p>若需实现顺序存储的List(形如链表)，则比起本类，更推荐继承本类的子类，更特化的AbstractSequentialList。</p>
<p>若需实现一个不需改变的List，程序员只需继承本类，并实现get(int index)及size()。</p>
<p>例如，本类某不可变的实现如下(为了填入数据，至少还需要初始化数据的代码，这里放到了构造函数中)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractList;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class UnmoCol&lt;E&gt; extends AbstractList&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private E[] array;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public UnmoCol(E[] array) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.array &#x3D; array;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.array[index];</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.array.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>调用demo如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AbstractList&lt;String&gt; unmoCol &#x3D; new UnmoCol&lt;String&gt;(new String[]&#123;&quot;reimu&quot;, &quot;wang&quot;&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(unmoCol.size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String s : unmoCol) System.out.println(s);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;String&gt; iterator &#x3D; unmoCol.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (iterator.hasNext()) System.out.println(iterator.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行本demo输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span></pre></td></tr><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr></table></figure>

<p>若需实现一个可变的List，程序员必须额外重写set(int index, E element)，否则会抛出UnsupportedOperationException。若需要List长度可变，程序员必须额外重写add(int index, E element)及remove(int index)。</p>
<p>例如，某个实现如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Mocol&lt;E&gt; extends AbstractList&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;E&gt; list &#x3D; new ArrayList&lt;E&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.list.get(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.list.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.list.add(index, element);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount++;    &#x2F;&#x2F; 发生结构性变化的次数+1</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount++;    &#x2F;&#x2F; 发生结构性变化的次数+1</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.list.remove(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E set(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.list.set(index, element);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>调用demo如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractList;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AbstractList&lt;String&gt; mocol &#x3D; new Mocol&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mocol.add(&quot;wang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mocol.add(0, &quot;reimu&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String str : mocol) System.out.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(mocol.size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mocol.remove(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String str : mocol) System.out.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        mocol.set(0, &quot;change&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String str : mocol) System.out.println(str);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行本demo输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr><tr><td class="code"><pre><span class="line">2</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr><tr><td class="code"><pre><span class="line">change</span></pre></td></tr></table></figure>

<p>Java集合框架规范建议程序员在继承本类时实现两个构造函数：void(无参数)构造函数；接收一个collection的构造函数。</p>
<p>与其他的Collection接口的抽象实现类不同，程序员在继承本类时不需要提供iterator的实现。本类已实现了iterator及list iterator。</p>
<p>在此之上，程序员需实现或重写那些用于”随机访问”的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get(int index)    &#x2F;&#x2F; 默认abstract</span></pre></td></tr><tr><td class="code"><pre><span class="line">set(int index, E element)    &#x2F;&#x2F; 默认抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">add(int index, E element)    &#x2F;&#x2F; 默认抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">remove(int index)    &#x2F;&#x2F; 默认抛出UnsupportedOperationException</span></pre></td></tr></table></figure>

<p>本类所有的非抽象方法都会在文档中有详细的实现描述。这些方法均可被重写。</p>
<h1 id="注1-rangeCheckForAdd-int-index"><a href="#注1-rangeCheckForAdd-int-index" class="headerlink" title="注1:rangeCheckForAdd(int index)"></a>注1:rangeCheckForAdd(int index)</h1><p>若(index &lt; 0 || index &gt; size())则抛出IndexOutOfBoundsException。</p>
<h1 id="注2-checkForComodification"><a href="#注2-checkForComodification" class="headerlink" title="注2:checkForComodification()"></a>注2:checkForComodification()</h1><p>对于迭代器而言，若modCount != expectedModCount，则认为list存在同步性问题，抛出ConcurrentModificationException。</p>
<p>对于视图而言，若this.modCount != l.modCount，则认为list存在同步性问题，抛出ConcurrentModificationException。</p>
<h1 id="注3-Itr-remove-测试"><a href="#注3-Itr-remove-测试" class="headerlink" title="注3:Itr.remove()测试"></a>注3:Itr.remove()测试</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.ArrayList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.List;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class AbstractListTest&lt;E&gt; extends AbstractList&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private List&lt;E&gt; list &#x3D; new ArrayList&lt;E&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E get(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.list.get(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.list.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void add(int index, E element) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.list.add(index, element);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public E remove(int index) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        this.modCount++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.list.remove(index);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>调用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.collectiontest.main;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.AbstractList;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        AbstractList&lt;String&gt; abstractListTest &#x3D; new AbstractListTest&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        abstractListTest.add(&quot;reimu&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        abstractListTest.add(&quot;wang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;String&gt; iterator1 &#x3D; abstractListTest.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;String&gt; iterator2 &#x3D; abstractListTest.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(iterator1.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        iterator1.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(iterator2.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.util.ConcurrentModificationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:386)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at java.util.AbstractList$Itr.next(AbstractList.java:355)</span></pre></td></tr><tr><td class="code"><pre><span class="line">	at com.collectiontest.main.Main.main(Main.java:16)</span></pre></td></tr></table></figure>

<h1 id="注4-rangeCheck-index"><a href="#注4-rangeCheck-index" class="headerlink" title="注4:rangeCheck(index)"></a>注4:rangeCheck(index)</h1><p>若index &lt; 0 || index &gt;= size则抛出IndexOutOfBoundsException。</p>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接继承本类的类</em></strong></p>
<ul>
<li><a href="">java.util.AbstractSequentialList&lt;E&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.AbstractCollection&amp;lt;E&amp;gt;</title>
    <url>/2017/06/19/JavaJDK7%E6%BA%90%E7%A0%81-javautilAbstractCollectionE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public abstract class AbstractCollection&lt;E&gt; implements Collection&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    protected AbstractCollection() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个集合的迭代器，该迭代器默认从头开始迭代。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract Iterator&lt;E&gt; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回集合包含的元素个数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合包含的元素个数大于Integer.MAX_VALUE，则返回Integer.MAX_VALUE。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public abstract int size();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合不包含元素则返回true。反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isEmpty() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return size() &#x3D;&#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合包含o则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更具体的说，当且仅当集合包含至少一个元素e，满足(o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))时，返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法会用迭代器迭代集合中的每个元素，检查每个元素是否与o相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的containsAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean contains(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (it.next()&#x3D;&#x3D;null)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(it.next()))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个包含集合所有元素的数组，该数组由集合的迭代器遍历而得，数组中元素的顺序与迭代器遍历而得的顺序相同。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组的长度等于迭代器遍历而得的元素的个数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在本方法的开始会调用一次size()得到集合的长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通常情况下这与迭代器遍历而得的元素个数相同。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 但是集合在迭代过程中发生结构性变化时，最终返回的数组的长度以迭代器实际取出的元素个数为准，这个长度可能会与之前调用的size()方法时得到的结果不同。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法等价于：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * List&lt;E&gt; list &#x3D; new ArrayList&lt;E&gt;(size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * for (E e : this) list.add(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * return list.toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与集合之间不存在引用关系(即使集合是基于数组的)，数组中的元素是集合中的元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的toArray(T[] a)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Object[] toArray() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Object[] r &#x3D; new Object[size()];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; r.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (! it.hasNext())    &#x2F;&#x2F; 迭代器得到的元素少于预期，发生截断</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 注1：Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return Arrays.copyOf(r, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            r[i] &#x3D; it.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 若it.hasNext()&#x3D;&#x3D;true说明迭代器得到的元素多于预期：即集合在迭代过程中长度增加</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2：finishToArray(r, it)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return it.hasNext() ? finishToArray(r, it) : r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含集合所有元素的数组。返回数组的类型即为a的类型。顺序为迭代器的迭代顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体规则的伪代码为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * if (a.length &lt; collection.size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     不修改a，而是以a的类型新建长度为collection.size()的数组并填入集合中的值，随后返回这个新生成的数组。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else if (a.length &#x3D;&#x3D; collection.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     将返回的结果直接填入a后返回a(若a中已有值，则a中的原值会被覆盖)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引在[0, collection.size() -1]的元素会被集合对应位置的元素覆盖。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引 &#x3D;&#x3D; collection.size()的元素会被置为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组中后续元素(如果有的话)不变。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合不允许包含空元素，则本方法此时可用来计算集合的长度：返回的数组第一次出现null的索引即为集合的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与集合之间不存在引用关系(即使集合的底层就是基于数组实现的)，数组中的元素是集合中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 小例子：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * String[] y &#x3D; x.toArray(new String[0]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * x是一个元素类型为String的集合，则上述语句会将x中的元素依序复制一份浅拷贝到数组y。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关于本方法与前文介绍的toArray()方法，需明确：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * collection.toArray()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * collection.toArray(new Object[s])</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当s &lt; collection.size()时，上述两行代码的效果等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回数组的有效长度(数组中属于集合中的元素的长度)等于迭代器遍历而得的元素的个数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法开始时会调用一次size()得到集合的长度，通常情况下这与迭代器遍历而得的元素个数相同。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 但当集合在迭代过程中发生结构性变化时，最终返回的数组的有效长度以迭代器实际取出的元素个数为准。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这个长度可能会与之前调用size()时得到的结果不同。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注4：toArray(T[] a)的调用示例</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的toArray()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArrayStoreException a的类型collection不支持。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException null&#x3D;&#x3D;a。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public &lt;T&gt; T[] toArray(T[] a) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int size &#x3D; size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 以a中元素的类型为基础，根据反射新声明一个长度为size的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">        T[] r &#x3D; a.length &gt;&#x3D; size ? a :</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  (T[])java.lang.reflect.Array</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  .newInstance(a.getClass().getComponentType(), size);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (int i &#x3D; 0; i &lt; r.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (! it.hasNext()) &#123;    &#x2F;&#x2F; 迭代器得到元素少于预期，可能原因有2:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     &#x2F;&#x2F; 1.迭代过程中集合的元素减少。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                     &#x2F;&#x2F; 2.a.length&gt;size</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (a &#x3D;&#x3D; r) &#123;    &#x2F;&#x2F; a.length&gt;&#x3D;size，此时操作r与操作a等效。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    r[i] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 &#x2F;&#x2F; 后续else都是在处理a.length&lt;size的情况。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                 &#x2F;&#x2F; 此时r与a是两个完全不同的数组。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else if (a.length &lt; i) &#123;    &#x2F;&#x2F; 此时少于预期的原因无论是1或2，集合依然无法放入a中。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 注1：Arrays.copyOf(r, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 截取r并返回截取后的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return Arrays.copyOf(r, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125; else &#123;    &#x2F;&#x2F; 此时虽然最初有a.length&lt;size，但是因为原因1，a又能装下集合了。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            &#x2F;&#x2F; 因此仍然选择将集合存入a。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 注3：System.arraycopy(r, 0, a, 0, i)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 调用此方法时有：r.length&#x3D;size&gt;a.length&gt;&#x3D;i</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 因此前有值时操作的均为r，故将r中的数据复制索引[0,i-1]至a。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    System.arraycopy(r, 0, a, 0, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    if (a.length &gt; i) &#123;    &#x2F;&#x2F; a.length&#x3D;&#x3D;i的情况不需要置null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        a[i] &#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            r[i] &#x3D; (T)it.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 迭代器得到元素多于预期。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 可能的原因为：迭代过程中集合的元素增加。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 注2：finishToArray(r, it)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return it.hasNext() ? finishToArray(r, it) : r;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通常情况下，允许创建的最大数组长度</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 某些JVM会在数组中存储同步关键词</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此在声明容量较大的数组时应注意避免OutOfMemoryError</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * -8是一个相对安全的经验之谈，具体是否出错还要看实际的JVM实现</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static final int MAX_ARRAY_SIZE &#x3D; Integer.MAX_VALUE - 8;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在调用toArray(T[] a)或toArray()时</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若迭代器返回的元素个数多于预期，则会调用本方法返回新数组，对原数组进行扩容</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并将迭代器中多于预期的元素填入新数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int i &#x3D; r.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (it.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int cap &#x3D; r.length;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (i &#x3D;&#x3D; cap) &#123;    &#x2F;&#x2F; 本if中是一次扩容操作：</span></pre></td></tr><tr><td class="code"><pre><span class="line">                               &#x2F;&#x2F; 当前待插入索引i&#x3D;&#x3D;r.length时需扩容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 若本句越界，则不会进入后面的if条件，会在调用Arrays.copyOf(r, newCap);时抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                int newCap &#x3D; cap + (cap &gt;&gt; 1) + 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 满足进入本if的条件很苛刻：</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; newCap &gt; MAX_ARRAY_SIZE &amp;&amp; newCap &lt; Integer.MAX_VALUE。只有7个值。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 进入本if说明当前的newCap OutOfMemoryError的风险较高。</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (newCap - MAX_ARRAY_SIZE &gt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; 使用cap重新计算一个相对安全的newCap</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; hugeCapacity(cap + 1):见紧随本方法之后的下一个方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#x2F;&#x2F; cap + 1为此时能允许的最小长度，因为cap已经不够用了</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    newCap &#x3D; hugeCapacity(cap + 1);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#x2F;&#x2F; 执行扩容操作。扩容后r已指向了一个全新的数组</span></pre></td></tr><tr><td class="code"><pre><span class="line">                r &#x3D; Arrays.copyOf(r, newCap);    &#x2F;&#x2F; 注1</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            r[i++] &#x3D; (T)it.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 若扩容后的数组过大则将多余位置截断</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (i &#x3D;&#x3D; r.length) ? r : Arrays.copyOf(r, i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当数组规模极大时才需要调用本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * minCapacity为调用方能接受的最小扩容后的数组长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法判断minCapacity的值系统是否可接受</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若能接受则基于minCapacity返回一个合理的扩容后的长度，若不能接受则抛出OutOfMemoryError。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    private static int hugeCapacity(int minCapacity) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (minCapacity &lt; 0)    &#x2F;&#x2F; minCapacity本来为一个极大的数，此处minCapacity&lt;0说明其已越界。</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new OutOfMemoryError</span></pre></td></tr><tr><td class="code"><pre><span class="line">                (&quot;Required array size too large&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 如果可能尽量将大小的上限控制为MAX_ARRAY_SIZE。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 如果调用方能接受的容量范围在(MAX_ARRAY_SIZE,Integer.MAX_VALUE]，</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#x2F;&#x2F; 此时虽然OutOfMemoryError的风险较大，但系统仍会返回Integer.MAX_VALUE。</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (minCapacity &gt; MAX_ARRAY_SIZE) ?</span></pre></td></tr><tr><td class="code"><pre><span class="line">            Integer.MAX_VALUE :</span></pre></td></tr><tr><td class="code"><pre><span class="line">            MAX_ARRAY_SIZE;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法始终抛出UnsupportedOperationException</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因其类型禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且集合禁止包含null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 因插入限制，此时e不能被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        throw new UnsupportedOperationException();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若本方法改变了集合则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用集合的迭代器遍历集合</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 并用iterator.remove()移除集合符合条件的元素e：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若有多个e符合条件，则本方法只会移除iterator遍历得到的第一个。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合包含o且其迭代器未实现remove()，则抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的removeAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean remove(Object o) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (o&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (it.next()&#x3D;&#x3D;null) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    it.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            while (it.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if (o.equals(it.next())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    it.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合包含c中所有元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的contains(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean containsAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (Object e : c)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!contains(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法未定义如下事件发生时的解决策略：在将c中的元素添加至集合的过程中c发生变化。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这也意味着如下事件的解决策略同样未定义：将一个非空集合添加至自身。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在c!&#x3D;null的前提下，若未重写add(E e)，则本方法将抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的add(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因其类型禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 因插入限制，此时并非c中所有元素都能被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean addAll(Collection&lt;? extends E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (E e : c)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (add(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 从集合中移除所有与c的交集元素(求差集)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若迭代器未实现remove()且集合至少有一个元素在c中则抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的remove(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的retainAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              集合中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean removeAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;?&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (it.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (c.contains(it.next())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                it.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 保留集合中与c的交集元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若迭代器未实现remove()且集合至少有一个元素不在c中则抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的removeAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              集合中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean retainAll(Collection&lt;?&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean modified &#x3D; false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (it.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (!c.contains(it.next())) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                it.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                modified &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return modified;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 实现接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 清空集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若迭代器未实现remove()且集合非空则抛出UnsupportedOperationException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public void clear() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (it.hasNext()) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            it.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            it.remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 字符串变换</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回集合的字符串表述：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * [e1, e2, e3]</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 其中e1,e2,e3为集合按其迭代器顺序排列的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 注5 toString()调用示例</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public String toString() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; it &#x3D; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (! it.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return &quot;[]&quot;;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        sb.append(&#39;[&#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (;;) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            E e &#x3D; it.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#x2F;&#x2F; 防止自包含时无限递归</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(e &#x3D;&#x3D; this ? &quot;(this Collection)&quot; : e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if (! it.hasNext())</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return sb.append(&#39;]&#39;).toString();</span></pre></td></tr><tr><td class="code"><pre><span class="line">            sb.append(&#39;,&#39;).append(&#39; &#39;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>本类直接实现的接口</em></strong></p>
<ul>
<li><a href="/2017/05/23/JavaJDK7源码-javautilCollectionE/">java.util.Collection&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接继承本类的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractListE/">java.util.AbstractList&lt;E&gt;</a></li>
<li><a href="/2017/06/28/JavaJDK7源码-javautilAbstractSetE/">java.util.AbstractSet&lt;E&gt;</a></li>
<li><a href="/2017/06/30/JavaJDK7源码-javautilAbstractQueueE/">java.util.AbstractQueue&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本类是Java集合框架中的一员，提供了Collection接口的基本实现。</p>
<p>如果要实现一个不需要改变的集合，程序员仅仅需要继承本类然后提供iterator()(iterator()返回的iterator必须实现hasNext()及next())及size()的实现。</p>
<p>例如，某个不可变的实现如下(为了填入数据，至少还需要初始化数据的代码，我将其放到了构造函数中)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractCollection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class UnmoCol&lt;E&gt; extends AbstractCollection&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Map&lt;E, Object&gt; map &#x3D; new HashMap&lt;E, Object&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public UnmoCol(Collection&lt;E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; cIterator &#x3D; c.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (cIterator.hasNext()) this.map.put(cIterator.next(), new Object());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.map.keySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.map.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>调用demo如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashSet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; set &#x3D; new HashSet&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;reimu&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;wang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;String&gt; collection &#x3D; new UnmoCol&lt;String&gt;(set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(collection.size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;String&gt; iterator &#x3D; collection.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (iterator.hasNext()) System.out.println(iterator.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行后输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span></pre></td></tr><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr></table></figure>

<p>如果要实现一个可变的集合，程序员必须重写本类的add(E e)方法(否则会抛出UnsupportedOperationException)。然后iterator()返回的iterator必须实现hasNext(),next(),remove()。</p>
<p>例如，某个实现如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractCollection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Mocol&lt;E&gt; extends AbstractCollection&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private Map&lt;E, Object&gt; map &#x3D; new HashMap&lt;E, Object&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.map.keySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.map.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.map.put(e, new Object()) &#x3D;&#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>调用demo如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;String&gt; collection &#x3D; new Mocol&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        collection.add(&quot;reimu&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        collection.add(&quot;wang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(collection.size());</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;String&gt; iterator &#x3D; collection.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (iterator.hasNext()) System.out.println(iterator.next());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>执行本demo输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span></pre></td></tr><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr></table></figure>

<p>Java语言规范建议程序员在继承本类时实现两个构造函数：void(无参)构造函数。接收一个collection的构造函数。</p>
<p>综上所述，现写本类的测试继承类如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.AbstractCollection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class AbstractCollectionTest&lt;E&gt; extends AbstractCollection&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    private HashMap&lt;E, Object&gt; map &#x3D; new HashMap&lt;E, Object&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public AbstractCollectionTest() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public AbstractCollectionTest(Collection&lt;E&gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Iterator&lt;E&gt; cIterator &#x3D; c.iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (cIterator.hasNext()) this.map.put(cIterator.next(), new Object());</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public Iterator&lt;E&gt; iterator() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.map.keySet().iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int size() &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return this.map.size();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    @Override</span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean add(E e) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return map.put(e, new Object()) &#x3D;&#x3D; null;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="注1：Arrays-copyOf-r-i"><a href="#注1：Arrays-copyOf-r-i" class="headerlink" title="注1：Arrays.copyOf(r, i)"></a>注1：Arrays.copyOf(r, i)</h1><p>以r为基础返回一个长度为i的数组。</p>
<ul>
<li>若i&lt;r.length则r发生截断。实际返回的数组为r中索引为[0,i-1]的元素。</li>
<li>若i==r.length，则返回的数组与r相等。</li>
<li>若i&gt;r.length，返回的数组中索引为[0, r.length-1]的元素为r中对应位置的元素，索引为[r.length, i-1]的元素以null填充。</li>
</ul>
<p>无论如何，返回的数组都是新生成的，与r不存在引用关系。返回的数组中的元素是r中元素的浅拷贝。</p>
<h1 id="注2：finishToArray-r-it"><a href="#注2：finishToArray-r-it" class="headerlink" title="注2：finishToArray(r, it)"></a>注2：finishToArray(r, it)</h1><p>finishToArray(r, it)会以r为基础声明一个长度足够的新数组r2，并将it中超出预期仍未取完的元素添加至r2，而后返回r2。</p>
<h1 id="注3：System-arraycopy-r-0-a-0-i"><a href="#注3：System-arraycopy-r-0-a-0-i" class="headerlink" title="注3：System.arraycopy(r, 0, a, 0, i)"></a>注3：System.arraycopy(r, 0, a, 0, i)</h1><p>参数含义依次为：</p>
<ol>
<li>r: 待复制的源数组。</li>
<li>0: 源数组中开始复制的索引。</li>
<li>a: 复制目标数组。</li>
<li>0: 目标数组中接收元素的起始索引。</li>
<li>i: 复制的元素个数。</li>
</ol>
<h1 id="注4：toArray-T-a-的调用示例"><a href="#注4：toArray-T-a-的调用示例" class="headerlink" title="注4：toArray(T[] a)的调用示例"></a>注4：toArray(T[] a)的调用示例</h1><p>示例1：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashSet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; set &#x3D; new HashSet&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;reimu&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;wang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;String&gt; collection &#x3D; new UnmoCol&lt;String&gt;(set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String[] a &#x3D; &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String[] a1 &#x3D; collection.toArray(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String e : a1) System.out.println(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr><tr><td class="code"><pre><span class="line">null</span></pre></td></tr><tr><td class="code"><pre><span class="line">4</span></pre></td></tr></table></figure>

<hr>
<p>示例2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.collectiontest.main;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashSet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; set &#x3D; new HashSet&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;reimu&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;wang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;String&gt; collection &#x3D; new UnmoCol&lt;String&gt;(set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String[] a &#x3D; &#123;&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        String[] a1 &#x3D; collection.toArray(a);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for (String e : a1) System.out.println(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reimu</span></pre></td></tr><tr><td class="code"><pre><span class="line">wang</span></pre></td></tr></table></figure>

<h1 id="注5-toString-调用示例"><a href="#注5-toString-调用示例" class="headerlink" title="注5 toString()调用示例"></a>注5 toString()调用示例</h1><p><strong>自包含测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;Collection&gt; collection &#x3D; new AbstractCollectionTest&lt;Collection&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        collection.add(collection);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(collection);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[(this Collection)]</span></pre></td></tr></table></figure>

<p><strong>非自包含情况测试</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Collection;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.HashSet;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Set;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Main &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public static void main(String[] args) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Set&lt;String&gt; set &#x3D; new HashSet&lt;String&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;reimu&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        set.add(&quot;wang&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Collection&lt;String&gt; collection &#x3D; new AbstractCollectionTest&lt;String&gt;(set);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        System.out.println(collection);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[reimu, wang]</span></pre></td></tr></table></figure>

<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>本类直接继承的类</em></strong></p>
<ul>
<li><a href="">java.lang.Object</a></li>
</ul>
<p><strong><em>直接继承本类的类</em></strong></p>
<ul>
<li><a href="">java.util.ArrayDeque&lt;E&gt;</a></li>
<li><a href="">java.util.concurrent.ConcurrentLinkedDeque&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接继承本类的内部类</em></strong></p>
<ul>
<li><a href="">静态成员内部类java.lang.ProcessEnvironment.CheckedValues</a></li>
<li><a href="">实例成员内部类java.util.HashMap&lt;K,V&gt;.Values</a></li>
<li><a href="">实例成员内部类java.util.IdentityHashMap&lt;K,V&gt;.Values</a></li>
<li><a href="">实例成员内部类java.util.WeakHashMap&lt;K,V&gt;.Values</a></li>
<li><a href="">实例成员内部类java.util.TreeMap&lt;K,V&gt;.Values</a></li>
<li><a href="">实例成员内部类java.util.Hashtable&lt;K,V&gt;.ValueCollection</a></li>
<li><a href="">实例成员内部类java.util.EnumMap&lt;K extends Enum&lt;K&gt;, V&gt;.Values</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentHashMap&lt;K, V&gt;.Values</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentSkipListMap&lt;K,V&gt;.Values&lt;E&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Queue&amp;lt;E&amp;gt;</title>
    <url>/2017/06/16/JavaJDK7%E6%BA%90%E7%A0%81-javautilQueueE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Queue&lt;E&gt; extends Collection&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在不超过队列容量限制的情况下，将e插入到队列中(具体的插入位置依队列的优先规则而定)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若插入成功则返回true。若因容量不足而插入失败则抛出IllegalStateException。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的offer(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 因容量限制e此时无法被插入队列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因其类型禁止被插入队列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且队列禁止包含null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入队列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean add(E e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在不超过队列容量限制的情况下，将e插入到队列中(具体的插入位置依队列的优先规则而定)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若插入成功则返回true。若因容量不足而插入失败则返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当队列有容量限制时，本方法通常优于add(E e)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因为对于有容量限制的队列而言，因容量已满无法插入元素是正常情况，不需要抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的add(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因其类型禁止被插入队列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且队列禁止包含null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入队列。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean offer(E e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与父接口Collection中的remove(Object o)方法是重载关系，不是重写关系，注意不要混淆。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回并移除队列的头元素(头元素依队列的优先规则计算而得)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与poll()方法的差异只体现在队列为空时：本方法抛出异常，poll()方法返回null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的poll()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException 队列为空</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回并移除队列的头元素(头元素依队列的优先规则计算而得)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与remove()方法的差异只体现在队列为空时：本方法返回null，remove()方法抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的remove()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E poll();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回但不移除队列的头元素(头元素依队列的优先规则计算而得)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与peek()方法的差异只体现在队列为空时：本方法抛出异常，peek()方法返回null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的peek()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException 队列为空</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E element();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回但不移除队列的头元素(头元素依队列的优先规则计算而得)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与element()方法的差异只体现在队列为空时：本方法返回null，element()方法抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的element()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E peek();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接父接口</em></strong></p>
<ul>
<li><a href="/2017/05/23/JavaJDK7源码-javautilCollectionE/">java.util.Collection&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="/2017/06/30/JavaJDK7源码-javautilAbstractQueueE/">java.util.AbstractQueue&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员。Queue&lt;E&gt;中的E表示Queue中元素的类型。</p>
<hr>
<p>在数据结构中，队列是一种按照设定好的优先规则进行排序的集合，移除时只能移除头部元素。这是广义上队列的定义。</p>
<p>狭义的队列，也是我们通常所说的队列，优先规则为入队的时间先后：入队越早，优先级越高。此时上文中的广义定义退化为FIFO(first-in-first-out)。</p>
<p>而广义的队列中的优先规则则可以是任意规则，比如我们甚至可以将狭义的优先规则颠倒过来：优先规则的依据依然是时间，只不过入队越晚，优先级越高。此时队列实现的就是LIFO(last-in-first-out)，也就是栈的功能了。所以从广义的角度上讲，栈其实是广义队列的一种。</p>
<p>Java中的Queue接口约束的是广义的队列。不过除非特殊声明，我们通常提到Java中的Queue接口时，指得依然是狭义上的队列，并且除非真的有必要，也没必要去实现广义上的队列，徒增程序的复杂性。</p>
<p>正因为Queue接口将优先规则交由实现类自行规定，因此实现类应在其文档中将自身采用的优先规则写明，以免其使用者产生误解。</p>
<hr>
<p>与Collection接口相比，Queue接口提供了额外的插入，取出，校验操作。在操作失败时每个方法的返回值可能为以下两种返回形式之一：</p>
<ul>
<li>抛出一个异常</li>
<li>返回一个表示失败的值(依操作不同为null或false)</li>
</ul>
<p><img src="/images/blog_pic/JavaJDK7%E6%BA%90%E7%A0%81/javautilQueueE/0.jpg" alt="0.jpg"></p>
<p>其中抛出异常的那一组方法继承自父接口Collection(或沿用Collection接口的思路)，而返回特殊值的那一组是Queue接口额外添加的。</p>
<p>这是由Java的异常机制所致的。以添加元素为例，对于普通的集合而言，集合不足以容纳新元素是一种异常情况。而对于队列而言，因队列已满无法插入却属于正常情况(例如元素因无法插入固定容量的队列而需阻塞时)。为了解决这个矛盾，只能在遵循父接口的插入规范的基础上(毕竟抛出异常才是通常情况，不能因为队列这个特例改变Collection这一级别的设定)，重新定义符合自身逻辑规范的方法。</p>
<p>上图中还有一个需要注意的点就是poll()方法及peek()方法在队列为空时返回的都是null。这就意味着若这两个方法返回了null，我们是无法确定到底是队列为空了还是返回的元素就是null。因此虽然Queue接口未做强制规范，其实现类往往也会禁止队列包含空元素。</p>
<p>这6个方法就是全部显式声明在Queue接口中的方法了，其他方法均默认继承父接口Collection。这也从另一个侧面说明了这6个方法之于Queue接口的特殊性。</p>
<hr>
<p>Java中的队列大多被用于并发环境下的阻塞队列。不过Queue接口中并未做并发规范，该规范均被定义在了Queue接口的直接子接口BlockingQueue中。</p>
<hr>
<p>在equals(Object o)方法及hashCode()方法的设计上，Queue接口并未强制要求其实现类必须重写(因为优先规则实际上就是一种比较，没必要再做特别规范引起程序员的注意了)，默认情况下将调用公共父类Object中的equals(Object o)方法及hashCode()方法。</p>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="">java.util.Deque&lt;E&gt;</a></li>
<li><a href="">java.util.concurrent.BlockingQueue&lt;E&gt;</a></li>
<li><a href="">java.util.concurrent.ConcurrentLinkedQueue&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的内部类</em></strong></p>
<ul>
<li><a href="">静态成员内部类java.util.Collections.AsLIFOQueue&lt;E&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Set&amp;lt;E&amp;gt;</title>
    <url>/2017/06/13/JavaJDK7%E6%BA%90%E7%A0%81-javautilSetE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Set&lt;E&gt; extends Collection&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回set包含的元素个数(即set的势)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set包含的元素个数大于Integer.MAX_VALUE，则返回Integer.MAX_VALUE。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int size();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set不包含元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set包含o则返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更具体的说，当且仅当set包含至少一个元素e，满足(o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))，返回true</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的containsAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与set不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且set不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean contains(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个set的迭代器，该迭代器默认从头开始迭代。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 通常情况下该迭代器不保证数据有序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;E&gt; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含set所有元素的数组。若set是有序的(即迭代器返回的结果有序)，则返回的数组必须有同样的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与set之间不存在引用关系(即使set的底层就是基于数组实现的)，数组中的元素是set中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的toArray(T[] a)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object[] toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含set所有元素的数组。返回数组的类型即为a的类型。若set是有序的(即迭代器返回的结果有序)，则返回的数组必须有同样的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体规则的伪代码为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * if (a.length &lt; set.size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     不修改a，而是以a的类型新建长度为set.size()的数组并填入set中的值，随后返回这个新生成的数组。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else if (a.length &#x3D;&#x3D; set.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     将返回的结果直接填入a后返回a(若a中已有值，则a中的原值会被覆盖)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引在[0, set.size() -1]的元素会被set对应位置的元素覆盖。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引 &#x3D;&#x3D; set.size()的元素会被置为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组中后续元素(如果有的话)不变。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set不允许包含空元素，则本方法此时可用来计算set的长度：返回的数组第一次出现null的索引即为set的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与set之间不存在引用关系(即使set的底层就是基于数组实现的)，数组中的元素是set中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 小例子：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * String[] y &#x3D; x.toArray(new String[0]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * x是一个元素类型为String的set，则上述语句会将x中的元素依序复制一份浅拷贝到数组y。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关于本方法与前文介绍的toArray()方法，需明确：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * set.toArray()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * set.toArray(new Object[s])</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当s &lt; set.size()时，上述两行代码的效果等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的toArray()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArrayStoreException a的类型set不支持。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException null&#x3D;&#x3D;a。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; T[] toArray(T[] a);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若e在set中不存在则将e插入到set中。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更一般的说，若set不包含e2这种元素：(e&#x3D;&#x3D;null ? e2&#x3D;&#x3D;null : e.equals(e2))，则将e插入set。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set已包含e，本方法不会改变set并返回false。本方法配合set的构造函数，可保证set永远不会包括重复元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 以上的规定不意味着在满足不重复的前提下set必须接受所有元素，set可能会拒绝添加任意特定元素，包括null，并抛出一个异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的addAll(Collection&lt;? extends E&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException set不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因其类型禁止被插入set。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且set禁止包含null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入set。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean add(E e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除set中符合条件的元素e：(o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若本方法改变了set则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 一旦调用本方法后，set将不会再包含与o相等的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的removeAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException set不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与set不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且set不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean remove(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set包含c中所有元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 特别的，若c同样为Set且为set的子集，则返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的contains(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与set不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且set不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean containsAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在保证set中不存在重复元素的前提下，将c中所有元素插入set。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 特别的，若c同样为一个Set，本方法实际上是将set改造为了该set与c的并集。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 未定义发生如下事件时的应对策略：在操作过程中c发生变化。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的add(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException set不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因其类型禁止被插入set。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且set不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入set。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean addAll(Collection&lt;? extends E&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 保留set中与c的交集元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的removeAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException set不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与set不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              set中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean retainAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 从set中移除所有与c的交集元素(求差集)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若set因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的remove(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的retainAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException set不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与set不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              set中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean removeAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 清空set。该方法执行完成后set将为空。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException set不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较及哈希操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较o与set是否相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 如下情况判断为相等：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o为Set，o与set长度相同，set中有o中所有的元素(或者也可以反过来说，o中有set中所有的元素)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 只要满足该相等条件，Set接口的不同实现之间也可判断为相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean equals(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较及哈希操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回set的hash code。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * set的hash code被定义为set中所有元素的hash code的和。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 空元素的hash code被定义为0。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若s1与s2为两个Set，这确保了s1.equals(s2)即有s1.hashCode()&#x3D;&#x3D;s2.hashCode()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 满足了Java语言规范中两个对象equals(Object o)方法相等即要有hashCode()方法相等的规范。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接父接口</em></strong></p>
<ul>
<li><a href="/2017/05/23/JavaJDK7源码-javautilCollectionE/">java.util.Collection&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="/2017/06/28/JavaJDK7源码-javautilAbstractSetE/">java.util.AbstractSet&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员，是一种没有重复元素的集合，顾名思义，本接口定义的是数学中Set的概念。Set&lt;E&gt;中的E代表Set中元素的类型。</p>
<p>更具体的说，Set中的元素e1,e2不存在如下情况：e1.equals(e2)为true。因此Set中最多只能有一个元素为null。</p>
<hr>
<p>较之父接口Collection，本接口并未添加新的方法。不过对于很多方法的含义都做了特化。为了便于写文档，因此均会在本接口中重复写一遍。</p>
<p>这些含义上的具体化大致集中于如下3部分：</p>
<ul>
<li>构造函数：经由Set的构造函数构造出的Set必须不能包含重复元素</li>
<li>add()方法</li>
<li>equals()方法及hashCode()方法</li>
</ul>
<hr>
<p>当以容易改变的对象(尤其是这种改变会影响到equals()方法的判定时)作为Set的元素时必须要提高警惕。因为一旦成功被放入Set，再修改元素值导致元素间的重复Set本身是无能为力的。因此Set禁止自包含。</p>
<hr>
<p>不同Set的实现类往往还会附加不同的，更为具体的限制。例如，某些实现类禁止包含空元素，某些实现类会限制其所包含的元素的类型。</p>
<p>试图插入一个不合规的元素会抛出一个运行时异常，例如NullPointerException，ClassCastException。</p>
<p>试图查询一个不合规的元素可能会抛出一个异常，或者仅仅只是返回false。</p>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="">java.util.SortedSet&lt;E&gt;</a></li>
<li><a href="">com.sun.corba.se.impl.orbutil.graph.Graph</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="">java.util.HashSet&lt;E&gt;</a></li>
<li><a href="">java.util.SortedSet&lt;E&gt;</a></li>
<li><a href="">java.util.LinkedHashSet&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的内部类</em></strong></p>
<ul>
<li><a href="">静态成员内部类java.util.Collections.CheckedSet&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.util.Collections.SetFromMap&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.util.Collections.SynchronizedSet&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.util.Collections.UnmodifiableSet&lt;E&gt;</a></li>
<li><a href="">静态成员内部类-静态成员内部类java.util.Collections.CheckedMap&lt;K, V&gt;.CheckedEntrySet&lt;K, V&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.List&amp;lt;E&amp;gt;</title>
    <url>/2017/05/25/JavaJDK7%E6%BA%90%E7%A0%81-javautilListE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface List&lt;E&gt; extends Collection&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回列表包含的元素个数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表包含的元素个数大于Integer.MAX_VALUE，则返回Integer.MAX_VALUE。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int size();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表不包含元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表包含o则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更具体的说，当且仅当列表包含至少一个元素e，满足(o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))时，返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的containsAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且列表不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean contains(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个列表的迭代器，该迭代器默认从头开始迭代。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 该迭代器遍历得到的元素有序(与列表的固有顺序相同)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后文介绍的listIterator()方法是本方法基于List接口的特化，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后文介绍的listIterator(int index)方法是本方法基于List接口的特化，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;E&gt; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含列表所有元素的数组。该数组的顺序与列表的固有顺序相同。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与列表之间不存在引用关系(即使列表是基于数组的)，数组中的元素是列表中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的toArray(T[] a)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object[] toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含列表所有元素的数组。该数组的顺序与列表的固有顺序相同。返回数组的类型即为a的类型。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体规则的伪代码为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * if (a.length &lt; list.size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     不修改a，而是以a的类型新建长度为list.size()的数组并填入列表中的值，随后返回这个新生成的数组。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else if (a.length &#x3D;&#x3D; list.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     将返回的结果直接填入a后返回a(若a中已有值，则a中的原值会被覆盖)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引在[0, list.size() -1]的元素会被列表对应位置的元素覆盖。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引 &#x3D;&#x3D; list.size()的元素会被置为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组中后续元素(如果有的话)不变。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表不允许包含空元素，则本方法此时可用来计算列表的长度：返回的数组第一次出现null的索引即为列表的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与列表之间不存在引用关系(即使列表的底层就是基于数组实现的)，数组中的元素是列表中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 小例子：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * String[] y &#x3D; x.toArray(new String[0]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * x是一个元素类型为String的列表，则上述语句会将x中的元素依序复制一份浅拷贝到数组y。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关于本方法与前文介绍的toArray()方法，需明确：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.toArray()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.toArray(new Object[s])</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当s &lt; list.size()时，上述两行代码的效果等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的toArray()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArrayStoreException a的类型列表不支持。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException null&#x3D;&#x3D;a。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; T[] toArray(T[] a);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将e加入列表的末尾。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表因本方法而改变则返回true，反之则返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即便实现类支持本方法，它也可能会做某种限制(禁止插入null，限制可插入的元素类型等)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的addAll(Collection&lt;? extends E&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的方法addAll(int index, Collection&lt;? extends E&gt; c)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的方法add(int index, E element)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因其类型禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且列表禁止包含null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean add(E e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除o在列表中第一次出现的位置的元素。即：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i))</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 其中为i满足相等条件的最小索引值。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若本方法改变了列表则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的removeAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的remove(int index)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且列表不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean remove(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表包含c中所有元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的contains(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且列表不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean containsAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入列表末尾，插入顺序为c的迭代器取出的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法未定义如下事件发生时的解决策略：在将c中的元素添加至列表的过程中c发生变化。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这也意味着如下事件的解决策略同样未定义：将一个非空列表添加至自身。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的add(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的方法addAll(int index, Collection&lt;? extends E&gt; c)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的方法add(int index, E element)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因其类型禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且列表不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean addAll(Collection&lt;? extends E&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入列表的指定位置(index)，插入顺序为c的迭代器取出的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 原index位置及以后位置的元素顺次向后移动，空出装载c的空间。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法未定义如下事件发生时的解决策略：在将c中的元素添加至列表的过程中c发生变化。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这也意味着如下事件的解决策略同样未定义：将一个非空列表添加至自身。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.addAll(collection);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.addAll(list.size(), collection);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 二者等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的add(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的方法addAll(Collection&lt;? extends E&gt; c)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的方法add(int index, E element)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因其类型禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且列表不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean addAll(int index, Collection&lt;? extends E&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 从列表中移除所有与c的交集元素(求差集)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的remove(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的remove(int index)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的retainAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              列表中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean removeAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 保留列表中与c的交集元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的removeAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              列表中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean retainAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 清空列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较及哈希操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较o与列表是否相等。当且仅当满足如下所有情况时返回true：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o为一个List。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o与list长度相同。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * o与list所有对应位置上的元素相等(e1&#x3D;&#x3D;null ? e2&#x3D;&#x3D;null : e1.equals(e2))。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 换句话说，当两个列表在相同位置上的元素均相等，则认为二者相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 只要满足如上相等的定义，List接口的不同实现类也可被认定为相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的hashCode()方法成对出现，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean equals(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Collection&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较及哈希操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回列表的hash code值。其计算方式如下：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * int hashCode &#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * for (E e : list)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     hashCode &#x3D; 31 * hashCode + (e &#x3D;&#x3D; null ? 0 : e.hashCode());</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这种计算方式可以保证任意list1.equals(list2)有list1.hashCode()&#x3D;&#x3D;list2.hashCode()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的equals(Object o)方法成对出现，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 精确定位访问操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回列表中索引位置为index的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E get(int index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 精确定位修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 用element替换列表索引值为index的元素。方法返回被替换的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException element的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException element&#x3D;&#x3D;null且列表禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException element因其某些属性禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E set(int index, E element);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 精确定位修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将element插入列表的index下标处。原来处于index下标及以后的元素均向后移动一个位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.add(&quot;1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.add(list.size(), &quot;1&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 等效</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的add(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的方法addAll(Collection&lt;? extends E&gt; c)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的方法addAll(int index, Collection&lt;? extends E&gt; c)很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException element的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException element&#x3D;&#x3D;null且列表禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException element因其某些属性禁止被插入列表。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void add(int index, E element);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 精确定位修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除列表中索引值为index的元素。后续元素左移一个位置。返回被移除的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的remove(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的removeAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 列表不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt;&#x3D; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E remove(int index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 搜索操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回o在列表中第一次出现的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表不包含o则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更具体的说，返回满足如下条件索引值最小的元素的索引：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i)))。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不存在这样的元素则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的lastIndexOf(Object o)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且列表禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int indexOf(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 搜索操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回o在列表中最后一次出现的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若列表不包含o则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更具体的说，返回满足如下条件索引值最大的元素的索引：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? get(i)&#x3D;&#x3D;null : o.equals(get(i)))。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若不存在这样的元素则返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的indexOf(Object o)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与列表不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且列表禁止包含空元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int lastIndexOf(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 列表迭代器</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个列表按固有顺序从头开始迭代的列表迭代器。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是前文介绍的iterator()方法基于List接口的特化，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的listIterator(int index)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListIterator&lt;E&gt; listIterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 列表迭代器</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个列表按固有顺序迭代的列表迭代器。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 迭代开始时游标位于索引[index-1,index]之间。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即使用本方法得到列表迭代器后，若第一次调用的是listIterator.next()，返回的元素的索引是index；</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同理，若第一次调用的是listIterator.previous()，返回的元素的索引为index-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是前文介绍的iterator()方法基于List接口的特化，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的listIterator()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(index &lt; 0 || index &gt; size)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    ListIterator&lt;E&gt; listIterator(int index);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 视图</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回列表的一部分，索引值区间：[fromIndex,toIndex)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 特别的，若fromIndex&#x3D;&#x3D;toIndex，则返回空列表(不是null)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的列表是原列表的一个视图，前者是后者的一部分，并未从后者中分离出去。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此作用在前者之上的修改会反映在后者上，反之亦然。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 使用本方法的好处在于：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当我们操作列表的一部分时，可以直接在这一部分内部操作(仿佛这就是一个新的列表)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 而无需被各种索引的边界分散过多的注意。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 例如，如果想批量移除列表中的一部分，可按如下操作：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list.subList(fromIndex, toIndex).clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 同理，所有本接口的方法及所有java.util.Collections类提供的静态方法</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 均支持本方法返回的视图作为一个独立的列表调用。例如：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list2 &#x3D; list.subList(1, 2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * list2.get(0);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 此时取得的元素即为list.get(1)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若在生成视图后原列表发生了结构性的变化(例如长度发生了变化)</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 则已生成的视图将被重置为未定义的状态。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IndexOutOfBoundsException 索引越界(fromIndex &lt; 0 || toIndex &gt; size || fromIndex &gt; toIndex)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    List&lt;E&gt; subList(int fromIndex, int toIndex);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接父接口</em></strong></p>
<ul>
<li><a href="/2017/05/23/JavaJDK7源码-javautilCollectionE/">java.util.Collection&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractListE/">java.util.AbstractList&lt;E&gt;</a></li>
<li><a href="/2017/07/06/JavaJDK7源码-javautilArrayListE/">java.util.ArrayList&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员。List(列表)又名Sequence(序列)。是一种有序的集合。</p>
<p>使用者能精确的知道列表中每个元素的位置，能通过元素在列表中的索引访问或搜索元素。和数组一样，列表的索引从0开始。</p>
<hr>
<p>不同于Set，列表允许重复元素。更通俗的说，若设e1,e2为列表中的两个元素，则允许e1.equals(e2)。特别的，若列表中允许空元素，则其也允许复数个空元素。</p>
<p>本接口不支持如下这种列表：禁止重复，且在试图插入重复元素时抛出运行时异常。</p>
<hr>
<p>较之父接口Collection，本接口在如下方法中规定了额外的规范：</p>
<ul>
<li>iterator()</li>
<li>add(E e)</li>
<li>remove(Object o)</li>
<li>equals(Object o)</li>
<li>hashCode()</li>
</ul>
<p>为方便起见，父接口Collection中的其他方法本接口也会再写一遍。</p>
<hr>
<p>较之父接口Collection，本接口增加了4个可基于索引访问元素的方法:</p>
<ul>
<li>get(int index)</li>
<li>set(int index, E element)</li>
<li>add(int index, E element)</li>
<li>remove(int index)</li>
</ul>
<p>对本接口的某些实现而言(例如LinkedList)，上述操作的时间复杂度与索引值正相关(链表为取到某个索引值的元素需在链式结构中逐个向后查找)。因此在不确定本接口的具体实现时，比起使用上述基于索引的访问元素的方法，更推荐使用迭代器。</p>
<hr>
<p>较之父接口Collection，本接口新增了一个特殊的迭代器ListIterator，它是Iterator的子接口。</p>
<p>较之父接口Iterator，ListIterator增加了新的功能：</p>
<ul>
<li>元素插入</li>
<li>元素替换</li>
<li>双向访问</li>
</ul>
<p>较之父接口Collection，本接口新增了一个方法新建从头开始迭代的ListIterator，同时还新增了另一个新建从特定索引开始的ListIterator的方法。</p>
<hr>
<p>较之父接口Collection，本接口新增了两个方法用于搜索特定的对象：</p>
<ul>
<li>indexOf(Object o)</li>
<li>lastIndexOf(Object o)</li>
</ul>
<p>从性能的角度考虑，这两个方法应谨慎使用。在很多实现中，这两个方法采用代价昂贵的顺序查找(linear search)。</p>
<hr>
<p>较之父接口Collection，本接口提供了两个方法用于在任意位置高效的插入或删除复数个元素：</p>
<ul>
<li>addAll(int index, Collection&lt;? extends E&gt; c)</li>
<li>removeAll(Collection&lt;?&gt; c)</li>
</ul>
<hr>
<p>当列表允许包含自身以作为自身的元素时，这种列表中的equals(Object o)方法及hashCode()方法往往难于定义。</p>
<hr>
<p>本接口的某些实现会对它们所能包含的元素有所限制。</p>
<p>例如，一些实现禁止包含空元素，一些实现对其所能包含的元素的类型有限制。</p>
<p>试图插入一个不合规的元素会抛出一个运行时异常，例如NullPointerException，ClassCastException。</p>
<p>依具体实现不同试图查询一个不合规的元素可能会抛出一个异常，或者仅仅只是返回false。</p>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="">com.sun.org.apache.xerces.internal.xs.datatypes.ObjectList</a></li>
<li><a href="">com.sun.org.apache.xerces.internal.xs.datatypes.ByteList</a></li>
<li><a href="">com.sun.org.apache.xerces.internal.xs.ShortList</a></li>
<li><a href="">com.sun.org.apache.xerces.internal.xs.StringList</a></li>
<li><a href="">com.sun.org.apache.xerces.internal.xs.XSObjectList</a></li>
<li><a href="">com.sun.org.apache.xerces.internal.xs.XSNamespaceItemList</a></li>
<li><a href="">com.sun.corba.se.spi.ior.IOR</a></li>
<li><a href="">com.sun.corba.se.spi.ior.IORTemplate</a></li>
<li><a href="">com.sun.corba.se.spi.ior.IORTemplateList</a></li>
<li><a href="">com.sun.corba.se.spi.ior.TaggedProfileTemplate</a></li>
<li><a href="">org.w3c.dom.ls.LSInput.LSInputList</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="">java.util.LinkedList&lt;E&gt;</a></li>
<li><a href="">java.util.Vector&lt;E&gt;</a></li>
<li><a href="">java.util.concurrent.CopyOnWriteArrayList&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的内部类</em></strong></p>
<ul>
<li><a href="">静态成员内部类java.util.Collections.CheckedList&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.util.Collections.SynchronizedList&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.util.Collections.UnmodifiableList&lt;E&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.ListIterator&amp;lt;E&amp;gt;</title>
    <url>/2017/05/25/JavaJDK7%E6%BA%90%E7%A0%81-javautilListIteratorE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface ListIterator&lt;E&gt; extends Iterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当向后遍历还有元素时返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 换句话说，返回ture说明仍然可以通过next()取到元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若在本方法返回false时继续调用next()，则next()会抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean hasNext();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回listIterator当前游标后一个元素，同时游标后移一位。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在迭代list的过程中本方法可能会被反复调用，或者与previous()交替被调用。以此控制向前或向后迭代。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 连续执行的情况下，以下语句均会返回当前游标的后一个元素：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 连续执行的情况下，以下语句均会返回当前游标的前一个元素：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException 游标所指的位置之后已无元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E next();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当向前遍历还有元素时返回true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 换句话说，返回ture说明仍然可以通过previous()取到元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若在本方法返回false时继续调用previous()，则previous()会抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean hasPrevious();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回listIterator当前游标前一个元素，同时游标前移一位。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 在迭代list的过程中本方法可能会被反复调用，或者与next()交替被调用。以此控制向前或向后迭代。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 连续执行的情况下，以下语句均会返回当前游标的后一个元素：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 连续执行的情况下，以下语句均会返回当前游标的前一个元素：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * listIterator.next();</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException 游标所指的位置之前已无元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E previous();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回listIterator当前游标后一个元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本操作不会移动游标。即本方法会返回下次调用next()时返回的元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 特别的，当游标位于list末尾时，调用本方法不会抛出异常，而是会返回list的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int nextIndex();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回listIterator当前游标前一个元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本操作不会移动游标。即本方法会返回下次调用previous()时返回的元素的索引。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 特别的，当游标位于list最左边时，调用本方法不会抛出异常，而是会返回-1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int previousIndex();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 改变操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.util.Iterator&lt;E&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除上一次由next()或previous()返回的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法必须与next()或previous()一一配对。且每个配对之间不能调用add(E e)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException listIterator不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException：本方法未与next()或previous()一一配对，或配对之间调用了add(E e)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 改变操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 用e覆盖上一次由next()或previous()返回的元素的位置的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法在调用前必须调用一次next()或previous()，否则不知道该覆盖哪个位置的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 且在本方法与最后一次next()或previous()之间不能调用add(E e)或remove()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException listIterator不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 本方法在调用前没有调用next()或previous()，或在本方法与最后一次next()或previous()之间调用add(E e)或remove()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void set(E e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 改变操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将e插入当前游标所在位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若list为空，则e将成为list的第一个元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * e插入后，当前游标位于e之后的位置。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此插入后第一次如果调用的是next()将返回插入前游标所指的下一个元素；第一次如果调用的是previous()将返回e。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用该方法后，若调用nextIndex()或previousIndex()，和未调用该方法之前相比值均会增加1。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException listIterator不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因为其所属的类禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入list。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void add(E e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接父接口</em></strong></p>
<ul>
<li><a href="/2017/05/24/JavaJDK7源码-javautilIteratorE/">java.util.Iterator&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员。是专为List接口设计的迭代器。可以双向迭代并修改list，并可获得迭代器当前的游标位置。</p>
<p>与父接口Iterator不同的是，ListIterator没有当前元素的概念。它的游标位置在两个元素之间。当调用previous()时将返回紧邻游标之前的一个元素同时游标前移一位；当调用next()时将返回紧邻游标之后的一个元素同时游标后移一位。</p>
<p>若list的长度为n，则有n+1个位置可供放置游标。形如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">                     Element(0)   Element(1)   Element(2)   ... Element(n-1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">cursor positions:  ^            ^            ^            ^                  ^</span></pre></td></tr></table></figure>

<p>游标无法定义remove()及set(E e)。因为这两个方法操作的是元素本身而游标指向的是元素之间的位置。这两个方法必须与next()或previous()配对(remove()要求一一配对而set(E e)不需要)，其操作的元素即为配对方法返回的元素。</p>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Iterator&amp;lt;E&amp;gt;</title>
    <url>/2017/05/24/JavaJDK7%E6%BA%90%E7%A0%81-javautilIteratorE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.NoSuchElementException;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Iterator&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合还有元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更清晰的表述为：若iterator游标当前所指向的位置还有元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若在本方法返回false时继续调用next()方法，则next()方法会抛出异常。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean hasNext();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回iterator游标当前所指向的元素，随后游标后移一位。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NoSuchElementException iterator游标当前所指向的位置已无元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    E next();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法可选，实现类可依自身情况决定是否真的需要实现。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除iterator游标当前所指元素的前一个元素。即上一次调用next()方法所返回的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此，调用本方法之前必须调用一次next()方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 调用一次next()方法后多次调用本方法是不允许的。本方法必须与next()方法一一配对。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这么设计是符合逻辑的，因为我们一般只有先用next()方法得到元素后，才能知道该元素是否需要被移除。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此移除的是游标的前一个元素，而非当前游标正指向的这个我们不知道的元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 实现类未实现本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 本方法未与next()方法一一配对。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void remove();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="/2017/05/25/JavaJDK7源码-javautilListIteratorE/">java.util.ListIterator&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的内部类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractListE/">实例成员内部类java.util.AbstractList&lt;E&gt;.Itr</a></li>
<li><a href="/2017/07/06/JavaJDK7源码-javautilArrayListE/">实例成员内部类java.util.ArrayList&lt;E&gt;.Itr</a></li>
<li><a href="/2017/09/05/JavaJDK7源码-javautilVectorE/">实例成员内部类java.util.Vector&lt;E&gt;.Itr</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员，用于迭代集合中的元素。Iterator&lt;E&gt;中的E代表该迭代器(iterator)返回的元素类型。</p>
<p>Enumeration接口诞生于JDK1.0，而Iterator接口诞生于JDK1.2，是替代Enumeration的改进版本：即二者实现的功能相同，因此在日常开发中更推荐使用Iterator。Iterator与Enumeration的不同之处可归纳为如下两点：</p>
<ul>
<li>在迭代过程中，Iterator允许删除集合中的元素，而Enumeration则不能</li>
<li>Iterator使用更为精简易读的方法名</li>
</ul>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="">javax.xml.stream.XMLEventReader</a></li>
<li><a href="">com.sun.corba.se.pept.transport.ContactInfoListIterator</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="">java.util.Scanner</a></li>
<li><a href="">com.sun.org.apache.xerces.internal.util.XMLAttributesIteratorImpl</a></li>
</ul>
<p><strong><em>直接实现本接口的非public类</em></strong></p>
<ul>
<li><a href="">javax.imageio.spi.FilterIterator&lt;T&gt;</a></li>
<li><a href="">javax.imageio.spi.PartialOrderIterator</a></li>
<li><a href="">com.sun.imageio.plugins.jpeg.ImageTypeIterator</a></li>
</ul>
<p><strong><em>直接实现本接口的内部类</em></strong></p>
<ul>
<li><a href="">实例成员内部类java.util.LinkedList&lt;E&gt;.DescendingIterator</a></li>
<li><a href="">实例成员内部类java.util.PriorityQueue&lt;E&gt;.Itr</a></li>
<li><a href="">实例成员内部类java.util.ArrayDeque&lt;E&gt;.DeqIterator</a></li>
<li><a href="">实例成员内部类java.util.ArrayDeque&lt;E&gt;.DescendingIterator</a></li>
<li><a href="">实例成员内部类java.util.HashMap&lt;K, V&gt;.HashIterator&lt;E&gt;</a></li>
<li><a href="">实例成员内部类java.util.TreeMap&lt;K, V&gt;.PrivateEntryIterator&lt;T&gt;</a></li>
<li><a href="">实例成员内部类java.util.WeakHashMap&lt;K, V&gt;.HashIterator&lt;T&gt;</a></li>
<li><a href="">实例成员内部类java.util.IdentityHashMap&lt;K, V&gt;.IdentityHashMapIterator&lt;T&gt;</a></li>
<li><a href="">实例成员内部类java.util.LinkedHashMap&lt;K, V&gt;.LinkedHashIterator&lt;T&gt;</a></li>
<li><a href="">实例成员内部类java.util.Hashtable&lt;K, V&gt;.Enumerator&lt;T&gt;</a></li>
<li><a href="">实例成员内部类java.util.EnumMap&lt;K extends Enum&lt;K&gt;, V&gt;.EnumMapIterator&lt;T&gt;</a></li>
<li><a href="">实例成员内部类java.util.JumboEnumSet&lt;E extends Enum&lt;E&gt;&gt;.EnumSetIterator&lt;E extends Enum&lt;E&gt;&gt;</a></li>
<li><a href="">实例成员内部类java.util.RegularEnumSet&lt;E extends Enum&lt;E&gt;&gt;.EnumSetIterator&lt;E extends Enum&lt;E&gt;&gt;</a></li>
<li><a href="">实例成员内部类java.util.ServiceLoader&lt;S&gt;.LazyIterator</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ArrayBlockingQueue&lt;E&gt;.Itr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentLinkedQueue&lt;E&gt;.Itr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.LinkedBlockingQueue&lt;E&gt;.Itr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.LinkedTransferQueue&lt;E&gt;.Itr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.PriorityBlockingQueue&lt;E&gt;.Itr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.DelayQueue&lt;E extends Delayed&gt;.Itr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentLinkedDeque&lt;E&gt;.AbstractItr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.LinkedBlockingDeque&lt;E&gt;.AbstractItr</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentHashMap&lt;K, V&gt;.EntryIterator</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentHashMap&lt;K, V&gt;.KeyIterator</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentHashMap&lt;K, V&gt;.ValueIterator</a></li>
<li><a href="">实例成员内部类java.util.concurrent.ConcurrentSkipListMap&lt;K, V&gt;.Iter&lt;T&gt;</a></li>
<li><a href="">实例成员内部类javax.xml.soap.MimeHeaders.MatchingIterator</a></li>
<li><a href="">实例成员内部类javax.print.attribute.standard.PrinterStateReasons.PrinterStateReasonSetIterator</a></li>
<li><a href="">实例成员内部类com.sun.corba.se.impl.encoding.BufferManagerWriteCollect.BufferManagerWriteCollectIterator</a></li>
<li><a href="">实例成员内部类com.sun.org.apache.xerces.internal.util.NamespaceSupport.IteratorPrefixes</a></li>
<li><a href="">非public类-实例成员内部类javax.print.MimeType.ParameterMapEntrySetIterator</a></li>
<li><a href="">静态成员内部类java.util.Collections.EmptyIterator&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.beans.beancontext.BeanContextSupport.BCSIterator</a></li>
<li><a href="">静态成员内部类javax.imageio.ImageIO.ImageReaderIterator</a></li>
<li><a href="">静态成员内部类javax.imageio.ImageIO.ImageTranscoderIterator</a></li>
<li><a href="">静态成员内部类javax.imageio.ImageIO.ImageWriterIterator</a></li>
<li><a href="">静态成员内部类javax.xml.validation.SchemaFactoryFinder.SingleIterator</a></li>
<li><a href="">静态成员内部类javax.xml.xpath.XPathFactoryFinder.SingleIterator</a></li>
<li><a href="">静态成员内部类com.sun.org.apache.xml.internal.security.keys.storage.implementations.CertsInFilesystemDirectoryResolver.FilesystemIterator</a></li>
<li><a href="">静态成员内部类com.sun.org.apache.xml.internal.security.keys.storage.implementations.SingleCertificateResolver.InternalIterator</a></li>
<li><a href="">静态成员内部类com.sun.org.apache.xml.internal.security.keys.storage.implementations.KeyStoreResolver.KeyStoreIterator</a></li>
<li><a href="">静态成员内部类com.sun.org.apache.xml.internal.security.keys.keyresolver.KeyResolver.ResolverIterator</a></li>
<li><a href="">静态成员内部类com.sun.org.apache.xml.internal.security.keys.storage.StorageResolver.StorageResolverIterator</a></li>
<li><a href="">静态成员内部类-实例成员内部类java.util.TreeMap&lt;K, V&gt;.NavigableSubMap&lt;K, V&gt;.SubMapIterator&lt;T&gt;</a></li>
<li><a href="">静态成员内部类-实例成员内部类java.util.concurrent.ScheduledThreadPoolExecutor.DelayedWorkQueue.Itr</a></li>
<li><a href="">静态成员内部类-实例成员内部类java.util.concurrent.ConcurrentSkipListMap&lt;K, V&gt;.SubMap&lt;K, V&gt;.SubMapIter&lt;T&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.lang.Iterable&amp;lt;T&amp;gt;</title>
    <url>/2017/05/23/JavaJDK7%E6%BA%90%E7%A0%81-javalangIterableT/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.lang;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Iterator;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * Iterable&lt;T&gt;中的T代表Iterator返回的元素类型。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> * 实现本接口的类可用语法糖foreach(即增强for循环)进行遍历，foreach实际是由Iterator实现的。</span></pre></td></tr><tr><td class="code"><pre><span class="line"> *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Iterable&lt;T&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;T&gt; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="/2017/05/23/JavaJDK7源码-javautilCollectionE/">java.util.Collection&lt;E&gt;</a></li>
</ul>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="">java.nio.file.DirectoryStream&lt;T&gt;</a></li>
<li><a href="">java.nio.file.Path</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="">java.util.ServiceLoader&lt;S&gt;</a></li>
<li><a href="">java.sql.SQLException</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JDK7源码-java.util.Collection&amp;lt;E&amp;gt;</title>
    <url>/2017/05/23/JavaJDK7%E6%BA%90%E7%A0%81-javautilCollectionE/</url>
    <content><![CDATA[<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package java.util;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回集合包含的元素个数。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合包含的元素个数大于Integer.MAX_VALUE，则返回Integer.MAX_VALUE。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int size();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合不包含元素则返回true。反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean isEmpty();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合包含o则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 更具体的说，当且仅当集合包含至少一个元素e，满足(o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))时，返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的containsAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean contains(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 继承父接口:java.lang.Iterable&lt;T&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回一个集合的迭代器，该迭代器默认从头开始迭代。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本接口不保证集合本身是否有序，即不保证迭代器是否有序，均交由子孙自行控制。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Iterator&lt;E&gt; iterator();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含集合所有元素的数组。若集合是有序的(即迭代器返回的结果有序)，则返回的数组必须有同样的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与集合之间不存在引用关系(即使集合的底层就是基于数组实现的)，数组中的元素是集合中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的toArray(T[] a)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Object[] toArray();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法是连接集合与数组之间的桥梁。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回包含集合所有元素的数组。返回数组的类型即为a的类型。若集合是有序的(即迭代器返回的结果有序)，则返回的数组必须有同样的顺序。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体规则的伪代码为：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * if (a.length &lt; collection.size())</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     不修改a，而是以a的类型新建长度为collection.size()的数组并填入集合中的值，随后返回这个新生成的数组。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else if (a.length &#x3D;&#x3D; collection.size()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     将返回的结果直接填入a后返回a(若a中已有值，则a中的原值会被覆盖)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * else</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引在[0, collection.size() -1]的元素会被集合对应位置的元素覆盖。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组索引 &#x3D;&#x3D; collection.size()的元素会被置为null</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *     数组中后续元素(如果有的话)不变。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合不允许包含空元素，则本方法此时可用来计算集合的长度：返回的数组第一次出现null的索引即为集合的长度。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回的数组与集合之间不存在引用关系(即使集合的底层就是基于数组实现的)，数组中的元素是集合中元素的浅拷贝。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 小例子：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * String[] y &#x3D; x.toArray(new String[0]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * x是一个元素类型为String的集合，则上述语句会将x中的元素依序复制一份浅拷贝到数组y。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关于本方法与前文介绍的toArray()方法，需明确：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * collection.toArray()</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * collection.toArray(new Object[s])</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 当s &lt; collection.size()时，上述两行代码的效果等价。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的toArray()方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ArrayStoreException a的类型collection不支持。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException null&#x3D;&#x3D;a。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;T&gt; T[] toArray(T[] a);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若实现类不支持本方法，则应抛出UnsupportedOperationException。本机制尤其用于保护那些元素为常量值的集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合因本方法而改变则返回true，反之则返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回false的情况举例：集合不允许包含重复元素且e在集合中已存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此对于那些不能包含重复元素的集合而言，该方法也可用于判断集合是否已包含e(不过需要注意，如果不包含e会被插入集合)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 即便实现类支持本方法，它也可能会做某种限制(禁止插入null，限制可插入的元素类型等)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的addAll(Collection&lt;? extends E&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException e因其类型禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException e&#x3D;&#x3D;null且集合禁止包含null。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException e因其某些属性禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 因插入限制，此时e不能被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean add(E e);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 修改操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 移除集合符合条件的元素e：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * (o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若有多个e符合条件，则本方法只会移除其中一个，具体移除哪一个依具体实现而定。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若本方法改变了集合则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的removeAll(Collection&lt;?&gt; c)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException o的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException o&#x3D;&#x3D;null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean remove(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量查询操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合包含c中所有元素则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的contains(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean containsAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 将c中所有元素插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法未定义如下事件发生时的解决策略：在将c中的元素添加至集合的过程中c发生变化。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 这也意味着如下事件的解决策略同样未定义：将一个非空集合添加至自身。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的add(E e)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中任意一个元素因其类型禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              c中至少有一个元素为null且集合不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalArgumentException c中任意一个元素因其某些属性禁止被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws IllegalStateException 因插入限制，此时并非c中所有元素都能被插入集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean addAll(Collection&lt;? extends E&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 从集合中移除所有与c的交集元素(求差集)。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的remove(Object o)方法很相似，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的retainAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              集合中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean removeAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 保留集合中与c的交集元素。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若集合因本方法发生变化则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与前文介绍的removeAll(Collection&lt;?&gt; c)方法正相反，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws ClassCastException c中至少有一个元素的类型与集合不相容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws NullPointerException c&#x3D;&#x3D;null或</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *                              集合中至少有一个元素为null且c不允许空元素存在。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean retainAll(Collection&lt;?&gt; c);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 批量修改操作</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法属于破坏性方法，可选。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 清空集合。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * @throws UnsupportedOperationException 集合不支持本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    void clear();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较及哈希操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较o与集合是否相等。若相等则返回true，反之返回false。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 关于判等的逻辑，若实现类未显式重写本方法，本方法将默认调用公共父类Object类的equals(Object obj)方法，即基于集合的引用地址判断是否相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 事实上，因为实现类必然会是公共父类Object类的子类，因此纯从规范的角度来说，本接口没必要显式声明本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 之所以还是要显式声明，是为了强调本方法的重要性，提醒程序员在写本接口的实现类时重视并重写本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 后文介绍的hashCode()方法也是同理。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 一般来说，设计本方法时应遵循如下规范：</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 自反性，即a.equals(a)应为true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 对称性，即若a.equals(b)为true，则应有b.equals(a)为true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 传递性，即若a.equals(b)为true，b.equals(c)为true，则应有a.equals(c)为true。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Java API提供的直接继承本接口的子接口有3个：Queue,List,Set。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 其中List,Set均对本方法有要求，它们要求其实现类的本方法不是继承自公共父类Object类，而是根据其具体的特点，比较集合中元素的&quot;值&quot;是否相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此，当程序员使用Queue接口，或者是自己直接实现本接口时，一定要考虑好本方法的设计。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因为通常情况下，我们比较两个集合的相等性时，都不希望比较的是集合的引用地址是否相等，因为这往往是毫无意义的。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * Java集合框架在设计时规定了一个大前提：List只能与List相等，Set只能与Set相等。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 因此，我们无法写出一个类同时实现Set及List接口：若这样的实现类可以存在，意味着有一种集合既是List又是Set，与上文介绍的大前提相悖。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与后文介绍的hashCode()方法成对出现，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    boolean equals(Object o);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#x2F;**</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 比较及哈希操作。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 返回集合的hash code值。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 若实现类未显式重写本方法，本方法将默认调用公共父类Object类的hashCode()方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * </span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 本方法与equals(Object o)方法成对出现，可对比学习。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 换句话说，只要重写了equals(Object o)方法，就必须配对重写本方法。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     * 具体来说，若c1.equals(c2)为true，则应有c1.hashCode()&#x3D;&#x3D;c2.hashCode()。</span></pre></td></tr><tr><td class="code"><pre><span class="line">     *&#x2F;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    int hashCode();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="已整理层级关系"><a href="#已整理层级关系" class="headerlink" title="已整理层级关系"></a>已整理层级关系</h1><p><strong><em>直接父接口</em></strong></p>
<ul>
<li><a href="/2017/05/23/JavaJDK7源码-javalangIterableT/">java.lang.Iterable&lt;T&gt;</a></li>
</ul>
<p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="/2017/05/25/JavaJDK7源码-javautilListE/">java.util.List&lt;E&gt;</a></li>
<li><a href="/2017/06/13/JavaJDK7源码-javautilSetE/">java.util.Set&lt;E&gt;</a></li>
<li><a href="/2017/06/16/JavaJDK7源码-javautilQueueE/">java.util.Queue&lt;E&gt;</a></li>
</ul>
<p><strong><em>直接实现本接口的类</em></strong></p>
<ul>
<li><a href="/2017/06/19/JavaJDK7源码-javautilAbstractCollectionE/">java.util.AbstractCollection&lt;E&gt;</a></li>
</ul>
<h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>本接口是Java集合框架中的一员。或者更具体的说，是Java集合框架层级中的根接口。Collection&lt;E&gt;中的E代表集合中元素的类型。</p>
<hr>
<p>Java API不会提供本接口的直接实现类，而是会实现本接口的子接口(Set,List,Queue)。通常情况下，这些实现类都应提供两个”标准”的构造函数(当然，因为接口无法包含构造函数，因此这个规范并不具备强制力，不过Java API中所有实现了本接口的类都遵循这个规范，Java语言规范中也强烈推荐程序员自定义的本接口的实现类也遵循这一规范)：</p>
<ul>
<li>无参构造函数，它会创建一个空的集合。</li>
<li>带有一个集合类型参数的构造函数，它会依传入参数创建一个新的集合(新集合可与传入参数的类型不同，例如可以传入List，最终构造出Set)。</li>
</ul>
<hr>
<p>本接口包含破坏性方法(即可能会改变所属集合的方法)。若某个具体的实现类不需要支持某个破坏性方法，则需要抛出UnsupportedOperationException。</p>
<p>这样做的目的是为了引起调用者的重视：改变集合属于危险操作(相对于只读方法而言)，但是当前实现类不支持这个方法，你是不是对本实现类有什么误解呢？</p>
<p>不过需要注意的是，目的才是最重要的，而抛出UnsupportedOperationException只是手段。换句话说，这一约束即便在官方的推荐中也没有那么绝对。有时，即便某实现类不支持某破坏性方法，但只要该方法不产生真正的破坏性结果，那么也可以不抛出UnsupportedOperationException。例如：某不可变实现类不支持addAll(Collection&lt;? extends E&gt; c)方法，在null==c时，就可以选择不抛出UnsupportedOperationException。</p>
<hr>
<p>某些本接口的实现类可能会对其所包含的元素有更具体的限制。例如，有些实现禁止插入空元素，有些实现则会限制元素类型。试图插入不合法元素时官方推荐抛出一个unchecked exception，通常为NullPointerException或ClassCastException。试图查询一个不合法元素时官方推荐抛出异常或返回false。</p>
<hr>
<p>本接口不规定同步策略，交由子孙自行控制。</p>
<hr>
<p>本接口中的方法在判等时多使用元素的equals()方法。因为这样比较出的才是元素在业务逻辑层面的相等性。以contains(Object o)为例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当且仅当该集合包含至少一个元素e，满足(o&#x3D;&#x3D;null ? e&#x3D;&#x3D;null : o.equals(e))时，返回true。</span></pre></td></tr></table></figure>

<p>当然，这个描述只是一个整体上的指导思路。并不是说具体实现类在实现这个方法时，就一定要遍历集合，或者一定要调用元素的equals()方法。事实上，只要能实现功能，实现类可以灵活的进行优化。例如某些情况下，实现类也可用hashCode()方法替代equals()方法比较两元素的相等性。</p>
<h1 id="未整理层级关系"><a href="#未整理层级关系" class="headerlink" title="未整理层级关系"></a>未整理层级关系</h1><p><strong><em>直接子接口</em></strong></p>
<ul>
<li><a href="">java.beans.beancontext.BeanContext</a></li>
</ul>
<p><strong><em>直接实现本接口的内部类</em></strong></p>
<ul>
<li><a href="">静态成员内部类java.util.Collections.CheckedCollection&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.util.Collections.SynchronizedCollection&lt;E&gt;</a></li>
<li><a href="">静态成员内部类java.util.Collections.UnmodifiableCollection&lt;E&gt;</a></li>
</ul>
]]></content>
      <categories>
        <category>Java JDK7源码</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>源码</tag>
        <tag>Collection</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-9.Palindrome Number</title>
    <url>/2017/05/12/LeetcodeAlgorithms-9PalindromeNumber/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/palindrome-number/#/description" target="_blank" rel="noopener">Palindrome Number | LeetCode OJ</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/9PalindromeNumber/0.png" alt="0.png"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>思路</strong></p>
<p>将原始数字翻转后与原始数字比较，若相等即为回文数。</p>
<p>原始数据除到个位数时即停止计算，此时翻转后的数字比原数少一位，因此必然不会越界。</p>
<p><strong>注意</strong></p>
<ol>
<li>不使用额外空间是不可能的，题意应该是指空间复杂度应为O(1)。</li>
<li>负数不是回文数。</li>
</ol>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isPalindrome(int x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (x &lt; 0) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int originalReduce &#x3D; x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int reverseIncrease &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int measure &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (originalReduce &gt;&#x3D; measure) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            reverseIncrease &#x3D; reverseIncrease * measure + originalReduce % measure;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            originalReduce &#x2F;&#x3D; measure;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return reverseIncrease &#x3D;&#x3D; x &#x2F; measure &amp;&amp; originalReduce &#x3D;&#x3D; x % measure;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>以上是leetcode中给出的官方解法，它从根本上避免了int型的越界。不过在我来看，如果用的语言是Java的话，即便越界了也没有什么。原始的x不可能是一个越界的数，如果它在翻转后越界了，说明它就不可能是一个回文数。因此我们可以不用考虑越界问题，这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public boolean isPalindrome(int x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (x &lt; 0) return false;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int base &#x3D; x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int m &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (x !&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; m * result + x % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x &#x2F;&#x3D; m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result &#x3D;&#x3D; base;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>事实上，这种写法确实也能通过leetcode的检查。</p>
]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Windows仿Linux命令界面ConEmu安装</title>
    <url>/2017/05/11/Linux-Windows%E4%BB%BFLinux%E5%91%BD%E4%BB%A4%E7%95%8C%E9%9D%A2ConEmu%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文安装方法面向系统：</p>
<ul>
<li>Windows7 64位</li>
<li>Windows10 64位</li>
</ul>
<a id="more"></a>

<h1 id="安装ConEmu"><a href="#安装ConEmu" class="headerlink" title="安装ConEmu"></a>安装ConEmu</h1><p><strong>软件下载地址</strong></p>
<ul>
<li>ConEmu官网下载：<a href="http://conemu.github.io/" target="_blank" rel="noopener">下载地址</a></li>
<li>Windows64位 安装包个人存档：<a href="http://pan.baidu.com/s/1i5iMqmL" target="_blank" rel="noopener">下载地址</a></li>
</ul>
<p>安装时，选择64位系统：</p>
<p><img src="/images/blog_pic/linux/Windows%E4%BB%BFLinux%E5%91%BD%E4%BB%A4%E7%95%8C%E9%9D%A2ConEmu%E5%AE%89%E8%A3%85/0.jpg" alt="0.jpg"></p>
<p>其余操作，除安装目录选择外，保持默认即可。</p>
<p>安装成功后初次启动时，需选择bash类型：选择git bash(该bash与原生linux shell最为接近)。</p>
<p><img src="/images/blog_pic/linux/Windows%E4%BB%BFLinux%E5%91%BD%E4%BB%A4%E7%95%8C%E9%9D%A2ConEmu%E5%AE%89%E8%A3%85/1.jpg" alt="1.jpg"></p>
<p>配置成功后的界面：</p>
<p><img src="/images/blog_pic/linux/Windows%E4%BB%BFLinux%E5%91%BD%E4%BB%A4%E7%95%8C%E9%9D%A2ConEmu%E5%AE%89%E8%A3%85/2.jpg" alt="2.jpg"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Windows</tag>
        <tag>ConEmu</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-7.Reverse Integer</title>
    <url>/2017/05/08/LeetcodeAlgorithms-7ReverseInteger/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/reverse-integer/#/description" target="_blank" rel="noopener">Reverse Integer | LeetCode OJ</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/7ReverseInteger/0.png" alt="0.png"></p>
<a id="more"></a>

<h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p><strong>思路</strong></p>
<p>使用long型避免溢出。</p>
<p><strong>注意</strong></p>
<ol>
<li>Java中int型取值范围为[-2^31 ,2^31 -1]。</li>
<li>Java中a%b=a-(a/b)*b</li>
</ol>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int reverse(int x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int measure &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        long result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while(x !&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; measure * result + x % measure;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if(result &lt; Integer.MIN_VALUE || result &gt; Integer.MAX_VALUE)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x &#x2F;&#x3D; measure;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return (int)result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p><strong>思路</strong></p>
<p>每次计算后将算得的结果还原回去，若与原值不等则越界。无需使用long型避免越界。</p>
<p><strong>代码</strong></p>
<p>代码路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int reverse(int x) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int m &#x3D; 10;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while (x &gt;&#x3D; m || x &lt;&#x3D; -1 * m) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; m * result + x % m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            x &#x2F;&#x3D; m;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int tempResult &#x3D; m * result + x;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if ((tempResult - x) &#x2F; m !&#x3D; result)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        else</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result &#x3D; tempResult;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-1.Two Sum</title>
    <url>/2017/05/07/LeetcodeAlgorithms-1TwoSum/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/two-sum/#/description" target="_blank" rel="noopener">Two Sum | LeetCode OJ</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/1TwoSum/0.png" alt="0.png"></p>
<a id="more"></a>

<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>思路</strong></p>
<p>使用哈希表存储已遍历过的数字。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.HashMap;</span></pre></td></tr><tr><td class="code"><pre><span class="line">import java.util.Map;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int[] twoSum(int[] nums, int target) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;nums is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[] result &#x3D; new int[2];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Map&lt;Integer, Integer&gt; numberMap &#x3D; new HashMap&lt;Integer, Integer&gt;();</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            int assume &#x3D; target - nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if(numberMap.containsKey(assume)) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                result[0] &#x3D;  numberMap.get(assume);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                result[1] &#x3D; i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                break;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            numberMap.put(nums[i], i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-566.Reshape the Matrix</title>
    <url>/2017/05/07/LeetcodeAlgorithms-566ReshapetheMatrix/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/reshape-the-matrix/#/description" target="_blank" rel="noopener">Reshape the Matrix | LeetCode OJ</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/566ReshapetheMatrix/0.png" alt="0.png"></p>
<a id="more"></a>

<h1 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h1><p>将原始二维数组（不妨设为O）按行读取放入一维数组中(不妨设为T)，再将该一维数组按行填入结果二维数组中（不妨设为R）。</p>
<h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p><strong>思路</strong></p>
<p>遍历O，通过T建立起O,R索引之间的联系。</p>
<p><strong>代码</strong></p>
<p>代码路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int[][] matrixReshape(int[][] nums, int r, int c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;nums is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (r &lt; 0 || c &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;r &lt; 0 || c &lt; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if(nums.length * nums[0].length !&#x3D; r * c)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return nums;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[][] result &#x3D; new int[r][c];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int line &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for(int j &#x3D; 0; j &lt; nums[0].length; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                result[line &#x2F; c][line % c] &#x3D; nums[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                line++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p><strong>思路</strong></p>
<p>遍历O，不通过T，直接建立O,R索引之间的联系。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int[][] matrixReshape(int[][] nums, int r, int c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;nums is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (r &lt; 0 || c &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;r &lt; 0 || c &lt; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if(nums.length * nums[0].length !&#x3D; r * c)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return nums;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[][] result &#x3D; new int[r][c];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int tempRow &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int tempColumn &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; nums.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            for(int j &#x3D; 0; j &lt; nums[0].length; j++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                result[tempRow][tempColumn]&#x3D;nums[i][j];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tempColumn++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if(tempColumn &#x3D;&#x3D; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    tempRow++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    tempColumn &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="解法3"><a href="#解法3" class="headerlink" title="解法3"></a>解法3</h1><p><strong>思路</strong></p>
<p>遍历T，通过T建立起O,R索引之间的联系。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int[][] matrixReshape(int[][] nums, int r, int c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;nums is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (r &lt; 0 || c &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;r &lt; 0 || c &lt; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int expectTotalLength &#x3D; r * c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if(nums.length * nums[0].length !&#x3D; expectTotalLength)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            return nums;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[][] result &#x3D; new int[r][c];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; expectTotalLength; i++)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result[i &#x2F; c][i % c] &#x3D; nums[i &#x2F; nums[0].length][i % nums[0].length];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-461.Hamming Distance</title>
    <url>/2017/05/01/LeetcodeAlgorithms-461HammingDistance/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/hamming-distance/#/description" target="_blank" rel="noopener">Hamming Distance | LeetCode OJ</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/461HammingDistance/0.png" alt="0.png"></p>
<a id="more"></a>

<h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p><strong>思路</strong></p>
<p>使用语言自带方法输出抑或位个数。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hammingDistance(int x, int y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (x &lt; 0 || y &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;x &lt; 0 || y &lt; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return Integer.bitCount(x ^ y);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p><strong>思路</strong></p>
<p>自行实现输出抑或位个数。</p>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int hammingDistance(int x, int y) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (x &lt; 0 || y &lt; 0)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;x &lt; 0 || y &lt; 0&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int xor &#x3D; x ^ y;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        while(xor !&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result +&#x3D; xor &amp; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xor &gt;&gt;&#x3D; 1;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode Algorithms-561.Array Partition 1</title>
    <url>/2017/04/26/LeetcodeAlgorithms-561ArrayPartition1/</url>
    <content><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/array-partition-i/#/description" target="_blank" rel="noopener">Array Partition I | LeetCode OJ</a></p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/LeetcodeAlgorithms/561ArrayPartition1/0.png" alt="0.png"></p>
<a id="more"></a>

<h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p><strong>思路</strong></p>
<p>排序后输出奇数项。</p>
<ul>
<li>时间复杂度：取决于选用的排序算法的时间复杂度；除此之外的时间复杂度为O(n)</li>
<li>空间复杂度：取决于选用的排序算法的空间复杂度；除此之外的空间复杂度为O(1)</li>
</ul>
<p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.Arrays;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int arrayPairSum(int[] nums) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;nums is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (nums.length &lt; 2 || nums.length &gt; 20000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;nums &#39;s length &lt; 2 || &gt; 20000&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Arrays.sort(nums);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; nums.length; i &#x3D; i + 2)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            result +&#x3D;  nums[i];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p><strong>思路</strong></p>
<p>题设中规定n为整数，且取值范围为[-10000, 10000]。则可声明一个长度为20001的数组，不妨设为hashArray，该数组作为散列表即可存储所有2n个整数。解决冲突的方法为自增1。即hashArray中元素的值代表其索引值在原2n个整数中出现的次数。hashArray中所有元素求和即为2n。</p>
<p>hashArray生成完成后，其实就完成了对原数组的排序。且时间复杂度为O(n)，空间复杂度O(n)。</p>
<p>遍历hashArray，设当前进行到的下标为i，则hashArray[i]按奇偶数及输出状态将情况分为以下4种：</p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="center">输出</th>
<th align="center">不输出</th>
</tr>
</thead>
<tbody><tr>
<td align="left">奇数</td>
<td align="center">值：(i - 10000) * (hashArray[i] + 1) / 2<br>下一个索引开始状态：不输出</td>
<td align="center">值：(i - 10000) * (hashArray[i] / 2)<br>下一个索引开始状态：输出</td>
</tr>
<tr>
<td align="left">偶数</td>
<td align="center">值：(i - 10000) * hashArray[i] / 2<br>下一个索引开始状态：输出</td>
<td align="center">值：(i - 10000) * hashArray[i] / 2<br>下一个索引开始状态：不输出</td>
</tr>
</tbody></table>
<p>其中</p>
<ul>
<li><strong>输出/不输出</strong> 是指：因只需输出有序数组中的奇数项，故某下标开始时会有一个输出或不输出的状态；结束时又会为下一个下标生成一个输出或不输出的状态。</li>
<li><strong>奇数/偶数</strong> 是指：该下标中存储的值，即为下标值在原始数据中出现的次数。</li>
<li>原始数据 –&gt; hashArray 做了 [-10000, 10000] –&gt; [0, 20000] 的值映射，因此实际参与计算时应还原回原值。</li>
</ul>
<p><strong>代码</strong></p>
<p>奇数-不输出时，(i - 10000) * (hashArray[i] / 2)中，(hashArray[i] / 2)的括号一定要有，保证整数下取整机制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Solution &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    public int arrayPairSum(int[] nums) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (null &#x3D;&#x3D; nums)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new NullPointerException(&quot;nums is null&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        if (nums.length &lt; 2 || nums.length &gt; 20000)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            throw new IllegalArgumentException(&quot;nums &#39;s length &lt; 2 || &gt; 20000&quot;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int limit &#x3D; 10000;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int result &#x3D; 0;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        int[] hashArray &#x3D; new int[2 * limit + 1];</span></pre></td></tr><tr><td class="code"><pre><span class="line">        boolean ifAdd &#x3D; true;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int num : nums) hashArray[num + limit]++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        for(int i &#x3D; 0; i &lt; hashArray.length; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            if(hashArray[i] % 2 &#x3D;&#x3D; 0) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                result &#x3D; result + (i - limit) * hashArray[i] &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125; else &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                if(ifAdd)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    result &#x3D; result + (i - limit) * (hashArray[i] + 1) &#x2F; 2;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                else</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    result &#x3D; result + (i - limit) * (hashArray[i] &#x2F; 2);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                ifAdd &#x3D; !ifAdd;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        return result;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Leetcode Algorithms</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Leetcode</tag>
        <tag>Algorithms</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-Windows下Python安装</title>
    <url>/2017/04/24/Python-Windows%E4%B8%8BPython%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文安装方法面向系统：</p>
<ul>
<li>Windows7 64位</li>
<li>Windows10 64位</li>
</ul>
<a id="more"></a>

<h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><p><strong>软件下载地址</strong></p>
<ul>
<li>Python官网下载地址：<a href="https://www.python.org/ftp/python/2.7.10/python-2.7.10.amd64.msi" target="_blank" rel="noopener">下载地址</a>。</li>
<li>Windows64位安装包个人存档：<a href="http://pan.baidu.com/s/1mihZpwO" target="_blank" rel="noopener">下载地址</a>。</li>
</ul>
<p>安装时，除安装目录选择外，其余设定保持默认即可。</p>
<p>不妨将安装目录设为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\work\python\python27</span></pre></td></tr></table></figure>

<h1 id="配置python环境变量"><a href="#配置python环境变量" class="headerlink" title="配置python环境变量"></a>配置python环境变量</h1><p>在path变量中追加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\work\python\python27</span></pre></td></tr></table></figure>

<p>打开cmd，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python -V</span></pre></td></tr></table></figure>

<p>返回如下类似信息则安装成功：</p>
<p><img src="/images/blog_pic/Python/Windows%E4%B8%8BPython%E5%AE%89%E8%A3%85/0.jpg" alt="0.jpg"></p>
<h1 id="安装Pip"><a href="#安装Pip" class="headerlink" title="安装Pip"></a>安装Pip</h1><p><strong>软件下载地址</strong></p>
<ul>
<li>Pip官网下载地址：<a href="https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz#md5=35f01da33009719497f01a4ba69d63c9" target="_blank" rel="noopener">下载地址</a>。</li>
<li>Windows64位安装包个人存档：<a href="http://pan.baidu.com/s/1boMCZqJ" target="_blank" rel="noopener">下载地址</a>。</li>
</ul>
<p>解压后打开cmd，进入解压目录，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python setup.py install</span></pre></td></tr></table></figure>

<p>安装完成后安装包即可删除。</p>
<h1 id="配置Pip环境变量"><a href="#配置Pip环境变量" class="headerlink" title="配置Pip环境变量"></a>配置Pip环境变量</h1><p>在path变量中追加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\work\python\python27\Scripts</span></pre></td></tr></table></figure>

<p>打开cmd，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip list</span></pre></td></tr></table></figure>

<p>返回如下类似信息则安装成功：</p>
<p><img src="/images/blog_pic/Python/Windows%E4%B8%8BPython%E5%AE%89%E8%A3%85/1.jpg" alt="1.jpg"></p>
<h1 id="安装Pycharm"><a href="#安装Pycharm" class="headerlink" title="安装Pycharm"></a>安装Pycharm</h1><p><strong>软件下载地址</strong></p>
<ul>
<li>Windows64位安装包个人存档：<a href="http://pan.baidu.com/s/1pLRo7Mj" target="_blank" rel="noopener">下载地址</a>。</li>
</ul>
<p>安装时，除安装目录选择外，其余设定保持默认即可。</p>
<h1 id="Pycharm注册"><a href="#Pycharm注册" class="headerlink" title="Pycharm注册"></a>Pycharm注册</h1><p>首次启动Pycharm时会提示输入注册信息。</p>
<p>解压下载文件中的压缩包PyCharm4.0_KeyGen.zip，得到keygen.exe，执行该文件。将Application切换至PyCharm，得到User Name及License Key。填入对应位置。</p>
<h1 id="Pycharm设置"><a href="#Pycharm设置" class="headerlink" title="Pycharm设置"></a>Pycharm设置</h1><p><strong>文件编码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File --&gt; File Encoding</span></pre></td></tr></table></figure>

<p><strong>缩进</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File --&gt; Settings --&gt; Editor --&gt; Code Style --&gt; Python</span></pre></td></tr></table></figure>

<p><strong>字号</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File --&gt; Settings --&gt; Editor --&gt; Colors &amp; Fonts --&gt; Font</span></pre></td></tr><tr><td class="code"><pre><span class="line">File --&gt; Settings --&gt; Editor --&gt; Colors &amp; Fonts --&gt; Console Font</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-Eclipse新建Maven标准应用</title>
    <url>/2017/04/23/Maven-Eclipse%E6%96%B0%E5%BB%BAMaven%E6%A0%87%E5%87%86%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p><img src="/images/blog_pic/Maven/Eclipse%E6%96%B0%E5%BB%BAMaven%E6%A0%87%E5%87%86%E5%BA%94%E7%94%A8/0.jpg" alt="0.jpg"></p>
<a id="more"></a>

<p><img src="/images/blog_pic/Maven/Eclipse%E6%96%B0%E5%BB%BAMaven%E6%A0%87%E5%87%86%E5%BA%94%E7%94%A8/1.jpg" alt="1.jpg"></p>
<p><img src="/images/blog_pic/Maven/Eclipse%E6%96%B0%E5%BB%BAMaven%E6%A0%87%E5%87%86%E5%BA%94%E7%94%A8/2.jpg" alt="2.jpg"></p>
<p><img src="/images/blog_pic/Maven/Eclipse%E6%96%B0%E5%BB%BAMaven%E6%A0%87%E5%87%86%E5%BA%94%E7%94%A8/3.jpg" alt="3.jpg"></p>
<p><img src="/images/blog_pic/Maven/Eclipse%E6%96%B0%E5%BB%BAMaven%E6%A0%87%E5%87%86%E5%BA%94%E7%94%A8/4.jpg" alt="4.jpg"></p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
        <tag>Eclipse</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven-安装</title>
    <url>/2017/04/23/Maven-%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文安装方法面向系统：</p>
<ul>
<li>Windows7 64位</li>
<li>Windows10 64位</li>
</ul>
<a id="more"></a>

<h1 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h1><p><strong>软件下载地址</strong></p>
<ul>
<li>Maven官网下载地址：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">下载地址</a>。</li>
<li>Windows64位安装包个人存档：<a href="http://pan.baidu.com/s/1pLwgt1h" target="_blank" rel="noopener">下载地址</a>。</li>
</ul>
<p>解压即可，不妨将解压后的根目录路径设为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">D:\work\java\apache-maven-3.5.0</span></pre></td></tr></table></figure>

<h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>新建变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量名: MAVEN_HOME</span></pre></td></tr><tr><td class="code"><pre><span class="line">变量值: D:\work\java\apache-maven-3.5.0</span></pre></td></tr></table></figure>

<p>在path变量中追加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">%MAVEN_HOME%\bin</span></pre></td></tr></table></figure>

<p>打开cmd，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn -v</span></pre></td></tr></table></figure>

<p>返回如下类似信息则安装成功：</p>
<p><img src="/images/blog_pic/Maven/Maven%E5%AE%89%E8%A3%85/0.jpg" alt="0.jpg"></p>
<h1 id="修改本地仓库存储路径"><a href="#修改本地仓库存储路径" class="headerlink" title="修改本地仓库存储路径"></a>修改本地仓库存储路径</h1><p>打开D:\work\java\apache-maven-3.5.0\conf\settings.xml，修改本地仓库路径(路径中不能有空格)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;D:\work\java\maven-repository&lt;&#x2F;localRepository&gt;</span></pre></td></tr></table></figure>

<h1 id="关联Maven与Eclipse"><a href="#关联Maven与Eclipse" class="headerlink" title="关联Maven与Eclipse"></a>关联Maven与Eclipse</h1><p>打开Eclipse，在菜单项中依次选择：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window --&gt; Preferences --&gt; Maven --&gt; User Settings</span></pre></td></tr></table></figure>

<p>设置如下:</p>
<p><img src="/images/blog_pic/Maven/Maven%E5%AE%89%E8%A3%85/1.jpg" alt="1.jpg"></p>
<p>在菜单项中依次选择：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window --&gt; Preferences --&gt; Maven --&gt; Installations</span></pre></td></tr></table></figure>

<p>将Eclipse关联的Maven软件改为新下载的版本：</p>
<p><img src="/images/blog_pic/Maven/Maven%E5%AE%89%E8%A3%85/2.jpg" alt="2.jpg"></p>
<h1 id="配置下载jar包源码"><a href="#配置下载jar包源码" class="headerlink" title="配置下载jar包源码"></a>配置下载jar包源码</h1><p>打开D:\work\java\apache-maven-3.5.0\conf\settings.xml，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;profile&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;id&gt;downloadSources&lt;&#x2F;id&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;properties&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;downloadSources&gt;true&lt;&#x2F;downloadSources&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;downloadJavadocs&gt;true&lt;&#x2F;downloadJavadocs&gt;             </span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;properties&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;profile&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;profiles&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;activeProfiles&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;activeProfile&gt;downloadSources&lt;&#x2F;activeProfile&gt;  </span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;activeProfiles&gt;</span></pre></td></tr></table></figure>

<p>打开Eclipse，在菜单项中依次选择：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Window --&gt; Preferences --&gt; Maven</span></pre></td></tr></table></figure>

<p>配置如下：</p>
<p><img src="/images/blog_pic/Maven/Maven%E5%AE%89%E8%A3%85/3.jpg" alt="3.jpg"></p>
<h1 id="指定Maven默认Java版本"><a href="#指定Maven默认Java版本" class="headerlink" title="指定Maven默认Java版本"></a>指定Maven默认Java版本</h1><p>打开D:\work\java\apache-maven-3.5.0\conf\settings.xml，添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt; </span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;profile&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;id&gt;jdk-1.7&lt;&#x2F;id&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;activation&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;jdk&gt;1.7&lt;&#x2F;jdk&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;activation&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;properties&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;maven.compiler.source&gt;1.7&lt;&#x2F;maven.compiler.source&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;maven.compiler.target&gt;1.7&lt;&#x2F;maven.compiler.target&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      &lt;maven.compiler.compilerVersion&gt;1.7&lt;&#x2F;maven.compiler.compilerVersion&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &lt;&#x2F;properties&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &lt;&#x2F;profile&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;&#x2F;profiles&gt;</span></pre></td></tr></table></figure>

<p>示例中使用的是JDK1.7。依实际需求可改成对应版本。</p>
]]></content>
      <categories>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-基本操作</title>
    <url>/2017/04/22/Github-%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h1><p>通过Github页面创建新项目，得到SSH clone地址(使用HTTP时每次提交均需输入账号密码，SSH不需要)。进入选定的仓库目录，clone远端代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:ReimuWang&#x2F;gitHubTest.git</span></pre></td></tr></table></figure>

<a id="more"></a>

<h1 id="日常操作流程"><a href="#日常操作流程" class="headerlink" title="日常操作流程"></a>日常操作流程</h1><p>触发时机：阶段性修改完成，需提交至远端(首次填充空仓库也可视为一次较大的改动而非创建)。</p>
<p><strong>拉取最新的代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git pull</span></pre></td></tr></table></figure>

<p><strong>查看当前工作区的更改情况</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span></pre></td></tr></table></figure>

<p><strong>根据status的指示，将工作区中修改的文件添加至缓存区</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add 文件名</span></pre></td></tr></table></figure>

<p><strong>特别的，如下命令将添加所有变更文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add *</span></pre></td></tr></table></figure>

<p><strong>将当前缓存区中的文件提交到本地HEAD中(该命令执行后还需输入一下本次提交的简介)</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit</span></pre></td></tr></table></figure>

<p><strong>将本地HEAD中的文件提交至远端master分支，可积攒多个commit后统一提交</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin master</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-Hexo安装</title>
    <url>/2017/04/16/Github-Hexo%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文安装方法面向系统：Windows7/10 64位。</p>
<a id="more"></a>

<h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p><strong>软件下载地址</strong></p>
<ul>
<li><a href="https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi" target="_blank" rel="noopener">Node.js官网下载地址</a></li>
<li><a href="https://pan.baidu.com/s/1dpXtKNvy9CQ2yMmilHFlsA" target="_blank" rel="noopener">Windows64位安装包个人存档</a></li>
</ul>
<p>安装时，除安装目录外，其余设定保持默认即可。</p>
<p><strong>验证</strong></p>
<p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node -v</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm -v</span></pre></td></tr></table></figure>

<p>安装成功时的结果形如：</p>
<p><img src="/images/blog_pic/Github/Hexo%E5%AE%89%E8%A3%85/0.jpg" alt="0.jpg"></p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p><strong>安装</strong></p>
<p>新建Hexo安装目录并进入到该目录下，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span></pre></td></tr></table></figure>

<p>安装时间可能会较长，期间可能无输出或输出warn信息，为正常情况。安装完成后输入如下语句验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span></pre></td></tr></table></figure>

<p>安装成功时输出形如：</p>
<p><img src="/images/blog_pic/Github/Hexo%E5%AE%89%E8%A3%85/1.jpg" alt="1.jpg"></p>
<p><strong>初始化</strong></p>
<p>进入到Hexo安装目录下，依次执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span></pre></td></tr><tr><td class="code"><pre><span class="line">npm install</span></pre></td></tr></table></figure>

<p>安装时间可能会较长，期间可能无输出或输出warn信息，为正常情况。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-添加SSH密钥</title>
    <url>/2017/04/12/Github-%E6%B7%BB%E5%8A%A0SSH%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<p>本文方法面向系统：Windows7/10 64位。</p>
<a id="more"></a>

<p>SSH密钥分为私钥与公钥两部分:私钥存储在本地机器中，而公钥则上传到Github服务器的自身账号下。</p>
<h1 id="本地机器端"><a href="#本地机器端" class="headerlink" title="本地机器端"></a>本地机器端</h1><p><strong>设置Git用户名</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;ReimuWang&quot;</span></pre></td></tr></table></figure>

<p><strong>设置Git邮箱</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global email.name &quot;1505580759@qq.com&quot;</span></pre></td></tr></table></figure>

<p><strong>生成SSH密钥对</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1505580759@qq.com&quot;</span></pre></td></tr></table></figure>

<p>-C后的参数值为上文设置的Git邮箱。命令输入后会提示输入密码，无需密码的情况下，连按3个回车即可。</p>
<p>执行完成后进入~/.ssh，即可发现其下多了两个文件。其中id_rsa为私钥，id_rsa.pub为公钥。</p>
<p><strong>将生成的私钥注册至本地机器的ssh-agent</strong></p>
<p>注册前首先确保本地的ssh-agent可用。执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eval &quot;$(ssh-agent -s)&quot;</span></pre></td></tr></table></figure>

<p>如果返回值形如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Agent pid 5292</span></pre></td></tr></table></figure>

<p>则ssh-agent即为可用。此时将刚才生成的私钥注册至本机的ssh-agent中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_rsa</span></pre></td></tr></table></figure>

<h1 id="Github服务器端"><a href="#Github服务器端" class="headerlink" title="Github服务器端"></a>Github服务器端</h1><p><strong>将公钥注册至Github的个人账户下</strong></p>
<p>登陆Github，进入个人页。点击右上角的Settings：</p>
<p><img src="/images/blog_pic/Github/Github%E6%B7%BB%E5%8A%A0SSH%E5%AF%86%E9%92%A5/0.jpg" alt="0.jpg"></p>
<p>点击左侧的SSH and GPG keys：</p>
<p><img src="/images/blog_pic/Github/Github%E6%B7%BB%E5%8A%A0SSH%E5%AF%86%E9%92%A5/1.jpg" alt="1.jpg"></p>
<p>点击右侧的New SSH key：</p>
<p><img src="/images/blog_pic/Github/Github%E6%B7%BB%E5%8A%A0SSH%E5%AF%86%E9%92%A5/2.jpg" alt="2.jpg"></p>
<p>将id_rsa.pub文件中的值粘贴至key选框中。然后点击Add SSH key：</p>
<p><img src="/images/blog_pic/Github/Github%E6%B7%BB%E5%8A%A0SSH%E5%AF%86%E9%92%A5/3.jpg" alt="3.jpg"></p>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p>执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span></pre></td></tr></table></figure>

<p>如果结果返回形如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hi ReimuWang! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span></pre></td></tr></table></figure>

<p>则证明配对成功。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-Git安装</title>
    <url>/2017/04/11/Github-Git%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>本文安装方法面向系统：Windows7/10 64位。</p>
<a id="more"></a>

<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p><strong>软件下载地址</strong></p>
<ul>
<li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git官网下载地址</a></li>
<li><a href="https://pan.baidu.com/s/1WsWctEDUEhJw4s7hvWGkmQ" target="_blank" rel="noopener">Windows 64位安装包个人存档</a></li>
</ul>
<p><strong>验证是否安装成功</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git --version</span></pre></td></tr></table></figure>

<p>安装成功时返回版本信息：</p>
<p><img src="/images/blog_pic/Github/Git%E5%AE%89%E8%A3%85/0.jpg" alt="0.jpg"></p>
<h1 id="安装TortoiseGit"><a href="#安装TortoiseGit" class="headerlink" title="安装TortoiseGit"></a>安装TortoiseGit</h1><p><strong>软件下载地址</strong></p>
<ul>
<li><a href="https://download.tortoisegit.org/tgit/" target="_blank" rel="noopener">TortoiseGit官网下载地址</a></li>
<li><a href="https://pan.baidu.com/s/1qOWy3z5gEQMILrJ-JxKiQQ" target="_blank" rel="noopener">Windows 64位安装包个人存档</a></li>
</ul>
<p>先安装软件本体，再安装语言包。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-Github+Hexo搭建博客</title>
    <url>/2017/04/11/Github-GithubHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>本文安装方法面向系统：Windows7/10 64位。</p>
<a id="more"></a>

<h1 id="Github环境搭建"><a href="#Github环境搭建" class="headerlink" title="Github环境搭建"></a>Github环境搭建</h1><p><strong>git安装</strong></p>
<p>参见：<a href="/2017/04/11/Github-Git安装/">Github-Git安装</a>。</p>
<p><strong>注册Github账号</strong></p>
<p>登陆<a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a>进行注册，直到回复确认邮件后才算是注册完成。</p>
<p><strong>Github添加SSH密钥</strong></p>
<p>参见：<a href="/2017/04/12/Github-添加SSH密钥/">Github-添加SSH密钥</a>。</p>
<p><strong>创建存储博客应用的仓库</strong></p>
<p>登入Github个人主页，点击下图右上角红框中的位置，创建一个新的仓库用于部署博客应用。</p>
<p><img src="/images/blog_pic/Github/GithubHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/0.jpg" alt="0.jpg"></p>
<p>创建仓库时只需要填写Repository name，博客应用中该值固定为<strong>Gitgub账号名.github.io</strong>，以我为例，为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ReimuWang.github.io</span></pre></td></tr></table></figure>

<p>填写完成后点击创建按钮：</p>
<p><img src="/images/blog_pic/Github/GithubHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1.jpg" alt="1.jpg"></p>
<p>创建后即可生成用于存储博客的仓库：</p>
<p><img src="/images/blog_pic/Github/GithubHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.jpg" alt="2.jpg"></p>
<h1 id="Hexo环境搭建"><a href="#Hexo环境搭建" class="headerlink" title="Hexo环境搭建"></a>Hexo环境搭建</h1><p>参见：<a href="/2017/04/16/Github-Hexo安装/">Github-Hexo安装</a>。</p>
<h1 id="Github与Hexo建立关联"><a href="#Github与Hexo建立关联" class="headerlink" title="Github与Hexo建立关联"></a>Github与Hexo建立关联</h1><p><strong>安装Github-Hexo关联扩展</strong></p>
<p>进入到Hexo安装目录下，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span></pre></td></tr></table></figure>

<p><strong>修改Hexo配置文件</strong></p>
<p>打开Hexo根目录下的_config.yml，修改deploy属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  type: git</span></pre></td></tr><tr><td class="code"><pre><span class="line">  repo: git@github.com:ReimuWang&#x2F;ReimuWang.github.io.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr></table></figure>

<p>其中<strong>ReimuWang</strong>为Github账号名。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Github-Markdown语法</title>
    <url>/2017/04/10/Github-Markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>语法筛选规则：<strong>Github + Hexo + Next</strong>环境下测试通过并且展现效果良好。</p>
<a id="more"></a>

<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 1级标题</span></pre></td></tr><tr><td class="code"><pre><span class="line">## 2级标题</span></pre></td></tr><tr><td class="code"><pre><span class="line">### 3级标题</span></pre></td></tr><tr><td class="code"><pre><span class="line">#### 4级标题</span></pre></td></tr><tr><td class="code"><pre><span class="line">##### 5级标题</span></pre></td></tr><tr><td class="code"><pre><span class="line">###### 6级标题</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<p><img src="/images/blog_pic/Github/Markdown%E8%AF%AD%E6%B3%95/0.jpg" alt="0.jpg"></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; # 参考资料</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; [ReimuWang的博客](http:&#x2F;&#x2F;reimuwang.org)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&gt; [ReimuWang的Github主页](https:&#x2F;&#x2F;github.com&#x2F;ReimuWang)</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<p><img src="/images/blog_pic/Github/Markdown%E8%AF%AD%E6%B3%95/1.png" alt="1.png"></p>
<h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*斜体*</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">**粗体**</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">***粗斜体***</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">~~删除线~~</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<p><em>斜体</em></p>
<p><strong>粗体</strong></p>
<p><strong><em>粗斜体</em></strong></p>
<p><del>删除线</del></p>
<h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 元素</span></pre></td></tr><tr><td class="code"><pre><span class="line">- 元素</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<ul>
<li>元素</li>
<li>元素</li>
<li>元素</li>
</ul>
<h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 元素1</span></pre></td></tr><tr><td class="code"><pre><span class="line">2. 元素2</span></pre></td></tr><tr><td class="code"><pre><span class="line">3. 元素3</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<ol>
<li>元素1</li>
<li>元素2</li>
<li>元素3</li>
</ol>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ReimuWang的博客](http:&#x2F;&#x2F;reimuwang.org)</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<p><a href="http://reimuwang.org">ReimuWang的博客</a></p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![2.jpg](&#x2F;images&#x2F;blog_pic&#x2F;Github&#x2F;Markdown语法&#x2F;2.jpg)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">![网络图片](http:&#x2F;&#x2F;5b0988e595225.cdn.sohucs.com&#x2F;images&#x2F;20170815&#x2F;2b2b96ea6139429a9c2fcae53af5b8d3.jpeg)</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<p><img src="/images/blog_pic/Github/Markdown%E8%AF%AD%E6%B3%95/2.jpg" alt="2.jpg"></p>
<p><img src="http://5b0988e595225.cdn.sohucs.com/images/20170815/2b2b96ea6139429a9c2fcae53af5b8d3.jpeg" alt="网络图片"></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><strong>代码</strong></p>
<p><img src="/images/blog_pic/Github/Markdown%E8%AF%AD%E6%B3%95/3.png" alt="3.png"></p>
<p><strong>效果</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print &quot;Hello, Reimu&quot;</span></pre></td></tr></table></figure>

<h1 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h1><p><strong>代码</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure>

<p><strong>效果</strong></p>
<hr>
<h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><strong>代码</strong></p>
<p><img src="/images/blog_pic/Github/Markdown%E8%AF%AD%E6%B3%95/4.png" alt="4.png"></p>
<p><strong>效果</strong></p>
<table>
<thead>
<tr>
<th align="left">标题行1</th>
<th align="right">标题行2</th>
<th align="center">标题行3</th>
</tr>
</thead>
<tbody><tr>
<td align="left">左对齐</td>
<td align="right">右对齐<br>换行</td>
<td align="center">居中</td>
</tr>
<tr>
<td align="left">左对齐</td>
<td align="right">右对齐</td>
<td align="center">居中</td>
</tr>
</tbody></table>
<h1 id="缩略显示"><a href="#缩略显示" class="headerlink" title="缩略显示"></a>缩略显示</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
</search>
